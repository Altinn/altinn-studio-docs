# Navigasjon i Studio
Når vi snakker om navigasjon, kan det være flere ting: Det å gi brukerne mulighet til å flytte seg fra side til side, det å få oversikt med et navigasjonfelt, og det å se alle oppgaver som er inkludert i en app. Denne artikkelen beskriver alle tre mulighetene.

## Navigere mellom sider med knapper

Brukerne navigerer mellom sider ved hjelp av navigasjonsknapper. Knappene legges til automatisk når du bruker Altinn Studio, men du kan også legge dem til manuelt i koden.

### Legge til navigasjonsknapper manuelt i layoutfilen

Du legger inn navigasjonsknappene i alle layout-filer der det er behov. Ønsker du at de skal vises nederst på siden, må du plassere dem nederst i layout-filen.

#### Eksempel på konfigurasjon:

```json
{
  "id": "nav-page2",
  "type": "NavigationButtons",
  "textResourceBindings": {
    "next": "next",
    "back": "back"
  },
  "showBackButton": true
}
```

### Parametere for NavigationButtons

| Parameter | Beskrivelse |
|-----------|-------------|
| id | Unik ID, som for alle andre komponenter |
| type | Må være "NavigationButtons" |
| textResourceBindings | Lar deg overstyre standardtekstene på knappene med egne tekster |
| showBackButton | Valgfri. Viser både tilbake- og neste-knapp i stedet for bare neste-knapp |

# Vise en sidemeny med rekkefølgen på sider/oppgaver

I koden definerer du rekkefølgen på sidene i `Settings.json` for layout-settet:

**Filplassering:** `App/ui/*/Settings.json`

```json
{
  "pages": {
    "order": ["side1", "side2"]
  }
}
```

**Skjule sider dynamisk:** Du kan skjule enkelte sider med [dynamiske uttrykk](/nb/altinn-studio/reference/logic/expressions/#viseskjule-hele-sider).

## Gruppere sider

Du kan gruppere sider og vise dem i en sidemeny som alternativ til tradisjonell rekkefølge. Da erstatter du `pages.order` med `pages.groups`:

**Filplassering:** `App/ui/*/Settings.json`

```json
{
  "pages": {
    "groups": [
      {
        "name": "group.info",
        "type": "info",
        "order": ["info1", "info2"]
      },
      {
        "name": "group.form",
        "markWhenCompleted": true,
        "order": ["side1", "side2", "side3"]
      },
      {
        "order": ["oppsummering"]
      }
    ]
  }
}
```

### Parametere for sidegrupper

| Parameter | Beskrivelse |
|-----------|-------------|
| name | Tekstressurs som angir navnet på sidegruppen. Påkrevd hvis gruppen inneholder mer enn én side |
| type | Valgfri. "info" eller "default" |
| markWhenCompleted | Valgfri. Markerer sider som ferdig utfylt når alle valideringsfeil er rettet og brukeren har sett siden |
| order | Hvilke sider som inngår i gruppen |

# Vise arbeidsflyt og oppgaver i navigasjonsmenyen

## Vise arbeidsflyten ved å definere det i koden
Du kan vise hele arbeidsflyten i navigasjonsmenyen på to måter. I koden gjør du det slik:

- **For hele appen:** i `layout-sets.json` med `uiSettings.taskNavigation`
- **Per layout-sett:** i `Settings.json` med `pages.taskNavigation`

### Eksempel for hele appen:

**Filplassering:** `App/ui/layout-sets.json`

```json
{
  "uiSettings": {
    "taskNavigation": [
      {
        "name": "task.form",
        "taskId": "Task_1"
      },
      {
        "taskId": "Task_2"
      },
      {
        "type": "receipt"
      }
    ]
  }
}
```

### Parametere for prosess-steg

| Parameter | Beskrivelse |
|-----------|-------------|
| name | Valgfri. Tekstressurs som angir navnet på prosess-steget |
| taskId | Hvilket prosess-steg det gjelder. Obligatorisk hvis ikke type er satt |
| type | "receipt". Obligatorisk hvis ikke taskId er satt |


## Vise navigasjon fra Studio

# Fremdriftsindikator

Fremdriftsindikatoren vises øverst i høyre hjørne og viser brukeren hvor langt de har kommet i utfyllingen.

### Viktig å vite

[Prosess-steg](../../../configuration/process) teller mot det totale antall sider i fremdriftsindikatoren. Hvis du har satt opp [sporvalg](../tracks) eller [dynamisk skjulte sider](../../../logic/expressions#viseskjule-hele-sider), kan antallet sider variere mye og virke forvirrende for brukeren.

**Sjekk at fremdriftsindikatoren gir mening og verdi for brukeren før du aktiverer den.**

### Aktivere fremdriftsindikator

**Filplassering:** `App/ui/*/Settings.json`

```json
{
  "$schema": "https://altinncdn.no/toolkits/altinn-app-frontend/4/schemas/json/layout/layoutSettings.schema.v1.json",
  "pages": {
    "order": ["student-info", "school-work", "well-being"],
    "showProgress": true
  }
}
```

## Navigasjonsbar

Navigasjonsbar gir enkel tilgang til alle sider i appen.

### Hvordan fungerer den?

- **Store skjermer:** Alle sider listes opp. Hvis det ikke er plass på én linje, fortsetter listen på neste linje
- **Små skjermer:** Alle sider er skjult i en meny. Den aktive siden vises i menyen, og når du klikker får du opp alle sidene

### Legge til navigasjonsbar

Navigasjonsbar legges inn i alle layout-filer der den skal brukes:

```json
{
  "id": "navbar-page1",
  "type": "NavigationBar"
}
```

### Kompakt meny på alle skjermer

Du kan konfigurere navigasjonsbaren til å vise alle sider i en meny også på større skjermer:

```json
{
  "id": "navbar-page1",
  "type": "NavigationBar",
  "compact": true
}
```

### Endre tekster på navigasjonsknapper

Som standard bruker navigasjonsknappene filnavnet på siden uten filendelsen. For eksempel blir `side1.json` og `side2.json` til knappene "side1" og "side2".

**Slik overstyrer du tekstene:**

Legg til tekster i `resources.XX.json`, hvor `id` er navnet på filen uten filendelse:

```json
{
  "id": "side1",
  "value": "Første side"
},
{
  "id": "side2",
  "value": "Siste side"
}
```

## Validering ved sidebytte

Du kan sjekke om det er valideringsfeil når brukeren prøver å gå til neste side. Hvis det er feil, stoppes navigeringen.

### App frontend versjon 4

NavigationButtons-komponenten har egenskapene `validateOnNext` og `validateOnPrevious`:

```json
{
  "id": "nav-buttons1",
  "type": "NavigationButtons",
  "textResourceBindings": {...},
  "validateOnNext": {
    "page": "current",
    "show": ["All"]
  }
}
```

**page kan være:**
- `current` - bare denne siden
- `all` - alle sider  
- `currentAndPrevious` - denne og tidligere sider

**show inneholder hvilke valideringstyper som sjekkes:**
- Schema
- Component  
- Expression
- CustomBackend
- Required
- AllExceptRequired
- All

### NavigationBar med validering

NavigationBar-komponenten har tilsvarende egenskaper `validateOnForward` og `validateOnBackward`:

```json
{
  "id": "nav1",
  "type": "NavigationBar",
  "validateOnForward": {
    "page": "current",
    "show": ["All"]
  }
}
```

### App frontend versjon 3

I versjon 3 legger du til en trigger på navigasjonsknappen:

```json
{
  "id": "nav-buttons1",
  "type": "NavigationButtons",
  "textResourceBindings": {
    "next": "Neste"
  },
  "triggers": ["validatePage"]
}
```

### Tilgjengelige triggere

| Trigger | Beskrivelse |
|---------|-------------|
| validatePage | Kjører validering på komponenter i den nåværende siden |
| validateAllPages | Kjører validering på alle komponenter i alle sider. Hindrer ikke navigering hvis det bare er feil på fremtidige sider |
| validateCurrentAndPreviousPages | Kjører validering på nåværende og tidligere sider |
