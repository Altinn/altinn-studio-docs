[
{
	"uri": "https://docs.altinn.studio/community/about/",
	"title": "About Altinn 3",
	"tags": [],
	"description": "Altinn 3 is the third generation platform for developing and hosting digital services.",
	"content": "The platform is owned by the Norwegian Digitalization Agency and developed as an open source platform.\nThe current development solution and hosting platform (launched 2010) is considered by Gartner as one of the five leading digital government technology platforms in the world.\nThe current platform is used by over 90% of the Norwegian population and almost 100% of the businesses. Over 62 agencies and municipalities host their solutions in the Altinn platform.\nThe current platform has almost 1000 active solutions supporting different user scenarios.\nExamples of solutions in the current platform is: Tax reporting, aircraft incident reporting, correspondence services from health department, lookup service in to the business register and many many more.\nConcept Using Altinn 3, agencies and other public entities can develop digital services as applications in Altinn Studio, they can deploy them to their isolated cloud infrastructure as containers. Altinn Platform supports the apps with core functionality like storage, authorization, authentication, register data, and more.\nThe infrastructure is highly scalable to support the different needs and all infrastructure is managed by the Altinn DevOps team.\nThe application template provided by Altinn Studio is prepared for the most common digital services scenarios making it possible to create and deploy the most simple public digital services in only hours.\nWhen an application is deployed to Altinn Apps it is available to all citizens and businesses of Norway.\nWhy Altinn 3? There are many reasons to use Altinn 3 to build and host your digital services.\n Application template are have built in functionality for the most common scenarios Easy to develop and deploy apps Reuse of data, UX, APIs and functionality A known platform for end users Highly scalable and secure infrastructure Open source Access to almost all citizens and business in Norway  When was Altinn 3 launched? The first version was launched in June 2020 and the first applications was deployed to production on june 19. 2020.\nHow to learn more about Altinn 3 Start with reading about the different solutions of Altinn 3.\n Altinn Studio let you build your digital services Altinn Apps let your host your digital services Altinn Platform will provide standard functionalit to your digital services  \rGoals\rThis summarizes the high level goals for Altinn 3.\n\rAltinn and open source\rAltinn 3 is open source with an open backlog, open documentation and open dialogue and discussions.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/getting-started/",
	"title": "Getting started",
	"tags": ["development", "front-end"],
	"description": "Get started working with the frontend",
	"content": "The frontend is made up of several React applications. Each application covers a functional area.\nStructure The applications are grouped by the 3 solutions:\n Altinn Studio (Designer) Altinn Apps Altinn Platform (Receipt)  Altinn Studio Designer \nAltinn Apps \u0026amp; Platform \nTechnologies and frameworks  https://reactjs.org/ https://redux.js.org/ https://redux-saga.js.org/ https://material-ui.com/  Architecture Each frontend runs within a .NET web application, where the transpiled javascript \u0026amp; CSS are referenced.\n For Altinn Studio Designer and Altinn.Platform.Receipt, these files are deployed as part of the application itself. For Altinn.Apps frontend, these files are hosted on a CDN, and loaded in at runtime.  All of the frontend apps are set up with the same overall React + Redux architecture:\n\n Component: The react component Props: Define how the component should render Store: Contains all global state data used by the components Action: Triggered when a component updates Reducer: Listens to actions and updates the store according to which action is triggered Redux-Saga: Middleware. Intercepts the action before it reaches the reducer, in order to process data before it goes to the store. Useful for handling async operations like calling APIs.  App frontend Details of the architecture for app frontend can be found here.\nAltinn Studio Designer frontend Details of the architecture for Altinn Studio Designer frontend can be found here\n"
},
{
	"uri": "https://docs.altinn.studio/app/design/insight/",
	"title": "Preliminary considerations",
	"tags": [],
	"description": "Before you do anything else you should gather the project group and start by defining your problem. What is it that you are trying to solve and for whom?",
	"content": "Consider What are the current challenges? Start by defining the problem. What are you going to solve? It is easier to create a solution with a clearly defined scope for your problem. It might be a good idea to gather your project group, and to look for a nice wall to put post-it notes on. Who are the users and what are their needs? We recommend starting by defining your target audience and their requirements as early as possible during the project. Create an overview of your users and who they are. In most cases your service should be usable by multiple user groups. Are they citizens or do they represent a company? What background do they have? Are they digitally inclined or not accustomed to digital services? This phase normally starts with interviews, observations or a focus group. Points of contact for the user Create an overview of the points of contact for the user. What does the customer see during their use of your service? One way to do this is pictured below: Should Altinn be hidden from the end user or will you be using Altinns internal UI? Does this match how the user expects to complete their task? Is it possible to offer the customer the relevant part of Altinn in the context they are in, instead of sending them back and forth? What data do you need? The need for a digital solution usually starts with a need to gather data. Start by checking if someone else has the data you need, and if it is available for reuse. You can check for data in our common datacatalog. If not - how can you request it in a way that requires the least effort by your users? Sometimes it could be an idea to try something different than than obvious solutions where you ask through a form.  After working through the initial phase and defining the user requirements, we recommend that you set up a prototype that can be tested by relevant users. If you are creating a form, you can use our prototype-Kit for Figma.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/react/",
	"title": "React + Redux architecture",
	"tags": ["architecture"],
	"description": "High-level description of React + Redux architecture used in app frontend",
	"content": "The app frontend uses the React and Redux frameworks for presenting a UI to the end user, together with redux-saga to handle side effects. Components are based on Material UI components.\nThe diagram below show the architecture:\nStore A store holds the whole state tree of your application. The only way to change the state inside it is to dispatch an action on it.\nRead more.\nReducers Reducers specify how the application\u0026rsquo;s state changes in response to actions sent to the store. Remember that actions only describe what happened, but don\u0026rsquo;t describe how the application\u0026rsquo;s state changes.\nRead more.\nMiddleware redux-saga is a library that aims to make application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, easy to test, and better at handling failures.\nRead more.\nBest practices We try to follow some best-practices for React architecture:\n  Small, function-specific components\n UI components are \u0026ldquo;dumb\u0026rdquo;, this keeps the amount of logic to a minimum within the components.    Reusability\n UI components are shared across apps. Shared components between app frontend and receipt frontend . Use Material UI components as much as possible instead of building our own components from scratch.    DRY code\n Use shared resources across features to avoid duplication of code. Share resources/utils between app frontend and receipt frontend.    Comments only where necessary\n Function and component names should be self-explanatory. Avoid clutter and having to update comments when things change.    Component names in capital\n  Keep complex data-loading logic separate from rendering of components\n State is handled by redux as much as possible Data should be passed as props to UI components where possible    Use a feature-based code structure\n Code related to a feature should be grouped together, rather than grouping code by function (actions/reducers etc).    Follow linting rules\n Use a code analyzer to make sure linting rules are followed, for clean readable code    "
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/fields/grouping/setup/",
	"title": "Setup of field grouping",
	"tags": [],
	"description": "General Setup for grouping fields in form.",
	"content": "Fields in a form can be set up to be part of a group. This can be used to e.g. set up dynamic on a single group of fields, instead of on each single field. In addition, fields must be able to be grouped to support repeating groups in a form.\nA group is set up in FormLayout.json, together with the other components in the form. This can be done manually directly in the file, or through form editor in Altinn Studio by using the group component.\nSome things to note when manually setting up:\n The group must be placed before any components that are to be included in the group in FormLayout.json A group MUST have type: \u0026quot;group\u0026quot; set if it is to be recognized as a group  An example of a (repeating) group defined in FormLayout.json that contains four fields that can be repeated three times: A group is defined as follows in FormLayout.json:\n{ \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;unik-id\u0026gt;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;group\u0026#34;,  \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;group\u0026#34;: \u0026#34;\u0026lt;gruppen i datamodellen (kun repeterende grupper)\u0026gt;\u0026#34; }, \u0026#34;maxCount\u0026#34;: \u0026#34;\u0026lt;Antall ganger gruppen kan repetere\u0026gt;\u0026#34;, \u0026#34;children\u0026#34;: [ \u0026#34;\u0026lt;felt-id\u0026gt;\u0026#34;, \u0026#34;\u0026lt;felt-id\u0026gt;\u0026#34;, \u0026#34;osv...\u0026#34; ],  \u0026#34;tableHeaders\u0026#34;: [ \u0026#34;\u0026lt;felt-id\u0026gt;\u0026#34; ], \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;add_button\u0026#34;: \u0026#34;tekstressurs.felt\u0026#34; } }    Parameter Required Description     id Yes Unique ID, same as ID on other components. Must be unique in the FormLayout.json file.   type Yes MUST be \u0026lsquo;group\u0026rsquo;. Says that this is a group.   dataModelBindings No MUST be set for repeating groups, with the group-parameter like in the example above. Should point to the repeating group in the data model.   textResourceBindings No Can be set for repeating groups, see description.   maxCount Yes The number of times a group can repeat. Set to 1 if the group is not repeating.   children Yes List of the fields that are to be included in the group. Field-id from FormLayout.json is used here.   tableHeaders No List of components that are to be included as part of the table header fields. If not specified, all components are displayed.    textResourceBindings It is possible to add different keys in textResourceBindings to overrule default texts.\n add_button - is added at the end of the \u0026ldquo;Add new\u0026rdquo; text on the button, and can be used to e.g. get text that says \u0026ldquo;Add new person\u0026rdquo;. save_button - is used as text on the \u0026ldquo;Save\u0026rdquo;-button when the user is filling out data. edit_button_open - is used as text on the \u0026ldquo;Edit\u0026rdquo;-button on the table when the user is opening an element. edit_button_close - is used as text on the \u0026ldquo;Edit\u0026rdquo;-button on the table when the user is closing an element.  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/configuration/",
	"title": "App Frontend configuration files",
	"tags": ["architecture"],
	"description": "Description of the different configuration files used by app frontend",
	"content": "The App Frontend requires some configuration files to work correctly. These files are loaded through APIs.\nLayout files The form layout files are used to render the UI for the form feature. They defines which layout elements should be rendered, in what order, and contains details about how they should be rendered (ex. text keys, data model, etc.)\nFormLayout.json The default layout file, at the root of the ui config folder. This is only used if the app only has a single layout to use.\nSettings.json A configuration file used when an app has multiple layouts within a given process task. This defines f.ex. the order the layouts should be rendered in.\nlayout-sets.json When an app has multiple sets of layout files (f.ex. multiple data tasks), this configuration file defines which layout files belong to which task.\nLanguage All (non app-specific) text resources that are used in the app frontend.\nJSON schema data model Contains information about the data model and is used for client-side validation.\nText resources App specific texts.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/fields/grouping/repeating/",
	"title": "Repeating groups",
	"tags": [],
	"description": "Setup for repeating groups.",
	"content": "Groups in the data model contain one or more fields. Groups are defined as repeating if they have maxOccurs \u0026gt; 1 in the xsd. A group that is repeating in the data model must also be set up as repeating in the form, if not, data saving will fail.\nExample Form with some single-fields and a repeating group that:\n contains three fields can be repeated up to three times  Setup in FormLayout.json from the example above:\n1{ 2 \u0026#34;data\u0026#34;: { 3 \u0026#34;layout\u0026#34;: [ 4 { 5 \u0026#34;id\u0026#34;: \u0026#34;gruppe-1\u0026#34;, 6 \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, 7 \u0026#34;children\u0026#34;: [ 8 \u0026#34;ac555386-ac2b-47a0-bb1b-842f8612eddb\u0026#34;, 9 \u0026#34;5c079cd4-c80c-44ea-b8b8-18e323267a37\u0026#34; 10 ], 11 \u0026#34;maxCount\u0026#34;: 3, 12 \u0026#34;dataModelBindings\u0026#34;: { 13 \u0026#34;group\u0026#34;: \u0026#34;spesifisering-grp-5836\u0026#34; 14 }, 15 \u0026#34;textResourceBindings\u0026#34;: { 16 \u0026#34;header\u0026#34;: \u0026#34;person\u0026#34; 17 } 18 }, 19 { 20 \u0026#34;id\u0026#34;: \u0026#34;ac555386-ac2b-47a0-bb1b-842f8612eddb\u0026#34;, 21 \u0026#34;type\u0026#34;: \u0026#34;Checkboxes\u0026#34;, 22 \u0026#34;componentType\u0026#34;: 5, 23 \u0026#34;textResourceBindings\u0026#34;: { 24 \u0026#34;title\u0026#34;: \u0026#34;Avkrysningsboks\u0026#34; 25 }, 26 \u0026#34;dataModelBindings\u0026#34;: { 27 \u0026#34;simpleBinding\u0026#34;: \u0026#34;klage-grp-5805.spesifisering-grp-5836.KlageSpesifisering-datadef-25457.value\u0026#34; 28 }, 29 \u0026#34;options\u0026#34;: [ 30 { 31 \u0026#34;label\u0026#34;: \u0026#34;25795.OppgavegiverNavnPreutfyltdatadef25795.Label\u0026#34;, 32 \u0026#34;value\u0026#34;: \u0026#34;Verdi1\u0026#34; 33 }, 34 { 35 \u0026#34;label\u0026#34;: \u0026#34;25796.OppgavegiverAdressePreutfyltdatadef25796.Label\u0026#34;, 36 \u0026#34;value\u0026#34;: \u0026#34;Verdi2\u0026#34; 37 } 38 ], 39 \u0026#34;required\u0026#34;: true 40 }, 41 { 42 \u0026#34;id\u0026#34;: \u0026#34;5c079cd4-c80c-44ea-b8b8-18e323267a37\u0026#34;, 43 \u0026#34;type\u0026#34;: \u0026#34;AddressComponent\u0026#34;, 44 \u0026#34;componentType\u0026#34;: 11, 45 \u0026#34;textResourceBindings\u0026#34;: { 46 \u0026#34;title\u0026#34;: \u0026#34;Adresse\u0026#34; 47 }, 48 \u0026#34;dataModelBindings\u0026#34;: { 49 \u0026#34;address\u0026#34;: \u0026#34;klage-grp-5805.spesifisering-grp-5836.KlageSpesifiseringg-datadef-12345.value\u0026#34; 50 }, 51 \u0026#34;simplified\u0026#34;: true, 52 \u0026#34;readOnly\u0026#34;: false, 53 \u0026#34;required\u0026#34;: true 54 } 55 ] 56 } 57} File attachment in repeating groups This is new functionality. Setup must be done manually for now.\r\rTo set up file uploading components in repeating groups, some additional setup is required.\nWhen uploading file attachments it may be difficult to distinguish which file attachments belongs to which rows in the repeating group, and thus which submitted information belongs to each attachment. Therefore, you must set up connections to the data model when file uploading are used in repeating groups, so that Altinn can fill out the unique identificator that belongs to each file attachment and send this together with the rest of the data in the instance.\nThe ability to place a reference to the file attachment in the data model can also be used outside of repeating groups if you want a reference to a file attachment together with the form data on the receivers end.\nThe following is an example of a data model expecting a reference to an uploaded file attachment.\n\u0026lt;xsd:schema xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; elementFormDefault=\u0026#34;qualified\u0026#34; attributeFormDefault=\u0026#34;unqualified\u0026#34;\u0026gt; \u0026lt;xsd:element name=\u0026#34;FamilieMedlemmer\u0026#34; type=\u0026#34;Skjema\u0026#34; /\u0026gt; \u0026lt;xsd:complexType name=\u0026#34;Skjema\u0026#34;\u0026gt; \u0026lt;xsd:sequence\u0026gt; \u0026lt;xsd:element name=\u0026#34;FamilyMember\u0026#34; type=\u0026#34;FamilyMember\u0026#34; maxOccurs=\u0026#34;99\u0026#34; /\u0026gt; \u0026lt;/xsd:sequence\u0026gt; \u0026lt;xsd:anyAttribute /\u0026gt; \u0026lt;/xsd:complexType\u0026gt; \u0026lt;xsd:complexType name=\u0026#34;FamilyMember\u0026#34;\u0026gt; \u0026lt;xsd:sequence\u0026gt; \u0026lt;xsd:element name=\u0026#34;FirstName\u0026#34; type=\u0026#34;xsd:string\u0026#34; /\u0026gt; \u0026lt;xsd:element name=\u0026#34;Picture\u0026#34; type=\u0026#34;xsd:string\u0026#34; /\u0026gt;  \u0026lt;/xsd:sequence\u0026gt; \u0026lt;/xsd:complexType\u0026gt; \u0026lt;/xsd:schema\u0026gt; This is connected to the file upload component in the group:\n{ \u0026#34;id\u0026#34;: \u0026#34;picture\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;FileUpload\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Picture\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;FamilyMember.Picture\u0026#34;  }, \u0026#34;maxFileSizeInMB\u0026#34;: 25, \u0026#34;maxNumberOfAttachments\u0026#34;: 1, \u0026#34;minNumberOfAttachments\u0026#34;: 1, \u0026#34;displayMode\u0026#34;: \u0026#34;simple\u0026#34;, \u0026#34;required\u0026#34;: true } In cases where it is allowed to upload multiple files to the same file attachment component, use a data model attachment of the type list:\n\u0026lt;xsd:complexType name=\u0026#34;FamilyMember\u0026#34;\u0026gt; \u0026lt;xsd:sequence\u0026gt; \u0026lt;xsd:element name=\u0026#34;FirstName\u0026#34; type=\u0026#34;xsd:string\u0026#34; /\u0026gt; \u0026lt;xsd:element name=\u0026#34;Pictures\u0026#34; type=\u0026#34;xsd:string\u0026#34; maxOccurs=\u0026#34;5\u0026#34; /\u0026gt;  \u0026lt;/xsd:sequence\u0026gt; \u0026lt;/xsd:complexType\u0026gt; { [...] \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;list\u0026#34;: \u0026#34;FamilyMember.Pictures\u0026#34;  } } The receiving end will then receive a list of multiple unique ID\u0026rsquo;s, one for each attachment. The same unique ID will also be displayed in the PDF receipt - but it is recommended to hide this, as attachments are shown seperately on the receipt page and the unique ID can become confusing to the users.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/features/",
	"title": "App frontend features",
	"tags": ["architecture"],
	"description": "High-level description of app frontend features",
	"content": "The App Frontend SPA is separated in several features that is a collection of components and containers that support a given functional area for a App. Typical a feature is connected to a type of workflow step. Like form filling, signing, ++.\nSupport for new types of workflow steps will be added as they become available in the backend.\nInstantiate This feature is responsible for creating a specific instance of the app for the end user. This feature validates the selected party by checking authorization, and gives the user the option to select a new party (if available) if the current party is invalid. Once a user/party is validated, the backend API to create an instance is called, and the user is sent to the first process step defined for the app.\nForm This feature is responsible for the data process task type, which is typically used for form filling. This includes rendering the form UI designed in Altinn Studio, running any rules/dynamics, calling APIs to perform calculations, validations, save form data, submit/move process to next step.\nTo render the form UI, the form layout defined in Altinn Studio is used together with metadata about the data model. The form components are rendered based on the contents of the form layout.\nConfirm This feature is responsible for the confirmation process task type. This includes rendering a configurable confirmation view.\nFeedback This feature is responsible for the feedback process task type. This includes rendering a configurable feedback view.\nReceipt This feature is responsible to show the summary of the instance when an app is sent to end state of the process flow.\n"
},
{
	"uri": "https://docs.altinn.studio/app/design/prototype/",
	"title": "Prototype",
	"tags": [],
	"description": "By using Altinn&#39;s Prototype-kit you can create a clickable prototype where you can design the flow and content for your service.",
	"content": "The Altinn prototype-kit is a collection of presets and components that you can use to create a prototype of your app within Figma.\nWith Altinn\u0026rsquo;s Prototype-Kit for Figma you can:\n See what Altinn-forms look like and how they are experienced by the user Familiarize yourself with design elements in Altinn 3 Define flow and content within your form Create clickable sketch that can be user tested Use the prototype as a guide/reference while the app is in development  Get started with Figma Having a designer that already has experience in Figma or a similar tool would be an advantage. If you don\u0026rsquo;t have access to such a resource, we recommend going through an introductory course before you start.\n Create a user on https://www.figma.com/. Figma can be installed locally or be used from your browser. Open the Altinn prototype-kit and follow the steps as described in the introduction on the first page if the file:  \r\rAltinn Prototype-kit\r\r\r\rWhen the designer/professional has designed and user tested the form, it can be used as a specification for what the developers should create in Altinn Studio.\nNOTE: If you are creating services for your own solution, where Altinn is invisible for the user, you should rather use your agency\u0026rsquo;s own design system to prototype your service.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/fields/grouping/alternatives/",
	"title": "Settings for views",
	"tags": [],
	"description": "Settings for views.",
	"content": "A new (optional) parameter has been implemented, that can be added to the definition of a repeating group in the layout-file, which allows you to control some of the display and behaviour of the group on the page. In addition, support for multiple \u0026ldquo;pages\u0026rdquo; has been added within the editing area of the group.\nControl display A new parameter, edit, has been added, which can be set up on a group component (repeating group). This allows us to define various settings in regards to displaying a group element when editing/filling out. The following settings can be set:\nmode Defines whether the table (that displays all elements in the group) should be displayed when an element is open in editing-mode. The following values are allowed:\n   Value Description     \u0026ldquo;showTable\u0026rdquo; Default behaviour if nothing else has been specified. Displays the table for editing of group-element.   \u0026ldquo;hideTable\u0026rdquo; Hides the table when a group-element is open for editing.   \u0026ldquo;showAll\u0026rdquo; Hides the table. Shows all elements in the group in editing mode below each other. The save button is hidden.   \u0026ldquo;likert\u0026rdquo; Likert display.    filter Support to filter elements in group, so that only the elements matching the defined criteria are displayed. E.g. in a group displaying work experience, only display the elements where the workplace was Oslo. List of criteria is based on values of one or more fields in the group, on the format:\n\u0026#34;edit\u0026#34;: { \u0026#34;filter\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;\u0026lt;felt i datamodell\u0026gt;\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;\u0026lt;ønsket verdi\u0026gt;\u0026#34; } ] } If there are multiple criteria, all must match for the element to be displayed.\nIf there is only one result, this is displayed automatically in editing-mode. If there are multiple elements in the group that match the filter, these will be displayed. Other elements in the group will be hidden. filter can be combined with the mode-parameter.\nIf you combine `\"mode\": \"showAll\"` with `\"filter\"`, it will not be possible to add more elements to the group. This is because with \"showAll\" only the editing area is displayed, and as long as the filter does not match, the element will not be displayed.\r\raddButton Determines whether the \u0026ldquo;Add new\u0026rdquo; button is displayed below the table. It is useful to hide this if you only wish to display data.\nsaveButton Determines whether the \u0026ldquo;Save\u0026rdquo; button is displayed when a group element is in editing mode. The default behaviour if the parameter is not set is for the \u0026ldquo;Save\u0026rdquo; button to be displayed. If you have set \u0026quot;mode\u0026quot;: \u0026quot;showAll\u0026quot;, the \u0026ldquo;Save\u0026rdquo; button is always hidden, since in this mode you do not have the opportunity to close the editing area for the group-element. The data is still saved.\ndeleteButton Determines whether the \u0026ldquo;Delete\u0026rdquo; button is displayed when a group element is in editing mode. The default behaviour if the parameter is not set is for the \u0026ldquo;Delete\u0026rdquo; button to be displayed.\nmultiPage Editing/filling out pages can be performed over multiple \u0026ldquo;pages\u0026rdquo;/displays. Requires more setup to work, see below for more information.\nopenByDefault If there are no elements in the group already, the group should be opened in editing mode. Note that this cannot be used with \u0026quot;mode\u0026quot;: \u0026quot;showAll\u0026quot;.\nExample:\n{ ... \u0026#34;edit\u0026#34;: { \u0026#34;openByDefault\u0026#34;: true } } Display group as part of Panel A new parameter, panel, has been added which can be set up on a group component. This says that the group should be displayed as part of the Panel component.\nHere, you will recognize the appearance and settings that can be set on the panel component. Example configuration:\n{ \u0026#34;id\u0026#34;: \u0026#34;input-panel-group\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, \u0026#34;children\u0026#34;: [ \u0026#34;panel-1\u0026#34;, \u0026#34;panel-2\u0026#34; ], \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Dette er bare en demo av input panel utenfor repeterende gruppe.\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Her ser jeg bare at ting fungerer som forventet.\u0026#34; }, \u0026#34;panel\u0026#34;: { \u0026#34;variant\u0026#34;: \u0026#34;info\u0026#34; } }, Here the group has been set up to be displayed as a panel with the variant \u0026ldquo;info\u0026rdquo;. The setup is otherwise exactely the same as a regular group.\nThis will give the following output:\nIt is possible to configure the following settings in the panel field of a group:\n   Parameter Required Description     variant Yes Which variant of panel the group should be placed in. Available values are \u0026ldquo;info\u0026rdquo;, \u0026ldquo;success\u0026rdquo; and \u0026ldquo;warning\u0026rdquo;   iconUrl No If you want your own icon as part of a panel, this can be set. Relative or full path, e.g. \u0026ldquo;awesomeIcon.png\u0026rdquo; or \u0026ldquo;http://cdn.example.com/awesomeIcon.png\u0026quot;   iconAlt No Alternate text for the custom icon. Can only be set if iconUrl has been set. Can be plain text or a reference to a text resource.   groupReference No Reference to a different group. Can be used if you wish to add elements to a repeating group from some other context. Read more.    Example:\n\u0026#34;panel\u0026#34;: { \u0026#34;variant\u0026#34;: \u0026#34;info\u0026#34;, \u0026#34;iconUrl\u0026#34;: \u0026#34;kort.svg\u0026#34;, \u0026#34;iconAlt\u0026#34;: \u0026#34;Betalingskort ikon\u0026#34; } Add element from separate repeating group A use case one can imagine is that the user is asked to choose from an already filled out repeating group. One possible case is that the user is registering a set of suspicious transactions. Here, the user first enters a set of separate payment cards as a repeating group. Later on in the form, the user will choose elements from this group when adding a suspicious transaction. While filling out the suspicious transaction, the user remembers that they forgot to add a payment card, but do not wish to navigate all the way back to the original payment card group.\nThis is where the groupReference parameter comes in handy. This will open up for the possibility to add an element to a repeating group from the context from which you are using this list.\nA picture to illustrate the usecase:\nIn this fictitious case the groups are placed directly above each other, but imagine that these are filled out on different pages in the form. To achieve this setup, a group of elements are added to the repeating group that is set up with transactions (group-2) with a reference to the first group with payment cards (group-1). The following group component is one of the children of group-2:\n{ \u0026#34;id\u0026#34;: \u0026#34;input-panel-group\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Legg til nytt betalingskort\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Kortet du registrer vil bli lagret og tilgjengelig i resten av tjenesten.\u0026#34;, \u0026#34;add_label\u0026#34;: \u0026#34;Legg til nytt betalingskort\u0026#34; }, \u0026#34;panel\u0026#34;: { \u0026#34;showIcon\u0026#34;: true, \u0026#34;iconUrl\u0026#34;: \u0026#34;kort.svg\u0026#34;, \u0026#34;variant\u0026#34;: \u0026#34;success\u0026#34;, \u0026#34;groupReference\u0026#34;: { \u0026#34;group\u0026#34;: \u0026#34;first-group\u0026#34; } } }, The text resources that can be set are:\n title - panel title body - panel body. Placed above the group elements. add_label - text for the \u0026ldquo;add new\u0026rdquo;-button.  If children is not set on the group, the children of the referenced group will be rendered. By adding to children you can freely define that only a subset of all children of the referenced group should be displayed.\nDemonstration:\nSee example app for complete setup in form layout.\nMultiple pages within group-display This functionality is as of today only available for repeating groups. Displayment of groups over multiple pages inside the editing area of the group is only supported for groups at the top level, and is not supported\rfor nested groups. \rWhen entering data in a group, there may be incidents where each element in the group contains multiple fields, which may result in a lot of scrolling and confusion for the user. To solve this, there has been implemented a possibility to split the fillout over multiple pages, which the user can navigate through while filling out the group element. The navigation takes place within a layout, and updates only the display within the editing area of the group.\nTo make use of this functionality, you will have to prefix the components in the children list with a number indicating which \u0026ldquo;page\u0026rdquo; of the fillout the component should be displayed on, followed by :. We start the count on 0, that is to say components to be displayed on the first \u0026ldquo;page\u0026rdquo; must be prefixed with 0:. Components to be displayed on the second page must be prefixed with 1:, and so on. In addition, you must set \u0026quot;multiPage\u0026quot;: true on the new edit-parameter (see above). See example below:\n{ \u0026#34;id\u0026#34;: \u0026#34;Some-group-id\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, \u0026#34;children\u0026#34;: [ \u0026#34;0:fnr\u0026#34;, \u0026#34;1:fornavn\u0026#34;, \u0026#34;1:mellomnavn\u0026#34;, \u0026#34;1:etternavn\u0026#34;  ], \u0026#34;maxCount\u0026#34;: 10, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;group\u0026#34;: \u0026#34;familie.barn\u0026#34; }, \u0026#34;edit\u0026#34;: { \u0026#34;multiPage\u0026#34;: true, \u0026#34;mode\u0026#34;: \u0026#34;hideTable\u0026#34;,  } } Here a mode that hides the table when editing has also been added. The result will be as displayed below.\n![Fill-out of group over multiple \u0026ldquo;pages\u0026rdquo;](group-multipage.gif \u0026ldquo;Fill-out of group over multiple \u0026ldquo;pages\u0026rdquo;)\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/structure/",
	"title": "App frontend code structure",
	"tags": ["architecture"],
	"description": "High-level overview of how the app frontend is structured",
	"content": "The code mainly uses a feature-based structure.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/rendering/",
	"title": "App frontend rendering and flow",
	"tags": ["architecture"],
	"description": "High-level overview of what happens when the app frontend is rendered",
	"content": "The sections below give a high-level overview of what happens when the app frontend is rendered. Data that is loaded into the app frontend is placed in the Redux store, where it can be accessed by the React components during rendering.\nLoading general App resources - common for all apps and process task types When an app is loaded initially, there is some data that is always loaded for the App, regardless of state or which process task the app is currently in. This includes the following data:\n application metadata - general metadata about the application text resources - json file containing all app-specific texts in a given language user profile - loaded from Altinn II current party - who the user is currently representing language - standard language text resources for the app. These are not app specific, but are included in all apps.  See the diagram below for an overview of what happens when the user loads the app for the first time, the flow goes up to the process specific part, which is detailed in the other sections.\nLoading App resources for a data type process task A data type process task has a data model that can be populated, f.ex. through the use of forms. All the resources that are needed to support displaying and/or updating data in the data model are loaded when an app is in a data type process task. This includes the following resources:\n formData - any data on the data model that has been previously saved. layout sets - an overview of the different layout sets available in the app. jsonSchema - a JSON schema representation of the data model for validation layouts - the actual layouts (within a given layout set) defining the form components to be rendered ruleHandler - a collection of rules that can be run client-side ruleConfiguration - the definitions of when any client-side rules should be triggered  See the diagram below for an overview of what happens when the user loads an app in a data process task, after the initial loading of general resources (and instantiation if needed) has completed.\nRendering a form in data process task "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/requirements/",
	"title": "Architecture Requirements",
	"tags": ["architecture"],
	"description": "Functional and non-functional requirements for the different solutions has been important to shape the architecture.",
	"content": "They are important input to deciding which cababilities required and they also is important input to the Architecture Principles and Architecture Patterns.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/requirements/functional/\u0026quot;\u0026gt;Functional Requirements\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Functional requirements can be important to the architecture decisions.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/requirements/non_functional/\u0026quot;\u0026gt;Non-Functional Requirements\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Non functional requirements contains requirements that typically is important for deciding the architecture.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/principles/",
	"title": "Architecture Principles",
	"tags": ["architecture"],
	"description": "The Architecture Principles are guidelines for the construction of the architecture in Altinn 3.",
	"content": "The following architecture principles has been defined for the solutions. The principles are document as suggested by TOGAF.\nThe architecture principles below is described like TOGAF recommends.\nFree and open-source software Principle\nThe components and solutions in Altinn 3 are Free and Open Source.\nRationale\nPossibility to share the platform as Open Source. The possibility to create an Open Source community around the platform.\nImplications\n Code developed is shared on GitHub. See License. We also have our backlog on GitHub. Can\u0026rsquo;t use closed source products in the platform Can\u0026rsquo;t use products with licensing limiting use and modifications Others can easily reuse, modify and improve our components and solutions  Web Standards Principle\nUse Web Standards.\nRationale\nCan use standard tools and developers does not need to have special skills to develop components in the platform or applications to run on the platform.\nImplications\n Formats and frameworks used need to follow standards We use JWT in authentication cookies  Build with modern and popular frameworks Principle\nWhen choosing between different technology with similar capabilites, select the most modern and popular framework.\nRationale\nThe project is open source and it is a big advantage to build the solution on open source technology that developers love to use. This gives better access to resources with the needed competency.\nImplications\n We build the frontend using React and ASP.NET Core, the 2 most loved web frameworks. We use .NET Core, the framework that developers love the most We use Linux and Docker containers in Kubernetes, the 3 most loved platforms. We use Visual Studio Code, the most loved development environment.  Favor standards over custom Principle\nWhenever we need to store information we favor standard formats for that information over creating a custom format.\nRationale\nStandard formats are documented and is some cases it exists 3. party tools to edit information.\nImplications\n We use BPMN 2.0 to define the process for applications We use XACML 3.0 to define authorization policies for applications We use JSON as general format.  Isolation Principle We should try isolate application and data own by one organization from others.\nRationale\nReduce risk for one organization affecting service for another organization.\nImplications\n Seperate Kubernetes Clusters for each organization Seperate data store for each organization  Design and build for Public Cloud Principle\nThe solutions should be deployed to a public cloud solution. The architecture need to support that.\nRationale\nUsing public cloud infrastructure from one of the big vendors gives cost savings, the team can be more agile and the solutions can take scale.\nImplications\n Additional security measures Need to build knowledge about cloud solutions  Limit cloud lock-in Principle\nThe architecture should try to avoid technology that locks the platform to a specific public cloud vendor. But not for all costs. In many cases it would still make sense to choose a managed service only available in a given public cloud.\nRationale\nThe goal with this principle is that it should be possible to move the solution to a different cloud provider without needing to build everything from scratch.\nImplications\n Docker and Kubernetes is used for containers and orhecstration of containers. We use document databases and BLOBS for storing data. Everything talks through APIs.  Build as microservices Principle\nThe platform is built as microservices. Related functionality is grouped in to seperate applications and deployed as containers. Apps created in Altinn Studio will be deployed as microservices/apps.\nRationale\nThe different components can be scaled differently, it can be deployed independently. Reduced deploy time. Different teams can be responsible for different microservices/apps.\nImplications\n Functionality in Altinn Platform is seperated in Authentication, Authorization, Profile, Storage, Pdf and Register components Applications created in Altinn Studio is deployed as microapps to Altinn Apps  Design for automation Principle\nThe component should be created in a way that they support automation in development, deployment and operations.\nRationale\nReduce the required effort to develop and operate the platform.\nImplications\n We use Continuous integration We use Continuous deployment We build Infrastructure as code We use Automatic scaling We monitor and do automatic recovery of components  Favor managed services Principle\nWe should use manages cloud services when possible.\nRationale\nReduce effort needed to host and scale the platform.\nImplications\n Use managed PostgreSQL in Azure for Gitea Use managed CosmosDB as document database Use Azure blob storage for storing data Use Azure Kubernets Services to manage the Kubernetes Clusters Use Azure Api Management as API-management platform  Security in depth Principle\nAll components should authenticate and authorize requests.\nRationale\nWe can\u0026rsquo;t trust other components.\nImplications\n Components in Altinn Platform authenticates and authorize end user even if the request comes throug a application that also require the same We use API management to control traffic between Altinn Apps and Altinn Platform.  Cross-platform Principle\nThe components in the platform should be cross platform and can run on Microsoft Windows, Linux and MacOs.\nRationale\nDevelopers should be able to create applications on any platform, and our platform should never be locked to a single operating system or processor-architecture.\nImplications\n We use .NET Core or Java to build components.  Container technology Principle\nApplications should be deployed as containers.\nRationale\nThe rationale to use containers is that we get a consistent runtime environment that can run anywhere. Isolate runtime environment. Consistency.\nImplications\n Deploy and run applications/components in docker containers.  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/patterns/",
	"title": "Architecture Patterns",
	"tags": ["architecture"],
	"description": "The architecture defines some patterns that is reused accross the different solutions.",
	"content": "Cloud Native The solutions are designed and built to be \u0026ldquo;Cloud Native\u0026rdquo;, meaning it is built be scalable applications hosted in public cloud.\nThere is serveral Architecture Patterns that Cloud Native applications are built on.\nContainers, microservices and declarative APIs exemplify this approach.\nThese techniques enable loosely coupled components that are resilient, manageable, and observable.\nCombined with robust automation, they allow the devops team to make changes frequently.\nThe Cloud Native blueprint below show the important aspect of a Cloud Native solution.\nThe following listing describes the different Architecture Patterns selected for Altinn.\nMicroservice Pattern Overview The Microservice Pattern is one of the more defining patterns in the platform.\nIn the new Altinn Solutions this mean that Altinn Platform will be grouped in functional related components, that will run as separate applications in docker containers.\nExample components are authorization and storage.\nEach application created in Altinn Studio will be a isolated microservice application with API\u0026rsquo;s and front-end.\nBenefits  Strong Module Boundaries: Microservices reinforce modular structure, which is particularly important for larger teams. Independent Deployment: Simple services are easier to deploy, and since they are autonomous, are less likely to cause system failures when they go wrong. Technology Diversity: With microservices you can mix multiple languages, development frameworks and data-storage technologies.  Risk \u0026amp; Issues  Distribution: Distributed systems are harder to program, since remote calls are slow and are always at risk of failure. Eventual Consistency: Maintaining strong consistency is extremely difficult for a distributed system, which means everyone has to manage eventual consistency. Operational Complexity: You need a mature operations team to manage lots of services, which are being redeployed regularly.  Layered Pattern Overview Applications/Components are organized into horizontal layers, each layer performing a specific role within the application. Typical the layers will typical be Presentation, API, Business and dataacess where dataccess could be access to database or API calls to other components.\nBenefits  Testability. Dependency injection. Possible to mock lower layers.  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/",
	"title": "Architecture Capabilities",
	"tags": ["architecture"],
	"description": "Architecture Capabilities are the logical building blocks of the solutions. They have been grouped into Development &amp; Operations (DevOps) Capabilities and Runtime (Execution) Capabilities.",
	"content": "Functional capabilities are described in the functional description of the solutions.\nRuntime capabilities The runtime capabilities describe the architecture capabilities the different solutions provide during runtime operations.\nAn example could be authorization. The architecture provides the capability to authorize access to resources.\nSince Altinn 3 is a platform letting its users develop applications and deploy them, you will see that many capabilities that typical is DevOps capabilities in other projects, is part of the runtime capabilities. An example of this is the capability to build and deploy applications\nLearn more about Altinn 3 runtime capabilities.\nDevOps capabilities To develop and operate a large platform like Altinn 3 requires many different capabilities.\nSome capabilities are provided by application and tools and other is provided by processes performed by the DevOps team.\nAn example capability is to be able to configure the infrastructure.\nLearn more about Altinn 3 DevOps capabilities.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/",
	"title": "Runtime arhictecture capabilities",
	"tags": ["architecture"],
	"description": "The runtime (execution) capabilities desribes the provided capabilites by the architecture components at runtime.",
	"content": "The Runtime (exceution) Architecture supports applications at run-time. It is a unified collection of run-time technology services, capabilities, control structures, and supporting infrastructure upon which application software runs.\nThe below capability map shows the different runtime capabilities grouped by different areas.\nDownload as Visio\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/appdeploy/\u0026quot;\u0026gt;Application build \u0026amp;amp; deploy capabilties\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Application developers using Altinn Studio to create Applications have access to build \u0026amp;amp; deploy capabilties\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/appdevelopment/\u0026quot;\u0026gt;Application development capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Application development capabilities are capabilites that is used for developing applications in Altinn Studio\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/data/\u0026quot;\u0026gt;Data management Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Data management capabilities range from handling data to defining data models for applications in Altinn Studio\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/integration/\u0026quot;\u0026gt;Integration \u0026amp;amp; Data Transport Capabilties\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The most important capability for a platform like Altinn 3 is the integration capabilites.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/presentation/\u0026quot;\u0026gt;Presentation (User Interface) Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Presentation Capabilities enable an application to manage the human-computer interface.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/processing/\u0026quot;\u0026gt;Processing \u0026amp;amp; Execution Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Processing \u0026amp;amp; Execution Capabilities includes everything from processing a defined business processes to load balancing and failover.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/security/\u0026quot;\u0026gt;Security Enforcement Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Security Enforcement Capabilities are capabilities typical provided by common architecture components.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/",
	"title": "Application Components",
	"tags": ["architecture"],
	"description": "The Application Components is split in to solution-specific application components, application construction components and non-solution application components.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/\u0026quot;\u0026gt;Solution-Specific (functional) Application Components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Solution-Specific (Functional) Application Components describes the different applications and their functional components. It does not go in to detail about technology.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/\u0026quot;\u0026gt;Application Construction Components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Application Construction Components refers to the required components and configurations needed to create the different applications in the different solutions.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/nonsolutionspecific/\u0026quot;\u0026gt;Non-Solution-Specific\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Non-Solution-Specific Application components refer to all components other than the core solution or solution-specific Application typical used for devops.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-frontend/",
	"title": "Changelog for app frontend",
	"tags": [],
	"description": "Overview of changes introduced into app frontend.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-frontend/v3/\u0026quot;\u0026gt;v3\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v3 of app frontend.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/app/app-dev-course/case/",
	"title": "Casedescription",
	"tags": ["apps", "case", "training"],
	"description": "Description of the muncipalitys requirements and wishes for the service.",
	"content": "Sogndal is in need of more young residents and wishes to become a desirable municipality for young adults and others who wishes to settle down.\nThat is why they wish to create a service in Altinn aimed at people who is moving to Sogndal over the next six months.\nBy collecting data about newcomers at an early point, the municipality may facilitate and customize the services to the newcomers before the first moving box has even been packed.\nSogndal has a few demands for the services described in the sections below.\nDemands from the muncipality Naming \rVis/skjul innhold\r\rKrav\r\r\r  The application must have a sensible name that makes it easy to find it again among the large number of repositories, Sogndal keeps in Altinn Studio.\n  There are no preliminary plans for yearly revisions of the app, so the year does not need to be taken into account.\n  There is a wish that one or more of the words \u0026ldquo;newcomer\u0026rdquo; and \u0026ldquo;Sogndal\u0026rdquo; is included in the name.\n\r\r First page of datacollecting \rVis/skjul innhold\r\rKrav\r\r\r Name and age of the person who is a newcomer  Firstname Middlename (optional) Lastname Age   Address of the person who is a newcomer  Street address Postal code Postal city   Contact information of the person who is a newcomer  Email Phone number    \r\r Texts \rVis/skjul innhold\r\rKrav\r\r\r All input fields should have descriptive labels that clarify what should be filled in. The application must be available in bokmål, nynorsk and english. In a first edition it is sufficient that only one of these languages is available. It is important that the title of the application sounds good and is descriptive of the service.  \r\r Information page \rVis/skjul innhold\r\rKrav\r\r\rSomeone in the municipality has created a sketch of the information page.\nThe following is desirable to be similar in the application:\n Placing of pictures Text size Formating of text  Sketch of information page\n\r\r Dynamic tracks \rVis/skjul innhold\r\rKrav\r\r\rA user who does not meet the requirements for the form should be stopped as early as possible in the process.\nOn the information page, the user should be able to state whether the form applies to them or not.\nHow this is done is optional, and the field Innflytter.KanBrukeSkjema in the datamodel is possible to use for this purpose.\nBased on the answer, the user will be sent to either Track 1 or Track 2_.\nTrack 1  The user has stated that the form does not apply to them The user should then be sent to a page with the following text: This form is not for you. For information about other offers in the municipality click here.  Line 2 in the text should be a link directing to https://www.sogndal.kommune.no/ It should not be possible to navigate to other pages of the form from this one.  Track 2  The user has confirmed that the form does apply to them. The user is sent to the data collecting pages.  \r\r Prefilling og personal information \rVis/skjul innhold\r\rKrav\r\r\r The following should be prefilled for the user:  First name: Innflytter.fornavn Middle name: Innflytter.Mellomnavn Last name: Innflytter.Etternavn Email: Innflytter.Kontaktinformasjon.Epost Phone number: Innflytter.Kontaktinformasjon.Telefonnummer Age: Innflytter.Alder   It should not be possible to change prefilled name and age It should be possible to change prefilled email and phone number  \r\r Different data basis for public and private sector \rVis/skjul innhold\r\rKrav\r\r\rWe want the user to be presented with a different set of options for the industry choice based on which sector they are in.\n Private sector: Standard list of industries Public sector: State and Muncipality  \r\r Tailored offer for IT competence \rVis/skjul innhold\r\rKrav\r\r\rIf the user chooses IKT (data/it) under industry, a text with a link to our overview of vacant positions should appear.\n Below the industry choice, the following text should appear We see that you have the competence we need in Sogndal. Here is an overview of our vacant positions.  Line 2 in the text should be a link that directs to https://sogndal.easycruit.com/index.html  The text and link should only be visible if the user has chosen IKT (data/it). In all other cases, this will be hidden.\n\r\r Confirmation before submission Bekreftelse før innsending \rVis/skjul innhold\r\rKrav\r\r\rThe user should be presented with the data that will be used and consents (indirectly) to this by submitting the form.\nPossible operations At this point in the workflow the user should be able to\n View an overview of the data entered Exit the workflow without submitting the form Exit the workflow and submit the form  Authorization  The same role requirements should apply to both fill out and confirm an instance.  Validation  It should only be possible for the user who owns the instance to submit the form, even if others may hold the necessary roles.  Texts The user should be presented with the following text before submitting the form.\nYou are now ready to submit a notification of moving to Sogndal. By submitting this form you consent to the data you have entered being saved and used for customizing the municipality\u0026#39;s offers to you during the next 18 months. Before you submit we recommend looking over your answers. You cannot change the answers after submitting. \r\r\r Obtaining previous residences \rVis/skjul innhold\r\rKrav\r\r\rTo be able to tailor the best possible offers to newcomers we wish to obtain an overview of former residences of the newcomer.\nOn the data page there should be an option to enter previous residences. Previous residences should contain following fields:\n Street address Postal code Postal city  It should be possible to enter up to 10 former residences.\n\r\r Validation previous residences \rVis/skjul innhold\r\rKrav\r\r\rDue to a personal vendetta among one of the employees in the municipality of Sogndal, a user who enters postal code 4619 as a previous residence should NOT be allowed to move to Sogndal.\nIn this case, an error message should appear at the field in question with the following text:\nYou are not welcome to our municipality. Sorry! \r\r\r Data processing of invalid street address \rVis/skjul innhold\r\rKrav\r\r\rOne of the data processors of Sogndal is sick of manually correcting a street address that often is being incorrectly entered by newcomers. Therefore, we wish to programmatic correct this while the user is filling out the app.\nIf the user enters Sesame Street 1 in the field Innflytter.Adresse.Gateadresse, this should automatically be corrected to Sesamsgate 1. In all other cases, the field should remain the same.\n\r\r "
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/components/",
	"title": "Components",
	"tags": [],
	"description": "",
	"content": "\rPanel\r\n\rPrintButton\r\n\rLikert\rHow to use a likert component\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/consistency/",
	"title": "Consistency across services",
	"tags": [],
	"description": "To simplify usage and avoid confusion, interaction patterns should be shared accross services.",
	"content": "When users interact with a new service, they carry expectations from previous interactions. When these expectations are met, interactons between with the user and the components of the form are less demanding, which reassures the user. By not requiring learning new interactions, the user\u0026rsquo;s focus will be on the content of the form.\nWe do not recommend changing the CSS for individual services that use the Altinn-design. Allowing\nchanges to the design and colour would hurt the consistancy between services. Common designs between service owners is something that we should strive for. To achieve a common framework, cooperation between Altinn employees and service owners is required.\nWe wish for a good common solution that can be used and improved by all, instead of a variety of different solutions through unique CSS-changes. This will also simplify following accessability requirements accross apps on our platform. You will be required and resposnible in following all WCAG-demands, should you choose to walk away from our design.\nDo you need a new component?\nWe want everyone who is working on developing apps to contribute to our library of components with both design and code. Practically this means that Altinn is accepting suggestions of new components requested by service owners according to their needs.\nOpprett en sak i github\rSkriv til oss på Slack\r\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/content/",
	"title": "Content in the form",
	"tags": [],
	"description": "Explain what is needed to fill the form correctly to the user and divide the content into multiple steps.",
	"content": "The user should not need an error message to understand what is required to fill out the application correctly. It should be obvious in the informative text at the start of the form and in the labels for each input field.\nYou should usually only ask about information that is strictly required to complete the task of the form. With this in mind, you should inform the user of which fields are mandatory and which are not. One suggested way to do this is to write (voluntary) in either the title or in an explanation of the input field.\nDivide the content into multiple steps and use paths One long page with too much information and multiple tasks can quickly overwhelm a user. Try to divide your service up into pages in a way where the user only has one task per page. This can for example be a question that the user has to answer or important information that the user must be aware of. This simplifies the process for the user by only giving them one thing to focus on and understand at a time.\nThe design we are currently offering has been created with this concept in mind. Altinn 2 style sheets can also be created within the Altinn 3 platform, but larger amounts of total components can lead to large amounts of scrolling and a more confusing experience for the user, and short pages with less content help remedy this confusion. Example: starting a sole proprietorship.\nThe user should not be required to give more information than necessary. If the user has answered a question that leads to another, you can decide to hide or show the question (or page) depending on their answer with dynamic branching.\nDisabled By showing fields as disabled you might expect that users know why they can\u0026rsquo;t use the element, but this is not always the case. Some users do not understand that a field is deactivated, which can lead to further confusion. Because of this we recommend limiting your use of disabling elements, and possibly including a text to explain why it is disabled, should you choose to use this feature.\n"
},
{
	"uri": "https://docs.altinn.studio/app/",
	"title": "Create apps",
	"tags": [],
	"description": "Altinn Studio is our new tool for developing digital services aka apps. These can be anything from simple forms to very advanced applications.",
	"content": "\rWho can use Altinn Studio?\nYou have to be a service owner in Altinn and accept the conditions for Altinn in public cloud to be able to deploy apps to the production environment, but anyone can log into altinn.studio and check out the possibilities.\n\r\rIf you have questions or feedback, then you can contact us on Slack or GitHub, or just keep on reading this documentation.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/getting-started/\u0026quot;\u0026gt;Get started\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Get started so you can develop apps in Altinn Studio.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/app-dev-course/\u0026quot;\u0026gt;Intro course\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;An introductory course to app development with Altinn Studio and local dev tools. (Only available in Norwegian)\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/design/\u0026quot;\u0026gt;Design and planning\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;To make the service as good as possible for the users, it is important to start by focusing on the users and understand their needs. Before you start developing, we recommend that you create a prototype and perform a user test.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/\u0026quot;\u0026gt;Development\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to create and edit apps in Altinn Studio.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/testing/\u0026quot;\u0026gt;Testing of apps\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Applications (apps) can be tested in the test environment, or locally.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/deployment/\u0026quot;\u0026gt;Deployment of apps to production\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;App owners can deploy their applications themselves.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/maintainance/\u0026quot;\u0026gt;Maintenance of app in production\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Applications in production require regular maintenance and updates.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/launched-apps/\u0026quot;\u0026gt;Launched apps\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Some of the apps that are in production, for information and inspiration.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/app/development/data/",
	"title": "Data",
	"tags": [],
	"description": "Data model configuration, pre-filling and other items related to data in an app.",
	"content": "\rData model in Altinn Studio\rHow to import or view the data model in Altinn Studio.\n\rPrefilling data\rHow to configure prefill for an app.\n\rCode lists (options)\rHow to configure Options / Code lists for an app.\n\rAttachments\rIn an application one can facilitate uploading file attachments both via GUI and API.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/design-principles/",
	"title": "Design principles",
	"tags": [],
	"description": "When developing or improving existing products we follow a set of principles to ensure usability and accessibility for all. We recommend following these principles when developing new services.",
	"content": " The users needs are our main priority We use insights into the users needs actively in the development of our products. All solutions should focus on solving real problems for our users and we use surveys and user insights in our decision making process. Hiding complexity We create focused and simplified solutions and peel away unnecessary complexity for our users. Our solutions allow complex background operations, that don\u0026rsquo;t impeed ease of use and simplicity for the end user. Holistic user experiences Our products should be interconnected to create a holistic user experience. We use a consistent language and the same components in all our digital solutions so that the users are familiar with all parts of our platform. Visual design that motivates The visual design should contribute to ensuring clear and concise dialog between the user and the agency. We use a friendly colour palette, a simple UI, obvious interaction elements and clear illustrations to create a good atmosphere. All visual considerations should have a clear purpose of creating a specific effect. Accessibility for all We strive to create digital solutions that are accessable by everyone. We reuse components in a way which optimalizes accessibility - technically and in terms of interaction and visual design.  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/",
	"title": "Development &amp; Operations Capabilties",
	"tags": ["architecture", "devops"],
	"description": "The development &amp; operations architecture capabilities list the capabilities used to develop and operate the Altinn 3 platform including Altinn Studio, Altinn Apps, and Altinn Platform.",
	"content": "It covers the full spectrum of capabilities starting from development, going through a transition to operations, and ending with operations it-self.\nEach capability consists of people, the procedures they follow, and the software and hardware tools they use.\nThis documentation currently focuses on the capabilities that can be shared and reused by others.\nSee below for a capability map and the different DevOps capability areas.\n\nFull screen\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/devops/analysisanddesign/\u0026quot;\u0026gt;Analysis \u0026amp;amp; Design Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Analysis \u0026amp;amp; Design Capabilities are the capabilities needed to analyze needs and design solutions and applications for the Altinn 3 platform.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/devops/build_and_test/\u0026quot;\u0026gt;Build \u0026amp;amp; Test Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Involves everything from the capability to write and building code to the different types of testing of the code.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/devops/environments/\u0026quot;\u0026gt;Environments\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;An important DevOps capability is to have different environments to deploy the different solutions part of the Altinn 3 platform.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/devops/platformoperations/\u0026quot;\u0026gt;Platform Operations Management Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Platform Operations Management Capabilities describes the capabilities needed to operate the platform.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/devops/projectmanagement/\u0026quot;\u0026gt;Project Management Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Project Management Capabilities covers the different capabilities to mange the project.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/devops/quality/\u0026quot;\u0026gt;Quality Management Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Quality Management Capabilities covers the different capabilities to mange the project.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/devops/softwareconfiguration/\u0026quot;\u0026gt;Software Configuration \u0026amp;amp; Release Management Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Software Configuration \u0026amp;amp; Release Management Capabilities process of tracking changes and handle new releases for a application\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/link-to-app/",
	"title": "Entering the form",
	"tags": [],
	"description": "To make the user experience as best as possible you should think about how you link between your agency and the Altinn-app.",
	"content": "User testing has shown that when users engage with an agency or municipalities' website to fill out a form and they are redirected to Altinn, they often experience \u0026ldquo;suddenly i was in Altinn\u0026rdquo;. Because of this, entrances forms should be presented in a way where it is clear that you will be sent to Altinn, while avoiding unnecessary intermediate steps. \u0026ldquo;Start application\u0026rdquo; should link directly to the form. The user experience will then be completed to a greater extent in the current context, with Altinn being used as a solution for submitting and tracking its history.\n*Integrted components\nIn close cooperation with sentral service providers we are planning to offer components which can be used on their websites to enable completing forms in their current context.\nThe users of Altinn want both a solution for where they are and a common overview. Both options should be available but handled differently depending on their needs.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-studio/designer/frontend/",
	"title": "Application construction components - Designer Front-end",
	"tags": [],
	"description": "Description of the application construction components for Altinn Studio Designer Front-end",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-studio/designer/frontend/applications/\u0026quot;\u0026gt;Overview of frontend applications\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;High-level description of the different applications used in Desgner frontend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-studio/designer/frontend/structure/\u0026quot;\u0026gt;Designer frontend code strucure\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;High-level overview of how the app frontend is structured\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \rThe Designer frontend consists of multiple React + Redux applications. It is split into two top-level applications:\n dashboard app-development  In additions, different functional areas will have their own applications, which are then imported into the relevant top-level application as a subapp (see https://redux.js.org/recipes/isolatingsubapps). Currently, we have the following subapps, that are used by the app-development top-level application:\n ux-editor schema-editor (data modeling)  Finally, there is a library of shared components and utils that are used accross all the applications in the Designer frontend.\nDuring build of the Designer application, the top-level applications are transpiled into javascript-files and CSS, which are copied into the Designer backends wwwroot folder and hosted there. The Designer backend is a web application with views, that reference the javascript files and CSS.\nNOTE: Parts of the front-end is currently built in .NET Core. This will gradually be ported over to React as we work with the different functional areas. The exception here is the static landing page, which will remain as a custom view in the .NET application.\n\rReact architecture The front-end of Altinn Studio designer is set up using the same React + Redux architecture as the App frontend, take a look here for more details.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/logic/generic/",
	"title": "Generic",
	"tags": [],
	"description": "Overview of logic files and how they can be used.",
	"content": "Introduction The various files that are used to define logic can be found in the logic menu that is available in the UI editor through the f(x)-icon at the top right corner.\nThey can also be edited directly from the application repo, under the folder App/logic (for server-side application logic) or the folder App/ui (for dynamic behaviour in the GUI). This folder contains the following files by default:\n🗀 App/ 🗀 logic/ 🗀 DataProcessing/ 🗎 DataProcessingHandler.cs 🗀 Print/ 🗎 PdfHandler.cs 🗀 Validation/ 🗎 ValidationHandler.cs 🗎 App.cs 🗎 InstantiationHandler.cs More files can be added when needed.\nA complete project with examples on server-side application logic can be found here.\nNOTE: The way you reference elements in the data model is different between OR and SERES type XSD\u0026rsquo;s. For OR XSD\u0026rsquo;s, .value is a necessary suffix in the reference. The example code beow uses a mixture of the two types of data models.\n\r\rAuto-complete/intellisense By editing the source code in the apps locally, e.g. in Visual Studio Code, you get intellisense and autocomplete automatically. For the C#-files, it\u0026rsquo;s easiest working on these locally.\nFor the javascript-files, intellisense/autocomplete is also available if you wish to edit the files directly in Altinn Studio. This appears automatically when writing, and you can also force it to appear by pressing CTRL + SPACE\n"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/",
	"title": "Get started",
	"tags": [],
	"description": "Get started so you can develop apps in Altinn Studio.",
	"content": "\rIntroduction to Altinn Studio\rAltinn Studio is our new tool for developing public digital services. This can be anything from very simple forms to advanced applications.\n\rCreate user in Altinn Studio\rConfigure your user in Altinn Studio for the first time.\n\rCopy app in Altinn Studio\rHow to make a copy of an application in Altinn Studio\n\rCreate app in Altinn Studio\rHow to create a new application in Altinn Studio.\n\rDashboard in Altinn Studio\rHow to use the dashboard\n\rMigrate services\rFrom Altinn 2 to Altinn 3.\n\rAccess\rHow to get access to Altinn Studio, app secrets and app logs.\n\rNavigation in Altinn Studio\rNavigating between the different parts of Altinn Studio.\n\rLocal development\rHow to get started with local development\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/intro/",
	"title": "Introduction to Altinn Studio",
	"tags": ["translate-to-english"],
	"description": "Altinn Studio is our new tool for developing public digital services. This can be anything from very simple forms to advanced applications.",
	"content": "Prosessen for å lage skjemaer og meldinger vil være forskjellig alt etter som hvor stor eller liten målgruppen er, hvor mye data som skal behandles eller hvor mye jobb det er å legge til rette for at egne systemer kan snakke med Altinn.\nSlik går du frem:\n Start alltid med å definere brukerbehov\nTenk nøye gjennom hele prosessen fra et brukerperspektiv. Hva er utfordringen og hvem skal den løses for? Hva er databehovet? Lag gjerne en skisse til kommunikasjon med brukeren og test skissen på folk i målgruppen. Lese også vår guide til prototyping i Figma. God planlegging er nøkkelen til et godt resultat. Sjekk Guide: Hvordan jobbe brukerorientert? for inspirasjon. Få tilgang til systemer\nHvis du ikke har utviklet tjenester i Altinn Studio før trenger du å opprette en bruker. Har du ikke allerede en ferdig datamodell/XSD så trenger du i tillegg tilgang til SERES-domeneklient. Tilrettelegge egne systemer for sending og mottak av data\nDet finnes standardiserte mønstre basert på REST-API for å sende og motta data fra/til dine interne systemer. Autentisering skjer med Maskinporten og du laster ned data ved pull fra database, og laster opp data direkte mot API i den enkelte applikasjon. Vår referanseapplikasjon Altinn CLI ​viser disse mønstrene og kan brukes for å komme i gang. Utvikle tjenestene\nAltinn Studio brukes til å opprette applikasjoner (apps). En app kan være alt fra enkle skjemaer til større avanserte applikasjoner som digitaliserer komplekse prosesser. Det er viktig å tenke på at brukeren skal oppleve prosessene som sammenhengende og oversiktlige. Prosessene kan startes av det offentlige eller av brukeren selv, eller automatisk som en reaksjon på en hendelse. Teste tjenestene\nAltinn har et eget testmiljø hvor du kan teste om apper og opp-/nedlasting av data virker som det skal. I testmiljøet bruker du fiktive testpersoner og organisasjoner. Når du har kommet så langt i utviklingen er det også viktig å brukerteste den endelige løsningen på reelle folk i målgruppen. Dette for å sikre at det ikke er noen hinder for de som skal bruke tjenestene. Det er også mulig å teste app lokalt på egen maskin. Produksjonssette tjenestene\nTjenesteeier kan selv produksjonssette sine applikasjoner og gjøre vedlikehold av kode og avhengigheter. Melding av feil\nFeil meldes til Altinn fra den enkelte tjenesteeier sitt dashboard på Altinn Digitalisering (krever innlogging).  "
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/pages/navigation/",
	"title": "Navigation between pages",
	"tags": [],
	"description": "How to set up navigation between pages.",
	"content": "Navigation to the next page happens via a navigation button. This button has to be added manually in every layout file where you want to be able to navigate forward. Navigating back is done via a back arrow in the top left corner. This button will always be shown if there is something to navigate backwards to, and is not part of the layout file. See image below.\nAdd button for navigation Button for navigation is added to all layout files where it is needed. If you want the button to appear at the bottom of the page, it has to be added at the bottom in the layout file. Configuration example:\n{ \u0026#34;id\u0026#34;: \u0026#34;nav-page2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;NavigationButtons\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;next\u0026#34;: \u0026#34;next\u0026#34;, \u0026#34;back\u0026#34;: \u0026#34;back\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {} } It is also possible to show a back button together with the next button by adding the parameter showBackButton: true in the button configuration.\n   Parameter Description     id Unique ID, the same as for all schema components.   type Has to be \u0026quot;NavigationButtons\u0026quot;   textResourceBindings By setting the parameters next (and back), you are able to override the default texts to be shown on the buttons.   showBackButton Optional. Makes two buttons (back/next) appear instead of just one (next).    Navigation Bar The Navigation Bar gives easy access to all pages in an application.\nThe Navigaion Bar lists all pages in the application, and is not suited for use with the tracks feature.\r\rOn big screens, all pages will be visible. If there is not enough space on one line, the list will break and the rest of the pages will go on the next line. On smaller screens, all pages will be hidden in a menu. The current page is shown in the menu, and when the menu is clicked, all pages will show.\nThe Navigation Bar is added to all layout files. Configuration example:\n{ \u0026#34;id\u0026#34;: \u0026#34;navbar-page-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;NavigationBar\u0026#34; } Change texts on navigationbar buttons The text in the navigation bar buttons will by default use the filename of the page without the extension. F.ex if you have page1.json and page2.json, the buttons will contain page1 and page2. To override these texts, you can add texts in the resources.XX.json, where the id is the filename without extension. Example:\n{ \u0026#34;id\u0026#34;: \u0026#34;page1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;First page\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;page2\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Last page\u0026#34; }, Order Default order for the pages is alphabetically. Besides this you can name each page as you wish, and the filename is what will be used. To ensure the pages appear in a specific order, you could prefix them with numbers, f.ex:\n|- App/\r|- ui/\r|- layouts/\r|- 1.firstPage.json\r|- 2.secondPage.json\r|- 3.aFinalPage.json\rIt is also possible to override the order on the pages in the Settings.json file found under App/ui/, by setting the pages.order property. Example:\n{ \u0026#34;pages\u0026#34;: { \u0026#34;order\u0026#34;: [\u0026#34;side2\u0026#34;, \u0026#34;side1\u0026#34;] } } Functionality for dynamically deciding which page should be next is not something that is currently supported.\r\rValidation on page navigation It is possible to trigger validation when the user tries to navigate to a different page. This can be done by adding the string validatePage to the triggers in the navigation button component. Example:\n{ \u0026#34;id\u0026#34;: \u0026#34;7cbc1c00-4c8c-42b6-bcef-12b3c4c45373\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;NavigationButtons\u0026#34;, \u0026#34;componentType\u0026#34;: \u0026#34;NavigationButtons\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;next\u0026#34;: \u0026#34;Neste\u0026#34;, \u0026#34;back\u0026#34;: \u0026#34;Tilbake\u0026#34; }, \u0026#34;triggers\u0026#34;: [\u0026#34;validatePage\u0026#34;], \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;showBackButton\u0026#34;: true } If there are errors on the page, the user will be prevented from moving forward until this is fixed. If validatePage is added as a trigger, the ID of the element that triggers the validation will be sent as a header LayoutId to the backend. This makes it possible to customize the backend validtaions based on which page the user triggers the validation from. It is also possible to trigger validation on all pages by adding validateAllPages in triggers.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/pages/",
	"title": "Pages",
	"tags": [],
	"description": "How to set up an app with multiple pages, tracks, summary or multiple layouts.",
	"content": "Setup of multiple pages can be done manually (as described below) or directly in the form editor in Altinn Studio.\rNote that the last page the user entered is cached so that they will return to this page when the app reloads.\r\rSetup To get funtionality for mutliple pages in a form, the nuget-version of the packages the app uses must be upgraded to version 1.2.0-alpha or newer. See instructions for how that is done here.\nMultiple pages in a form (within the same process task) is supported by splitting up the current layout-file App/ui/FormLayout.json to one file per page. The files must be placed in a folder App/ui/layouts. Each layout file must use the same format as the existing FormLayout.json file. For example:\n|- App/\r|- ui/\r|- layouts/\r|- side1.json\r|- side2.json\r|- side3.json\rThe recommended approach as long as there is a need to set it up manually, is to use the ui-editor in Altinn Studio to add all components to FormLayout.json, and then copy them to their respective layout files, one for each page you want. FormLayout.json can either be renamed under the layouts folder or be deleted.\nNote: FormLayout.json must either be moved (can be renamed) into the layouts folder, or be deleted. If you have the old FormLayout.json file under the App/ui folder as it was, only this one will be used and all files under the App/ui/layouts folder will be ignored.\n\rNavigation between pages\rHow to set up navigation between pages.\n\rTracks\rHow to add dynamic tracks in the app.\n\rSummary view\rHow to set up the display of a summary of the completed form.\n\rLayout sets\rHow to set up multiple layouts or forms in the same app.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/components/panel/",
	"title": "Panel",
	"tags": [],
	"description": "",
	"content": "The panel component can be used to display important information to the user.\nFormLayout.json example\n{ \u0026#34;id\u0026#34;: \u0026#34;panelinfo\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Panel\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Info text\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;Some important information here\u0026#34; }, \u0026#34;variant\u0026#34;: \u0026#34;info\u0026#34;, \u0026#34;showIcon\u0026#34;: false } variant can be one of the following:\n info success warning  showIcon can be used to hide/show the icon. By default the icon will be shown.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/components/printbutton/",
	"title": "PrintButton",
	"tags": [],
	"description": "",
	"content": "The PrintButton component can be added to the form layout where you want an option to open the browsers built-in print dialog. When the button is clicked the print dialog window will pop up. Commonly there is an option to \u0026ldquo;Print to PDF\u0026rdquo; if preferable.\nFormLayout.json example\n{ \u0026#34;id\u0026#34;: \u0026#34;printButtonInfo\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;PrintButton\u0026#34; } The default text on the PrintButton is \u0026ldquo;Print / Save as PDF\u0026rdquo;. The text can be overridden by setting the text resource key:\n{ \u0026#34;id\u0026#34;: \u0026#34;general.print_button_text\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Skriv ut\u0026#34; } The PrintButton supports grid alignment if necessary.\n"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/title-and-paragraph/",
	"title": "Titles and paragraphs",
	"tags": [],
	"description": "In most cases, there should be a header (H2) and a paragraph at the start of form pages to summarize the task of the user.",
	"content": "Guidelines:  Text length in a paragraph should not fill the module box 100%, as long lines disturb reading flow. Paragraphs should be restricted to a width of 696px, even if the module fills 1056px. The text should always be aligned to the left. Keep the correct order of the header size levels. Don\u0026rsquo;t skip sizes, but go down by one at a time. This means that changes in text size changes should be between H2/H3, H1/H2, or stay the same. This avoids sharp differences between H1/H3.  Example using different text sizes: \r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/",
	"title": "UI-components",
	"tags": [],
	"description": "The different components have been made to fit together as a larger whole. This makes it important to follow the guidelines for how they should be used to achieve a consistent and recognizable appearance. UI components that are currently included in Altinn&#39;s library are found below.",
	"content": "Do you need a new component?\nWe wish everyone welcome to contribute to the component library through both code and design. Practically this means that Altinn wishes to accept suggestions for new components as service owners find a need for them.\nYou are welcome to check the existing components below.\nCreate a new issue on github\rWrite to us on Slack\r\r\r\r\rTitles and paragraphs\rIn most cases, there should be a header (H2) and a paragraph at the start of form pages to summarize the task of the user.\n\rButtons and links\rMain button (blue) is used to send the user to the next step.\n\rInput\rInput fields are used when the user is submitting text or a number.\n\rDate\rThe date picker can be used when selecting a (relatively) recent date. To select dates that are far in the past (or future) a date field can be used instead.\n\rCheckboxes\rCheck boxes are used in cases where the user can select multiple alternatives in a list of options.\n\rRadio button\rRadio buttons are used in cases where the user is picking one of a group of options. The same applies to drop-down lists, so be conscious about which you choose to use.\n\rDropdown\rThe pull-down list should be used in cases where the user is picking one of many alternatives, much like the radio buttons.\n\rHelp texts\rHelp texts are small text boxes that can be used to provide explanations to the user.\n\rError messages\rError messages explain what what went wrong and how to correct it, to the user.\n\rFile upload\rThe file upload module lets the user upload one or multiple files\n\rImage\rUse images and illustrations to emphazise points or illustrate concepts which are difficult to explain using text\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/design/usertest/",
	"title": "User testing",
	"tags": [],
	"description": "It is always a good idea to do user testing in multiple stages of a project. Through user testing you measure if your solution corresponds to the needs of the users. Doing this early in the project is a good investment, since you save time and money by avoiding developing a solution that doesn&#39;t match what it was trying to solve.",
	"content": "User testing does not have to be advanced with setup, or the amount of test subjects in mind. A rule of thumb is that if you have tested a system on 5 people you\u0026rsquo;ve discovered 80% of the usability flaws (Jacob Nielsen).\nYou will have to adjust your form after the usability testing. It could be bigger things, like navigation or flow, but also smaller adjustments like language or alterations within the interaction-design. If larger changes are required it might be a good idea to do another user test to check if the new changes have had the desired effect.\nA sign that you have succesfully created a solution that fits the users requirements is if most of the users in your useability test are able to complete their task without your help, and within a reasonable timeframe.\nUseablility testing in Figma Have you set up a prototype in Figma by using our Prototype-Kit? Great! You can now use this for useability testing!\nIf you\u0026rsquo;ve added multiple steps in your form, you have to remember to link between these steps. You can do this by choosing \u0026ldquo;Prototype\u0026rdquo; in the right-upper corner in Figma. Select a frame or a button and notice the little white dot that shows up to the right of the item you selected. This dot can be grabbed and pulled over to the frame you wish the button to lead to.\nThere is a flow for every starting alternative, along with a flow for the mobile sketches. Press the play button on the prototype you want to try out. After it has started you can switch between the different flows in the left margin.\nYou can share the files with the testers if you click the \u0026ldquo;share\u0026rdquo; button in the top right of the window. you can either choose that the file should be open to anyone who opens the link, or that only people that are invited (via email) should have access.\nGood advice for user testing  Test early with real users The user friendliness can only be measured if it is tested on the solutions target userbase. testing early is cheaper than fixing eventual problems that are uncovered during production. Render the test harmless Explain to the test subject that the purpose of the test isn\u0026rsquo;t to test them, but to discover eventual mistakes or faults in the service so that it can be fixed or improved. Ask the test subject to think out loud. For some, thinking out loud will come naturally while others might need a reminder every once in a while. Don\u0026rsquo;t ask leading questions, show that you want to hear the test subjects thoughts and their feedback. Listen Remember to give the test subject room for thought, and keep in mind that you should focus on listening. Give the test more than enough time to avoid a stressed environment. Remind yourself of the purpose of the test Feedback from the test subject can easily be interpreted as a critique of your own work, remind yourself that you want the best result as possible for the quality of your service.  Creating tasks for the test Spend plenty of time formulating the tasks for your user test, doing a pilot-test ahead of the real one will let you discover errors with the actual test.\n Set a clear goal for what the participant is trying to achieve choose tasks that are relevante and credible Don\u0026rsquo;t give away the answer or give to many hints  You can find more tips on how to complete the test in the best way possible on the site gov.uk\nAfter the test You have likely found some things that you should improve after you have completed a couple of usability tests. After any changes to the form layout or flow of your form you should consider doing another round of usability testing.\nYou will soon be ready for developing! Remember to see our guidelines for design and content within the forms\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-studio/designer/frontend/applications/",
	"title": "Overview of frontend applications",
	"tags": [],
	"description": "High-level description of the different applications used in Desgner frontend",
	"content": "dashboard This is a top-level application, and is responsible for showing the app developers an overview of the apps they have available to view and/or edit, as well as functionality for creating a new app.\napp-development This is a top-level application, and handles all operations related to the development of a specific app. It contains functionality like administration and build/deploy of apps. It also uses the subapps ux-editor and schema-editor to provide functionality for creating/editing forms and data models. It does not have access to the store of any of the subapps.\nHeader and Navigation Material UI (applicatiopn bar and drawer) components are customized with altinn studio styles for the header and navigation in Altinn Studio. A third-party library, React Routing, is used together with Material UI to handle navigation. When the user clicks on a header/side navigation link, the route changes and the subapp specific to the route is rendered.\nHeader Menu (Application bar) Application bar component is the Altinn Studio\u0026rsquo;s header menu(navigation links at the top). React router library is used to handle those navigations. Header menu has different user interface on desktop and tablet. The display text and the links for navigation are built as object in a configuration file appbarconfig.\nThe configuration object in the file is iterated and the application bar is rendered. The styles specific to the component are placed inside the component file. In addition to the navigation menu, a breadcrumb is also rendered in tablet view.\nSide Menu (Drawer Menu) Drawer menu component is the Altinn Studio\u0026rsquo;s side menu which can be found on the left. It displays a list of Icons by default and on hover expands the menu and lists text by the side of the icon. It will render a list of navigation links based on the selected header menu.\nSide menu has different user interfaces in desktop and tablet. In tablet, only text is displayed and it slides in from left when \u0026ldquo;Menu\u0026rdquo; button is clicked.\nTwo different components are created to acheive this:\n LeftDrawerMenu TabletDrawerMenu  The styles specific to the side menu is added in a separate style file. Similar to the header menu, the side menu is also rendered by looping over the menu settings object which is available in a separate configuration file\nux-editor This application is responsible for the GUI allowing app developers to create/edit form views that will be shown in the data step in the app frontend.\nThe general concept is that there is one or more JSON files (layouts) where the components that are to be part of a form are specified. This includes the component types, texts, order, etc. These files are then parsed to display the form in the app frontend.\nThe ux-editor application provides a GUI to create/change these files. The ux-editor displays a simple representation of the components that app developers can then edit.\nschema-editor This application is currently under development.\r\rResponsible for the GUI allowing app developers to upload/create/edit data models for the application.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/developing/",
	"title": "Developing locally",
	"tags": ["development", "front-end"],
	"description": "Running the frontends locally for development",
	"content": "App frontend   Follow the instructions here to set up an app to run locally, up to step 5 (do not do step 6 yet.)\n Make sure Altinn Studio is not running. If it is, run  docker-compose down\rfrom altinn-studio/src/studio before proceeding with the instructions linked above.\n  Follow the steps in app-frontend-react repository for how to serve app-frontend locally.\n  Run the app (from \u0026lt;path-to-app\u0026gt;/App/):\ndotnet run\ror run it directly from VS Code.\n  Start the app in a browser by going to altinn3local.no!\n  Altinn Studio Designer   Follow the instructions in the Altinn Studio README to set up Altinn Studio locally.\n  Stop the altinn-designer container:\ndocker stop altinn-designer\r  Install/update dependencies (from src/studio/src/designer/backend):\nyarn --immutable\ryarn run gulp-install-deps # Installs front-end dependencies\r  Run the designer application (from src/studio/src/designer/backend):\nyarn run gulp # only needed the first time\ryarn run gulp-develop #or yarn run gulp-develop-dashboard\rThis will both start the backend application with dotnet run, and serve the front-end application at localhost:8080 with hot reload, which rebuilds the frontend application any time a new change is saved. You might have to refresh the page to see your changes.\n  Open Altinn Studio in a browser\n  Note that you can also run Altinn Studio Designer frontend in the same way as running app frontend. This would require changing the `src/studio/src/designer/backend/views/ServiceDevelopment/Index.cshtml` (for app-development) or `src/studio/src/designer/backend/views/Home/Index.cshtml` (for Dashboard) to point at `http://localhost:8080` in a similar way as described in the app frontend section.\rThe first time setting this up, you would have to follow steps 1-3 and then run the yarn run gulp command from step 4, before navigating to the frontend folder src/studio/src/designer/frontend and then into the application you want to run (dashboard or app-development). From there, you can run yarn run start and the frontend will be up and running.\nThe backend will have to be started separately, using the dotnet run command.\nSubsequent setups, you only have to do steps 1-2, and if dependencies have been updated then step 3 can be run (or these can be installed directly from the src/studio/src/designer/frontend folder).\nTo enable hot reload of the designer frontends, this is the method to use.\n\rPlatform Receipt Open a terminal in src/Altinn.Platform/Altinn.Platform.Receipt, and run:\nyarn --immutable\ryarn run gulp #(only the first time)\ryarn run gulp-install-deps\ryarn run gulp-develop\rThis will build and run receipt back end, and build and copy the receipt frontend to the wwwroot folder. The application should now be available at localhost:5060/receipt/{instanceOwnerId}/{instanceId}. The script will also listen to changes in the receipt react app, rebuild and copy the new react app to the wwwroot folder. You might need to refresh to see the changes.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/routine/",
	"title": "Routines for development",
	"tags": ["development", "routines", "front-end"],
	"description": "Describes routines for developing frontend code for resources in the DevOps team.",
	"content": "When selecting an issue from the backlog, assign yourself to the issue and set it to the Developing pipeline in the Altinn Tjenester 3.0 - DevOps Team board\nApp frontend  Create a new branch from master.  Naming convention for branches is bug/\u0026lt;issue number\u0026gt;-\u0026lt;short description\u0026gt; or feature/\u0026lt;issue number\u0026gt;-\u0026lt;short description\u0026gt;, depending on the issue type.   Code your changes and test them by running an app locally. Run unit tests  Update any failing tests Add new tests when needed   Make sure you update the version in altinn-app-frontend/package.json, following semantic versioning. Commit/push your changes and create a pull request.  Tag the issue in the description of the PR. Do not use \u0026ldquo;fix\u0026rdquo;/\u0026ldquo;fixes\u0026rdquo; issue, as this will close the issue when PR is merged. Move the issue to the Review/QA pipeline in board and tag/notify any reviewers.   Fix any review comments and/or issues that come up from running the automated pipelines.  All pipelines should run green. Test coverage should be \u0026gt;65%. No new code smells should be introduced.   Once approval of code is in and all pipelines run green, move the issue to Testing pipeline in board and unassign yourself. Fix any bugs that are uncovered by manual testing. Once testing is completed, tester will move issue to Done pipeline in board. When this is done, code can be merged into master.  Make sure the version in altinn-app-frontend/package.json is still updated to a new version (new code might have been merged in the mean time).   Update any relevant documentation. F.ex.  Changelog for app frontend. User documentation.   Check if there are any tasks in the issue that are incomplete. If all tasks are completed, the issue can be closed.  Studio frontend  Create a new branch from master. Naming convention for branches is bug/\u0026lt;issue number\u0026gt;-\u0026lt;short description\u0026gt; or feature/\u0026lt;issue number\u0026gt;-\u0026lt;short description\u0026gt;, depending on the issue type. Code your changes and test them by running Designer locally. Run unit tests  Update any failing tests Add new tests when needed   Commit/push your changes and create a pull request.  Tag the issue in the description of the PR. Do not use \u0026ldquo;fix\u0026rdquo;/\u0026ldquo;fixes\u0026rdquo; issue, as this will close the issue when PR is merged. Move the issue to the Review/QA pipeline in board and tag/notify any reviewers.   Fix any review comments and/or issues that come up from running the automated pipelines.  All pipelines should run green. Test coverage should be \u0026gt;65%. No new code smells should be introduced.   Once approval of code is in and all pipelines run green, merge the code to master, move the issue to Testing pipeline in board and unassign yourself. Fix any bugs that are uncovered by manual testing. Update any relevant documentation. F.ex.  User documentation.   Once testing is complete, check if there are any tasks in the issue that are incomplete. If all tasks are completed, the issue can be closed.  "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/new-component/",
	"title": "Creating components",
	"tags": ["development", "front-end"],
	"description": "Get started creating new form components for the apps",
	"content": "App structure When an instance is in a data step, the form defined in the JSON form layout file(s) for that task is rendered. Below you can see a simplified overview of the layers of components that are used to render the form, including some of the most important inputs.\nA detailed overview of the app frontend structure and architecture is available here.\nForm components All form components should be presentational components. This means that their only responsibility is to present something to the DOM, and as such they do not handle any direct interactions with the redux store. This is the responsibility of the parent component (in most cases GenericComponent), which will provide the form components with the data they need to render themselves, as well as any functions to call in the event of a change.\nAdding a new form component Form components are defined in src/components. Find a relevant folder in the structure, or create a new one if necessary, and implement the component there. All form components are react components, that are provided with props as input. A list of the props that are provided and can be used:\n   prop name type description source     id string unique component ID layout   text string text to be displayed layout (textResourceBindings.title value)   formData any form data to display (if relevant) parent component   language any object containing standard language resources parent component   shouldFocus boolean should component have focus parentComponent   handleDataChange (value: any) =\u0026gt; void function to call in the event of a data change parent component   handleFocusUpdate (value: any) =\u0026gt; void function to handle updating focus parent component   getTextResource (key: string) =\u0026gt; string function to get text resource value parent component   isValid boolean is component valid parent component    In addition, any properties defined on the component in the layout-file will be passed through to the component.\nTo make a new form component available for use, it needs to be added to the module that exports all the form components for use elsewhere in the application. This is the src/components/index.tsx-file. In this file, you will find lists of all the available form components exported. To make your component available, you need to do the following:\n Import your new component into the file Update the ComponentTypes enum with your new component type Add your a new object for your component to one of the component lists (or create a new list if relevant). The list object must have the following structure: {\rname: \u0026quot;\u0026lt;component name\u0026gt;\u0026quot;,\rTag: \u0026lt;Component tag\u0026gt;,\rType: \u0026lt;ComponenType enum for your component\u0026gt;m\rcustomProperties: {\r\u0026lt;any custom properties that the component should be initialized with\u0026gt;\r}\r}\r  Use the existing lists and components as an example for setting this up. Once this is done, the component is ready to use, and can be added to the layout file of an app and used.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-studio/designer/frontend/structure/",
	"title": "Designer frontend code strucure",
	"tags": [],
	"description": "High-level overview of how the app frontend is structured",
	"content": "On this page:\n dashboard app-development ux-editor schema-editor shared  dashboard app-development ux-editor schema-editor shared "
},
{
	"uri": "https://docs.altinn.studio/app/app-dev-course/",
	"title": "Intro course",
	"tags": ["apps", "build", "deploy", "training"],
	"description": "An introductory course to app development with Altinn Studio and local dev tools. (Only available in Norwegian)",
	"content": "This intro course is divided into six modules and covers a fictitious case for the municipality of Sogndal. Over the course of these six modules, you will have gone through the main functionality of an Altinn App, as well as testing the app locally and in a test environment.\nThree things have to be in order before you can get started with this course.\n A user in Altinn Studio Your local development environment is set up with support for development and testing of apps Access to an organization with a test environment*  * A prerequisite for module 3. The remaining modules can be completed with full learning benefits without this being set up.\nLet\u0026rsquo;s get started! Read through the municipality of Sogndal\u0026rsquo;s case, and work through it module by module.  \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/app-dev-course/case/\u0026quot;\u0026gt;Casedescription\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the muncipalitys requirements and wishes for the service.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/app-dev-course/modul1/\u0026quot;\u0026gt;Module 1\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Create app in Studio, set up local development environment and local test\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/app-dev-course/modul2/\u0026quot;\u0026gt;Module 2\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Add more pages, dynamic tracks and prefill\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/app-dev-course/modul3/\u0026quot;\u0026gt;Module 3\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Build and deploy application to test environment\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/app-dev-course/modul4/\u0026quot;\u0026gt;Module 4\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Add code lists manually, progmatic and dynamically\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/app-dev-course/modul5/\u0026quot;\u0026gt;Module 5\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Legge til bekreftelsessteg\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/app-dev-course/modul6/\u0026quot;\u0026gt;Module 6\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Expansion of form with repeating group\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/app-dev-course/modul7/\u0026quot;\u0026gt;Module 7\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Standalone extensions of the app\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/app-dev-course/losningsforslag/\u0026quot;\u0026gt;Solution\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Solution and explanation on comprenhension checks\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/api/",
	"title": "Altinn 3 API",
	"tags": [],
	"description": "Description of the Altinn 3 APIs for end users and application owners.",
	"content": "The APIs The new solution will have multiple APIs, but they can be divided in two groups. The app APIs and the Platform APIs.\nApp API The application API is an API that provides access to specific instances of a specific app. The API provides features for working with data elements while keeping the metadata document for the instance and its data elements updated. The instance level endpoints revolves around moving an instance through its defined process and controlling some instance level settings.\nMetadata for an app is the second job of the app API. There are endpoint that give access to the metadata of the app itself, its data types and process description.\nEvery app will expose almost identical endpoints and functionality. External parties should need only one client implementation across all app APIs. Technically there is nothing preventing an application owner from adding or making changes to the API, but in those cases it is probably an application with a different process flow. In these cases, the application might require some special handling, and additional documentation should be provided by the application owner.\nhttps://{org}.apps.altinn.no/{org}/{appname} The URL identifies the application owner specific hostname using the short name org, and the identificator of the app consisting of both the application owner short name and the name of the app org/appname.\nPlatform API The Platform APIs are primarily made to support the applications hosted on the platform, but a lot of endpoints can be used directly by both application owners and users. Primarily on the Authentication, Events and Storage APIs.\nThe Storage API provides access to all instances across all applications. It can be used to access metadata about applications, instances, data elements and instance activitylog (events), as well as the actual data content. This API should be the preferred method for application owners to download data associated with instances created based on their applications. Application users can use it if they need a form of message box or want to retrieve archived instances and their data.\nThe Authentication API provides methods for authentication.\nThe Events API provides access to the Events component endpoint for listing events. This can be used sporadically to query Altinn for events that have occured in the solution.\nhttps://platform.altinn.no API user groups There are primarily two groups of users of the Altinn APIs. The first group consists of applications and systems used by the owners of the Apps hosted by Altinn. This group is called Application Owners. The second group consists of organisations and people using the Apps to communicate with the application owners. This group is called Application Users.\nThe two groups have many similar needs, but there are some differences in what type of tasks they need to perform. All new APIs is technically available to both groups, but some endpoints have authorization to allow only on of the groups.\nApplication Owners A list of common tasks for an application owner:\n Query instances for a given application according to status or instance owners. Create an application instance. Upload form data and attachments. Download form data. Change process state (workflow). Confirm instance as complete.  Application Users A list of common tasks for an application user:\n Query instances for themselves or a party they can represent (instance owner). Create an application instance. Upload form data and attachments. Download form data. Change process state (workflow). View status of an instance.  \rApp API\rThe default APIs exposed by apps in Altinn 3.\n\rAuthentication API\rDescription of how systems and service owners can use Maskinporten or ID-porten to access APIs in Altinn 3.\n\rEvents API\rThe Platform API to work with events\n\rModels\rThis is an overview over most models exposed by the different API. It does not explain every single property of all models, but will try to give a solid introduction to the important parts.\n\rScenarios\rDifferent API usage scenarios.\n\rStorage API\rDescription of the Altinn 3 APIs supported by the storage component in the Altinn 3 Platform.\n\rAltinn Studio Repository API\rThe OpenAPI (swagger) specification for the App source control API.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/api/models/app-metadata/",
	"title": "App metadata",
	"tags": ["api"],
	"description": "The application metadata document holds technical information about the app and the data type requirements.",
	"content": "Application The Application model is the main model for metadata for the application.\n   Name Description     id A gobally unique id for the application. The value has two parts separated by a \u0026lsquo;/\u0026rsquo; character. The first part is the short name of the application owner and the second part is the name of the app.   versionId The current version of the application. (Currently not in use.)   org The short name of the application owner.   title A collection of the application title in different languages.   validFrom The date and time from when the application can be used to create instances.   validTo The data and time for when the application will expire and can no longer be used to create new instances.   processId The id of the process model being used by the application. (Currently not in use.)   dataTypes A list of all the data types associated with the application. See DataType.   partyTypesAllowed A collection of flags that controls what type of instance owners new instances can be created for. See PartyTypesAllowed   autoDeleteOnProcessEnd A value indicating whether an instance will be automatically deleted once the process ends. This can be used by highly sensitive applications to force an instance delete instead of sending the instance to the archive.   presentationFields A collection of presentation fields. See PresentationField. Currently not in use.   dataFields A collection of data fields. See DataField.   eFormidling The configuration for the eFormidling integration for the application. See eFormidlingContract.   messageBoxConfig A collection of configurations related to the Altinn Message box    DataType Data type represents the requirements for data elements. Data types representing a form will have model validation in addition to the requirements defined here.\n   Name Description     id The id of the data type. Unique for the app.   description A collection of data type descriptions in different languages.   allowedContentTypes A list of Content-Types allowed by the data type.   allowedContributers A list of allowed contributors. This can be used to restrict who it is that can work with the data type.   appLogic A complex object with information on how a data type is connected to a model. See ApplicationLogic.   taskId A reference to a task from the application process. The value indicate that the data type requirements must be fulfilled before the process can move on from the given step in the process.   maxSize The maximum allowed size of the data element.   maxCount The maximum number of data elements of this type.   minCount The minimum required number of elements of this type.   grouping The name of a group. This can be used to logically associate a data type to a group. E.g Photos or a text resource key.    ApplicationLogic ApplicationLogic holds information about how a data type representing a form is connected to a model.\n   Name Description     autoCreate A value indicating whether a data element will be automatically created once an instance moves into the process step indicated by taskId.   classRef The name of the C# class used to represent the form as a model in application logic.   schemaRef A reference to the original schema used to define the model.    PartyTypesAllowed PartyTypesAllowed contains a set of values indicating the type of owners an instance can have.\n   Name Description     bankruptcyEstate A value indicating that the instance owner can be a bancruptcy estate.   organisation A value indicating that the instance owner can be any organisation.   person A value indicating that the instance owner can be a person.   subUnit A value indicating that the instance owner can be a sub unit.    PresentationField PresentationField represents a form field extraction rule. Every time a form is being saved the presentation field rules will be applied and any values from the form will be stored directly on the instance. This can later be used to present instance specific data in places like the portal message box. The purpose is to make it easier to identify a specific instance in a list with many almost identical instances.\n   Name Description     id An id or key to identify the specific rule.   path A path to a specific field or property in the form model.   dataTypeId The name of the datatype. See DataType.    DataField DataField represents a form field extraction rule. Every time a form is being saved the data field rules will be applied and any values from the form will be stored directly on the instance. While PresentationField will have logic applied to it with regards to where and how it\u0026rsquo;s used, the use of data fields is entirely up to the application developer and the application owner. One usage scenario is to provide data fields which can be used for routing to the correct backend system.\n   Name Description     id An id or key to identify the specific rule.   path A path to a specific field or property in the form model.   dataTypeId The name of the datatype. See DataType.    eFormidlingContract This type is used by a feature still in development.\neFormidlingContract holds the configuration of the eFormidling integration for the application. An application configured to enable eFormidling integration in combination with the eFormidiling contract will send a shipment to eFormidling for every instance that is created.\n   Name Description     serviceId The service identifier of the process   process The process type to be set on the shipment   receiver The receiver of the eFormidling shipment.   sendAfterTaskId The id of the last task to be completed before the shipment is sent   type The document type of the shipment e.g. arkivmelding   typeVersion The version of the document type   standard The document standard e.g. urn:no:difi:arkivmelding:xsd::arkivmelding   securityLevel The security level to be set on the standard business document   dataTypes A list of the dataTypes to be included in the shipment. Data type for both form data and attachments should be listed to be included in the shipment    messageBoxConfig MessageBoxConfig holds configurations related to the presentation of instances in the Altinn MessageBox.\n   Name Description     hideSettings The settings related to hiding an instance from the message box    hideSettings Only one of the two settings should be used at a time.\n   Name Description     hideAlways A boolean indicating that the instance should always be hidden   hideOnTask A list of tasks where the instance should be hidden from the message box    Complete example This is a complete app metadata document with data types.\n{ \u0026#34;id\u0026#34;: \u0026#34;ttd/bli-applikasjonseier\u0026#34;, \u0026#34;versionId\u0026#34;: null, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Bli applikasjonseier\u0026#34; }, \u0026#34;validFrom\u0026#34;: null, \u0026#34;validTo\u0026#34;: null, \u0026#34;processId\u0026#34;: null, \u0026#34;dataTypes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;Kursdomene_BliTjenesteeier_M_2020-05-25_5703_34553_SERES\u0026#34;, \u0026#34;description\u0026#34;: null, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/xml\u0026#34; ], \u0026#34;allowedContributers\u0026#34;: null, \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: true, \u0026#34;classRef\u0026#34;: \u0026#34;Altinn.App.Models.BliTjenesteeier_M\u0026#34;, \u0026#34;schemaRef\u0026#34;: null }, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxSize\u0026#34;: null, \u0026#34;maxCount\u0026#34;: 1, \u0026#34;minCount\u0026#34;: 1, \u0026#34;grouping\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;ref-data-as-pdf\u0026#34;, \u0026#34;description\u0026#34;: null, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/pdf\u0026#34; ], \u0026#34;allowedContributers\u0026#34;: null, \u0026#34;appLogic\u0026#34;: null, \u0026#34;taskId\u0026#34;: null, \u0026#34;maxSize\u0026#34;: null, \u0026#34;maxCount\u0026#34;: 0, \u0026#34;minCount\u0026#34;: 0, \u0026#34;grouping\u0026#34;: null } ], \u0026#34;partyTypesAllowed\u0026#34;: { \u0026#34;bankruptcyEstate\u0026#34;: true, \u0026#34;organisation\u0026#34;: true, \u0026#34;person\u0026#34;: true, \u0026#34;subUnit\u0026#34;: true }, \u0026#34;messageBoxConfig\u0026#34;:{ \u0026#34;hideSettings\u0026#34;:{ \u0026#34;hideOnTask\u0026#34;:[\u0026#34;Task_3\u0026#34;] } }, \u0026#34;autoDeleteOnProcessEnd\u0026#34;: false, \u0026#34;created\u0026#34;: \u0026#34;2020-07-17T08:26:21.5707559Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;sandgrainone\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-07-17T08:26:21.5708691Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;sandgrainone\u0026#34; } "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/",
	"title": "Changelog for app nuget packages",
	"tags": [],
	"description": "Overview of changes introduced into app nuget packages.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v6/\u0026quot;\u0026gt;v6\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v6 of the Altinn.App.* packages.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v5/\u0026quot;\u0026gt;v5\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v5 of the Altinn.App.* packages.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v4/\u0026quot;\u0026gt;v4\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v4 of the Altinn.App.* packages.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v3/\u0026quot;\u0026gt;v3\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v3 of the Altinn.App.* packages.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/older/\u0026quot;\u0026gt;Older\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced into app nuget packages up to (not including) major version 3.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/button/",
	"title": "Buttons and links",
	"tags": [],
	"description": "Main button (blue) is used to send the user to the next step.",
	"content": "Guidelines:  There should only be one main button per page. Secondary choices can be added as buttons styled as links. The text on the button should be clear. Usually \u0026ldquo;Next\u0026rdquo; works well, but the button can also be formulated as an answer to a question (example below). The last/submit page of the form should have a green \u0026ldquo;Submit Form\u0026rdquo; button.  Example of use: \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/",
	"title": "Contribute to the development of Altinn",
	"tags": [],
	"description": "Discover how to contribute to Altinn Studio and the rest of Altinn 3.",
	"content": "You can contribute to making Altinn as good as it can be by:\n Following Altinn Studio on Github You can follow the development in Github and tell us that issues are important to you by giving them a thumbs up (👍). If you have input on the issue we recommend that you add a comment. Report or fix bugs If you have fond a but that\u0026rsquo;s yet to be reported, we appreciate if you create an issue in Github. If you have fixed a bug, you can create a Pull Request. New component/functionality Are you in need of a new component or functionality while developing an app? If so, we appreciate that you tell us about your need, so that we can assess if the request matches the patterns of interaction we want to support. We\u0026rsquo;ll also assess if a new common component should be made, or if an existing component can get added functionality. Thus we appreciate if you start by proposing a new component so that we can decide who will develop the component.  \rPropose a new component\rIf you need a component or functionality we prefer that the need is registered as a feature request before development stars.\n\rDevelop a component\rWe\u0026#39;d love if you start developing functionality or new components that Altinn has approved. We do however appreciate if you plan your work together with us before starting.\n\rIntro for developers\rIntroduction\n\rDevelopment handbook\rDeveloper handbook for contributions to the Altinn code base.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/design/",
	"title": "Design and planning",
	"tags": [],
	"description": "To make the service as good as possible for the users, it is important to start by focusing on the users and understand their needs. Before you start developing, we recommend that you create a prototype and perform a user test.",
	"content": "The pages for design and planning is currently only available in norwegian.\n\rPreliminary considerations\rBefore you do anything else you should gather the project group and start by defining your problem. What is it that you are trying to solve and for whom?\n\rPrototype\rBy using Altinn\u0026#39;s Prototype-kit you can create a clickable prototype where you can design the flow and content for your service.\n\rUser testing\rIt is always a good idea to do user testing in multiple stages of a project. Through user testing you measure if your solution corresponds to the needs of the users. Doing this early in the project is a good investment, since you save time and money by avoiding developing a solution that doesn\u0026#39;t match what it was trying to solve.\n\rGuidelines\rWe want to achieve consistent user experiences across services created in Altinn. To achieve this, we ask you to use our guidelines in your app design. You are welcome to contribute to the further development of the guidelines.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/fields/",
	"title": "Fields",
	"tags": [],
	"description": "How to set up fields and grouping.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/ux/fields/grouping/\u0026quot;\u0026gt;Grouping of fields\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to group fields in a form.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/ux/fields/settings/\u0026quot;\u0026gt;Field settings\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Texts attached to a field.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/tone-of-voice/",
	"title": "Language",
	"tags": [],
	"description": "Guidelines should ensure common language and understandibility across services in Altinn.",
	"content": "Usually you should use guidelines from the norwegian language council (nb/nn) while writing. We have also defined some more specific rules for Altinn which we recommend following.\nWe encurage writing form content in both bokmål, nynorsk and english.\nGeneral recommendations  Write in a spoken and simple language Write directly to the user (use \u0026ldquo;you\u0026rdquo;) Explain the next step Write short, clearly and clickable Write skimmable texts Be specific about the content, but make sure to write it in a way so that everyone understands.  Avoid:  Long words Long sentences Cryptic or lyrical labels Multiple points in the same sentence Multiple points in the same paragraph CAPITALS (big letters)  Length of text:  Headlines/Labels: max. 8 words setninger: 15-20 words paragraps: 40-80 words  Write with purpose Formal language is often put together in a way where the statement (verb) comes at the end of the sentence. This means that the user has to read and remember many words before the actual content is reached. This demands more attention of the user, which has to process more information to read the sentence. The verb should be as early as possible in the sentence, and as close to the subject as possible.\nExample:\nThe employer has some duties that must be completed →\nThe employer must complete some duties\nAvoid verbal nouns Verbal nouns make the text unnecessary difficult to read. A verbal noun is a noun created from a verb, for example \u0026ldquo;to investigate\u0026rdquo; becomes \u0026ldquo;to do an investigation\u0026rdquo;, where investigation is the verbal noun. Most verbal nouns end with \u0026ldquo;-ion\u0026rdquo;.\nA text with many verbal nouns often becomes abstract because it removes itself from the actions they really describe. The text becomes more concrete when we use the verbs instead.\nExamples:\n New inquiry → Inquire Registration of error → Register error  Write activly, not passivly: In legal language it is often written that something has to be done and that it isn\u0026rsquo;t desired to say who should do it. In Altinn\u0026rsquo;s solutions there are often multiple people who have to do something, but we can directly address the user.\nExample:\nPreperations and planning activities must be done ahead of development of a service. →\nMake preperations and plan well before you start developing your service.\nSeperation of numbers Correct and consequent seperation of numbers assist the user in reading and seperating different types of numbers. None of the numbers should be seperated by a comma, only by spaces. In fields where the user will write longer numbers, it is usefull to indicate the number of digits.\n Organisation numbers are seperated in groups of 3: 123 456 789 Bank account numbers are seperated into 4, 2 and 5: 1234 56 78901 SSN should be divided into 6 and 5: 123456 78901 Mobile numbers should be divided into 3, 2 and 3: 987 65 432 Land lines and fax is divided into groups of 2: 98 76 54 32  Time and date  Time is only written with hours and minutes, never seconds. Time is written like this: 13:45 Dates should mainly be written like this: 05.06.2017 Sometimes dates can be written in text: 5. juni 2017  "
},
{
	"uri": "https://docs.altinn.studio/app/app-dev-course/modul1/",
	"title": "Module 1",
	"tags": ["apps", "training", "datamodel", "localtest", "texts"],
	"description": "Create app in Studio, set up local development environment and local test",
	"content": "In this module you will, based on the demands of the municipality of Sogndal, be setting up the first page of your application for newcomers and verify that everything looks as expected locally.\nTopics covered in this module:\n Create new application Add data model and connect fields Develop app in local developing environment Editing of text resources Test application in local developement environment (LocalTest)  Tasks \rVis/skjul innhold\r\rCreate new application\r\r\rCreate the application in Altinn Studio with the organization that you have access to as an owner. Alternatively, you can create the application with you as the owner, if you are not testing it in a test environment.\nRequirements from the municipality   The application must have a sensible name that makes it easy to find it again among the large number of repositories Sogndal keeps in Altinn Studio.\n  There are no preliminary plans for yearly revisions of the app, so the year does not need to be taken into account.\n  There is a wish that one or more of the words \u0026ldquo;newcomer\u0026rdquo; and \u0026ldquo;Sogndal\u0026rdquo; is included in the name.\nUseful documentation  Create app in Altinn Studio  \r\r \rVis/skjul innhold\r\rUpload data model\r\r\rThe muncipality of Sogndal has created a data model that represents data they wish to collect from future residents.\nAs an app developer you will in some cases have to create a data model for a service yourself. You will then be able to use the data modelling tool in Altinn Studio (launching Spring 2022), or use an existing data model as a starting point and edit it in for example Visual Studio or a text editing program of your own choosing.\n\r Download the xsd-file, open it in a text editing program and take a closer look at the contents. Upload the data model in Altinn Studio Push the changes to master and take a closer look at the files in the folder App/models  Comprehension check  Which data is it the service owner wishes to collect here? Which effect has \u0026lt;minOccurs\u0026gt; in the data model? You may notice that the field has a different value for Innflytter.Fornavn and Innflytter.Mellomnavn Which other properties is set on the field Innflytter.Mellomnavn? A .C#, .metadata.json and .schema.json file has been generated in addition to the .xsd file you uploaded. What is the correlation between these files? Some restrictions from the data model is not transferred to the C#-file, which ones? Some new properties has also been added, which ones?  Useful documentation  Upload data model in Altinn Studio Description of indicators in XSD  \r\r \rVis/skjul innhold\r\rEdit texts\r\r\rTo make the service user friendly and available to use for those with visual impairments, it is important that all components have descriptive titles and descriptions.\nIt is possible to connect texts to components in both Altinn Studio and locally.\nNOTE: Display name for the application must be changed in both App/config/applicationMetadata.json and in the text resources.\n\rRequirements from the municipality  All inputfields should have descriptive labels that clarifies what should be filled in. The application must be available in bokmål, nynorsk and english. In a first edition it is sufficient that only one of these languages is available. It is important that the display name of the application sounds good and is descriptive of the service.  Useful documentation  Edit application texts Formatting of texts ISO 639-1 standard  Comprehension check In Altinn we support three languages: bokmål, nynorsk and english.\n How do you get english language support in the application? If we one day were to support Ukrainian, which language code would you then need to annotate the file with? If a text key referred to in FormLayout.json does not exist in the text resources, what will appear on the screen?  \r\r \rVis/skjul innhold\r\rSet up components\r\r\rThe fields to be filled out on a form page can be created by using the \u0026ldquo;drag and drop\u0026rdquo; function in Altinn Studio or manually in the json-file that describes the appearance of a from page FormLayout.json.\nBased on the requirements from the municipality, can you now set up the first form page in Altinn Studio?\nRequirments from the municipality  Name and age of the person who is a newcomer  Firstname Middlename (optional) Lastname Age   Address of the person who is a newcomer  Street address Postal code Postal city   Contact information of the person who is a newcomer  Email Phone number    Useful documentation  How to build a form with UI editor in Altinn Studio Available components in Altinn Studio Guidelines for using components  Comprehension check In your application repository you will find FormLayout.json in the folder App/ui/layouts. The JSON file describes the form page you have created in Altinn Studio, given that you have pushed your changes to master.\n Can you locate the component connected to the email-field? What change is required in this file if the email-field is no longer required? By changing one line in FormLayout.json it is possible to change the component attached to the middle name to an input field for a long answer. What change is required?  \r\r \rVis/skjul innhold\r\rDownload application locally\r\r\rSome application features are not supported for development in Altinn Studio. These must be developed in a local development environment.\nThe development itself can be carried out in your preferred development tool, but if you need a recommendation Visual Studio Code is a good option.\nUseful documentation  How to clone an application to local development environment How to synchronize changes in local development environment  \r\r \rVis/skjul innhold\r\rRun application in LocalTest\r\r\rBy using a mock that can be spun up locally by Altinn Platform, it is possible to do simple testing and verification of the application in the local development environment.\nIn this task you will be able to run the application locally with support from LocalTest. When the app is running and you have logged in with a test user, you should have a result resembling this:\nMoving on you will want to test your changes continuously in LocalTest.\n In the event of changes related to formLayout and other json-files, a refresh (F5) in the browser is sufficient. In the event of changes in prefill, the application must be instantiated again. In the event of changes in cs-files, the application must be stopped and restarted. Alternatively, you may use the dotnet run watch when you start the application for hot reload.  \rUseful documentation  How to set up LocalTest Debugging of application Available test-users in LocalTest  \r\r Summary In this module you have created an application in Altinn Studio, uploaded a data model and set up a form page that connects components to some of the fields in the data model. Furthermore, you have cloned the repository locally to further develop the application in your local development environment.\nThe service should be able to run on your local computer with LocalTest and you should be able to fill in the fields.\nRemember to push your local changes to make them available in Altinn Studio when you are happy with them.\nSolution If you have not completed all the steps, we have an example of a solution that you can use as inspiration.\n"
},
{
	"uri": "https://docs.altinn.studio/app/app-dev-course/modul2/",
	"title": "Module 2",
	"tags": ["apps", "training", "prefill", "sporvalg"],
	"description": "Add more pages, dynamic tracks and prefill",
	"content": "In this module you will further develop the application you created in module 1 to fulfil more of the requirements from the municipality of Sogndal.\nThemes covered in this module:\n More pages Image component Dynamic tracks Prefill  Tasks \rVis/skjul innhold\r\rAdd Info Page\r\r\rFor forms were a lot of information is given or collected, the user experience will improve if the application is divided in several pages.\nLet\u0026rsquo;s take a closer look at how you can create a new page in the application that is displayed before the user enters the first data collecting page from module 1.\nTo edit different form pages in Altinn Studio you will need to:\n Log into Altinn Studio Find your application on the dashboard and press Rediger app Navigate to the Lage tab opener To the right you will find the area for administration of form pages  Creating and administrating several pages can easily be done in Altinn Studio, but if you prefer to do this manually the documentation may come in handy.\n\rThe only thing left now is to familiarize yourself with the municipality\u0026rsquo;s requirements for the info page and get started with the development. Good luck!\nRequirements from the municipality Considering that quite a large amount of data is being collected in this service, it is important for the municipality of Sogndal that it is clear who this form is meant for and what the data collected will be used to. Someone in the municipality has created a sketch of the informationpage.\nThe following is desirable to be similar in the application:\n Placing of pictures Text size Formating of text  Sketch of information page\nUseful docmentation  Formatting of texts Add pictures to the application Set components side by side File setup with multiple pages Administrate order of muntliple pages  Comprehension check  Which file in the application repository has to be adjusted if you wish to manually change the page order of existing pages? If you wish to rename a page, but Altinn Studio is not available, which files will need to be updated? How can you get a text to break if the text string is not long enough to break naturally?  \r\r \rVis/skjul innhold\r\rAlternate workflow\r\r\rIn many cases, it is not relevant to answer all questions in a form, maybe because the answer is obvious or because it is not relevant based on an answer provided earlier in the form. In that case, dynamic tracks could be a good solution.\nBy using dynamic tracks you will be able to control which parts of the application that will be visible for the user.\nIn this task you will set up dynamic tracks in the application based on the requirements from the municipality of Sogndal.\nRequirements from the municipality A user who does not meet the requirements for the form should be stopped as early as possible in the workflow.\nOn the information page, the user should be able to state whether the form applies to them or not.\nHow this is done is optional, and the field Innflytter.KanBrukeSkjema in the datamodel is possible to use for this purpose.\nBased on the answer, the user will be sent to either Track 1 or Track 2_.\nTrack 1   The user has stated that the form does not apply to them\n  The user should then be sent to a page with the following text:\nThis form is not for you.\rFor information about other offers in the municipality click here.\r  Line 2 in the text should be a link directing to: https://www.sogndal.kommune.no/\n  It should not be possible to navigate to other pages of the form from this one.\n  Track 2   The user has confirmed that the form does apply to them.\n  The user is sent to the data collecting pages.\n  Useful documentation  How to set up dynamic tracks Formatting of texts  Comprehension check  If a user goes back and changes their answer on the info page, will they then be displayed the data collecting pages? If not, what changes can you introduce to support this in your application? If dynamic tracks is implemented further into the workflow and a user changes a choice, what will happen with the form data that was filled out prior to this, if the page is now hidden from the user?  \r\r \rVis/skjul innhold\r\rPrefill of personal information\r\r\rOne of the benefits of Altinn is that you already have metadata containing information about both people and businesses available. By using prefill you can access data about the user and present this in an app, so that they will not have to fill out these fields. Typical prefill values are: name, address, email, etc.\nIf the data is available in one of Altinn\u0026rsquo;s prefill sources, this can be configured towards a field in the data model and be automatically populated once the form is created. If there are other uses for prefill, this can be solved using code in the application.\nIn this task, the focus has returned to the first data collecting page, and the goal is to prefill personal information about the user to save the user some time.\nRequirements from the municipality   The following values should be prefilled for the user:\n First name: Innflytter.fornavn Middle name: Innflytter.Mellomnavn Last name: Innflytter.Etternavn Email: Innflytter.Kontaktinformasjon.Epost Phone number: Innflytter.Kontaktinformasjon.Telefonnummer Age: Innflytter.Alder    It should not be possible to change prefilled name and age\n  It should be possible to change prefilled email and phone number\n  Useful documentation  Available prefill sources Prefill from national register and user profile Custom prefill Description of the InstanceOwner object  Help with code: Calculating age from social security number private static int CalculateAge(string sosialSecNumber) { int MAX_D_NUMBER = 71; int MIN_D_NUMBER = 41; int MAX_TEST_NUMBER = 92; int MIN_TEST_NUMBER = 81; int START_D_NUMBER = 40; int START_TEST_NUMBER = 80; string stringDay = sosialSecNumber.Substring(0, 2); string stringMonth = sosialSecNumber.Substring(2, 2); string stringYear = sosialSecNumber.Substring(4, 2); string stringIndivid = sosialSecNumber.Substring(6, 3); int day = int.Parse(stringDay); int month = int.Parse(stringMonth); int year = int.Parse(stringYear); int individ = int.Parse(stringIndivid); // Get day if D-number  if (MAX_D_NUMBER \u0026gt;= day \u0026amp;\u0026amp; MIN_D_NUMBER \u0026lt;= day) { day -= START_D_NUMBER; } // Get month if TestUser-number  if (MAX_TEST_NUMBER \u0026gt;= month \u0026amp;\u0026amp; MIN_TEST_NUMBER \u0026lt;= month) { month -= START_TEST_NUMBER; } // find century  if (year \u0026gt; 54 \u0026amp;\u0026amp; (individ \u0026gt;= 500 \u0026amp;\u0026amp; individ \u0026lt; 750)) { // 1855-1899  year += 1800; } else if (year \u0026gt; 39 \u0026amp;\u0026amp; (individ \u0026gt;= 900 \u0026amp;\u0026amp; individ \u0026lt; 1000)) { // 1940-1999  year += 1900; } else if (year \u0026lt; 40 \u0026amp;\u0026amp; (individ \u0026gt;= 500 \u0026amp;\u0026amp; individ \u0026lt; 1000)) { // 2000-2039  year += 2000; } else { year += 1900; } // calculate age  int age = DateTime.Now.Year - year; if (DateTime.Now.Month \u0026lt; month) { age -= 1; } else if (DateTime.Now.Month == month) { if (DateTime.Now.Day \u0026lt; day) { age -= 1; } } return age; } Comprehension check  Is it possible to change a prefilled value once it is set? How can you prevent a user from changing a prefilled value? Not all norwegian citizens have a social security number, some get assigned a D-number. How will you have to adjust your code to take this into account if for example age is based on a F-number or D-number that the user themselves enter?  \r\r Summary In this module you have expanded your application with more functionality in the sense of adding more pages, configuring dynamic tracks to control user flow and setting up prefill of fields both with available data sources in Altinn and custom code.\nThe service should run on your local computer with local test and you should be able to test both user flows and confirm that the right fields are prefilled.\nRemember to push your local changes, so that they are available in Altinn Studio when you\u0026rsquo;re happy with them\nSolution If you did not manage to complete all the steps, we have an example of a solution that you can use as inspiration.\n"
},
{
	"uri": "https://docs.altinn.studio/app/app-dev-course/modul3/",
	"title": "Module 3",
	"tags": ["apps", "training", "build", "deploy", "test"],
	"description": "Build and deploy application to test environment",
	"content": "This module requires that you are part of an organization with an enabled test environment for Altinn Apps. If this is not the case, move on to the next module.\r\rIn this module you are going to build and deploy the application to Altinns test environment (TT02) and verify that everything works as expected.\nTopics covered in this module:\n Set custom requirements for resource use Building application Deploying application  Tasks \rVis/skjul innhold\r\rSet custom requirements for resource use\r\r\rAll applications come with a standard setup for resource use and scaling in the application cluster. This setup can be overridden if your application has different needs.\n You can change the number of replicas (instances of the application running at once) You can change the rules for how early or late the application should scale the number of instances based on CPU or memory usage You can change how much resources are to be dedicated to the application\u0026rsquo;s instances in the cluster.  By overriding these values, smaller applications may save costs, and for bigger applications make sure they have optimal performance with all necessary resources available.\nFor this test application, we want you to scale down resource usage to a minimum.\nScaling: replicaCount: 1\nResource use: Set requests to cpu: 50m and memory: 128Mi\nAll changes related to scaling and resource use are made in the deployment/values.yaml file\n\rUseful documentation  Set custom rules for scaling Set custom limits for resource use  \r\r \rVis/skjul innhold\r\rBuild application\r\r\rWhen you refer to building an application in Altinn Studio, this means creating a version of the current state of the application that can be deployed to one or more environments.\nCreate a new build for the application with version number 0.0.1 and add a descriptive comment of what the version includes.\nUseful documentation  Build app in Altinn Studio  \r\r \rVis/skjul innhold\r\rDeploy application\r\r\rBy deploying an application to a test environment you will be able to test all integrations. In addition to this, TT02 is often used to verify an application is behaving as expected before deploying to production.\nTo be able to deploy an application to TT02, the organization that owns the application has to have an app cluster in the test environment. In addition to this, the developer deploying the application needs the role Deploy-TT02 for the organization in Altinn Studio.\n\rDeploy your application to TT02 and test the different tracks and for pages to confirm that the behaviour is as expected.\nUseful documentation  Deploy app to test environment Access control for the organization in Altinn Studio  Comprehension check  Is it possible to have two versions of one application in TT02 at the same time? What happens if you deploy the same version of the application to the environment once more? Will the application be available immediately after deployment? Is it possible to remove an application from the environment after deployment?  \r\r \rVis/skjul innhold\r\rTest the application in TT02\r\r\rAt the deployment page you will find the direct link to your application. It is in the format {org}.apps.tt02.altinn.no/{org}/{app}\nUnless you\u0026rsquo;re already logged in with a user, this link will bring you to Altinn\u0026rsquo;s login page. Your organization should have access to a set of test users, use one of these to log in.\nFor internal resources in DigDir: Use one of the test users you can find in the test data set and log in.\n\r\r Summary In this module you have built and deployed your application to TT02, logged into Altinn with a test user and testet your application.\nSolution If you did not manage to complete all the steps, we have an example of a solution that you can use as inspiration.\n"
},
{
	"uri": "https://docs.altinn.studio/app/app-dev-course/modul4/",
	"title": "Module 4",
	"tags": ["apps", "training", "options", "code lists", "dynamics"],
	"description": "Add code lists manually, progmatic and dynamically",
	"content": "In this module you\u0026rsquo;re expanding the application you made in the previous modules to support even more of the requirements of the municipality of Sogndal.\nTopics covered in this module:\n Code lists/Options Dynamic  Tasks \rVis/skjul innhold\r\rCollecting work information\r\r\rIn many applications there is a need to provide the user with a set of response options for a data field. The answer options are referred to as code lists or options.\nIn Altinn Studio this is supported in the form of radio buttons, checkboxes and dropdown lists.\nThere are three ways to set up code lists in Altinn today\n  Directly on the component through Altinn Studio or manually in FormLayout.json*\n  In a static json-file referred to in the component\n  Programmatic in the application logic\n* only available on radio buttons and check boxes\n  \rIn this task, you will get to try out all three ways to set up a code list.\nThe municipality of Sogndal wishes to collect information on the newcomers working situation. Some of the data they wish to collect is which sector and industry the newcomer works in, and how many years the newcomer has been active in the workforce.\nIn Altinn Studio   Create a new form page to collect data about working conditions\n  Set up a radio button component for Sector. Create the answer options Offentlig and private manually.\n  Set up a check box component for Industry. Choose Kodeliste as method for adding checkboxes and add Kodeliste ID industry\nThe rest of the setup for this component is done locally\n  Set up a dropdown list for Years in work force Add Kodeliste ID years-in-work-force\nThe rest of the setup for this component is done locally\n  Commit and Push your changes to master, and Pull the changes to your local development environment.\n  In Local Development environment   The municipality of Sogndal has created a code list for industries. Download the file and place it correctly in the repository.\n  Set up the values in the code list for Years in work force directly in the application logic.\nAnswer options:\n   Label Data value     0 - 5 years 0-5   5 - 10 years 5-10   10 - 20 years 10-20   20+ years 20+      Verify that all code lists works as expected.\n  Useful documentation  How to set up static code lists How to set up dynamic code lists Secured dynamic options  Comprehension check  What is the difference between static and dynamic options? What will the area of use be for secured dynamic options?  \r\r \rVis/skjul innhold\r\rDifferentiated data base for public and private sector\r\r\rIn some cases the values displayed in a code list may be attached to a different field in the form.\nThe municipality of Sogndal wishes that the list of industries to choose from is personalised to what sector you work in.\nRead through the requirements from the municipality to see if you can help them.\nRequirements from the municipality We want the user to be presented with a different set of options for the industry choice based on which sector they are in.\n Private sector: Standard list of industries Public sector: State and Muncipality  Useful documentation  How to pass query parameters when fetching options  Comprehension check  If a list of options is set up with mapping towards the data model - what happens when the field in question changes value? What happens with the chosen value on a field connected to an option-list that is retrieved over again from the server side?  \r\r \rVis/skjul innhold\r\rtailored offer for IT-competence\r\r\rRequirements from the municipality If the user chooses IKT (data/it) under industry, a text with a link to our overview of vacant positions should appear.\n  Below the industry choice, the following text should appear\nWe see that you have the competence we need in Sogndal.\rHere is an overview of vacant positions.\r  Line 2 in the text should be a link that directs to: https://sogndal.easycruit.com/index.html\n  The text and link should only be visible if the user has chosen IKT (data/it). In all other cases this will be hidden.\nUseful documentation  Add functions for dynamics Exanples of use of dynamic in form  Comprehension check  If you add a new function to RuleHandlerHelper - where will these functions run?  Would dynamic work without this defined?   What is the correlation between functions defined in RuleHandlerObject and the file RuleConfiguration.json?  \r\r Summary In this module you have set up a dropdown list, radio buttons and checkboxes and added values for these components manually, programmatically and dynamically.\nThe service should run on your local computer with local test and you should be able to validate that the components present expected data values.\nRemember to push your local changes, so that they are available in Altinn Studio when you\u0026rsquo;re happy with them\nSolution If you did not manage to complete all the steps, we have an example of a solution that you can use as inspiration.\n"
},
{
	"uri": "https://docs.altinn.studio/app/app-dev-course/modul5/",
	"title": "Module 5",
	"tags": ["apps", "training", "process", "policy", "autorisasjon", "confirmation", "bekreftelsessteg", "validering"],
	"description": "Legge til bekreftelsessteg",
	"content": "In this module you are adding a process step in the application.\nTopics covered in this module:\n Process Confirmation step Authorization rules Validation Overrule standard texts  Tasks \rVis/skjul innhold\r\rExpand process with a confirmation step\r\r\rAn Altinn App has a process flow that describes the different steps in the flow. The standard flow for a newly created application consists of one task; one fill out step.\nYour task is to expand the standard process flow with a confirmation step as illustrated below.\n!Updated process flow illsutrated\nStandard process flow is available on GitHub. Can you find the one that matches the flow we wish to achieve here?\nIf you want an extra challenge, you can edit the process flow manually or in a BPMN editor, and rather use the template on process flow with data and confirmation step as a solution.\n\rRequirements from the municipality At this point in the workflow, the user should be able to:\n View an overview of the data entered Exit the workflow without submitting the form Exit the workflow and submit the form  Useful documentation  Available process steps in an Altinn app How to change the process flow of an application Online BMPN editor BPMN standard  Comprehension check  Which Altinn-specific traits are on every process task? Which limitations would an external BPMN editor have when editing the process description of an Altinn app? Is it possible for the process flow to go both ways? From filling in to confirmation and from confirmation to filling in?  \r\r \rVis/skjul innhold\r\rAdding authorization rules for confirmation step\r\r\rYour application\u0026rsquo;s Policy file is adapted to a standard process flow. Update the policy file so that it\u0026rsquo;s authorization rules cover the new process step.\nRequirements from the muncipality  The same role requirements should apply to both fill out and confirm an instance.  Useful documentation  Rule library All roles in Altinn  Comprehension check  What will happen when the process flow proceeds to the confirmation step without the authorization rules being updated? What happens if you don\u0026rsquo;t specify which roles are allowed to perform an action in an authorization rule?  \r\r \rVis/skjul innhold\r\rValidation of submitter\r\r\rRequirements from the municipality  It should only be possible for the user who owns the instance to submit the form, even if others may hold the necessary roles.  Useful documentation  Custom validation  Comprehension check  Which change would you suggest for the client to be able to meet this requirement without adding custom validation at this step?  \r\r \rVis/skjul innhold\r\rOverrule standard texts for confirmation page\r\r\rRequirements from the municipality The user should be presented with the following text before submitting the form.\nYou are now ready to submit a notification of moving to Sogndal.\rBy submitting this form you consent to the data you have entered being saved and used for customizing the municipality's offers to you during the next 18 months.\rBefore you submit we recommend looking over your answers. You cannot change the answers after submitting them..\rUseful documentation  Customization of the confirmation page  \r\r Summary In this module you have expanded the application with a confirmation step, customized the view and implemented validation and authorization rules attached to the process step.\nThe service should be able to run on your local computer with local test and you should be able to test the new process step and confirm that the view is as desired.\nRemember to push your local changes, so that they are available in Altinn Studio when you\u0026rsquo;re happy with them\nSolution If you did not manage to complete all the steps, we have an example of a solution that you can use as inspiration.\n"
},
{
	"uri": "https://docs.altinn.studio/app/app-dev-course/modul6/",
	"title": "Module 6",
	"tags": ["apps", "training", "repeating groups", "validation", "data processing", "consume API"],
	"description": "Expansion of form with repeating group",
	"content": "In this module you will expand the application you have built in the previous modules to support more of the functionality that the municipality of Sogndal wishes to implement.\nTopics covered in this module\n Repeating groups Validation Data processing  Tasks \rVis/skjul innhold\r\rRepeating groups\r\r\rRequirements from the muncipality To be able to tailor the best possible offers to newcomers we wish to obtain an overview of former residences of the newcomer.\nOn the data page there should be an option to enter previous residences. Previous residences should contain the following fields:\n Street address Postal code Postal city  It should be possible to enter up to 10 former residences.\nUseful documentation  Setup of field grouping Setup of repeating groups  Comprehension check  What field in the data model decides if an element is repeating? How many repetitions are allowed for the field TidligereBosteder?  \r\r \rVis/skjul innhold\r\rValdiation\r\r\rRequirements from the muncipality Due to a personal vendetta among one of the employees in the municipality of Sogndal, a user who enters the postal code 4619 as a previous residence should NOT be allowed to move to Sogndal. In this case, an error message should appear at the field in question with the following text:\nYou are not welcome to our municipality. Sorry!\rUseful documentation  Server-side validation How to implement custom validation Single field validations  Comprehension check  When are validations server-side running? Why should validations added on the client side also be duplicated server-side?  \r\r \rVis/skjul innhold\r\rData processing\r\r\rRequirements from the municipality One of the data processors of Sogndal is sick of manually correcting a street address that often is being incorrectly entered by newcomers. Therefore, we wish to programmatic correct this while the user is filling out the app.\nIf the user enters Sesame Street 1 in the field Innflytter.Adresse.Gateadresse, this should automatically be corrected to Sesamsgate 1. In all other cases, the field should remain the same.\nUseful documentation  Data processing Calculation  Comprehension check  When is data processing running? What seperates ProcessDataWrite and ProcessDataRead? What is the difference between DataProcessing and Calculations?  \r\r Summary In this module you have had a look at repeating groups and how this is configured as a part of the user interface. We have also had a look at how to set up custom validations in the backend for cases that will not be defined as a part of restrictions in the data model. Lastly, we have looked at how to set up data processing that enables manipulation of data runtime.\nSolution If you did not manage to complete all the steps, we have an example of a solution that you can use as inspiration.\n"
},
{
	"uri": "https://docs.altinn.studio/app/app-dev-course/modul7/",
	"title": "Module 7",
	"tags": ["apps", "training"],
	"description": "Standalone extensions of the app",
	"content": "NOTE! This module is still under development. Come back later and it will probably be even better!\r\rIn this module there are a collection of standalone extensions of the application. They do not require being solved in order.\nTopics covered in this module:\n Summary page Statless application Variables in text Use of external API Configuration of message box Presentation texts  Tasks \rVis/skjul innhold\r\rSummary page\r\r\rRequirements from the muncipality The municipality of Sogndal are experiencing an issue where some submissions contain incorrect information and typos that create unnecessary work for the caseworkers. To avoid people submitting incorrect information, the municipality wishes that the user is presented with a summary page displaying the filled out information.\nThe muncipality of Sogndal wants to use the categories Personalia for the users personal information and Work for the users work history.\nUseful documentation  How to set up summary view of filled out form Categories in summary  Comprehension check  Why should the summary page be ignore in the PDF generation?  \r\r \rVis/skjul innhold\r\rStateless frontpage\r\r\rRequirements from the muncipality The municipality of Sogndal has discovered that there is a lot of traffic from people who do not meet the requirements of the application. For each of these users an instance is created and saved to the database. This creates unnecessary expenses.\nTherefore, Sogndal wants the information page to be shown as a \u0026ldquo;stateless\u0026rdquo; part of the application, and that you from here can choose to create an instance if you meet the requirements.\nUseful documentation  Introduction to stateless applications Configuring stateless applications Starting instance from stateless form  Comprehension check  What data is saved for stateless applications?  \r\r \rVis/skjul innhold\r\rVariables in text\r\r\rRequirements from the muncipality IT competence is highly sought out. In module 4 we set up a tailored offer for those with IT competence.\nThe municipality of Sogndal has had a look t the numbers and seen that this is generating insufficient trafikk to the job postings. To try to improve this, we want the offer to be even more tailored.\nWe want the original text:\nWe see that you have competence we need in Sogndal.\rHere is an overview of our vacant positions.\rto now include a personal touch with the users name. The text we now want displayed is:\nHi, {submitters name}! We see that you have competence we need in Sogndal.\rHere is an overview of our vacant positions.\rThe last line of the text should still be a link to the vacant positions.\nUseful documentation  Variables in texts  Comprehension check  What is displayed as part of the text about the relevant variable, but has now value in the data model?  \r\r \rVis/skjul innhold\r\rExternal API\r\r\rIn some cases, you will have to use external API\u0026rsquo;s to cover all the needs of an application. This could be to populate dropdown lists or to present data to the user based on the information they have provided.\nIn this task you will implement a client that integrates with Bring\u0026rsquo;s APIs to populate the address the user submits with a postal city based on the postal code.\nThe API that will be used is an overview of postal codes made available by Bring. Feel free to test it in your browser with different postal codes.\nGET\rhttps://fraktguide.bring.no/fraktguide/api/postalCode.json?country=no\u0026amp;pnr={postnummer}\rRequirements from the municipality  Address info should be collected through standard-input components, not through Altinn\u0026rsquo;s address component Postal city should be prefilled for the user when the postal code has been submitted Postal city should be unmutable. The number of calls to Bring\u0026rsquo;s API should be limited to maximum of once a day per postal code  Useful documentation Consumpion of external API\nComprehension check  How many times maximum will you make an API call in 24 hours with a memorycache if the application is running with three replicas?  \r\r \rVis/skjul innhold\r\rShow and hide elements in message box\r\r\rRequirements from the muncipality Useful documentation Comprhension check \r\r \rVis/skjul innhold\r\rPresentation Texts\r\r\rRequirements from the muncipality Useful documentation Comprhension check \r\r \rVis/skjul innhold\r\rEvents\r\r\rRequirements from the muncipality Useful documentation Comprhension check \r\r "
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/pages/tracks/",
	"title": "Tracks",
	"tags": [],
	"description": "How to add dynamic tracks in the app.",
	"content": "Dynamic tracks in an application can be useful if you want to show and/or hide some pages based on input from user on previous parts of the form.\nTrigger calculation on tracks from frontend The app will perform an initial call to calculate the order when loading. To trigger calculation of dynamic tracks when switching pages, this needs to be added as a trigger on the navigation component you want. This is done by adding calculatePageOrder ad a part of triggers. Example:\n{ \u0026#34;id\u0026#34;: \u0026#34;navigation-button\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;NavigationButtons\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;next\u0026#34;: \u0026#34;Neste\u0026#34;, \u0026#34;back\u0026#34;: \u0026#34;Tilbake\u0026#34; }, \u0026#34;triggers\u0026#34;: [\u0026#34;calculatePageOrder\u0026#34;], \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;showBackButton\u0026#34;: true } Here, the frontend will make the call to the api defined in the app and use the list returned to determine which page it will go to when the user presses next. This order will also be stored in the state frontend, so that navigating will work both backwards and forwards on the given order returned from the backend.\nIf you wish to trigger calculation on every single page switch, this can be done by either entering calculatePageOrder as part of triggers for all the navigation components in the application, or by adding a trigger in Settings.json under the pages section. Example:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/layout/layoutSettings.schema.v1.json\u0026#34;, \u0026#34;pages\u0026#34;: { \u0026#34;order\u0026#34;: [ \u0026#34;Side1\u0026#34;, \u0026#34;Side2\u0026#34;, \u0026#34;Side3\u0026#34; ], \u0026#34;triggers\u0026#34;: [\u0026#34;calculatePageOrder\u0026#34;] } } If triggers is set on the navigation component, this will overrule triggers set in Settings.json, and by doing this it is possible to control default behaviour on component level if desirable.\nSetting up dynamic tracks backend (nuget version \u0026gt; 5.0.0) To overrule default dynamic tracks, two changes must be made.\n Create a class implementing the interface IPageOrder Register this class as a Transient in Startup.cs  Create separate class for controlling dynamic tracks Create a new class in your application, e.g. under the folder App/logic/Pages (the folder is not created by default). This class must implement the interface IPageOrder. The interface contains a method with the name GetPageOrder. The expected output from this is a sorted list with the names of the relevant pages in the application.\nusing System; using System.Collections.Generic; using System.Threading.Tasks; using Altinn.App.Models; using Altinn.App.Services.Interface; using Altinn.App.PlatformServices.Models; namespace Altinn.App.AppLogic.Pages { public class CustomOrder : IPageOrder { /// \u0026lt;inheritdoc /\u0026gt;  public async Task\u0026lt;List\u0026lt;string\u0026gt;\u0026gt; GetPageOrder(AppIdentifier appIdentifier, InstanceIdentifier instanceIdentifier, string layoutSetId, string currentPage, string dataTypeId, object formData) { List\u0026lt;string\u0026gt; pageOrder = new List\u0026lt;string\u0026gt;(); // Implement your logic here.  return await Task.FromResult(pageOrder); } } } The function provides a number of parameters that can be useful if you are using form data or other information about the user to trigger the dynamic tracks.\n  appIdentifier Contains organization and app name for the application\n  instanceIdentifier Contains InstanceOwnerPartyId and InstanceGuid. If the application is stateless the object will be blank (InstanceIdentifier.NoInstance). If GetInstanceId is called on an InstanceIdentifier.NoInstance, an exception will be thrown.\n  layoutSetId If your app defines multiple layout sets, the id on the layout set in question will be submitted. If the application does not have a layout set, this string will be empty. Based on this parameter the default page order defined in the application can be retrieved.\n  List\u0026lt;string\u0026gt; pageOrder = new List\u0026lt;string\u0026gt;(); if (string.IsNullOrEmpty(layoutSetId)) { pageOrder = _appResourcesService.GetLayoutSettings().Pages.Order; } else { pageOrder = _appResourcesService.GetLayoutSettingsForSet(layoutSetId).Pages.Order; } This prequires that the service IAppResources is made available in the class. When the service is already available through dependency injected into the class, only two steps are required:\n Create a private variable in the state of the class  private readonly IAppResources _appResourcesService; Define a constructor that takes in IAppResources and initializes the private variable that was created in step 1.  public CustomOrder(IAppResources appResourcesService) { _appResourcesService = appResourcesService; }   CurrentPage The page you want to navigate from will be specified in this parameter.\n  FormData contains the form data. This can easily be worked with as an object by casting it to the right type Skjema skjema = (Skjema)formdata;. Here, the C# model\u0026rsquo;s name is Skjema, but for your application the name could be different. You can check this by finding the class name of the C# file in the App/models folder.\n  Reflect dynamic tracks in receipt (PDF) As an app developer you must make sure to reflect the dynamic track choices made in the PDF that is created at the end of each task. In App.cs the function FormatPdf can be found:\npublic override async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { return await _pdfHandler.FormatPdf(layoutSettings, data); } As input to the method you have layoutSettings which contains the default page order under the property layoutSettings.Pages.Order. In addition, you have the form data that is associated with the step to be completed. This can be parsed to a C# model as described further up on this page.\nBy manipulating layoutSettings.Pages.Order in this method, it will be possible to duplicate the dynamic track choices made for the user. NOTE! The call to PDF handler, as shown below, must not be removed from the FormatPDF method, if you have implemented additional logic for the receipt in PDFHandler.cs.\nreturn await _pdfHandler.FormatPdf(layoutSettings, data); To avoid duplicating logic, we recommend creating a method that manipulates the page order based on form data and calling this both from FormatPdf and GetPageOrder. A code example of such an implementation follows. This can, for example, be placed in the same class that implements the interface IPageOrder to keep all logic for order in the same place.\nIn the class implementing logic for page order:\npublic async Task\u0026lt;List\u0026lt;string\u0026gt;\u0026gt; GetPageOrder(AppIdentifier appIdentifier, InstanceIdentifier instanceIdentifier, string layoutSetId, string currentPage, string dataTypeId, object formData) { List\u0026lt;string\u0026gt; pageOrder = new List\u0026lt;string\u0026gt;(); if (string.IsNullOrEmpty(layoutSetId)) { pageOrder = _appResourcesService.GetLayoutSettings().Pages.Order; } else { pageOrder = _appResourcesService.GetLayoutSettingsForSet(layoutSetId).Pages.Order; } UpdatePageOrder(pageOrder, (FavorittArtist)formData); return pageOrder; } public void UpdatePageOrder(List\u0026lt;string\u0026gt; pageOrder, FavorittArtist formdata) { if (formdata.EnGodNrTo.Contains(\u0026#34;Tix\u0026#34;)) { pageOrder.Remove(\u0026#34;Prince\u0026#34;); } else { pageOrder.Remove(\u0026#34;Tix\u0026#34;); } } The method is then called from the method FormatPdf in App.cs\npublic override async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { UpdatePageOrder(layoutSettings.Pages.Order, (FavorittArtist)data); return await _pdfHandler.FormatPdf(layoutSettings, data); } "
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/",
	"title": "App User Interface",
	"tags": [],
	"description": "Configuring components, layouts, pages, grid, etc.",
	"content": "\rComponents\r\n\rPages\rHow to set up an app with multiple pages, tracks, summary or multiple layouts.\n\rFields\rHow to set up fields and grouping.\n\rStyling\rHow to control the styling, formatting and grid layout of an app.\n\rImages\rHow to add and edit image references.\n\rTexts\rHow to edit and format texts, use variables and add help texts.\n\rPDF\rHow to configure the generation of PDF.\n\rWidgets\rHow to use compound components (widgets).\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/wcag/",
	"title": "Accessibility",
	"tags": [],
	"description": "Good accessibility helps people with disabilities access our services in a meaningful way. By using Altinn 3 large parts of your service is handled by us, but you still have to remember some things yourself.",
	"content": "The regulation on universal design of ICT solutions require that websites and apps must meet 35 of 61 success criteria in the standard Guidelines for accessible web content (WCAG) 2.0. (nb). Check out the minimum requirements\nCheck list   Content structure\nCheck that you have a logical structure of headings (H1 - H4), and that you don\u0026rsquo;t have any empty heading elements. It is not uncommon to forget a level. \u0026ldquo;Wave\u0026rdquo; might be a usefull tool to discover errors in the content structure. Wave is an extension for Chrome which can be used to evaluate the accessibility of a website. Download Wave for Chrome\n  Explanations and helper texts\nCheck that links, labels and buttons have explanatory texts. Make an evaluation of what explanations and helper texts have to be connected to the input element.\n  Button vs link\nIt is important to be conscious of using buttons and links, since screen readers can struggle with interpreting their functionality.\n  Error messages\nYou are responsible for correct error messages being created for the form fields.\n  NB: When creating solutions for your internal service, where Altinn\u0026rsquo;s user interface is hidden from the user, you have to make sure that you follow all WCAG-demands.\n\r\rHow to test accessibility It\u0026rsquo;s important that you test that your services are accessible to everyone. This will help not just your service, but can also highlight mistakes or oversights made by us. Here are some tools that can be used for simple testing of accessibility.\nKeyboard navigation check that all buttons and input fields can be reached by keyboard navigation (tab, arrowkeys, esc, etc.)\nScreen reader Go through your service while using a screen reader as a helping device. This way you can ensure that everything is read out correctly and that the texts are sufficiently descriptive.\n  Mac: VoiceOver is preinstalled on apples mobiles and PCs. VoiceOver User walkthrough\n  Windows: NVDA Screenreader is a free screen reader tool made by NV Access. About NVDA Screenreader\n  Contrast The following colour combinations that are used in Altinn fulfill the accessibility demands for contrast within small text. AA is the minimum requirement, while AAA is recommended, especially for body text\n\rAA\rAAA\rAAA\r\rAA\rAA\r\rAAA\r\rAA\rAAA\rAAA\r\rAAA\r\rAA\r\rAA\rAAA\r\rAA\rAA\rAAA\rAAA\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/",
	"title": "Changelog",
	"tags": [],
	"description": "Overview of changes introduced into Altinn 3.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-frontend/\u0026quot;\u0026gt;Changelog for app frontend\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced into app frontend.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/\u0026quot;\u0026gt;Changelog for app nuget packages\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced into app nuget packages.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/deployment/\u0026quot;\u0026gt;Changelog for deployment\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced into helm-chart for deployment.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/storage-interfaces/\u0026quot;\u0026gt;Storage Interface changelog\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced to the Altinn.Platform.Storage.Interface NuGet package.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/",
	"title": "Community",
	"tags": [],
	"description": "Building Altinn together, in the open.",
	"content": "\rAbout Altinn 3\rAltinn 3 is the third generation platform for developing and hosting digital services.\n\rContribute to the development of Altinn\rDiscover how to contribute to Altinn Studio and the rest of Altinn 3.\n\rChangelog\rOverview of changes introduced into Altinn 3.\n\rRoadmap for Altinn\rHigh level roadmap and functional description for Altinn.\n\rDevOps\rHow we do DevOps.\n\rPresentations and Altinn Coffee\rThe Altinn-kaffe meeting series is a low threshold meeting series, where app owners (and potential app owners) can learn more about what we\u0026#39;re doing in Altinn 3. It\u0026#39;s also designed to gather information on how Altinn can help app owners realise their Altinn 3 potential. Slides mainly in Norwegian.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/",
	"title": "Guidelines",
	"tags": [],
	"description": "We want to achieve consistent user experiences across services created in Altinn. To achieve this, we ask you to use our guidelines in your app design. You are welcome to contribute to the further development of the guidelines.",
	"content": "We want to achieve consistent user experiences across services created in Altinn. To achieve this, we ask you to use our guidelines in your app design. You are welcome to contribute to the further development of the guidelines.\n\rConsistency across services\rTo simplify usage and avoid confusion, interaction patterns should be shared accross services.\n\rContent in the form\rExplain what is needed to fill the form correctly to the user and divide the content into multiple steps.\n\rDesign principles\rWhen developing or improving existing products we follow a set of principles to ensure usability and accessibility for all. We recommend following these principles when developing new services.\n\rEntering the form\rTo make the user experience as best as possible you should think about how you link between your agency and the Altinn-app.\n\rUI-components\rThe different components have been made to fit together as a larger whole. This makes it important to follow the guidelines for how they should be used to achieve a consistent and recognizable appearance. UI components that are currently included in Altinn\u0026#39;s library are found below.\n\rLanguage\rGuidelines should ensure common language and understandibility across services in Altinn.\n\rAccessibility\rGood accessibility helps people with disabilities access our services in a meaningful way. By using Altinn 3 large parts of your service is handled by us, but you still have to remember some things yourself.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/input/",
	"title": "Input",
	"tags": [],
	"description": "Input fields are used when the user is submitting text or a number.",
	"content": "Normal input field Guidelines:  An inputfield should always have a related label with explanatory text. Evaluate if further explanation and helper texts should be connected to the element. Two input fields can be placed beside each other if they are somehow connected, see the example below. Deactivated fields should be avoided. If a field cannot be edited, the information should instead be presented as text.  Example of usage: \rWidth of an input field The width of an input field should reflect what is expected as input from the user. We currently have three standard sizes that should reflect most scenarios and cover different screen-sizes. Read more about how to change the sizes here.\nSmall inputs The smaller inputs are more fitting for collecting information like phone number, postage number and year.\n\u0026#34;grid\u0026#34;: { \u0026#34;xs\u0026#34;: 12, \u0026#34;innergrid\u0026#34;: { \u0026#34;xs\u0026#34;:5, \u0026#34;sm\u0026#34;:3, \u0026#34;md\u0026#34;:2 } } Medium input Can be used for collecting information like municipality or country\n\u0026#34;grid\u0026#34;: { \u0026#34;xs\u0026#34;: 12, \u0026#34;innergrid\u0026#34;: { \u0026#34;xs\u0026#34;:8, \u0026#34;sm\u0026#34;:6, \u0026#34;md\u0026#34;:6 } } Long input Can be used for collecting information like name, e-mail address or a URL\n\u0026#34;grid\u0026#34;: { \u0026#34;xs\u0026#34;: 12, \u0026#34;innergrid\u0026#34;: { \u0026#34;sm\u0026#34;:10 } }  Large textfields Large text fields are used when the user has to fill in a longer explanation. Large text fields follow the same guidelines as input fields.\nExample of usage: \r Adress For addresses, there is a rigid setup where the post number and postage place is on the same line, below the address input line. Postage place is filled automatically based on post-number-input.\nExample of usage: \r"
},
{
	"uri": "https://docs.altinn.studio/app/development/logic/",
	"title": "Logic",
	"tags": [],
	"description": "How to add, change and configure application logic such as validation, calculation, dynamics and more",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/logic/generic/\u0026quot;\u0026gt;Generic\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of logic files and how they can be used.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/logic/calculation/\u0026quot;\u0026gt;Calculations\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to add calculations?\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/logic/dataprocessing/\u0026quot;\u0026gt;Data processing\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to add Calculations and other data processing?\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/logic/dynamic/\u0026quot;\u0026gt;Dynamics\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to add dynamics?\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/logic/instantiation/\u0026quot;\u0026gt;Instantiation\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to add logic to be run when a new instance is created?\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/logic/services/\u0026quot;\u0026gt;Services\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to use a few different services hidden away in the app template library.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/logic/validation/\u0026quot;\u0026gt;Validation\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to add logic to validate form data?\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/api/apps/metadata/",
	"title": "App metadata",
	"tags": ["api"],
	"description": "The app API to get metadata information for the app.",
	"content": "Overview The endpoints documented here are all for accessing metadata on the app itself and the data types that are allowed in an instance of the app. Additional endpoints provides access to text resources.\nGet app metadata Endpoint for downloading a copy of the application metadata document.\nGET {basePath}/api/v1/applicationmetadata Get Application texts Get text resources for the application for a specific language code. If the requested language isn\u0026rsquo;t available, norsk bokmål (nb) will be returned as default. The langaugeCode URL path element should follow the ISO 639-1 standard\nGET {basePath}/api/v1/texts/{languageCode} Note that the texts are cached in Platform Storage for 60 minutes before being retrieved from the database again.\nGet model JSON schema Download the JSON schema for a specific model. The id parameter must have the name of a JSON Schema in the app. This is usually a generated name based on values in the original XSD uploaded on the app. E.g: Kursdomene_BliTjenesteeier_M_2020-05-25_5703_34553_SERES\nGET {basePath}/api/jsonschema/{id} "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/propose-component/",
	"title": "Propose a new component",
	"tags": [],
	"description": "If you need a component or functionality we prefer that the need is registered as a feature request before development stars.",
	"content": "Create a Feature request in Github\nDescribe the component, why it will be useful and when it is needed. Review of the suggestion\nAltinn will review your suggestion to make sure that a new component fits our criteria. After the review, Altinn will tell you what we\u0026rsquo;ve decided and what we recommend. Plan the development\nA member of our team will contact you so that we can find out together who will take care of developing the component.  Criteria When a suggestion is reviewed we mainly focus on what the actual need is and what the component is meant to solve. Is a new component needed, or do we have existing functionality that can be changed or expanded?\nIf a new component is the ideal solution, we want to make sure it has sufficient quality by making sure it fits these criteria:\n Useful - The suggestion should fit user needs, be understandable, recognisable and and not error-prone. Accessible - The suggestion should comply with the WCAG 2.1 standard. Consequent - The suggestion should reuse existing styles and components in the design system when relevant. Users shouldn\u0026rsquo;t have to worry that words, situations and actions has different meanings in different situations. Versatile - A new component should be designed in a way that makes it usable in similar scenarios and apps.  \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/react/",
	"title": "React",
	"tags": ["development", "react"],
	"description": "Guidelines for using React in Altinn Studio",
	"content": "React React is a library for developing component based applications. It is done by having declared html as xml in javascript code, and that is again transpiled into vanilla javascript for the browser to render into a page.\nGet started by looking at the Getting started docs or trying the tutorial.\nImportant concepts The 2 most important concepts when working with React components are state and props.\nState is a collection of properties, controlled by the component, that say what the current state of the component is - this can be used to determine how the component should be rendered.\nProps is a collection of properties that are passed to the component as input. They can also be used to determine how the component should render.\nAny time the state or props of a component is updated, the component re-renders.\nClass components Class components are React components defined as classes. We used class components when we started building Altinn Studio, and most of the components for the Altinn Studio applications are still class components.\n// Example component import * as React from React export interface IExampleComponentProps { id: string; title: string; } export interface IExampleComponentState { value: string; } export class ExampleComponent extends React.Component\u0026lt;IExampleComponentProps, IExampleComponentState\u0026gt; { public onChange = (event: any) =\u0026gt; { setState(event.target.value); } public render( \u0026lt;div id={this.props.id}\u0026gt; \u0026lt;label htmlFor={`input-${this.props.id}`}\u0026gt;{this.props.title}\u0026lt;/label\u0026gt; \u0026lt;input id={`input-${this.props.id}`} value={this.state.value} onChange={this.onChange} /\u0026gt; \u0026lt;/div\u0026gt; ); } Read more about class components here.\nWhen writing a new component, or refactoring an existing class component, use hooks where possible.\nFunctional components - React hooks Hooks are new in React 16.8, and allow us to use state directly in functional components - components that are defined as functions. Using functional components with hooks results in cleaner, shorter code. Most of the components for the Altinn Apps applications are functional components using hooks.\n// Example component import * as React from React export interface IExampleComponentProps { id: string; title: string; } export function ExampleComponent(props: IExampleComponentProps) : JSX.Element { const [value, setValue] = React.useState\u0026lt;string\u0026gt;(\u0026#39;\u0026#39;); const onChange = (event: any) =\u0026gt; { setValue(event.target.value); } return( \u0026lt;div id={props.id}\u0026gt; \u0026lt;label htmlFor={`input-${props.id}`}\u0026gt;{props.title}\u0026lt;/label\u0026gt; \u0026lt;input id={`input-${props.id}`} value={value} onChange={onChange} /\u0026gt; \u0026lt;/div\u0026gt; ); } Read more about React hooks here\nLinks  Documentation for react components  "
},
{
	"uri": "https://docs.altinn.studio/app/app-dev-course/losningsforslag/",
	"title": "Solution",
	"tags": ["apps", "training", "solution", "losningsforslag"],
	"description": "Solution and explanation on comprenhension checks",
	"content": "Solution - Application code  Module 1 Module 2 Module 3 Module 4 Module 5 Module 6  Module 1 - Comprhension check: Upload data model Which data is it the service owner wishes to collect here? The data model consists of one main element: innflytter (newcomer). This element consists of some subelements like Fornavn, Etternavn and Mellomnavn. Additionally there are some complex elements such as Adresse, Kontaktinformasjon and Arbeidsinformasjon.\nWhich effect has \u0026lt;minOccurs\u0026gt; in the data model? You may notice that the field has different value for Innflytter.Fornavn and Innflytter.Mellomnavn minOccurs_ says something about how many times times the object must at least be mentioned.\nminOccurs = 0 means that the field is not required, minOccurs=1 means that you expect the field to appear at least once in the model.\nWhich other properties is set on the field Innflytter.Mellomnavn? nillable=trueis defined on the mellomnavn-field. This means that null is a legal value for middle name.\nA .C#, .metadata.json and .schema.json file has been generated in addition to the .xsd file you uploaded. What is the correlation between these files? The mentioned files are all generated from the xsd-description of the data model. They describe all the data and the data field\u0026rsquo;s properties. All properties are not necessarily transferred to all the files, but the sum of them should cover what is described in the xsd-file.\n The C#-model is used by app backend to deserialize the data and make it available for processing and validation. .metadata.json is used in Altinn Studio to easily connect components and dynamics to the data fields. The .schema.json file is used by altinn-app-frontend for form validation on the client side.  Some restrictions from the data model is not transferred to the C#-file, which ones? Some new properties has also been added, which ones?  minOccurs, maxOccurs are not transferred to the model. nillable is only transferred on some types e.g. decimal. XmlElement.Order is introduced as a decoration on each property.  This ensures that the order of the elements will stay the same when the data is serialized to xml.    Module 1 - Comprehension check: Set up components Can you locate the component connected to the email-field? There are several ways to locate a field in FormLayout.json. The fastest way is often to search the name of the field that the component is attached to. You can find this under dataModelBindings.\nWhat change is required in this file if the email-field is no longer required? To make a field optional you can change \u0026ldquo;required=true\u0026rdquo; to \u0026ldquo;required=false\u0026rdquo;\nBy changing one line in FormLayout.json it is possible to change the component attached to middle name to an input field for a long answer. What change is required? The solution is to change the type field from Input to TextArea as shown below\n{ \u0026#34;id\u0026#34;: \u0026#34;mellomnavn\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TextArea\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;innflytter.mellomnavn\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;Innflytter.Mellomnavn\u0026#34; }, \u0026#34;required\u0026#34;: true, \u0026#34;readOnly\u0026#34;: false }, Module 1 - Comprehension check: Edit texts How do you implement english language support in the application? _resources.nb.json will be autogenerated in all new repositories in the folder config/texts. To support english in an application, the file resources.en.json must be created. Note that the language property at the top of the file must be set to en.\n{ \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34; \u0026#34;reources\u0026#34;: [] } If we one day were to support ukrainian, which language code would you then need to annotate the file with? According to the list of ISO 639-1 codes, the code for ukranian is uk.\nIf a text key referred to in FormLayout.json does not exist in the text resources, what will appear on the screen? If said text key does not exist inthe text resource file, the text key will be displayed instead.\nModule 2 - Comprehension check: Add info page Which file in the application repository has to be adjusted if you wish to manually change the page order of existing pages? In App/ui/Settings.json you can find the page order.\nTo adjust the page order, the list under pages.order must be changed to represent desired order.\nIf you wish to rename a page, but Altinn Studio is not available, which files will need to be updated?  Settings.json: change the name of the page under pages.order App/ui/layouts: change the file name of the page that you\u0026rsquo;re changing the name of  How can you get a text to break if the text string is not long enough to break naturally? All text resources support markdown and thus html-notation, so by using \u0026lt;br\u0026gt; you will be able to force text breaks.\nModule 2 - Comprehension check: Alternative workflow If a user goes back and changes their answer on the info page, will they then be displayed the data collecting pages? If not, what changes can you introduce to support this in your application? In App/logic/App.cs you can find the method GetPageOrder. This is called on from the frontend when you leave a component that has configured \u0026quot;triggers\u0026quot;: [\u0026quot;calculatePageOrder\u0026quot;] in the layout file.\nTake a look at the solution for this module to see how this is done. Files of interest are App/ui/layouts/info.json and App/logic/App.cs.\nIf dynamic tracks is implemented further into the workflow and a user changes a choice, what will happen with the form data that was filled out prior to this, if the page is now hidden from the user? If you have implemented this type of logic in an application where you can continue to submitting for multiple tracks, the data on the page(s) that are now hidden for the user should be nulled.\nModule 2 - Comprehension check: Prefill of personal information Is it possible to change a prefilled value once it is set? Yes, if you don\u0026rsquo;t make any changes a standard component wih prefilled data will be editable.\nHow can you prevent a user from changing a prefilled value? The component can be set to readonly. Alternatively you can run validations of the data server side to verify that the data in the field matches the data from the prefill page. This can be done in the process- or validation logic of the application.\nNot all norwegian citizens have a social security number, some get assigned a D-number. How will you have to adjust your code to take this into account if for example age is based on a F-number or D-number that the user themselves enter? A D-number is eleven digit, like normal social security numbers, and consists of a modified six digit birthdate and a five digit personal number. The birth date is modified by adding 4 to the first digit: a person born january 1st 1980 will then get the birth date 410180, while one born january 31st 1980 will get 710180.\rOne way to go from any f- or d-number to a string for birth date on the format dd-MM-yy is:\npublic static string GetDOB(string fOrDNumber){ List\u0026lt;string\u0026gt; firstCharsInDNumber = new(){\u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34; }; var fOrDNumberArray = fOrDNumber.ToCharArray(); char[] dobArray = new char[6]; Array.Copy(fOrDNumberArray, dobArray, 6); char firstChar = dobArray[0]; int firstInt = 0; if(firstCharsInDNumber.Contains(firstChar.ToString())) { firstInt = firstChar - 4; dobArray[0] = (char)firstInt; } string dobString = $\u0026#34;{dobArray[0]}{dobArray[1]}.{dobArray[2]}{dobArray[3]}.{dobArray[4]}{dobArray[5]}\u0026#34;; // verify that it is a valid date  DateTime.ParseExact(dobString, \u0026#34;dd.MM.yy\u0026#34;, CultureInfo.InvariantCulture); return dobString; } Modue 3 - Comprehension check: Deploy application Is it possible to have two versions of one application in TT02 at the same time? No, it is only possible to have one version of the application out in the environment at once. If you deploy a different version, the existing version of the application will be overwritten.\nWhat happens if you deploy the same version of the application to the environment once more? All operations connected to deploy will run again. Resource texts and other metadata are savedin Altinn Platform, and deploy pipeline to toll out the application to the cluster will also run.\nHowever, no new pods will be spun up in connection to this since there are now real changes on the service running in the environment.\nWill the application be available immediatly after deployment? Yes, the service will be immediately available after deployment. If the status is green in Altinn Studio you will be able to run the application.\nIs it possible to remove an application from the environment after deployment? As of March 2022 it is not possible for a service owner to remove an application from an environment themselves once it has been deployed. The service owner would have to contact support. By the end of the year a function where the service owner themselves can do this will be made available.\nModule 4 - Comprhension check: Collection of work information What is the difference between static and dynamic options? Static options are defined build time and will, as the name suggests, be static during their lifetime. Dynamic options are collected runtime and can therefore get a value based on the time of the day or other dynamic values.\nWhat will the area of use be for secured dynamic options? Options are by default openly available and the API will be reachable for those who are not logged in to the app. There are also no restrictions on roles or anything else. In some cases you might want to expose options that are sensitive. This is where safe dynamic options come in, where you get automatic verification that the person making the call has Instance.Read rights.\nModule 4 - Comprehension check: Differentiated data base for public and private sector If a list of options is set up with mapping towards the data model - what happens when the field in question changes value? If a field in the mapping is updated, the app-frontend will make another call to retrieve the options lsit. This opens up for the possibility to dynamically show options that are tailored to the user\u0026rsquo;s previously submitted data.\nWhat happens with the chosen value on a field connected to an option-list that is retrieved over again from the server side? If the user e.g. has chosen a muncipality from a dropdown list containing muncipalities set up with mapping on Fylke, then returns and changes the field Fylke, the answer in the muncipality list will be remowed.\nModule 4 - Comprehension check: Tailored offer for IT competence If you add a new function to RuleHandlerHelper - where will these functions run? Would dynamic work without this defined? Functions defined in RuleHandlerHelper.js run as support functions when you set up the dynamic in Altinn Studio. Dynamics can be set up without these defined and will still work if you have configured the functions in RuleHandlerObject.js and the definitions are in RuleConfiguration.json.\nIf you were to add a new function to RuleHandlerHelper.js - where will these functions run? Would dynamic work without this defined? Functions defined in RuleHandlerObject.js are actually dynamic uploaded by app-frontend and runs as part om the application flow for the user. Dynmaics will not work without this defined.\nWhat is the correlation between functions defined in RuleHandlerObject and the file RuleConfiguration.json? RuleConfiguration.json is a configuration that says something about which fields the actual rule in RuleHandlerObject should be used on and possibly which effect it should have. A function defined in RuleHandlerObject can be set up multiple times in RuleConfiguration.json. You can almost think of it as \u0026ldquo;instances\u0026rdquo; of the function.\nModule 5 - Comprhension check: Expand process with confirmation step Which Altinn-specific traits are on every process task? altinn:tasktype is defined for each task.\nWhich limitations would an external BPMN editor have when editing the process description of an Altinn app? Altinn-specific traits would probably not be imported or exported when working on the model.\nIs it possible for the process flow to go both ways? From filling in to confirmation and from confirmation to filling in? SequenceFlow in the bpmn-file only describes the flow going one way, from filling out to confirmation. Therefore the flow cannot go both ways.\nModule 5 - Comprehension check: Add authorization rules for confirmation step What will happen when the process flow proceeds to the confirmation step without the authorization rules being updated? The application will display \u0026ldquo;Unknown error\u0026rdquo; when the usr presses the Submit button.\nWhat happens if you don\u0026rsquo;t specify which roles are allowed to perform an action in an authorization rule? Then all users, with or without roles, will be allowed to perform the confirm operation for the application.\nModule 5 - Comprhension check: Validation of submitter Which change would you suggest for the client to be able to meet this requirement without adding custom validation at this step? By rather changing policy so that only the role PRIV, which is only delegated by a private person on behalf of themselves, has the permission to perform the action confirm, the authorization rules will do the check, which currently is set up as custom validation, automatically.\nModule 6 - Comprehension check: Repeating groups What field in the data model decides if an element is repeating? The field maxOccurs in the xsd-model says something about wether a field is repetitive. If maxOccurs \u0026gt; 1\nHow many repetitions are allowed for the field TidligereBosteder? 10 repetitions are allowed for TidligereBosteder.\nModule 6 - Comprehension check: Validation When are validations server-side running? Validations on the server side are run as standard only when the user chooses to move on from a step. This behaviour can be overrun, and it is possible to trigger validations both on single fields and e.g. when switching between different pages.\nWhy should validations added on the client side also be duplicated server-side? Client-side validations should be considered as an aid for better user experience and not as a guarantee that data is delivered in the correct format. People who don\u0026rsquo;t mean well can get past these validations, and client-side validations will not be run if, for exapmle, you use the APIs directly. Therefore, validations placed on the front-end should always be reflected in the back-end logic.\nModule 6 - Comprehension check: Data processing When is data processing running? Data processing is run every time the user either reads or writes data. That is, every time the user changes a given field, the logic will run. This therefore requires that the app developer optimizes the code that is executed and avoid heavy and complex operations on each calculation.\nWhat seperates ProcessDataWrite and ProcessDataRead? ProcessDataWrite is run once the user writes data, i.e. when the user has filled in a field or updates an existing value. ProcessDataRead is run once the user reads data from the data base, e.g. when navigating to a previous instance of the application and retrieving previously filled in data.\nWhat is the difference between DataProcessing and Calculations? DataProcessing and calculations are two different names to the same concept. In the nuget-packets pre 4.7.0, this went under the name calculations or kalkuleringer, while it is now reffered to as DataProcessing.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/styling/",
	"title": "Styling",
	"tags": [],
	"description": "How to control the styling, formatting and grid layout of an app.",
	"content": "This is new functionality. Setup must be done manually for now. Support for setup through Altinn Studio will be launched shortly.\nNOTE: to use this functionality you need app-frontend version 3. See this link for changes that is required in the app.\n\rComponents placed side by side (grid) It is possible to place components side by side in a form. This functionality is based on the grid system from Material-UI, and is similar to the grid system from bootstrap. The grid system is based on a construction of containers in 12 parts, where you can assign children (items) of a grid-container a given part of this width. Material-UI also offers the ability to dynamically change how much of the screen you want to occupy based on which screen size the user is on. The following sizes with breakpoints are defined:\n xs: 0px sm: 600px md: 1024px lg: 1440px xl: 1920px  To place components side by side horizontally, small changes must be done in formlayout. A seperate property grid has been defined, where you can fill in desired width on the different sizes. Here is an example where two input fields has been set to cover half the screen (some props are removed for readability):\n{ { \u0026#34;id\u0026#34;: \u0026#34;input-felt-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, ... \u0026#34;grid\u0026#34;: { \u0026#34;xs\u0026#34;: 6, } }, { \u0026#34;id\u0026#34;: \u0026#34;input-felt-2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, ... \u0026#34;grid\u0026#34;: { \u0026#34;xs\u0026#34;: 6 } } } For the components above, the size has been set to 6 (half width) for the size xs. Since: xs is the smallest size available, this will apply from size xs and up, i.e. from xs to xl. The setup above will give the following result:\nSince there are 12 sections available on the page width, it is up to the app developer to assign how large of a share a component should have. If you want a component to take up 2/12, and another 6/12 and the last one 4/12, then this is possible. It is important to consider the user experience when performing these changes, and before you place components side by side you should think it through. Components with longer texts and descriptions quickly become small and unclear if these are placed side by side. If you are to use longer texts and descriptions it is recommended that these occupy the full width of the form.\nIf you in the example above wanted the components to take up the whole width of the screen, until the screen passed 960px in size, you could set up the following layout:\n{ { \u0026#34;id\u0026#34;: \u0026#34;input-felt-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, ... \u0026#34;grid\u0026#34;: { \u0026#34;xs\u0026#34;: 12, \u0026#34;sm\u0026#34;: 12, \u0026#34;md\u0026#34;: 6 } }, { \u0026#34;id\u0026#34;: \u0026#34;input-felt-2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, ... \u0026#34;grid\u0026#34;: { \u0026#34;xs\u0026#34;: 12, \u0026#34;sm\u0026#34;: 12, \u0026#34;md\u0026#34;: 6 } } } Then, the components would not be be placed side by side unless the user is using a screen of 960px or more.\ninnerGrid og labelGrid In addition to setting the width of the grid in the component, we also have added the opportunity to control innerGrid and labelGrid. This gives you the opportunity to control the width of label and input in the same way. This is typically used when you want to make an input field smaller (to give a visual indication that a small answer is expected), or if you want to display label and input on the same line (like in a table.)\nYou can think of the component in this manner:\n\u0026lt;Grid id=\u0026#34;grid\u0026#34;\u0026gt; \u0026lt;Grid id=\u0026#34;labelGrid\u0026#34;\u0026gt; Komponentens tekster \u0026lt;/Grid\u0026gt; \u0026lt;Grid id=\u0026#34;innerGrid\u0026#34;\u0026gt; Komponentens input \u0026lt;/Grid\u0026gt; \u0026lt;/Grid\u0026gt; Here, you will have the opportunity to control the width of both the outer grid and the inner grid. Example:\n{ { \u0026#34;id\u0026#34;: \u0026#34;input-felt-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, ... \u0026#34;grid\u0026#34;: { \u0026#34;xs\u0026#34;: 12, \u0026#34;innerGrid\u0026#34;: { \u0026#34;xs\u0026#34;: 6 } } } } Here, it has been set that the component grid shall occupy the whole width, while limiting the component\u0026rsquo;s input to only occupy half the width. Innergrid can be controlled for these components:\n Input TextArea FileUpload Dropdown Datepicker  The example above will give the following output:\nA tableview with labels placed to the side will appear if you set labelGrid and innerGrid so that the sum equals 12 (or less). This may be wise if you have a long list of related questions. It is often wise to not use such a layout on the smallest screens, so feel free to use md.\n{ { \u0026#34;id\u0026#34;: \u0026#34;input-felt-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, ... \u0026#34;grid\u0026#34;: { \u0026#34;labelGrid\u0026#34;: { \u0026#34;md\u0026#34;: 8 }, \u0026#34;innerGrid\u0026#34;: { \u0026#34;md\u0026#34;: 4 } } } } This will look something like this:\nFormatting numbers Support has now been implemented to be able to specify formatting of numbers in input fields. This is done by adding a property formatting to the input component. Formatting options are documented in a JSON-schema, and will appear automatically in intellisense when editing the component in e.g. VSCode.\nThe example below will result in an input field for numbers, where the number will be formatted with , between each thousand, and $ in front of the number.\nThe formatting is for frontend display only, and the numbers added to an input field with formatting will be saved unformatted.\r\r{ \u0026#34;id\u0026#34;: \u0026#34;numberComponent\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;number\u0026#34;, }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;someNumberField\u0026#34; }, \u0026#34;required\u0026#34;: true, \u0026#34;readOnly\u0026#34;: false, \u0026#34;formatting\u0026#34;: { \u0026#34;number\u0026#34;: { \u0026#34;thousandSeparator\u0026#34;: \u0026#34;,\u0026#34;, \u0026#34;prefix\u0026#34;: \u0026#34;$\u0026#34; }  } }, Aligning text in input fields When a schema contains a list of numbers that are automatically summarized, it is common to align text to the right, like when summarizing on paper and how Excel shows numbers. This can be done by setting \u0026quot;align\u0026quot;: \u0026quot;right\u0026quot; under formatting on the input componenten. Other valid values are \u0026quot;center\u0026quot; and \u0026quot;left\u0026quot;.\n{ \u0026#34;id\u0026#34;: \u0026#34;numberComponent\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, ... \u0026#34;formatting\u0026#34;: { \u0026#34;number\u0026#34;: { \u0026#34;thousandSeparator\u0026#34;: \u0026#34; \u0026#34;, \u0026#34;prefix\u0026#34;: \u0026#34;kr \u0026#34; }, \u0026#34;align\u0026#34;:\u0026#34;right\u0026#34;  } },"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/pages/summary/",
	"title": "Summary view",
	"tags": [],
	"description": "How to set up the display of a summary of the completed form.",
	"content": "This is new functionality. Setup must be done manually as of today. Support for setup through Altinn Studio will be available at a later point in time.\rNOTE: The PDF generation, as of today, does not support the summary component. For PDF generating to work, either all the summary components or the whole summary-page(s) must be excluded from PDF. This is done in the Settings.json-file attached to the layout-files.\n\rSetup Display of summary is set up in the same manner as the other form components in a form. You can choose to have the summary on it\u0026rsquo;s own page, or on the same page as other form components.\nThe summary component is very simple, and refers to the component that is to be summarized and the page this is on. Example:\n{ \u0026#34;id\u0026#34;: \u0026#34;summary-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;\u0026lt;komponent-id\u0026gt;\u0026#34;,  \u0026#34;pageRef\u0026#34;: \u0026#34;\u0026lt;side komponenten er definert på\u0026gt;\u0026#34; }, The component displays a summary of data from the specified component. In addition, the user gets the opportunity to return to the relevant component/page to make changes.\nThe display differs depending on which form component the summary refers to.\nNote: PDF-generating does not support a summary page, so it has to be excluded by changing ui/Settings.json\n\u0026#34;pages\u0026#34;: { \u0026#34;excludeFromPdf\u0026#34;: [ \u0026#34;name-of-summary-page\u0026#34; ] } Simple form component These are components that are only connected to one field in the data model. E.g. Input, Dropdown, Checkbox/Radio, etc.\nThe summary displays the prompt for the form component and attached data. If there is an active error message attached to the form component, this will also be displayed.\nAddress component This component includes multiple fields. The display is the same as that of a simple form component, so the fields are merged into a simple text.\nFile attachments The summary display for file attachments displays a list of the attachments that are uploaded for the component in question.\nRepeating groups Nested groups Summary is also supported for nested repeating groups. We only support one level of nested groups. In this case, the summary of each element of the group at the top level is displayed as its own category, and the group at the lowest level is displayed in the same manner as a normal repeating group.\nTo support summary display of nested groups, the following setup must be done in the layout-file:\n Refer to the main group in componentRef in the summary component Set \u0026quot;largeGroup\u0026quot;: true on the summary component  Example With the following setup of a nested group in layout:\n{ \u0026#34;id\u0026#34;: \u0026#34;main-group\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Hovedgruppe\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;group\u0026#34;: \u0026#34;model.mainGroup\u0026#34; }, \u0026#34;children\u0026#34;: [ \u0026#34;nested-group-1\u0026#34; ], ... // remaining setup of component }, { \u0026#34;id\u0026#34;: \u0026#34;nested-group-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Undergruppe\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;group\u0026#34;: \u0026#34;model.mainGroup.subGroup\u0026#34; }, \u0026#34;children\u0026#34;: [ \u0026#34;input-field-1\u0026#34; ], ... // remaining setup of component }, { \u0026#34;id\u0026#34;: \u0026#34;input-field-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Skriv inn noe her\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;group\u0026#34;: \u0026#34;model.mainGroup.subGroup.field1\u0026#34; }, ... // remaining setup of component } Set up the summary in the following manner:\n{ \u0026#34;id\u0026#34;: \u0026#34;summary-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;main-group\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;FormLayout\u0026#34;, \u0026#34;largeGroup\u0026#34;: true, } Categories It is possible to group the summaries in different categories to make a summary page more clear. This is done by using the existing group component, without setting it up as a repeating group.\nThe fields in the summary are then displayed with a title, which is set in the title field for textResourceBindings for the group component. See the example below.\n{ \u0026#34;id\u0026#34;: \u0026#34;personalia-group\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Personalia\u0026#34; }, \u0026#34;children\u0026#34;: [ \u0026#34;summary-1\u0026#34;, \u0026#34;summary-2\u0026#34;, \u0026#34;summary-3\u0026#34; ] }, { \u0026#34;id\u0026#34;: \u0026#34;summary-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;d566c79c-3e3e-445b-be25-a404508f6607\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;personalia\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;summary-2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;22a60bf0-d5b7-4b45-9ac9-c266b6ad3716\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;personalia\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;summary-3\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;d497737b-67b2-4e03-87a9-43f58579c938\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;personalia\u0026#34; }, Example on summary page Below is an example of a summary page, with setup in the layout file. Since the summary is set up in the layout files in the same way as other components, you can also include other form components as texts when needed.\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/layout/layout.schema.v1.json\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;send-in-text\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Paragraph\u0026#34;, \u0026#34;componentType\u0026#34;: 1, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;finish\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;personalia-group\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Personalia\u0026#34; }, \u0026#34;children\u0026#34;: [ \u0026#34;summary-1\u0026#34;, \u0026#34;summary-2\u0026#34;, \u0026#34;summary-3\u0026#34; ] }, { \u0026#34;id\u0026#34;: \u0026#34;summary-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;d566c79c-3e3e-445b-be25-a404508f6607\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;personalia\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;summary-2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;22a60bf0-d5b7-4b45-9ac9-c266b6ad3716\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;personalia\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;summary-3\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;d497737b-67b2-4e03-87a9-43f58579c938\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;personalia\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;drugs-group\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Rus- og dopingmidler\u0026#34; }, \u0026#34;children\u0026#34;: [ \u0026#34;summary-4\u0026#34;, \u0026#34;summary-5\u0026#34;, \u0026#34;summary-6\u0026#34;, \u0026#34;summary-7\u0026#34; ] }, { \u0026#34;id\u0026#34;: \u0026#34;summary-4\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;064c0033-8996-4825-85fc-2a19fe654400\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;drugs\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;summary-5\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;7f22e523-3f6d-4371-a5dd-233dc41af824\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;drugs\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;summary-6\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;18a7c709-ae2f-48b3-b6f6-bd631f5d8d56\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;drugs\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;summary-7\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;b7417cf9-f806-4835-a3d1-424c8d094d5f\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;drugs\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;summary-group-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;arbeidserfaring-group\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;work\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;summary-8\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Summary\u0026#34;, \u0026#34;componentRef\u0026#34;: \u0026#34;25f720db-5784-4c95-a530-43f0bf523466\u0026#34;, \u0026#34;pageRef\u0026#34;: \u0026#34;attachment\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;312afa87-c2a9-4ef1-a681-26cc47462878\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Button\u0026#34;, \u0026#34;componentType\u0026#34;: 9, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Send inn\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;textResourceId\u0026#34;: \u0026#34;Standard.Button.Button\u0026#34;, \u0026#34;customType\u0026#34;: \u0026#34;Standard\u0026#34; } ] } } "
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "Configuring different aspects of an app.",
	"content": "\rMessageBox\rConfiguring different aspects of the presentation of application instances in the Altinn Message Box.\n\rAuthorization\rHow to define authorization rules (access management) for an app.\n\rParty types\rHow to ensure that only specific types of party types can use an app.\n\rData fields on instance object\rConfiguration of data fields for app.\n\rDefine application process\rHow to define the process of an app.\n\rQuery parameters\rAvailable query parameters for an app.\n\rSecrets\rHow to deal with secrets and sensitive data in an app.\n\reFormidling\rHow to configure integration with eFormidling for an app.\n\rEvents\rHow to create custom events for an app.\n\rSettings and environmental variables\rHow to add configuration and environmental specific values so that they are available from app code.\n\rConfigure behavior during startup\rHow to configure app behavior during startup of app-frontend\n\rStateless application (lookup-service)\rHow to add configuration to control behavior at the application startup.\n\rDeployment\rConfiguring deploy and runtime behavior\n\rConfiguration of authentication\rSome configurations can be useful when it comes to authentication\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/date/",
	"title": "Date",
	"tags": [],
	"description": "The date picker can be used when selecting a (relatively) recent date. To select dates that are far in the past (or future) a date field can be used instead.",
	"content": "Date picker Use the date picker if something is being planned, or for selecting a (relatively) recent or close future date.\nGuidelines:  The date picker is not recommended if your goal is to collect birth dates or other dates further back in time (see studies from gov.uk) In these cases you should instead use a date field. Add correct validation and give the user information about what are valid and invalid dates. Should the user be able to select dates further back in time? Within a given period?  Example of usage: \r Date field Date fields should be used for dates further back in time, or for dates that the user knows well. Three textfields is the simplest way to take in dates in these cases. If someone is planning something and a specific day (monday, friday, etc.) is important the datepicker should be used instead.\n⚠️ This component is not accessible in Altinn Studio yet.\n\r\rGuidelines:  Always label the input boxes (day, month, year), and add a label/heading for the input group as well. If the foundational data exists, a specific date can be suggested in the field, or it can be preset with the current date.   Example of usage: \r"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/deployment/",
	"title": "Changelog for deployment",
	"tags": [],
	"description": "Overview of changes introduced into helm-chart for deployment.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/deployment/migration/\u0026quot;\u0026gt;Migration to versioned charts\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Migrating from helm template files to versioned helm dependency.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/deployment/v1/\u0026quot;\u0026gt;v1\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v1 of deployment.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/deployment/v2/\u0026quot;\u0026gt;v2\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v2 of deployment.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/develop-component/",
	"title": "Develop a component",
	"tags": [],
	"description": "We&#39;d love if you start developing functionality or new components that Altinn has approved. We do however appreciate if you plan your work together with us before starting.",
	"content": "Before you start developing new functionality, it\u0026rsquo;s a good idea to check if the task is already in our backlog. If you can\u0026rsquo;t find it, we appreciate if you propose your wanted component/functionality and enter into dialoge with us before starting.\nWe apply the same criteria to externally developed components and functionality as we do with our own. Before developing starts, we thus would like to be included in specifying how the component should be designed, both functionally and technically. To achieve a nice workflow for developing, dialogue is essential.\nIn this dialogue we will:\n Discover what needs the component should meet, and discuss the solution Identify any shortcomings in the design or technical solution that needs to be overcome Decide if we should help you with design or user testing  Development handbook All information you need to get started is included in our development handbook. The handbook includes information on how to write consistent code and build new components.\nAccessability testing Apps built on Altin 3 must be accessible for everyone, and to ensure that this is the case we follow the WCAG 2.1 guidelines. Please see the demands described at the Norwegian Authority for Universal Design of ICT or a11yproject.\nReview of component When a pull request is made we will do a review of your component. Hopefully we have already agreed how the component should be made before development started, thus reducing the need for large changes at this stage.\n Testing WCAG testing Code review Design review  If we do find something that needs improvement, we will contact you about further development.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/",
	"title": "Development",
	"tags": [],
	"description": "How to create and edit apps in Altinn Studio.",
	"content": "\rData\rData model configuration, pre-filling and other items related to data in an app.\n\rApp User Interface\rConfiguring components, layouts, pages, grid, etc.\n\rLogic\rHow to add, change and configure application logic such as validation, calculation, dynamics and more\n\rConfiguration\rConfiguring different aspects of an app.\n\rAPI\rThe apps developed in Altinn Studio can both expose standard and custom APIs and take advantage of APIs. You do it like this.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/images/",
	"title": "Images",
	"tags": [],
	"description": "How to add and edit image references.",
	"content": "NOTE: the image component is not yet supported in PDF-generation and will be ignored.\n\rAdd images to the application Adding images is done in FormLayout.json by using the image component. Alternative text is useful for scenarios when the image cannot be loaded for any reason, or for users that use screen readers. This can be added as a text resource, defined in resource.[language].json.\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;616071dc-90b1-4ce5-8d18-492844828a41\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Image\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;altTextImg\u0026#34;: \u0026#34;imgAltText\u0026#34; }, \u0026#34;image\u0026#34;: { \u0026#34;src\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;https://example.com/image_nb.png\u0026#34; }, \u0026#34;width\u0026#34;: \u0026#34;100%\u0026#34;, \u0026#34;align\u0026#34;: \u0026#34;center\u0026#34; } } ] } } The image can also have separate sources for different languages. The default source is nb, and this source will be used for any language that does not define a separate source for the image. Below is an example with different sources for nb and en:\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;616071dc-90b1-4ce5-8d18-492844828a41\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Image\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;altTextImg\u0026#34;: \u0026#34;imgAltText\u0026#34; }, \u0026#34;image\u0026#34;: { \u0026#34;src\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;https://example.com/image_nb.png\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;https://example.com/image_en.png\u0026#34; }, \u0026#34;width\u0026#34;: \u0026#34;100%\u0026#34;, \u0026#34;align\u0026#34;: \u0026#34;center\u0026#34; } } ] } } Hosting images from apps If the image should be loaded from the app, you need to set up static hosting of files in the application. This is automatically set up for applications created after december 2021. For older applications, you should follow the steps below. This is configured in App/Startup.cs, in the Configure method. This will host all files that is inside the /app/wwwroot folder. If this folder does not exist, it needs to be created. If you want to refer to the file app/wwwroot/bilde_nb.png it can be reached at the following relative url /org/app-name/bilde_nb.png\napplicationId is a variable from a few lines above containing org/app-name from applicationmetadata.json:\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // ...  app.UseRouting(); app.UseStaticFiles(\u0026#39;/\u0026#39; + applicationId);  app.UseAuthentication(); // ...  } In FormLayout.json the reference to the image should be a relative url that starts with /org/app-name similar to what was set up as the static hosting. You can also use the custom prefix wwwroot (without a starting /), that will be replaced with /org/app-name before the image is loaded.\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;616071dc-90b1-4ce5-8d18-492844828a41\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Image\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;altTextImg\u0026#34;: \u0026#34;imgAltText\u0026#34; }, \u0026#34;image\u0026#34;: { \u0026#34;src\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;wwwroot/bilde_nb.png\u0026#34; }, \u0026#34;width\u0026#34;: \u0026#34;100%\u0026#34;, \u0026#34;align\u0026#34;: \u0026#34;center\u0026#34; } } ] } } "
},
{
	"uri": "https://docs.altinn.studio/api/models/instance/",
	"title": "Instance",
	"tags": ["api"],
	"description": "An instance is a metadata container that is used to track the status and progress of one interaction between an app user and owner.",
	"content": "Instance The Instance model is the main model of an instance. An instance can be regarded as an envelope or folder where data is collected and exchanged between the application user and owner. The instance document is a way for Altinn and external parties to track the state of one specific data exchange.\nProperties    Name Description     id A gobally unique id for the instance. The value has two parts separated by a \u0026lsquo;/\u0026rsquo; character. The first part is the internal unique id of the instance owner and the second part is a generated UUID value.   instanceOwner A complex type identifying the owner of the instance. See InstanceOwner   appId The id for the app the instance is associated with. The value has two parts separated by a \u0026lsquo;/\u0026rsquo; character. The first part is the short name/identifier of the owner of the app and the second part is the app name.   org The short name of the app owner.   selfLinks A complex type containing a set of named URLs. See ResourceLinks   dueBefore This can be use by app owner to indicate a deadline for when the instance must be completed and submitted by a user that can represent the instance owner.   visibleAfter This can be used by app owner to have an instance become visible for app users at a given date and time. This way an instance can be created in advance and populated with data before being available to an application user.   process A complex type tracking the process state of the instance. See ProcessState   status A complex type with more state data. See InstanceStatus   completeConfirmations A list of complete confirmations. See CompleteConfirmation   data A list of data elements. This include all forms, attachments and other data types being collected. See DataElement   presentationTexts A dictionary with text values extracted from forms that are saved on the instance. Values are extracted based on PresentationField values stored in the application metadata document. Also see PresentationField   dataValues A dictionary with data values extracted from forms that are saved on the instance. Values are extracted based on configured data fields in the applicationmetadata document. Also see DataField   created The date and time when the instance was first initialized.   createdBy An idenfificator indicating who it was that created the instance.   lastChanged The date and time when the instance was last changed.   lastChangedBy An idenfificator indicating who it was that made the last change to the instance.    InstanceOwner The InstanceOwner model is a simple definition whose only porpose is to hold a universally known identification value of the instance owner.\nProperties    Name Description     partyId A value used internally by Altinn to uniquely identify an entity across Organisations, Persons and Self identified users.   personNumber If the instance owner is a person this field is populated with a person number from the National Population Register in Norway.   organisationNumber If the instance owner is an organisation this field is populated with an organisation number from the National Unit Register in Norway.   username If the instance owner is a self identified user this field is populated with a user name.    InstanceStatus The InstanceStatus model is used to hold key status related metadata about an instance. All information is also tracked through instance events, but this is an easily accessible summary of the last events.\nProperties    Name Description     archived The date and time for when an archived instance was archived.   softDeleted The date and time for when a deleted instance were moved to the recycle bin.   hardDeleted The date and time for when an instance became unrecoverable through any API. A few days later the instance and all its data will be physically deleted from storage and truly unrecoverable.   readStatus A field indicating whether an application user has opened the instance at any time. Used internally by the message box to indicate read status of elements.   substatus A property with human readable status information that will be displayed by the message box.    CompleteConfirmation The CompleteConfirmation model is a simple type for holding information about who and when a given stakeholder has told Altinn that the instance is no longer needed. They have obtained all the information they needed from the instance. The instance can be deleted permanently should an application user decide to to so. At the time of writing an instance can have only one stakeholder and that is the Application Owner.\nDataValues Data values are values either extracted from the instance data or other sources. The values are stored with the instance for easy access and can be used for example in routing logic on the receiving end.\nWhile data fields configured in the app metadata file will be extracted and automatically picked up by the application, there is also the option of adding values manually by using the UpdataDataValues method from the IInstance interface. You can mix and match data fields from configuration and by manually adding. It\u0026rsquo;s the UpdateDataValues method that is called under the hood in both cases. UpdateDataValues merges the incoming collection with what\u0026rsquo;s allready stored. However if yo specify the same id it will be overwritten by one or the other and you have no guaranties on which is stored.\nValues passed in to the UpdataDataValues can have any source and is not restricted to data stored in the application. It can be called from any place but it\u0026rsquo;s recomended to not call it more than strictly required. A good place is to override the RunProcessTaskEnd method from AppBase causing the method to be called when a task is completed.\nProperties    Name Description     stakeholderId The short name of an application owner.   confirmedOn The date and time for when the application owner confirmed that they consider the instance as no longer needed in Altinn.    ProcessState The process state model keeps track of the process of a specific instance.\nProperties    Name Description     started Date and time for when the process was initially started.   startEvent The name of the start event triggering the beginning of the process.   currentTask A complex model keeping track of current process step. See ProcessElementInfo   ended Date and time for when the process was finished.   endEvent The name of the end event that the process ended with.    ProcessElementInfo The process element info holds information about the current task in the process.\nProperties    Name Description     flow A step counter that increase every time the process moves forward.   started Date and time for when the instance entered the current step.   elementId The unique id of current process task.   name The name of the task. (Human readable.)   altinnTaskType The type of task.   validated A date and time for when the instance was validated as well as a value indicating if the task can be completed without additional changes and a new validation.    ResourceLinks The resource link model is should have a collection of URLs that can be used to obtain a copy of the instance document through different API. The propose is to make it easy to switch between API. Primarily when the original was obtain from the storage instance query API and you need to use the app API to perform changes on the instance.\nProperties    Name Description     apps Contains a URL for the endpoint to use to obtain a copy of the current instance document through the app API.   platform Contains a URL for the endpoint to use to obtain a copy of the current instance document through the Platform Storage API.    Complete example This example was created by instantiating an app running locally on a development machine using LocalTest. The process is at first step, Task_1, and it has a single data element which is the main form of the app.\n{ \u0026#34;id\u0026#34;: \u0026#34;1337/bd9edd59-b18c-4726-aa9e-6b150eade814\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;partyId\u0026#34;: \u0026#34;1337\u0026#34;, \u0026#34;personNumber\u0026#34;: \u0026#34;01039012345\u0026#34;, \u0026#34;organisationNumber\u0026#34;: null, \u0026#34;username\u0026#34;: null }, \u0026#34;appId\u0026#34;: \u0026#34;ttd/bli-applikasjonseier\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;selfLinks\u0026#34;: { \u0026#34;apps\u0026#34;: \u0026#34;https://altinn3local.no/ttd/bli-applikasjonseier/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;https://altinn3local.no/storage/api/v1/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814\u0026#34; }, \u0026#34;dueBefore\u0026#34;: null, \u0026#34;visibleAfter\u0026#34;: null, \u0026#34;process\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2020-11-18T15:56:41.5662973Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;flow\u0026#34;: 2, \u0026#34;started\u0026#34;: \u0026#34;2020-11-18T15:56:41.5664762Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Utfylling\u0026#34;, \u0026#34;altinnTaskType\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;ended\u0026#34;: null, \u0026#34;validated\u0026#34;: { \u0026#34;timestamp\u0026#34;: \u0026#34;2020-11-20T13:00:05.1800273+00:00\u0026#34;, \u0026#34;canCompleteTask\u0026#34;: true } }, \u0026#34;ended\u0026#34;: null, \u0026#34;endEvent\u0026#34;: null }, \u0026#34;status\u0026#34;: null, \u0026#34;completeConfirmations\u0026#34;: null, \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;instanceGuid\u0026#34;: \u0026#34;bd9edd59-b18c-4726-aa9e-6b150eade814\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;Kursdomene_BliTjenesteeier_M_2020-05-25_5703_34553_SERES\u0026#34;, \u0026#34;filename\u0026#34;: null, \u0026#34;contentType\u0026#34;: \u0026#34;application/xml\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;ttd/bli-applikasjonseier/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;selfLinks\u0026#34;: { \u0026#34;apps\u0026#34;: \u0026#34;https://altinn3local.no/ttd/bli-applikasjonseier/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;https://altinn3local.no/storage/api/v1/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34; }, \u0026#34;size\u0026#34;: 401, \u0026#34;locked\u0026#34;: false, \u0026#34;refs\u0026#34;: [], \u0026#34;created\u0026#34;: \u0026#34;2020-11-18T15:56:43.1089008Z\u0026#34;, \u0026#34;createdBy\u0026#34;: null, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-11-18T15:56:43.1089008Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: null } ], \u0026#34;created\u0026#34;: \u0026#34;2020-11-18T15:56:42.1972942Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;1337\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-11-18T15:56:42.1972942Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;1337\u0026#34; } "
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/pages/layout-sets/",
	"title": "Layout sets",
	"tags": [],
	"description": "How to set up multiple layouts or forms in the same app.",
	"content": "This is new functionality. Setup must be done manually as of today. Support for setup through Altinn Studio will be coming shortly.\r\rSetup To get functionality for multiple forms in a service, the nuget-version of the packets the app uses must be upgraded to version 3.1.4 or newer. See instructions on how that is done here.\nA key to the solution is that there are mulitiple layout-sets that consists of one or more pages and configurations. Each layout-set consists of the same files as a form service.\n|- App/\r|- ui/\r| - layout-sets.json\r|- skjema-a/\r|- Settings.json\r|- RuleHandler.js\r|- RuleConfiguration.json\r|- layouts/\r|- side1.json\r|- side2.json\r|- side3.json\r|- skjema-b/\r|- Settings.json\r|- RuleHandler.js\r|- RuleConfiguration.json\r|- layouts/\r|- side1.json\r|- side2.json\r|- side3.json In layout-set.json it is defined which steps in the process (task) where a given layout-set should be used. Note that the ID is case sensitive, so if you have a capital letter in the folder name, the ID must reflect this. We recommend lower case letters in folder names.\nExample:\n{ \u0026#34;sets\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;rf0002\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;schema_4222_160523_forms_212_20160523\u0026#34;, \u0026#34;tasks\u0026#34;: [ \u0026#34;Task_1\u0026#34; ] }, { \u0026#34;id\u0026#34;: \u0026#34;superform\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;schema_3161_140411_forms_1549_11554\u0026#34;, \u0026#34;tasks\u0026#34;: [ \u0026#34;Task_2\u0026#34; ] } ] } "
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/components/likert/",
	"title": "Likert",
	"tags": [],
	"description": "How to use a likert component",
	"content": "This is new functionality. The setup must be done manually as of today. Support for setup through Altinn Studio will be launched shortly.\rNote that the Likert-component only can be used as part of a repeating group.\n\rDesktop and mobile view The Likert component is shown as a list on narrow screens and as a table on broad screens. Likert uses the same concept as repeating groups.\nExample The Likert component requires that you have a data model with a list. This list must contain objects with questions and answers. Example on setup of data model in App/logic/InstantiationHandler.cs:\npublic async Task DataCreation(Instance instance, object data) { if (data is Survey) { var survey = data as Survey; survey.Questions = new List\u0026lt;Question\u0026gt; { new Question { Id = \u0026#34;question-1\u0026#34;, Answer = \u0026#34;\u0026#34; }, new Question { Id = \u0026#34;question-2\u0026#34;, Answer = \u0026#34;\u0026#34; }, new Question { Id = \u0026#34;question-3\u0026#34;, Answer = \u0026#34;\u0026#34; } } } await Task.CompletedTask; } Example on definition of likert component in layout.json:\n[ { \u0026#34;id\u0026#34;: \u0026#34;likert-group\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Skolearbeid\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;På de neste spørsmålene skal du svare i kontekst av klasserommet.\u0026#34; }, \u0026#34;maxCount\u0026#34;: 99, \u0026#34;children\u0026#34;: [ \u0026#34;likert-row\u0026#34; ], \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;group\u0026#34;: \u0026#34;Questions\u0026#34; }, \u0026#34;edit\u0026#34;: { \u0026#34;mode\u0026#34;: \u0026#34;likert\u0026#34; } }, { \u0026#34;id\u0026#34;: \u0026#34;likert-row\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Likert\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;likert-row-title\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;Questions.Answer\u0026#34; }, \u0026#34;optionsId\u0026#34;: \u0026#34;likertOptions\u0026#34;, \u0026#34;required\u0026#34;: false, \u0026#34;readOnly\u0026#34;: false } ] The Likert-component works the same as RadioButtons and CheckBoxes.\r\rOptionsId is linked to the codelist-file (likertOptions.json)\n[ { \u0026#34;label\u0026#34;: \u0026#34;Alltid\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;1\u0026#34; }, { \u0026#34;label\u0026#34;: \u0026#34;Nesten alltid\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2\u0026#34; }, { \u0026#34;label\u0026#34;: \u0026#34;Ofte\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;3\u0026#34; }, { \u0026#34;label\u0026#34;: \u0026#34;Noen ganger\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;4\u0026#34; }, { \u0026#34;label\u0026#34;: \u0026#34;Sjelden\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;5\u0026#34; } ] To connect text for each row you need to create a connection between the data model and the Likert\u0026rsquo;s textResourceBinding. This can be done in the text-resourcefiles:\n[ { \u0026#34;id\u0026#34;: \u0026#34;question-1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Gjør du leksene dine?\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;question-2\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Fungerer kalkulatoren din?\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;question-3\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Er pulten din ryddig?\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;likert-row-title\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;{0}\u0026#34;, \u0026#34;variables\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;Questions[{0}].Id\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.default\u0026#34; } ] } ] Filter out questions with start and end You can choose to filter out rows you do not wish to include in the Likert by using start and stop:\n{ \u0026#34;edit\u0026#34;: { \u0026#34;mode\u0026#34;: \u0026#34;likert\u0026#34;, \u0026#34;filter\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;start\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;1\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;stop\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;10\u0026#34; } ] } } "
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/messagebox/",
	"title": "MessageBox",
	"tags": [],
	"description": "Configuring different aspects of the presentation of application instances in the Altinn Message Box.",
	"content": "\rHide instances\rConfiguration for hiding instances from the message box.\n\rPresentation fields\rConfiguration of presentation fields for app.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/deployment/runtime-environment/resource-allocation-tips/",
	"title": "Practical tips for resource allocation",
	"tags": ["translate-to-english"],
	"description": "",
	"content": "Før vi går på konkrete tips må vi kort introdusere Helm Chart. Helm Chart er de(n) filen(e) som styrer hvordan applikasjonen din deployes) til Kubernetes. Det er også her man styrer CPU og minne allokering. Du finner Chart.yamlog values.yamli deployment mappen i applikasjonen din. Dette er viktige filer som kan være lett å overse og ikke ha et aktivt forhold til.\nTips 1 - Kjør siste versjon av Helm Chart Med siste versjon får du de mest oppdaterte innstillingene som standard. Se Endringslogg for deployment for hvordan oppgradere til siste versjon.\nTips 2 - Ha et aktivt forhold til hva applikasjonen krever av minne og CPU Altinn kommer med en standard på 50m CPU og 128Mi minne, men hva som faktisk kreves er det jo bare den som utvikler en applikasjon som vet. Hvis det caches mye data, vil det kreve mye minne. Hvis det er tunge operasjoner så vil det kreve mye CPU. De faktiske kravene bør gjenspeiles i Helm Chart hvis de avviker fra standarden.\nTips 3 - Reduser antall instanser i testmiljø Trenger man 2 kjørende instanser i test eller kan man klare seg med 1? Ønsker man å teste hvordan en app oppfører seg med flere instanser så trenger man nødvendigvis 2 eller flere, men ofte så holder det men 1 kjørende instans i test og man tåler litt nedetid ved deploy.\nMerk: Har man gjort de tiltakene man kan, men alikevel har nådd taket på hva clusteret håndterer så er neste steg å øke antallet noder evt. ha kraftigere noder. Ta kontakt med oss i Altinn så ser vi på dette sammen med dere.\n\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/redux/",
	"title": "Redux",
	"tags": ["development", "front-end", "react"],
	"description": "Guidelines for using Redux in Altinn Studio",
	"content": "Redux is used to manage the states of the applications. The components update the states in the Redux store, instead of keeping state only within the component. This allows components to easily react to state changes from other components.\nRedux Toolkit As of 2021, we have started using Redux Toolkit rather than the traditional Redux setup. This allows us to get rid of a lot of boilerplate code. Read more about Redux Toolkit here.\nIn practice, this affects the setup of actions and reducers. We currently use Redux Toolkit in Altinn Studio, and plan to update the App frontend as well. Redux Toolkit also works well in parallel with the more traditional setup. In App frontend, any new reducers should be set up as slices where possible, using Redux Toolit. New actions can be set up using the createAction method, rather than the existing boilerplate setup.\ncreateAction React more about creating actions here. Actions can also be created automatically within slices. The createAction command is useful for actions that are are not necessarily handled by the reducer.\ncreateSlice Read more about slices here. Slices combine the creation of actions and reducers into one command, thereby reducing the amount of code, as well as making the setup much more readable.\nDispatching actions In the traditional setup, we use an action dispatcher. For App frontend, it is possible to combine f.ex. createAction with existing action dispatchers. Where possible, however, actions should be dispatched using the dispatch function, from the component itself. For class components, this function is provided as a prop from mapStateToProps. For functional components using hooks, we can use const dispatch = useDispatch() where the useDispatch function comes from the react-redux package.\nExamples For examples of Redux Toolkit setup in the code, look at the Studio code, where all actions/reducers/dispatching has been updated to use Redux Toolkit.\nBasic concepts Below is a short descriptions of some of the basic Redux concepts that we use. Note that these are described using the traditional Redux setup and not Redux Toolkit, but the concepts are the same in both cases.\nStore This is where the overall states are stored. Each state is stored here as an object.\nActions Actions are the events that are triggered when a change is made. An action contains the action type, and any metadata needed to complete the action. For example:\nexport interface IUpdateFormData extends Action { field: string; data: any; componentId: string; } export function updateFormData(field: string, data: any, componentId: string): IUpdateFormData { return { type: actionTypes.UPDATE_FORM_DATA, field, data, componentId, }; } In this example, a change in form data can trigger the updateFormData action, which contains an object with the action type, as well as the data/metadata.\nSagas Redux saga is the middleware used to process information before the store is updated (i.e. before the reducer does its work).\nAn example is asyncronous calls to backend APIs to get data, or submit data.\nEach saga defines methods that complete different tasks, connected to actions. These methods are called via listeners that listen to the actions that are being dispatched. There are different sagas for all the different functional areas.\n/** * Define the saga for the UPDATE_FORM_DATA event */ function* updateFormDataSaga(action: ActionType) { try { // fetch some data  const relevantData = yield selectRelevantStateObjects(...); ... // process the data  const processedData = doRelevantLogic(relevantData); ... // trigger a new action to update the store  yield call(updateFormDataSagaFulfilled, processedData, ... ); } catch (err) { yield call(updateFormDataSagaRejected, err); } } /** * Define a listener for the UPDATE_FORM_DATA event */ export function* watchUpdateFormDataSaga(): SagaIterator { yield takeLatest(FormFillerActionTypes.UPDATE_FORM_DATA, updateFormDataSaga); } Reducers Redux reducers are used to update the different states in the store. There is one reduer per state. The reducers listen to the actions that are dispatched when changes are made, and update the state accordingly.\nExample:\nconst initialState: IFormDataState = { formData: {}, error: null, }; const FormDataReducer: Reducer\u0026lt;IFormDataState\u0026gt; = ( state: IFormDataState = initialState, action?: Action, ): IFormDataState =\u0026gt; { if (!action) { return state; } switch (action.type) { case actionTypes.UPDATE_FORM_DATA_FULFILLED: { const { field, data } = action as IUpdateFormDataFulfilled; return Immutable\u0026lt;IFormDataState\u0026gt;(state, { formData: { $setField: { field, data, }, }, }); } case actionTypes.UPDATE_FORM_DATA_REJECTED: { const { error } = action as IUpdateFormDataRejected; return Immutable\u0026lt;IFormDataState\u0026gt;(state, { error: { $set: error, }, }); } default: { return state; } } }; export default FormDataReducer; "
},
{
	"uri": "https://docs.altinn.studio/app/deployment/runtime-environment/resource-allocation/",
	"title": "Resource Allocation",
	"tags": ["translate-to-english"],
	"description": "",
	"content": "Primært vil det være CPU og minne som fordeles. Man kan sette minimum (requests) og et tak (limit) for en container. Hvis en pod har flere containere vil kubernetes summere opp disse. I Altinn 3 benytter vi som default requests, dvs. minimum for hva en applikasjon vil legge beslag på.\nCPU CPU spesifiseres i CPU enheter, hvor 1 CPU enhet = 1 fysisk CPU kjerne eller 1 virtuell kjerne. Man kan spesifisere fraksjoner og enten spesifisere 0.1 eller 100m (som leses hundre millicores). Vi anbefaler at man benytter m notasjonen og ikke desimal notasjonen slik at man skriver 1m og ikke 0.001 (som er det minste man kan spesifisere).\nSom standard har man 12 kjerner til fordeling i TT02, dvs. 12 000m, gitt dagens oppsett med 6 noder á 2 kjerner. Fra dette må vi trekke fra de systemtekniske containerne som kubernetes selv kjører, det tilsvarer ca. 30% av CPU, da er vi nede i 8000m til fordeling til Altinn 3 applikasjoner.\nFor en app er CPU satt som default til 50m. Dvs. man skal i teorien ha plass til 8000 / 50m = 160 apps på et slikt cluster. Men en app vil som standard kjøres opp i 2 instanser, da har vi brukt 2x50m=100m. I tillegg har hver app en såkalt sidecar container (Linkerd for kryptering/dekryptering) som får 25m. Denne følger instansen og det blir da 2x25=50m. Så en app vil da totalt kreve 150m for 2 instanser. Gitt 8 cpu’er tilgjengelig så får vi 53 apps med dagens oppsett. Dette er veiledende tall, men gir en grei pekepinn. Hvis en app krever mer CPU enn minimum vil den få det gitt at det finnes mer tilgjengelig.\nMinne Minne spesifiseres i byte, og man kan benytte ulike suffixer som Mi, M Ki etc. Altinn 3 spesifiserer dette i Mi som er Mebibyte som er tilnærmet det samme som Megabyte.\nSom standard har vi 48GiB (Gibi Byte) minne tilgjengelig i clusteret totalt, men dette er fordelt med 8GiB på hver av de 6 nodene. Fra dette må vi trekke fra ca. 0.5 - 1GiB som går til systemtekniske containere som kubernetes selv kjører, det tilsvarer ca. 10-20%. Dvs. at vi da har 6 noder x 7Mi = 42GiB (40054Mi) totalt i clusteret og 7GiB (7168Mi) per. Node til fordeling.\nFor en app er minne satt til 128Mi som default. Dvs. man skal i teorien ha plass til 7168Mi / 128Mi = 56 app instanser per node og 336 apps totalt i clusteret hvis vi kun ser på minne. Når vi ser på tallene over minneforbruk så er det et overforbruk av minne, så 256Mi er nok et bedre tall per app. Korrigert for dette så kan vi halvere tallene slik at det blir 24 app instanser per node og 168 app instanser totalt i clusteret.\nHvordan fungerer ressursallokering i clusteret? Når en ny app skal deployes til et Kubernetes cluster vil Kubernetes litt forenklet se på hvor mye minne og CPU det er spurt om som minimum og prøve å finne node som har ledig plass. Hvis den ikke finner en node med ledig plass så vil den se om det er noen av de kjørende applikasjonene som overforbruker ressurser i forhold til hva de har spurt om å kaste ut den eller de som har høyest overforbruk for å gi plass til den nye.\nMerk: Det at Kubernetes vil kaste ut en applikasjon som overforbruker gjør det svært viktig å ha et forhold til hvor mye ressurser man har tilgjengelig, hvor mye hver enkelt app krever og at summen av dette går opp - hvis ikke risikerer man ustabilitet i miljøet.\n\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/deployment/runtime-environment/",
	"title": "Runtime Environment",
	"tags": ["translate-to-english"],
	"description": "Description of the Runtime Environment for Altinn 3 applications for a service owner.",
	"content": "Altinn 3 applikasjoner for en tjenesteeier kjører i Azure Kubernetes Service (AKS) fra Microsoft Azure. Dette er en såkalt Managed Service hvor vi lar Microsoft Azure ta seg av den underliggende driften av Kubernetes clusteret. Altinn står for konfigurering og provisjonering av clusteret, mens tjenesteeier har selv ansvar for utrulling av applikasjonene til clusteret.\nFor detaljert dokumentasjon av hvilke muligheter som finnes må man se på:\n Azure Kubernetes Services Kubernetes, og da spesielt hvordan ressurser administreres - et ansvar som er delt mellom Altinn og tjenesteeier.  Alle tjenesteeiere vil ha egne Kubernetes cluster for test og produksjon. Dette sikrer at applikasjoner for en tjenesteeier ikke påvirker applikasjoner for andre tjenesteeiere.\nRessursadministrasjon Selv om man ofte tenker at en skyløsning har ubegrenset kapasitet, så vil også ubegrenset kapasitet gjerne føre til ubegrenset kostnadsbruk. Det er derfor viktig å ha kontroll på hva man forbruker av ressurser, hvor mange applikasjoner man kjører og hvor mye CPU/minne den enkelte applikasjon legger beslag på. Før eller siden vil man gå tom for ressurser (CPU og minne) på clusteret, og det er da viktig å forstå hvilke faktorer som påvirker.\nKomponentene i et cluster Et AKS Cluster kjører på et antall noder (virtuelle maskiner) av en gitt type. Per i dag er dette B2 som har 2 vCPU og 8 GiB minne. Som standard settes det opp minimum 3 noder både i TT02 og produksjon med automatisk skalering opp til 6 noder avhengig av trafikk. Clusteret vil da ha 12 vCPU og 48 GiB minne som da blir den øvre kapasiteten clusteret har til å betjene de applikasjonene som til enhver tid er deployet.\nMerk: Et cluster kan skaleres automatisk opp til 1000 noder, men dette vil også medføre tilsvarende kostnadsøkning. Hva som er det rette \u0026ldquo;taket\u0026rdquo; for den enkelte tjensteeier vil avhenge av antall applikasjoner, hvor mye ressurser disse krever som minimum og trafikken som disse genererer. Ta kontakt med oss i Altinn om dere har behov for mer ressurser enn det som er satt opp som standard.\n\r\r\r\rFullscreen\nApplikasjoner / Apps Når vi snakker om en Altinn 3 App så snakker vi om den logiske applikasjonen som det bare finnes 1 av. For å sikre at en app hele tiden er oppe så kjører vi som regel med 2 eller flere instanser av applikasjonen. Minne og CPU reservasjoner gjelder per instans.\nDocker Containers En Docker Container, eller bare container, inneholder i vårt tilfelle den kjørende koden for en Altinn 3 App. Men det finnes også andre containere i clusteret som inneholder systemtekniske ting som må kjøre. F. eks. så vil enhver Altinn 3 app container få følge av en Linkerd container som tar seg av kryptering/dekryptering av trafikk inn og ut av Altinn 3 applikasjonen.\nPods En pod er den minste kjørbare enheten i et kubernetes cluster og er det vi allokerer ressurser til. En pod kan bestå av en eller flere containere. En Altinn 3 applikasjon vil typisk bestå av en app container og en såkalt sidecar container som kjører Linkerd. Linkerd er den komponenten som tar seg av kryptering/dekryptering av kommunikasjon mellom pods i et cluster. Grunnen til at vi nevner denne er at denne også vil kreve minne og CPU ressurser.\nDeployments En deployment styrer levetiden til en applikasjon, hvor mange instanser den skal ha samt allokering av minne og CPU. I Altinn 3 spesifiseres dette ved hjelp av såkalte Helm charts,. Dette kan sees på som en innpakking av en applikasjon med fornuftige standard verdier, men standard konfigurasjonen kan overstyres.\n\rMerk: Noe av ressursene i et Kubernetes cluster vil gå med til systemtekniske prosesser både fra Kubernetes selv og fra Altinn infrastrukturen, så ikke alle ressurser i et cluster vil være tilgjengelig til fordeling til apps.\n\r\r\rPractical tips for resource allocation\r\n\rResource Allocation\r\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/technology/",
	"title": "Technology",
	"tags": [],
	"description": "System documentation for Altinn Studio, Altinn Apps and Altinn Platform.",
	"content": "Altinn Studio is the next generation Altinn application development and hosting solution. All you need for testing Studio is to register an account.\nAltinn 3 have an open backlog on GitHub and the code is open source. Everybody can create bugs, request features or ask questions.\n\rArchitecture\rAltinn Studio, Altinn Apps and Altinn Platform has a modern cloud native architecture. This documentation describes everything from the requirements affecting the architecture to the defined capabilities and the components that provides them.\n\rSolutions\rThe latest generation Altinn platform consist of serveral solutions.\n\rTerms\rDescription of the most common terms used in the documentation for Altinn Studio.\n\rTools and frameworks\rThe open source tech used in Altinn Studio, Altinn Apps and Altinn Platform.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/texts/",
	"title": "Texts",
	"tags": [],
	"description": "How to edit and format texts, use variables and add help texts.",
	"content": "Texts are stored in resource files in the directory App/config/texts. Texts can be from common libraries, the data model or manually added by developers.\nThe text resources are available whne you edit UI components in the schema via Altinn Studio, and they are shown to the end user when the form is loaded in a browser.\nTexts are stored in JSON-format and one file per language. The filename format for texts should be resource.[language].json f.ex: resource.nb.json.\nFormatting of texts All texts can be formatted with markdown. Below you can see the most commonly used syntax.\nA more thorough explanation of the markdown syntax can be found here: Markdown Cheatsheet.\nBold and italic texts Its very easy to make words or sentences bold or italic with markdown.\nThis is in _italic_ using underscores. This is also in *italic* using asterisk. This is in __bold__ using double underscores. This is also in **bold**, using double asterisk. Links Click [here](https://altinn.no) to go to Altinn. Headings # This is a big heading (H1) ## This is a smaller heading (H2) ### An even smaller heading (H3) #### A tiny heading (H4) Add and change texts in an application You have two options when you want to modify texts in an application, either via Altinn Studio, changing it directly in the repository.\nUsing Altinn Studio In the top navigation bar in Altinn Studio, selec Languages to be able to edit texts. An overview of the texts that already exists in the application are listed.\nOn this page you can edit the existing texts and add new ones. New texts can be added by clikcing the New text button, and fill in the fields. The key needs to be unique.\nSave the changes in the texts by clicking Save texts.\nChanging texts directly in the repository This is the recommended way to update texts if there are many changes you want to make. The texts can be changed directly in the repository, or by cloning the repository and using your preferred text editor.\nThe texts are stored in App/config/texts\nVariables in texts Variables in texts can be included by following the syntax below. It is important that the order of the variables in the variables array is the same order as the parameters in the text.\n{ \u0026#34;id\u0026#34;: \u0026#34;good.text.id\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Hello, {0}! Here is a second variable {1}.\u0026#34;, \u0026#34;variables\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;\u0026lt;datamodelField\u0026gt;\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.\u0026lt;dataModelName\u0026gt;\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;\u0026lt;settings key\u0026gt;\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;applicationSettings\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;\u0026lt;instance value key\u0026gt;\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;instanceContext\u0026#34; } ] } Data sources It is currently possible to fetch values from 3 different data sources.\n Datamodell By defining dataModel.\u0026lt;dataModelNavn\u0026gt; as the data source you can fetch values from the fields in the form that the user is filling out. Data can be fetched from fields regardless if they are visible or not. If the user changes data in a field referenced in a variable, the text will be updated when the user stops typing in the field. Application Settings\nBy defining applicationSettings as the data source you can fetch values from a specific section in appsettings.{environment}.json files with the key FrontEndSettings. This is a dynamic list you can extend without making changes to the code. This makes it possible to have different values in different environments. Be aware of the difference on first letter casing in the keys FrontEndSettings and applicationSettings. \u0026#34;FrontEndSettings\u0026#34;: { \u0026#34;HomeBaseUrl\u0026#34;: \u0026#34;https://www.testdirektoratet.no\u0026#34; },  Instance This datasource is based on the instance and will contain some values from the active instance. We cannot access the entire instance object. The list of available properties is currently:  instanceOwnerPartyId inneholder avgiver sin party id. instanceId inneholder id\u0026rsquo;en til den aktive instansen. appId inneholder id\u0026rsquo;en til appen instansen er knyttet til.    Complete example: { \u0026#34;id\u0026#34;: \u0026#34;common.submitinfo\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;You are submitting for: {0} with organisation number: {1}. The organisations party id is {2}. [Link to our page]({3}).\u0026#34;, \u0026#34;variables\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;skattepliktig.organisasjonsnavn\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.default\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;skattepliktig.organisasjonsnummer\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.default\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;instanceOwnerPartyId\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;instanceContext\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;homeBaseUrl\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;applicationSettings\u0026#34; } ] } Variables in text - repeating groups To make variables in text work with repeating groups, you need to make a slight modification to the example above.\nThis is achieved by adding [{0}] after the repeating groups when you specify a field in the data model in the key.parameter Example:\n{ \u0026#34;id\u0026#34;: \u0026#34;common.submitinfo\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;You are submitting for: {0} with organisation number: {1}.\u0026#34;, \u0026#34;variables\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;skattepliktig[{0}].organisasjonsnavn\u0026#34;,  \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.default\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;skattepliktig[{0}].organisasjonsnummer\u0026#34;,  \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.default\u0026#34; } ] } It is possible to combine variables from fields in repeating groups with variables from fields that are not in repeating groups. It is not recommended to combine variables from fields in different repeating groups, unless you are sure that the order of the items in the groups will be identical.\nAdding help texts Help texts are short texts that gives a concrete description of what the end user is expected to fill in the field which the help text is connected to.\nThe keys that define the help texts are defined in FormLayout.json. In the repository this file is located in App/ui/.\nBelow is an example of a FormLayout.json without help texts.\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;616071dc-90b1-4ce5-8d18-492844828a41\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Header\u0026#34;, \u0026#34;componentType\u0026#34;: 0, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;appName\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;08d707a9-2475-4d23-bf76-f209fb434ec2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TextArea\u0026#34;, \u0026#34;componentType\u0026#34;: 7, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;tilleggsopplysninger.label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;tilleggsopplysninger.desc\u0026#34;, }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;omsetningsoppgaverTilleggsopplysninger.value\u0026#34; } }, { \u0026#34;id\u0026#34;: \u0026#34;bd6589b6-e2ab-49ba-b39a-dd3f8b63e5de\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Button\u0026#34;, \u0026#34;componentType\u0026#34;: 9, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Send inn\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;textResourceId\u0026#34;: \u0026#34;Standard.Button.Button\u0026#34;, \u0026#34;customType\u0026#34;: \u0026#34;Standard\u0026#34; } ] } } If you want to add help texts to any of these components you have to\n Add the help text in the resource file as described here. Open the FormLayout.json-file. Add the binding to the new help text with the key \u0026quot;help\u0026quot; and value equal the newly added text resource.  This is how the file looks after adding help texts:\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;616071dc-90b1-4ce5-8d18-492844828a41\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Header\u0026#34;, \u0026#34;componentType\u0026#34;: 0, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;appName\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;08d707a9-2475-4d23-bf76-f209fb434ec2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TextArea\u0026#34;, \u0026#34;componentType\u0026#34;: 7, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;tilleggsopplysninger.label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;tilleggsopplysninger.desc\u0026#34;, \u0026#34;help\u0026#34;: \u0026#34;tilleggsopplysninger.help\u0026#34;  }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;omsetningsoppgaverTilleggsopplysninger.value\u0026#34; } }, { \u0026#34;id\u0026#34;: \u0026#34;bd6589b6-e2ab-49ba-b39a-dd3f8b63e5de\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Button\u0026#34;, \u0026#34;componentType\u0026#34;: 9, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Send inn\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;textResourceId\u0026#34;: \u0026#34;Standard.Button.Button\u0026#34;, \u0026#34;customType\u0026#34;: \u0026#34;Standard\u0026#34; } ] } } Change application title When you create an application you have a textresource witht he label appName. This it the title of the application that will be displayed in several places in our solution, f.ex when an end user is filling out a form and when elements are displayed in the messagebox in altinn.no.\nThe title of the application is located in two places in the application repository:\n In the textresource with the key appName. In applicationmetadata.json in the title property. This file is located at App/config/.  App owners are encouraged to add titles in bokmål, nynorsk and english. If a title is missing in the textresources the repository name will be used as a fallback, and may be shown to the end user.\nIf you change appName from an IDE (f.ex Visual Studio Code), it is important to also update the title in applicationmetadata.json. If the title is changed from Altinn Studio on the \u0026ldquo;about\u0026rdquo; page or \u0026ldquo;languages\u0026rdquo; page, the applicationmetadata.json file is updated automatically.\nApplication title configuration example In App/config/applicationmetadata.json:\n\u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Automatisk deploy applikasjonen\u0026#34;, \u0026#34;nn\u0026#34;: \u0026#34;Automatisk deploy applikasjonen\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Auto deploy application\u0026#34; }, In App/config/texts/resource.nb.json:\n{ \u0026#34;language\u0026#34;: \u0026#34;nb\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;appName\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Automatisk deploy applikasjonen\u0026#34; }, . . . ] } In App/config/texts/resource.nn.json:\n{ \u0026#34;language\u0026#34;: \u0026#34;nn\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;appName\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Automatisk deploy applikasjonen\u0026#34; }, . . . ] } I App/config/texts/resource.en.json:\n{ \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;appName\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Auto deploy application\u0026#34; }, . . . ] } Change app owner text The application name and app owner is displayed at the top in the application.\nThe application owner is fetched by default from the texts defined in altinn-orgs.json. If you want to change this name, you can add the key appOwner in the text resources. This wil override the value coming from CDN.\nEksempel:\n{ \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;appOwner\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Test Ministry\u0026#34; }, . . . ] } Change texts on the archive receipt page The texts on the receipt page can be overridden by the application by specifying the texts in the applications config/texts/resource.xx.json file.\nOverriding any text in the receipt will have an effect on any receipt for the given application. This means that forms that are already submitted will also get the updated texts on the receipt page. The generated PDF will not be affected by this.\r\rYou can also use markdown and variables in the receipt. Currently you can only fetch variables from Instance (See Data Sources for details)\nThese are the text id\u0026rsquo;s that can be used to override the default platform texts:\nreceipt_platform.attachments\rreceipt_platform.date_sent\rreceipt_platform.helper_text\rreceipt_platform.is_sent\rreceipt_platform.receipt receipt_platform.receiver\rreceipt_platform.reference_number\rreceipt_platform.sender\rreceipt_platform.sent_content\rFor example if you want to change the help text, you can add this to the config/texts/resource.en.json file in your application:\n{ \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;receipt_platform.helper_text\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;My custom help text\u0026#34; } ] } The image below shows which key controls which text in the UI\nNote: These text changes will not be visible in your local test environment, they will only be visible in the test environment TT02. To see the changes you must navigate from the Archive and press the \u0026ldquo;See submitted form\u0026rdquo;. As of now the modified text will not be used while submitting your form.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/texts/translation/",
	"title": "Translation of texts",
	"tags": [],
	"description": "How to translate texts in the application.",
	"content": "The actual logic of translating texts uses text resource files. See Texts for more information on these files. It is possible to translate texts in the application by adding more text resource files. I.e. one file per language. Below you can see an example of norwegian and english.\nresource.nb.json\n{ \u0026#34;language\u0026#34;: \u0026#34;nb\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;language.selector.label\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Språk\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;language.full_name.nb\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Norsk bokmål\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;language.full_name.en\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Engelsk\u0026#34; } ] } resource.en.json\n{ \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;language.selector.label\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Language\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;language.full_name.nb\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Norwegian bokmål\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;language.full_name.en\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;English\u0026#34; } ] } Activate translation To be able to perform the translation of texts in the application the component must be activated. By adding the field showLanguageSelector and setting it to true in settings.json a dropdown menu will be available in the application. In addition, the texts from the example above must be defined for the dropdown menu to be visible.\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/layout/layoutSettings.schema.v1.json\u0026#34;, \u0026#34;components\u0026#34;: { \u0026#34;excludeFromPdf\u0026#34;: [...] }, \u0026#34;pages\u0026#34;: { \u0026#34;order\u0026#34;: [...], \u0026#34;showLanguageSelector\u0026#34;: true } } If the application contains multiple layout-sets and you want the opportunity to translate all pages, it is important that showLanguageSelector is added in all Settings.json.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/api/",
	"title": "API",
	"tags": [],
	"description": "The apps developed in Altinn Studio can both expose standard and custom APIs and take advantage of APIs. You do it like this.",
	"content": "\rConsume APIs in an app\rAn application can consume open and closed APIs available through the Internet.\n\rExposing APIs from an app\rOne can add more APIs than what is defined as the default API for applications developed in Altinn Studio.\n\rInstance\rHow to make changes to application instances.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/checkbox/",
	"title": "Checkboxes",
	"tags": [],
	"description": "Check boxes are used in cases where the user can select multiple alternatives in a list of options.",
	"content": "If the user should only be able to pick one option, use radio buttons instead.\nGuidelines:  Check boxes should always have a connected text to their right. Deactivated choice boxes should be avoided. If an alternative is unavailable, it should be removed and an explenation should be given in text as to why the option is missing.  Example of use: \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/debug/",
	"title": "Debug",
	"tags": ["development", "debug"],
	"description": "Debug documentation for altinn.studio frontend",
	"content": "Debugging Google Chrome has many debugging tools, but most used in altinn.studio is breakpoints in the react-code.\nThis allows for code to run, and pause at the desired codeline, so the developer can then inspect different values that is present when the desired code is ran.\nDebugging tools  Google Chrome React Devtools Google Chrome Redux Devtools  "
},
{
	"uri": "https://docs.altinn.studio/api/apps/instances/",
	"title": "Instances",
	"tags": ["api"],
	"description": "The app API to work with instances of an app",
	"content": "Overview An instance can be regarded as an envelope or folder where data is collected and exchanged between the application user and owner. The instance document is a way for Altinn and external parties to track the state of one specific data exchange. How long an instance lives and how many interactions there are between the application owner and user will vary from one app to another. Advanced apps will have their own documentation.\nbasePath\n{org}/{appname}/instances Get instance Endpoint for downloading the instance metadata document for a specific instance. The app API does not have an endpoint for listing instances. The Storage API in the Platform has a query endpoint that can be used for this purpose.\nUse this endpoint for instances that are active, and the owner party id and instance guid for the instance are known. External systems that work with an instance over multiple sessions might want to keep these values (or full URL) stored on their end to limit the need to query this information multiple times.\nGET {basePath}/{instanceOwnerPartyId}/{instanceGuid} Get active instances Endpoint for listing active instances for an instance owner.\nThis endpoint can be used to determine if a new instance of an app should be created or if continuation on an existing instance would be more feasible. Note that the object returned is a simplified instance object and that LastChangedBy contains the name of the latest active entity rather than an id number.\n[ { \u0026#34;id\u0026#34;: \u0026#34;1337/bffd2c17-9d93-49f4-b504-3d0ece2402c7\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2021-09-23T10:19:43\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;Sophie Salt\u0026#34; }, { \u0026#34;instanceId\u0026#34;: \u0026#34;1337/agfd2c17-4d93-49f4-b504-3d0ece2402d8\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2021-07-11T22:14:02\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;Sophie Salt\u0026#34; } ] GET {basePath}/{instanceOwnerPartyId}/active Create instance Altinn assigns a unique identifier to all users that wish to report data. We call this id instanceOwner.partyId. If you do not know this, you should provide the official identity number, e.g national identification number for persons or organisation number for organisations, and in some case user name. This should be provided as part of the payload to the creation request. Altinn will look up this identifier and replace it with the instanceOwner.partyId. The official identity number will be stored in the instance metadata.\nData elements can be provided as part of the creation request, but can also be uploaded at a later time.\nThe client specifies the instance owner and may set a number of the metadata fields of the instance by attaching the following form:\n{ \u0026#34;appId\u0026#34; : \u0026#34;org/app\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;personNumber\u0026#34;: \u0026#34;12247918309\u0026#34;, \u0026#34;organisationNumber\u0026#34;: null }, \u0026#34;dueBefore\u0026#34;: \u0026#34;2019-06-01T12:00:00Z\u0026#34;, \u0026#34;visibleAfter\u0026#34;: \u0026#34;2019-05-20T00:00:00Z\u0026#34; } Notice that all dates must be expressed in Utc (Zulu) time zone and represented according to ISO 8601!\nData elements (files) can be attached to the initial request as a multipart/form-data or as attachments. The name of the parts must correspond to element types defined in the application metadata.\nPOST {basePath} A multipart/formdata should contain the instance json document and the data element files of the instance. The first part should be instance which contains the json template to create an instance from.\nThe subsequent parts must have a name that correspond to the element types defined in application metadata. They may have a filename. Hence the model1 and certificate names correspond to data types defined in the application metadata. If additional data elements are required they must be defined in the application metadata.\nContent-Type: multipart/form-data; boundary=\u0026#34;abcdefg\u0026#34; --abcdefg Content-Type: application/json; charset=utf-8 Content-Disposition: form-data; name=\u0026#34;instance\u0026#34; { ... } --abcdefg Content-Type: application/xml Content-Disposition: form-data; name=\u0026#34;model1\u0026#34; \u0026lt;xml\u0026gt; ... \u0026lt;/xml\u0026gt; --abcdefg Content-Type: application/pdf Content-Disposition: form-data; name=\u0026#34;certificate\u0026#34;; filename=certificate.pdf %PDF-1.4 %Óëéá 1 0 obj ... --abcdefg-- This call will return the instance metadata document that was created.\nSimplified instansiation For scenarios where the multipart is not required there is a new API that is simpler. It supports both key-value prefilling and copying data from an archived instance.\nThe endpoint is available at\nPOST {basePath}/create Required body differs for the two features, and examples are available below.\nInstantiation with key-value prefill { \u0026#34;instanceOwner\u0026#34;: { \u0026#34;personNumber\u0026#34;: \u0026#34;12247918309\u0026#34;, \u0026#34;organisationNumber\u0026#34;: null }, \u0026#34;prefill\u0026#34;: { \u0026#34;navnGarantist\u0026#34; : \u0026#34;Ole Hansen\u0026#34; }, \u0026#34;dueBefore\u0026#34;: \u0026#34;2019-06-01T12:00:00Z\u0026#34;, \u0026#34;visibleAfter\u0026#34;: \u0026#34;2019-05-20T00:00:00Z\u0026#34; } Instantiation from archived instance { \u0026#34;instanceOwner\u0026#34;: { \u0026#34;partyId\u0026#34;:\u0026#34;50002108\u0026#34;, \u0026#34;personNumber\u0026#34;: null, \u0026#34;organisationNumber\u0026#34;: null }, \u0026#34;sourceInstanceId\u0026#34;: \u0026#34;50002108/049622b8-ea06-40f6-9f1b-26ceb7566232\u0026#34; } Update sub status The instance sub status is used to give an end user further details about the state of their instance. Currently, only application owner is allowed to update substatus for an instance. Include the new substatus in the body of the requests as a json.\nPUT {basePath}/{instanceOwnerPartyId}/{instanceGuid}/substatus Request body\n{ \u0026#34;label\u0026#34;: \u0026#34;some.label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Beskrivelse i klarteskst\u0026#34; } The values can be referencing text resource names from the language files or be regular text.\nComplete instance Endpoint used by application owner to mark an instance as completed. Technically this only means that the instance is no longer needed by the application owner.\nAltinn will permanently delete an instance and all the data, if both application owner and a user with the necessary rights indicate on the instance that they no longer have a need for it.\nPOST {basePath}/{instanceOwnerPartyId}/{instanceGuid}/complete The request does not use the request body for anything even though it is a POST request.\nDelete instance Endpoint for marking an instance as deleted. This can be used by both application owner and user to delete an instance. The endpoint has an optional parameter called hard that can be used to indicate the type of delete that is wanted. Setting the parameter to false or simply omitting it, will move the instance to a recycle bin. Hard delete means that the instance will be unrecoverable.\nInstances that where active might be permanently deleted by Altinn within a few days. Archived instances will be permanently deleted if both application owner and a user with the necessary rights indicate on the instance that they no longer have a need for it.\nDELETE {basePath}/{instanceOwnerPartyId}/{instanceGuid}?hard=true The endpoint does not use the request body for anything.\nThere are no Application API endpoint for recovering instances in the recycle bin.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/pdf/",
	"title": "PDF",
	"tags": [],
	"description": "How to configure the generation of PDF.",
	"content": "It is possible to exclude components, or entire pages from being a part of the pdf generation.\nThere are two options when excluding data from a PDF:\nDet er to måter å ekskludere data fra PDF på\n Configuring in the Settings.json file in the App/ui folder Programmatically in the PdfHandler.cs file in the App/logic/Print folder  If a page/component is to always be excluded from the PDF, it is recommended that this is\rset in the configuraiton file.\rIf exclusion of a page/component depends on dynamics it must be done programmatically.\n\rExclude pages In the examples below, the page with id page2 is excluded from the PDF PDF.\nConfiguration Setup in Settings.json under App/ui:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/layout/layoutSettings.schema.v1.json\u0026#34;, \u0026#34;pages\u0026#34;: { \u0026#34;excludeFromPdf\u0026#34;: [\u0026#34;page2\u0026#34;] } } Programmatically public async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { if (data.GetType() == typeof(Skjema)) { layoutSettings.Pages ??= new(); layoutSettings.Pages.ExcludeFromPdf ??= new(); layoutSettings.Pages.ExcludeFromPdf.Add(\u0026#34;page2\u0026#34;); } return await Task.FromResult(layoutSettings); } Exclude components In the examples below, the component with id image-component-id is excluded from the PDF.\nConfiguration Setup in Settings.json under App/ui:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/layout/layoutSettings.schema.v1.json\u0026#34;, \u0026#34;components\u0026#34;: { \u0026#34;excludeFromPdf\u0026#34;: [\u0026#34;image-component-id\u0026#34;] } } Programmatically public async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { if (data.GetType() == typeof(Skjema)) { layoutSettings.Components ??= new(); layoutSettings.Components.ExcludeFromPdf ??= new(); layoutSettings.Components.ExcludeFromPdf.Add(\u0026#34;image-component-id\u0026#34;); } return await Task.FromResult(layoutSettings); } Exclude components in a repeating group If you need to exclude one or more components from an entry in a repeating group, this is done by specifying the index of the group element in addition to the component id.\nThe required format is: componentId-\u0026lt;groupIndex\u0026gt;.\nIf the component should be excluded for all elements in the repeating group, follow the instructions for the section above.\nIn the example below, the component with id ownerId in the group element with index 1 is excluded from the PDF.\nProgrammatically public async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { if (data.GetType() == typeof(Skjema)) { layoutSettings.Components ??= new(); layoutSettings.Components.ExcludeFromPdf ??= new(); layoutSettings.Components.ExcludeFromPdf.Add(\u0026#34;ownerId-1\u0026#34;); } return await Task.FromResult(layoutSettings); } The picture below shows that the component with index 0 and 2 is kept in the PDF, whilst the component with index 1 is excluded.\n"
},
{
	"uri": "https://docs.altinn.studio/app/testing/",
	"title": "Testing of apps",
	"tags": [],
	"description": "Applications (apps) can be tested in the test environment, or locally.",
	"content": "\rTest of app locally\rDescription of how test of an app locally on your own machine.\n\rTest app in test environment\rDescription of how test in test environment can be performed.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/api/models/data-element/",
	"title": "DataElement",
	"tags": ["api"],
	"description": "A data element is a metadata container that is used to track the status of actual data blobs.",
	"content": "DataElement The data element model is the main model for metadata related to a specific data element. A data element can be any data associated with an instance. The two most common type of data is the actual form data and attachments.\nProperties    Name Description     id A globally unique id for the data element.   instanceGuid The globally unique id for the instance the data element is associated with.   dataType The name of the data type describing the requirements of the data element.   filename The data blob name if represented as a file.   contentType The mime-type of the content of the blob.   blobStoragePath The physical location of the data as it is stored in the Application owner storage account.   selfLinks A complex type containing a set of named links of how to obtain a copy of the data element.   size The number of bytes in the blob.   locked A value indicating whether the blob is read only.   refs A list of UUID values. Can be used to link related data elements.   isRead A boolean indicating if the dataElement has been read by a user.   created The date and time when the data element was first created.   createdBy An idenfificator indicating who it was that created the data element.   lastChanged The date and time when the data element was last changed.   lastChangedBy An idenfificator indicating who it was that made the last change to the data element.    Complete example This data element example is from the instance example.\n{ \u0026#34;id\u0026#34;: \u0026#34;8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;instanceGuid\u0026#34;: \u0026#34;bd9edd59-b18c-4726-aa9e-6b150eade814\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;Kursdomene_BliTjenesteeier_M_2020-05-25_5703_34553_SERES\u0026#34;, \u0026#34;filename\u0026#34;: null, \u0026#34;contentType\u0026#34;: \u0026#34;application/xml\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;ttd/bli-applikasjonseier/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;selfLinks\u0026#34;: { \u0026#34;apps\u0026#34;: \u0026#34;https://altinn3local.no/ttd/bli-applikasjonseier/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;https://altinn3local.no/storage/api/v1/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34; }, \u0026#34;size\u0026#34;: 401, \u0026#34;locked\u0026#34;: false, \u0026#34;refs\u0026#34;: [], \u0026#34;created\u0026#34;: \u0026#34;2020-11-18T15:56:43.1089008Z\u0026#34;, \u0026#34;createdBy\u0026#34;: null, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-11-18T15:56:43.1089008Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: null } "
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/radiobutton/",
	"title": "Radio button",
	"tags": [],
	"description": "Radio buttons are used in cases where the user is picking one of a group of options. The same applies to drop-down lists, so be conscious about which you choose to use.",
	"content": "Radio buttons are picked when:  You don\u0026rsquo;t have too many choices (max 7) There is no obvious recommended choice You want the user to consider and compare all alternatives  Guidelines  Radio buttons should always have a connected text, and should never be alone. Deactivated radio buttons should be avoided. If an option is unavailable it should be removed and the reason why explained in a text.  Example of use: \r"
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/widgets/",
	"title": "Widgets",
	"tags": [],
	"description": "How to use compound components (widgets).",
	"content": "What is a widget? A widget is a complex component, consisting of one or more simple form components - the form components available to use in Altinn Studio as of today. A widget is a tool in Altinn Studio that makes it easier to create and reuse layouts.\nHow to use widgets Widgets are available in the menu to the left in the form editor in Altinn Studio. It can be dragged into the form page in the same way as other form components. When a widget is dragged into the form in Altinn Studio, the form components that are defined as part of the widget are added to the layout, together with default setup such as connection to data model, texts, etc. When a widget is dragged into the form, you will be able to see the form components it consists of. These can be edited normally in the form editor. If there are texts defined for the widget, these are added to the resource files automatically.\nExample: Message widget Available widgets Default widgets Eventually we will offer a collection of various widgets, these will appear automatically in the menu to the left in the form editor in Altinn Studio. The list is updated as new widgets are added. As of today the following widgets are available:\n   Name Description Screenshot     Message Contains the components that make up a standard message:\n title\nmessage text\nfile attachment\nnavigation button\nThe texts are set up with reference to fields in the standard message data model. See here for more info on messages.     Custom widgets In addition to default widgets that automatically appear in Altinn Studio, it is also possible to define custom widgets. A widget consists of three parts:\n Components: This is a list of all the components that should be included, including the definition of these components. This is set up in the same way as in the layout files, you can for example copy components directly from a layout file. Display name: This is the text that is displayed in Altinn Studio, in the menu where the widget is placed. Text resources: This is optional, and is a list of text resources of the languages you want to incorporate. This is useful if the components e.g. should have some default texts to use.  See setup for message widget for a concrete example. There is also a widget template that can be downloaded to get started.\n"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/select/",
	"title": "Dropdown",
	"tags": [],
	"description": "The pull-down list should be used in cases where the user is picking one of many alternatives, much like the radio buttons.",
	"content": "The pull-down list should be used when:  You have many alternatives (more than 5, but not unlimited) You have a recommended choice which is pre-selected It isn\u0026rsquo;t important for the user to compare the alternatives You don\u0026rsquo;t need the user to read every alternative The alternatives are known by the user (birth month, country of origin, etc)  Example of use: \r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/helptext/",
	"title": "Help texts",
	"tags": [],
	"description": "Help texts are small text boxes that can be used to provide explanations to the user.",
	"content": "You can also use the help text field to explain rules, terms or explain why the information is necessary.\nGuidelines:  Help texts are placed together with a label or title that needs further explanation. If information contained in a helper text is needed in order to answer the form correctly, do not use a help text, as required information should be placed in an info text in the UI (below the header).  Example of usage: \r"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/error-message/",
	"title": "Error messages",
	"tags": [],
	"description": "Error messages explain what what went wrong and how to correct it, to the user.",
	"content": "Be short and precise in how error messages are formulated, and make sure that the user knows what is necessary to proceed. Writing \u0026ldquo;The field is not filled correctly\u0026rdquo; only explains that there\u0026rsquo;s something wrong, but does not give any info on how to fix the problem.\nExamples of explanatory error messages:  \u0026ldquo;Zip code must have 4 digits\u0026rdquo; \u0026ldquo;You must choose one delivery option\u0026rdquo; \u0026ldquo;To submit the form you need to confirm that the name is correct by checking the name confirmation checkbox.\u0026rdquo;  Read more about error messaging on UU-tilsynet\u0026rsquo;s web pages (nb).\nGuidelines:  Error-messaging text should contain keywords from the label. The requirements to submit the form correctly should be clearly indicated before any error messages appear. If the form has faults when the user attempts to proceed, the error messaging box at the top of the screen should show all errors and link to the fields that are incorrectly formatted. ⚠️ NB: This functionality is currently unavailable in Altinn Studio  Example of usage: \r"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/storage-interfaces/v3/",
	"title": "v3",
	"tags": [],
	"description": "Overview of changes introduced in v3 of the Altinn.Platform.Storage.Interface package.",
	"content": "3.11.0 Extended models with support for markin a data element for automatic deletion  DataElement model has been extended with a new property deleteStatus. ApplicationMetadata.AppLogic has been extended with a new property autoDeleteOnProcessEnd.  3.10.0 Extended ApplicationMetadata/AppLogic with allowAnonymousOnStateless property  The AppLogic model has been expanded with a new property allowAnonymousOnStatelessto specify if data type can be accessed anonymously when used in stateless mode. Default is false as before and you need to opt in if you would like to enable anonymous access.  3.9.0 Extended EFormidlingContract with DPFShipmentType property  The EFormidlingContract model has been expanded with a new property DPFShipmentType to hold the DPF shipment type. Property is included to make routing easier for receiver, when included in the Arkivmelding.  3.8.0 Extended ProcessHistoryItem with performedBy property  The ProcessHistoryItem model has been expanded with a new property performedBy to hold an identification string for the entity that triggered the process event. This string can contain organisation number og person identification number.  3.7.0 Extended PlatformUser with national identity number property  The PlatformUser model has been expanded with a new property to hold national identity number.  3.6.0 Extended InstanceOwner with username property  The InstanceOwner model has been expanded with a new property to hold username.  3.5.0 Added CopyInstanceSettings to Application  The Application model has been expanded with a new property to hold CopyInstanceSettings. This property allows for enabling copying of application and specifies excluded data fields and types.  3.4.0 Added MessageBoxConfig to Applicaton  The Application model has been expanded with a new property to hold Message Box configuration.  3.3.0 Added Tags to the model DataElement  The DataElement model has been expanded with a new property to hold a list of tags.  3.2.0 New model OnEntryConfig  A new model, OnEntryConfig was added to support defining what should happen on entry on the application. The model has been added as a property to Application.  3.0.1 New model DataValues  A new model, DataValues was added to support updating data values on the instance.  3.0.0 Refactoring and model application/instance model changes Breaking changes  The PresentationField class was renamed to DataField. This was done to make the model more generic as it\u0026rsquo;s being used by the new DataFields property on the Application model as well as the existing PresentationFields property. All properties and the usage off the class remains the same.  Other changes  A new property, DataFields was added to support data field definitions on the Application model and a corresponding DataValues property on the Instance model to hold the actual values.  "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v6/",
	"title": "v6",
	"tags": [],
	"description": "Overview of changes introduced in v6 of the Altinn.App.* packages.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v6/breaking-changes/\u0026quot;\u0026gt;Breaking changes\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Oversikt over breaking changes introdusert i App Nuget-pakker i v6.0.0.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v6/whats-new/\u0026quot;\u0026gt;What\u0026amp;#39;s new\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in version 6.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v5/",
	"title": "v5",
	"tags": [],
	"description": "Overview of changes introduced in v5 of the Altinn.App.* packages.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v5/breaking-changes/\u0026quot;\u0026gt;Breaking changes\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of breaking changes introduced into app nuget packages in v5.0.0.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v5/whats-new/\u0026quot;\u0026gt;What\u0026amp;#39;s new\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in version 5.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v4/",
	"title": "v4",
	"tags": [],
	"description": "Overview of changes introduced in v4 of the Altinn.App.* packages.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v4/breaking-changes/\u0026quot;\u0026gt;Breaking changes\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of breaking changes introduced into app nuget packages in v4.0.0.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v4/whats-new/\u0026quot;\u0026gt;What\u0026amp;#39;s new\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in version 4.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v3/",
	"title": "v3",
	"tags": [],
	"description": "Overview of changes introduced in v3 of the Altinn.App.* packages.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v3/breaking-changes/\u0026quot;\u0026gt;Breaking changes\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of breaking changes introduced into app nuget packages in v3.0.0\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/v3/whats-new/\u0026quot;\u0026gt;What\u0026amp;#39;s new\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in version 3.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-studio/",
	"title": "Application construction components Altinn Studio",
	"tags": [],
	"description": "The application construction components for Altinn Studio includes all components uses to create the Altinn Studio Applications.",
	"content": "The following diagram shows the application construction construction for the Altinn Studio solution with its applications.\nSee fullscreen or download as visio\n\nBelow you find the application components for the different applications in the solution.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-studio/designer/\u0026quot;\u0026gt;Application Construction Components Designer\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Designer is split in two applications. One frontend created in REACT that communicates with the back-end application through rest-API.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-studio/loadbalancer/\u0026quot;\u0026gt;Application construction components Loadbalancer\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The loadbalancer for Altinn Studio is based on standard open source software.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-studio/repositories/\u0026quot;\u0026gt;Application construction components Repositories\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The application construction components for Repositories is based on standard open source software.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/test/automated-test-app/",
	"title": "App for automated test",
	"tags": ["development", "testing"],
	"description": "An app used solely for automated testing in the browser",
	"content": "Change of name app This is an app which should only be used to run automated tests against. It contains these components:\n Title Input Textarea Checkbox Radio button Attachment Datepicker Button   Rules The rules appends the text from the text feilds for new first, middle and last name and displays in a new field. The relevant code:\nnyttNavn: (obj) =\u0026gt; { obj.fornavn = obj.fornavn ? obj.fornavn + \u0026#39; \u0026#39; : \u0026#39;\u0026#39;; obj.mellomnavn = obj.mellomnavn ? obj.mellomnavn + \u0026#39; \u0026#39; : \u0026#39;\u0026#39;; obj.etternavn = obj.etternavn ? obj.etternavn : \u0026#39;\u0026#39;; return obj.fornavn + obj.mellomnavn + obj.etternavn; } nyttNavn: () =\u0026gt; { return { fornavn: \u0026#34;fornavn\u0026#34;, mellomnavn: \u0026#34;mellomnavn\u0026#34;, etternavn: \u0026#34;etternavn\u0026#34; } } } Conditional Rendering rules The app has several conditional rendering rules based on the values entered by the user in other fields. Below is an example code for one of the conditional rendering rules. The relevant code:\nsjekkNavnendringBekreftelse: (obj) =\u0026gt; { return (obj.value \u0026amp;\u0026amp; obj.value === \u0026#34;Ja\u0026#34;); } sjekkNavnendringBekreftelse: () =\u0026gt; { return { value: \u0026#34;Verdi\u0026#34; } } Prefill The app has a prefill defined in the InstantiationHandler.cs for fetching the current name of the user and display in an input component.\nValidation The app has many required field validation, without which the user will not be allowed to submit the app instance.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/back-end/app-template-and-deps/",
	"title": "App template and deps",
	"tags": ["development"],
	"description": "Guidelines for working with the app template and its dependencies",
	"content": "Process for updating app template and its dependencies Updating app template (Template files + depentent supporting projects)  Complete changes in template Get PR approved Push alpha nugets \u0026amp; update reference in Altinn.Apps/AppTemplate Merge to master Complete testing of new feature Once testing is completed and successful Create new branch. Push nugets without alpha based on the branch Duplicate changes in Altinn Studio template Update nuget reference in Altinn Studio template.  Updating Altinn Platform and app template  Code that requires changes in platform are merged in a seperate PR The platform code must be rolled out to all environments. Then, follow Updating app template for remaning changes.  If there is a need to deploy the code faster than the regular deploy schedule, a specific deploy should be considered.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/back-end/async-programming/",
	"title": "Async programming",
	"tags": ["development", "asynchronous-programming"],
	"description": "Guidelines for asynchronous programming",
	"content": "The way our solution is built there is a large need for asynchrous functionality. It is important for the development teams to be aware of best practices as well as which antipatterns to avoid.\nBest Practices Async Antipatterns Keep an eye out for anti-patterns and help the team to maintain a high quality in our code base.\nBlocking on tasks with .Result When an asynchronous call is needed in a synchronous method, the implementation below is quite common. This use of .Result ties up the thread that could be doing other useful work, but even more serious it might cause a deadlock.\nInstead of implementations like this:\npublic Party GetCurrentParty() { UserContext userContext = _userHelper.GetUserContext(HttpContext).Result; int userId = userContext.UserId; string cookieValue = Request.Cookies[_settings.GetAltinnPartyCookieName]; int.TryParse(cookieValue, out int partyId); (...) } Try using this:\npublic async Party GetCurrentParty() { UserContext userContext = await _userHelper.GetUserContext(HttpContext); int userId = userContext.UserId; string cookieValue = Request.Cookies[_settings.GetAltinnPartyCookieName]; int.TryParse(cookieValue, out int partyId); (...) } Whenever in a method that needs to call an asynchronous method, make the method itself asynchronous.\n"
},
{
	"uri": "https://docs.altinn.studio/api/scenarios/authentication/",
	"title": "Authentication",
	"tags": ["api"],
	"description": "How to authenticate using the APIs.",
	"content": "Authentication for application owners Application owners should be authenticated with Maskinporten.\nAPI provisioning in Maskinporten API-provider To provide an API in maskinporten Altinn has to do two operations.\n As API-provider Altinn registres a scope in Maskinporten POST /scopes { \u0026#34;prefix\u0026#34;: \u0026#34;altinn\u0026#34;, \u0026#34;subscope\u0026#34;: \u0026#34;instances/metadata.read\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Clients can access metadata for all instances for all apps of the organisation\u0026#34; }  As API-provider Altinn has to give access to its scope for a given organisation PUT /scopes/access/889640782?scope=altinn:apps.read Here we have given organisation 889640782 access to the scope altinn:instances/metadata.read. The organisation must then create a client that uses the scope.\n  API-consumer To access the Altinn API an organisation must create a client.\n As API-consumer the organisation must create a client in Maskinporten with scopes provided by Altinn: POST /clients { \u0026#34;client_name\u0026#34;: \u0026#34;altinnOrgRead\u0026#34;, \u0026#34;client_type\u0026#34;: \u0026#34;CONFIDENTIAL\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Client for accessing the my orgs app data\u0026#34;, \u0026#34;scopes\u0026#34;: [ \u0026#34;altinn:instances/metadata.read\u0026#34; ],  \u0026#34;token_reference\u0026#34;: \u0026#34;SELF_CONTAINED\u0026#34; }   Scopes scope names must follow the following regexp:\n^([a-z0-9]+\\/?)+[a-z0-9]+(\\.[a-z0-9]+)?$? It means that we cannot have - or _ in scope names.\nAll instances scope altinn:serviceowner/instances.read altinn:serviceowner/instances.write This is the most general scope which can be given to an organisation by Altinn. It means that the application owner can create a client that can access all instances of apps issued by that application owner.\nClients with write scope will be able to instantiate applications through direct access to the app\u0026rsquo;s api, update metadata, update process state, upload data, validate data, and change process of an instance.\nClients with read token will only be allowed to read metadata, data and events information.\nExchange of JWT token Application owners register clients in Maskinporten and selects the scope they need.\nA client is authenticated by Maskinporten and are given a Maskinporten JWT access token.\nThis token has to be validated and replaced with an Altinn JWT access token which should be used to access the apis.\nMaskinporten JWT access token (input) Client provides a self-contained access-token.\nAutorization: Bearer eyJraWQiOiJIdFlaMU1UbFZXUGNCV0JQVWV3TmxZd1RCRklicU1Hb081OFJ4bmN6TWJNIiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiJ0ZXN0X3JwIiwic2NvcGUiOiJ ... GET /authentication/api/v1/exchange/maskinporten The token looks something like this (after base64-decoding):\n{ \u0026#34;kid\u0026#34;: \u0026#34;HtYZ1MTlVWPcBWBPUewNlYwTBFIbqMGoO58RxnczMbM\u0026#34;, \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34; } . { \u0026#34;aud\u0026#34;: \u0026#34;https://tt02.altinn.no/maskinporten-api/\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;altinn:instances.write\u0026#34;, \u0026#34;iss\u0026#34;: \u0026#34;https://oidc-ver2.difi.no/idporten-oidc-provider/\u0026#34;, \u0026#34;client_amr\u0026#34;: \u0026#34;virksomhetssertifikat\u0026#34;, \u0026#34;token_type\u0026#34;: \u0026#34;Bearer\u0026#34;, \u0026#34;exp\u0026#34;: 1571935870, \u0026#34;iat\u0026#34;: 1571923870, \u0026#34;client_id\u0026#34;: \u0026#34;0de19f7a-f5fa-45d1-874c-3d2e88ce97d9\u0026#34;, \u0026#34;client_orgno\u0026#34;: \u0026#34;974760673\u0026#34;,  \u0026#34;jti\u0026#34;: \u0026#34;U3HMLIY8b_X454CADQzfttSuWpCADPQhc57iZXVF_Ac\u0026#34;, \u0026#34;consumer\u0026#34;: { \u0026#34;authority\u0026#34;: \u0026#34;iso6523-actorid-upis\u0026#34;, \u0026#34;ID\u0026#34;: \u0026#34;0192:974760673\u0026#34; } } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt; Maksinporten provides the legal consumer (the client) in ISO 6523 format. The client_orgno claim is deprecated.\nThe Altinn JWT Access token (output) The convert operation validates the incoming token and generates a new JWT token with the same scope as the token. The scopes is copied. The orgNumber and org is added by the token converter.\n{ \u0026#34;scope\u0026#34;: \u0026#34;altinn:instances.read altinn:instances.write\u0026#34;, \u0026#34;token_type\u0026#34;: \u0026#34;Bearer\u0026#34;, \u0026#34;exp\u0026#34;: 1571996946, \u0026#34;iat\u0026#34;: 1571995146, \u0026#34;client_id\u0026#34;: \u0026#34;0de19f7a-f5fa-45d1-874c-3d2e88ce97d9\u0026#34;, \u0026#34;client_orgno\u0026#34;: \u0026#34;974760673\u0026#34;, \u0026#34;jti\u0026#34;: \u0026#34;BcNIAuZKXdjpECmmwalAm-pcBp0iNc56T6eXhlxNBZE\u0026#34;, \u0026#34;consumer\u0026#34;: { \u0026#34;authority\u0026#34;: \u0026#34;iso6523-actorid-upis\u0026#34;, \u0026#34;ID\u0026#34;: \u0026#34;0192:974760673\u0026#34; }, \u0026#34;org\u0026#34;: \u0026#34;brg\u0026#34;, \u0026#34;orgNumber\u0026#34;: 974760673,  \u0026#34;iss\u0026#34;: \u0026#34;https://platform.altinn.cloud/\u0026#34;, \u0026#34;AuthenticateMethod\u0026#34;: \u0026#34;maskinporten\u0026#34;, \u0026#34;AuthenticationLevel\u0026#34;: 3, \u0026#34;nbf\u0026#34;: 1571995146 } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt; Authentication for end user system End user systems should be authentication with ID-porten. When authenticated the system may exchange an access token provided by ID-porten with an Altinn token by instructions below.\nExchange of JWT token This token has to be validated and replaced with an Altinn JWT access token which should be used to access the apis.\nID-porten JWT access token (input) Autorization: Bearer eyJraWQiOiJjWmswME1rbTVIQzRnN3Z0NmNwUDVGSFpMS0pzdzhmQkFJdUZiUzRSVEQ0IiwiYWxnIjoiUlMyNTYifQ.eyJhdF9 ... GET /authentication/api/v1/exchange/id-porten The token looks something like this (after decoding):\n{ \u0026#34;kid\u0026#34;: \u0026#34;cZk00Mkm5HC4g7vt6cpP5FHZLKJsw8fBAIuFbS4RTD4\u0026#34;, \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34; } . { \u0026#34;at_hash\u0026#34;: \u0026#34;IF-jpSLtMjzoHdEhLq9pnw\u0026#34;, \u0026#34;sub\u0026#34;: \u0026#34;PZcxQYOR_ylbrlj69pXn_HdTmrpDRpA3X0rTyOEyN5I=\u0026#34;, \u0026#34;amr\u0026#34;: [ \u0026#34;Minid-PIN\u0026#34; ], \u0026#34;iss\u0026#34;: \u0026#34;https://oidc-ver2.difi.no/idporten-oidc-provider/\u0026#34;, \u0026#34;pid\u0026#34;: \u0026#34;191080XXXXX\u0026#34;, \u0026#34;locale\u0026#34;: \u0026#34;nb\u0026#34;, \u0026#34;nonce\u0026#34;: \u0026#34;1584978003167642\u0026#34;, \u0026#34;sid\u0026#34;: \u0026#34;bQDBkJmjrX3bx2agu4q7BS5QW6TPf9CHnJX11vEthZg\u0026#34;, \u0026#34;aud\u0026#34;: \u0026#34;38e634d9-5682-44ae-9b60-db636efe3156\u0026#34;, \u0026#34;acr\u0026#34;: \u0026#34;Level3\u0026#34;, \u0026#34;auth_time\u0026#34;: 1584978021, \u0026#34;exp\u0026#34;: 1584978141, \u0026#34;iat\u0026#34;: 1584978021, \u0026#34;jti\u0026#34;: \u0026#34;_Og8JT1zMKzzHFB4WoVCdvqzmEpoY1hPhLa47bieJ94\u0026#34; } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt; The Altinn JWT Access token (output) The exchange operation validates the incomming token and generates a new JWT token that contains user data retrieved from the database using the provided pid (person identification number) and pre-existing data from the ID-porten token.\npid is referred to as ssn (social security number) i Altinn Platform.\n{ \u0026#34;nameid\u0026#34;: \u0026#34;20000011\u0026#34;, \u0026#34;urn:altinn:userid\u0026#34;: \u0026#34;20000011\u0026#34;, \u0026#34;urn:altinn:username\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;urn:altinn:partyid\u0026#34;: 50002119, \u0026#34;urn:altinn:authenticatemethod\u0026#34;: \u0026#34;Minid-PIN\u0026#34;, \u0026#34;urn:altinn:authlevel\u0026#34;: 3, \u0026#34;amr\u0026#34;: \u0026#34;Minid-PIN\u0026#34;, \u0026#34;pid\u0026#34;: \u0026#34;191080XXXXX\u0026#34;,  \u0026#34;locale\u0026#34;: \u0026#34;nb\u0026#34;, \u0026#34;nonce\u0026#34;: \u0026#34;1585045781364132\u0026#34;, \u0026#34;sid\u0026#34;: \u0026#34;BYSqEpVGRrh6rElmnzzTjcU0roC95rxNCC2kAsB2hmY\u0026#34;, \u0026#34;acr\u0026#34;: \u0026#34;Level3\u0026#34;, \u0026#34;auth_time\u0026#34;: 1585045793, \u0026#34;exp\u0026#34;: 1585047785, \u0026#34;iat\u0026#34;: 1585045985, \u0026#34;nbf\u0026#34;: 1585045985 } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt; Open ID Connect configuration This is work-in-progress. The response is still missing required information and might be inconsistent with actual authentication mechanisms.\r\rMetadata about Altinn as an Open ID provider is exposed as a .well-known endpoint as defined by OpenID Connect Discovery.\nThe primary porpose of this endpoint is to make available the Altinn signing certificate for the JSON Web Tokens being generated. It is recommended that clients of Altinn use this discovery endpoint to automatically have their systems updated when Altinn changes their signing certificate.\n   Environment URL     AT2x https://platform.at2x.altinn.cloud/authentication/api/v1/openid/.well-known/openid-configuration   YT01 https://platform.yt01.altinn.cloud/authentication/api/v1/openid/.well-known/openid-configuration   TT02 https://platform.tt02.altinn.no/authentication/api/v1/openid/.well-known/openid-configuration    "
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/authorization/",
	"title": "Authorization",
	"tags": [],
	"description": "How to define authorization rules (access management) for an app.",
	"content": "Authorization rules for an application is defined in a XACML policy file which is placed in the app repository. The XACML Policy contains one or more rules which define who can perform different actions on different resources.\nDescription of the XACML structure and definition of rules can be found here\nThe XACML file can be edited in a text editor of your choice.\nRules from the application template When an app is created in Altinn Studio it is based an the current asp.net template, and will include an autogenerated XACML policy file. The rules that are defined in this file is described below.\nThe aforementioned rules can be changed in policy.xml which lies in App/config/authorization in the application repository. Details about configuring the policy file can be found [here](/technology/architecture/components/application/solution/altinn-studio/designer/pap/xacmlpolicy/ You can also find a good amount of example rules here.\nPlease note that changes to the policy file is at your own risk,\rand that it is recommended to always delegate read permissions to entities with writing permissions.\r\rPermissions for roles The rules that give the CEO (DAGL) or accountant assistant (REGNA) permissions to instantiate, write read and delete instances of the application are defined in the policy file.\nA complete list of role types can be found here.\nPermissions for the application owner The application owner (organization) has rights to instantiate, write and read instances of the application. They also have permissions to mark instances as completed.\nRequired authentication level Reqired authentication level is set to 2 by default. This is done as an obligation in the XACML Policy file.\nIf the required authentication level is set to 4 you have to define that the service owner can interact with it through level 3 authentification for Maskinporten. This is because Maskinporten is defined as level 3. See the rule library for examples. Notice: the app requires nuget version3.1.5 or higher.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/configuration/authorization/rules/\u0026quot;\u0026gt;Rule library\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Library of authorization rules that can be used in an app. Remember to replace tags ([ORG], [APP], [RULE_ID]) with your own data.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/azure-devops/",
	"title": "Azure DevOps",
	"tags": ["development"],
	"description": "Guidelines for working with resources in Azure DevOps",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/azure-devops/pipelines/\u0026quot;\u0026gt;Pipelines\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Quality checklist and overview of pipelines in Azure DevOps\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;ul\u0026gt;\r\u0026lt;/ul\u0026gt;\r \rWe use Azure DevOps for building and deploying both our solution and the app owners applications.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/back-end/",
	"title": "Back-end",
	"tags": ["development"],
	"description": "Coding guidelines for back-end",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/back-end/app-template-and-deps/\u0026quot;\u0026gt;App template and deps\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for working with the app template and its dependencies\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/back-end/async-programming/\u0026quot;\u0026gt;Async programming\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for asynchronous programming\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/back-end/error-handling/\u0026quot;\u0026gt;Error handling\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for exception handling in backend logic.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/back-end/logging/\u0026quot;\u0026gt;Logging\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines logging in backend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/back-end/nuget-package/\u0026quot;\u0026gt;Nuget Package\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of nuget package usage in altinn studio\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/back-end/swagger/\u0026quot;\u0026gt;Swagger\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for setting up swagger\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/best-practices/",
	"title": "Best practices",
	"tags": ["development", "front-end"],
	"description": "Best practices for altinn.studio frontend",
	"content": "Altinn.studio best practices will be updated with more and better practices ;)\r\rBest practices  Simple lists should be sorted alphabetically  Form components (app-frontend) Form components (src/components) should, whenever possible, be \u0026ldquo;dumb\u0026rdquo; components that receive all their input from props. They should not have a direct connection to the store, and should not know anything about the store.\nSagas All logic used in a saga should be an exported function in the utils-folder. This is decided since we need to split up the logic from the fetching of data, so we have a more testable codebase. The saga only fetches data from the state, and sends the appropriate data to utils-functions.\nFolder Structure This is the best practice for folder structure in applications. Note that this is not necessarily how the folder structure is for all the apps, but when creating anything new, or cleaning up, this is how it should look.\n- src /\r- config /\r- config.json\r- exportedConfig.js\r- features / # routes,pages,features\r- [featureName] /\r- components /\r- containers /\r- resources /\r- featureSpecificData /\r- delete /\r- deleteFeatureSpecificDataActions.ts\r- deleteFeatureSpecificDataSagas.ts\r- fetch /\r- ...\r- upload /\r- ...\r- featureSpecificDataActions.ts\r- featureSpecificDataActionTypes.ts\r- featureSpecificDataReducers.ts\r- featureSpecificDataSagas.ts\r- selectors /\r- getSomeResourceSelector.ts\r- reducers /\r- featureNameReducer.ts\r- utils / # Feature specific utils\r- formFiller / # Example feature\r- components /\r- containers /\r- resources\r- attachments / # FileUpload example\r- delete /\r- deleteAttachmentsActions.ts\r- deleteAttachmentsSagas.ts\r- fetch /\r- fetchAttachmentsActions.ts\r- ...\r- upload /\r- ...\r- attachmentsActions.ts\r- attachmentsActionTypes.ts\r- attachmentsReducers.ts\r- attachmentsSagas.ts\r- selectors / - getSomeResouceSelector.ts\r- reducers /\r- formfillerReducer.ts\r- utils /\r- reducers /\r- index.ts\r- shared /\r- components / # Shared components\r- resources / # Shared resources\r- [resourceName] /\r- [action] /\r- \u0026lt;action\u0026gt;\u0026lt;resourceName\u0026gt;Actions.ts\r- \u0026lt;action\u0026gt;\u0026lt;resourceName\u0026gt;Sagas.ts\r- \u0026lt;resourceName\u0026gt;Actions.ts\r- \u0026lt;resourceName\u0026gt;ActionTypes.ts\r- \u0026lt;resourceName\u0026gt;Reducer.ts\r- \u0026lt;resourceName\u0026gt;Sagas.ts\r- language / # example resource\r- fetch /\r- fetchLanguageActions.ts\r- fetchLanguageSagas.ts\r- someAction /\r- someActionOnLanguageActions.ts\r- someActionOnLanguageSagas.ts\r- languageActions.ts\r- languageActionTypes.ts\r- languageReducer.ts\r- languageSagas.ts\r- types /\r- utils /\r- store\r- types\r- utils\r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/build/",
	"title": "Build",
	"tags": ["development", "front-end", "build"],
	"description": "Build documentation for altinn.studio frontend",
	"content": "App Frontend See details in the repository for how to build the project\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/general/",
	"title": "Cheat Sheet",
	"tags": ["development", "todo"],
	"description": "Qucik guide for different commands",
	"content": "GIT git clone repourl\ngit\nDocker docker ps to list all running docker containers.\nAKS kubectl get pods list all pods in current cluster\nkubectl -n default logs -f deployment/altinn-storage --all-containers=True - get logs for all components of the same deployment\nkubectl describe pod [pod name] describes current state and lists environment variables for a given pod\nkubectl delete pod [pod name] deletes a pod and a new pod of the same deployment will start\nkubectl set env [deployment] [key]=[value] update or insert new enviornment variable for a deployment\nMore useful kubectl commands can be found in Kubernetes' own documentation.\nHELM helm uninstall [deployment] deletes a helm release. Running pods in AKS cluster will also be deleted.\nMarkdown Azure CLI "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/securecoding/checklist/",
	"title": "Code Checklist",
	"tags": ["checklist", "OWASP", "security"],
	"description": "Checklist for security OWASP.",
	"content": "Below you find checklists used during coding. Important input have been OWASP Top 10 and CWE Top 25\nBackend checklist 1. Are input validated? Url parametes, post parameters and other that are store or presented in application.\nExamples from the Altinn 3 is validaton of file names. used here.\nThis is related to OWASP Top 10 no 1.\n2. Does API requires authenticted user? All API\u0026rsquo;s need to require authenticated user or system. For .Net core application this means that it need to have the [Authorize] tag\nExample from InstancesController in Storage\n[Authorize] [HttpPost] [Consumes(\u0026#34;application/json\u0026#34;)] [ProducesResponseType(StatusCodes.Status201Created)] [ProducesResponseType(StatusCodes.Status400BadRequest)] [Produces(\u0026#34;application/json\u0026#34;)] public async Task\u0026lt;ActionResult\u0026lt;Instance\u0026gt;\u0026gt; Post(string appId, [FromBody] Instance instance) 3. Does API validate correct authorization policy? For each API the developer needs to identify the correct authorization policy required to be validated.\nThis could be that read or write access need to be authorized.\nExample from InstancesController in Storage\n[Authorize(Policy = AuthzConstants.POLICY_INSTANCE_DELETE)] [HttpDelete(\u0026#34;{instanceOwnerPartyId:int}/{instanceGuid:guid}\u0026#34;)] [ProducesResponseType(StatusCodes.Status200OK)] [ProducesResponseType(StatusCodes.Status204NoContent)] [ProducesResponseType(StatusCodes.Status400BadRequest)] [ProducesResponseType(StatusCodes.Status404NotFound)] [Produces(\u0026#34;application/json\u0026#34;)] public async Task\u0026lt;ActionResult\u0026lt;Instance\u0026gt;\u0026gt; Delete(int instanceOwnerPartyId, Guid instanceGuid, [FromQuery] bool hard) This is related to OWASP Top 10 no 5. and CWE-862\n4. Dont run application with to high priveliges. Are the docker containers running with the correct priveliges?\nsecurityContext: runAsUser: 1000 runAsGroup: 3000 allowPrivilegeEscalation: false Example from Dockerfile\nRUN addgroup -g 3000 dotnet \u0026amp;\u0026amp; adduser -u 1000 -G dotnet -D -s /bin/false dotnet USER dotnet RUN mkdir /tmp/logtelemetry 5. Protect against Cross-site requeste forgery It is important that every endpoint that is exposed to users validates antiforgery tokens to make sure we protect against Cross-site request forgery.\nAs part of the platform their has been created a custom authorization filter to protect against CSRF for endpoints beeing access by using cookie or token. This is enabled with using [AutoValidateAntiforgeryTokenIfAuthCookie] on methods or controllers.\nExample from datacontroller\n[AutoValidateAntiforgeryTokenIfAuthCookie] [Route(\u0026#34;{org}/{app}/instances/{instanceOwnerPartyId:int}/{instanceGuid:guid}/data\u0026#34;)] public class DataController : ControllerBase Frontend "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/component-library/",
	"title": "Component Library",
	"tags": ["development"],
	"description": "Component documentation for altinn.studio",
	"content": "WARNING: Component library will be documented when the [task](https://github.com/Altinn/altinn-studio/issues/168) is done.\r\rSummary All shared components are to be documented in Markdown with inline JSX.\n All shared components shall have a corresponding component.md file in the same directory. The shared component must hava a default export function AND also exporting the rendered function. React Styleguidist is used to build the documentation site. The Component Library is currently a local dev server  Running dev server  \u0026ldquo;yarn run styleguide\u0026rdquo; from src\\react-apps\\applications\\shared\n Inline comments on props  Reacy Styleguidist supports inline comments. Props should have inline comments.  export interface IAltinnButtonComponentProvidedProps extends WithStyles\u0026lt;typeof styles\u0026gt; { /** Button ID */ id?: any; /** @ignore */ classes: any; /** Text shown on button */ btnText: string; /** onClick function */ onClickFunction?: any; /** Class objects created with Material-Ui\u0026#39;s createStyle */ className?: any; /** Secondary styling */ secondaryButton?: boolean; /** Disabled styling */ disabled?: boolean; } Example markdown ### Default button  ```jsx \u0026lt;AltinnButton btnText=\u0026#39;Altinn button with some text\u0026#39; /\u0026gt; ``` ### Disabled button  ```jsx \u0026lt;AltinnButton btnText=\u0026#39;Disabled button\u0026#39; disabled={true} /\u0026gt; ``` ### Secondary button  ```jsx \u0026lt;AltinnButton btnText=\u0026#39;Secondary button\u0026#39; secondaryButton={true} /\u0026gt; ``` ### Click function  Altinn button supports onClickFunction via the onClickFunction prop. ```jsx const myFunc = () =\u0026gt; { console.log(\u0026#39;My Function\u0026#39;); } \u0026lt;AltinnButton btnText=\u0026#39;Button with onClickFunction\u0026#39; onClickFunction={myFunc} /\u0026gt; ``` ### Styling  Altinn button also supports Material-UI class objects (classes.someObject) passed via the optional className prop. ```jsx static \u0026lt;AltinnButton btnText=\u0026#39;Secondary button\u0026#39; className={classes.someClassObject} /\u0026gt; ``` "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/cosmosdb/",
	"title": "Cosmos DB",
	"tags": ["development"],
	"description": "General guidelines and best practice for working with Cosmos DB",
	"content": "Querying documents in CosmosDB Use FeedResponse to retrieve all hits The documents in a collection might be stored in different partitions. When querying documents in a collection, the response will only contain documents from a single partition at a time, to retrieve your hits across all partitions you may utilize the the continuation token or the HasMoreResults property of the DocumentQuery.\nAvoid expensive queries CosmosDB uses indexes to find matches for the queries, if there is not value for the indexed property, all instances will have to be checked to figure out if there is a match for the query. This occurs in cases where we assert that a property is null, so queries like this should be avoided.\nAlways try to assert on an existing value, if this is not possible modifying the data model should be considered.\n"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/first-time-setup/",
	"title": "Create user in Altinn Studio",
	"tags": ["translate-to-english"],
	"description": "Configure your user in Altinn Studio for the first time.",
	"content": "Lag en bruker i Altinn Studio Din Altinn Studio bruker er personlig for deg og kan knyttes til en eller flere organisasjoner for å samarbeide med andre og få tilgang til eksisterende apper.\n\rVis/skjul innhold\r\rLag bruker med GitHub brukernavn\r\r\r Velg å logge inn på altinn.studio. På “Logg in”-siden, klikk på knappen “Har du en Github konto? Registrer deg med den her”.  Logg inn i GitHub hvis du ikke allerede er det.  Godkjenn at Altinn Studio bruker din GitHub-konto for å logge inn.  Lage en Altinn Studio bruker ved å fylle ut brukernavn, epost, passord, en captcha og klikk på “Fullfør”.\nBrukeren i Altinn Studio vil bli koblet til din GitHub-bruker og du er klar for å begynne arbeide med din første applikasjon.   \r\r \rVis/skjul innhold\r\rLag en bruker med epostadresse (uten GitHub)\r\r\r På “Logg inn”-siden, klikk på knappen “Behov for konto? Registrer deg nå.”  Lage en Altinn Studio bruker ved å fylle ut brukernavn, epostadresse, passord, en captcha og klikk på “Fullfør”. Du er nå klar for å begynne arbeide med din første applikasjon.   \r\r Bli del av en organisasjon Organisasjoner i Altinn Studio er det samme som tjenesteeiere i Altinn. De eier applikasjonene og gjør det mulig for flere innen samme organisasjon å samarbeide.\nFor å bli del av en organisasjon tar du kontakt med administrator for organisasjonen du arbeider for som legger deg til. Hvis du er usikker på hvem som er administrator eller du ikke vet om organisasjonen din er satt opp i Altinn Studio, kan du spørre Altinn servicedesk om hjelp.\nOpprette en organisasjon Det er Altinn som oppretter organisasjoner i Altinn Studio. For å kunne få en organisasjon i Altinn studio må du ha en avtale med Altinn.\nSend en mail til Altinn Servicedesk med navn på organisasjonen og hvem som skal være administrator for å opprette en ny organisasjon. Det vil kunne ta noen dager å opprette organisasjonen og du vil få en mail så fort det er gjort.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/test/cypress/",
	"title": "Cypress",
	"tags": ["development", "testing", "web"],
	"description": "Functional Testing of Altinn Studio and Altinn app-frontend with Cypress",
	"content": "Cypress is a next generation front end open-source testing tool built for the modern web. Read more about Cypress here.\nPrerequisite  Cypress lists the requirement for the tests here.  Run the tests Cypress test project has a simple read me which describes how one can install the dependencies, start the solution and run the tests.\nAltinn Studio tests git clone https://github.com/Altinn/altinn-studio.git The tests on altinn studio are run from an azure devops pipeline and the results are recorded in cypress dashboard with tag: altinn-studio.\nFolder structure  Test files are under src/test/cypress/e2e/integration. Static files are under src/test/cypress/e2e/fixtures. Pageobjects with the css selector are under src/test/cypress/e2e/pageobjects. Custom cypress commands are under src/test/cypress/e2e/support. src/test/cypress/cypress.json has most of the configuration for the test. configuration for the different environment are placed under src/test/cypress/e2e/config src/test/cypress/package.json has test dependencies and scripts.  Write tests  Identify the test and find the .js file under integration folder where the test must be placed. Add the new CSS selectors under pageobjects. Add custom cypress command under support for reusability across the tests. Add the static files (response json of XHR, texts) under fixtures.  Read cypress documentation for more information on writing tests\nLinting and Formatting  The test projects has scripts for linting og formatting. Run yarn run eslint:check and yarn run prettier:check for checking the deviations from config of eslint and prettier. Run yarn run eslint:fix and yarn run prettier:format to correct the lint and formatting fails.  Run tests locally and debug  Make sure all the solutions are running according to the readme file for the solution to be tested. Open cypress by running yarn run cy:open -e environment=local. Choose the browser and the test.js file that has to be run. Use cy.log() for checking runtime values. And Cypress by default starts the test again when there is a change in the files. Use console in the browser developer tools where Cypress prints results from a cypress command.  App-frontend tests git clone https://github.com/Altinn/app-frontend-react The tests on altinn-app-frontend are run from github actions and are triggered when a pull request or changes are merged to the files. The tests are run on apps deployed to TT02 pointing to localhost app frontend. Tests are run in parallel and the recorded in cypress dashboard with tag:altinn-app-frontend.\nFolder structure  Test files are under test/cypress/e2e/integration. Static files are under test/cypress/e2e/fixtures. Pageobjects with the css selector are under test/cypress/e2e/pageobjects. Custom cypress commands are under test/cypress/e2e/support. test/cypress/cypress.json has most of the configuration for the test. configuration for the different environment are placed under test/cypress/e2e/config test/cypress/package.json has test dependencies and scripts.  Write tests  Identify the test and find the .js file under integration folder where the test must be placed. Add the new CSS selectors under pageobjects. Add custom cypress command under support for reusability across the tests. Add the static files (response json of XHR, texts) under fixtures.  Read cypress documentation for more information on writing tests\nLinting and Formatting  The test projects has scripts for linting og formatting. Run yarn run eslint:check and yarn run prettier:check for checking the deviations from config of eslint and prettier. Run yarn run eslint:fix and yarn run prettier:format to correct the lint and formatting fails.  Run tests locally and debug  Make sure all the solutions are running according to the readme file for the solution to be tested. Open cypress by running yarn run cy:open -e environment=local. Choose the browser and the test.js file that has to be run. Use cy.log() for checking runtime values. And Cypress by default starts the test again when there is a change in the files. Use console in the browser developer tools where Cypress prints results from a cypress command.  "
},
{
	"uri": "https://docs.altinn.studio/api/apps/data-elements/",
	"title": "Data elements",
	"tags": ["api"],
	"description": "The app API to work with the data elements associated with an instance.",
	"content": "Overview A data element consist of two parts: its metadata document and the actual data blob. This API work primarily with the blob while keeping the metadata document updated.\nbasePath\n{org}/{appname}/instances/{instanceOwnerPartyId}/{instanceGuid}/data Get data Endpoint for downloading the data blob.\nGET basePath/{dataGuid} Accept: application/{xml/json} The response will depend on the type of blob. There are currently 2 primary types: form data based on a model and attachments. An Accept header in a request will be considered only when the requested data element is connected to a data model. The header is then used to pick a serializer for the data.\nResponse with form data A response with form data will either be a json or xml serialized version of the data model depending on the Accept header in the request. The value application/xml will result in an XML document and the value application/json will result inn a JSON document.\nResponse with attachment A response with a file attachment will be a file stream. Content-Type will be the same as the original value given when the file was uploaded. The same is true for the file name.\nContent-Disposition: attachment; filename=cute_cat.png; filename*=UTF-8\u0026#39;\u0026#39;cute_cat.png Content-Length: 16994 Content-Type: image/png Upload data Endpoint for uploading a new data element on a specific instance.\nPOST basePath?dataType={data type name} The dataType parameter is required and should reference one of the data types defined on the application. Data types with an appLogic property are linked to a form and will have data validation and calculation rules associated with them. Data types without an appLogic property will be handeled as an attachment and streamed directly to storage.\nRequest Content-Type is handled a little differently between the two cases:\n If a request is uploading form data, the Content-Type is used by Altinn to deserialize the request into a strongly typed object. A request must either be application/json or application/xml. No other Content-Types are supported. Content-Type is not validated against allowed Content-Types on the data type. If a request is uploading an attachment, the validation of Content-Type will depend on the rules of the data type.  If the data type has no Content-Type requirements, there will be no validation and the request can contain any Content-Type. If the data type has Content-Type requirements, there is a new set of checks.  The request Content-Type must either be application/octet-stream or match the MIME type of the file being uploaded. Altinn will perform a mapping from file extension to MIME type before comparing with Content-Type. As an example we can see that .xml will map to text/xml and not application/xml. If the data type allow Content-Type application/octet-stream no further validation is performed. If not, the identified MIME type must match one of the allowed Content-Types on the data type.      Uploading form data as application/json Content-Type: application/json { \u0026#34;dataFormatProvider\u0026#34;: \u0026#34;SERES\u0026#34;, \u0026#34;dataFormatId\u0026#34;: \u0026#34;5703\u0026#34;, \u0026#34;dataFormatVersion\u0026#34;: \u0026#34;34553\u0026#34;, \u0026#34;Tjenesteeier\u0026#34;: null, \u0026#34;Kontaktperson\u0026#34;: { \u0026#34;navn\u0026#34;: \u0026#34;Sophie Salt\u0026#34;, \u0026#34;epost\u0026#34;: \u0026#34;1337@altinnstudiotestusers.com\u0026#34;, \u0026#34;telefonnummer\u0026#34;: \u0026#34;90001337\u0026#34; }, \u0026#34;OEnsketBruk\u0026#34;: null } Uploading form data as application/xml Content-Type: application/xml \u0026lt;BliTjenesteeier_M xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; dataFormatProvider=\u0026#34;SERES\u0026#34; dataFormatId=\u0026#34;5703\u0026#34; dataFormatVersion=\u0026#34;34553\u0026#34;\u0026gt; \u0026lt;Kontaktperson\u0026gt; \u0026lt;navn\u0026gt;Sophie Salt\u0026lt;/navn\u0026gt; \u0026lt;epost\u0026gt;1337@altinnstudiotestusers.com\u0026lt;/epost\u0026gt; \u0026lt;telefonnummer\u0026gt;90001337\u0026lt;/telefonnummer\u0026gt; \u0026lt;/Kontaktperson\u0026gt; \u0026lt;/BliTjenesteeier_M\u0026gt; Uploading an attachment An example of a request uploading a PDF file.\nContent-Type: application/pdf Content-Disposition: attachment; filename=\u0026#34;receipt.pdf\u0026#34;; filename*=UTF-8\u0026#39;\u0026#39;receipt.pdf Content-Length: 16994 %PDF-1.4 %Óëéá 1 0 obj ... Response example The endpoint returns the data element metadata document that was created.\n{ \u0026#34;id\u0026#34;: \u0026#34;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026#34;, \u0026#34;instanceGuid\u0026#34;: \u0026#34;762011d1-d341-4c0a-8641-d8a104e83d30\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;contentType\u0026#34;: \u0026#34;application/xml\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;org/app/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026#34;, \u0026#34;selfLinks\u0026#34;: { \u0026#34;apps\u0026#34;: \u0026#34;{appPath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;{storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026#34; }, \u0026#34;filename\u0026#34;: \u0026#34;default.xml\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-03-06T15:00:23Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;org23\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2019-03-07T15:00:23Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;org23\u0026#34;, \u0026#34;size\u0026#34;: 20001, \u0026#34;locked\u0026#34;: false } Replace data Endpoint for replacing the content of an existing data element with new data. The new data must match the data type of the data element it is replacing.\nPUT basePath/{dataGuid} The endpoint works exactly like the endpoint for uploading a new data element.\nDelete data Endpoint for deleting an existing data element. It is currently not possible to delete the data for a form this way.\nDELETE basePath/{dataGuid} "
},
{
	"uri": "https://docs.altinn.studio/app/development/data/data-model/",
	"title": "Data model in Altinn Studio",
	"tags": [],
	"description": "How to import or view the data model in Altinn Studio.",
	"content": "Data modeling functionality is planned for Altinn Studio. The temporary functionality is therefore very limited.\r\rUpload / show data model The data model defines which data can be submitted through an app and the format used when submitting. As of now, the data model must be defined as an XSD in an external tool - preferably Seres Domain Client.\nA data model must be uploaded for each app.\n Open the app from the dash board Choose the tab Lage In the navigation menu choose Data model  Click Choose XSD and choose the XSD in the file picker Click Upload  The data model is then parsed and all necessary files are generated and saved in the app repository. These files can be viewed by choosing the different tabs on the data model page.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/deployment/",
	"title": "Deployment",
	"tags": ["development", "deploy"],
	"description": "Guidelines for deploying",
	"content": "ci build devops pipeline pipelines Build process Build Pipelines Quality Build Building the docker image, running tests and checking code. Triggered by:\nGit Push Pull Request Altinn Studio and Runtime Docker Images Separate pipelines are made for Altinn Studio and Runtime. The pipeline will build and deploy the Altinn Studio Docker Image and the Runtime Docker Image to Azure Container Registry.\nTriggered by:\nGit Merge to Master Altinn Studio Release Build When the build for either Altinn Studio or Runtime is successfully ran a release build will start. The release build will update the kubernetes cluster with the images created in the Altinn Studio and the Runtime builds\nTriggered by:\nSuccessfull build of either/both Altinn Studio and Runtime Altinn Service Deploy\nService Runtime docker image bundling process. Building the Altinn Service with “service specific” files from Gitea, creating a “Service Image”, deploying to Azure Container Registry and telling Kubernetes to deploy service.\nBuild process (Pipeline):\nThis process have more details in the Dockerfile. This is a summary.\nDownloading files from service repo in Gitea Building Docker base image with Dockerfile. This includes “Dotnet build” for C# files from Gitea. “Dotnet build” is executed on the Runtime Base Image reusing previous. Docker Pull: Altinn/Runtime Base Image with SDK from ACR. This makes the AltinnService build faster. Clone and build code from Gitea inside Altinn-Runtime Base Image. Docker Pull: Microsoft/DotNet AspNetCore. Copy Altinn Runtime, AltinnService Build files and Service Metadata/Resources from Gitea. Publish to ACR. Triggered by:\n“Publish Service”-button in Altinn Studio. Generating Altinn Pipelines Images Summary The Altinn Azure Pipelines Image (image) is built with Packer. The Packer JSON configuration is based on the same configuration used by Microsoft to build their own Hosted Agent images. The image is built in Azure Pipelines passing in “secrets” to the Packer configuration with Environment Variables not visibly available during the build process. Usage Create a Virtual Machine in Azure using the pre built image found under “browse all images and disks”. Create a username and password (should be stored in Azure Vault). Installing Agent Host The script for installing the Agent Host is found at: Maintenance/azure-pipelines-image/scripts/agent/agent-install.sh (Currently a manual job)\nA computer can have one or several Agent Hosts installed. Several Agents, on one or several servers, can connect to one Agent Pool.\nCreating Pipelines Image with Packer.io The process of creating an Image with Packer is described here\nSome steps might already be performed in Azure.\nThe repo for creating the Pipelines Image for Altinn is hosted in this branch and is based on the Microsoft Packer scripts from this repo\nThe variables used in the Packer JSON configuration file is passed in via hidden Pipelines environment variables.\nUbuntu1604-full The “full” image contains components for building Dotnet and NodeJS applications, running JavaScript based headless tests and running Docker Images. See the JSON file for specifications.\nUbuntu1604-light The “light” image only contains Git and Docker and is created for only running Docker images.\nClean-up Packer creates Resource Groups in Azure keeping the image build for history and debuggind purposes. To remove this Resource Group run AZ Cli:\naz group delete -n PackerResourceGroup\nDeleting build queue If there is the need to delete builds in the Azure Devops pipelines queue, you can use the DELETE rest API found here. You can use PostMan. Rememember to copy the cookies from an authenticated browser.\n"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/navigation/designer/",
	"title": "Designer",
	"tags": ["translate-to-english"],
	"description": "How to navigate in Altinn Studio Designer.",
	"content": "Designer er verktøyet du starer i etter å ha logget inn på https://altinn.studio. Det er et verktøy for å opprette, konfigurere og deploye apper.\nNavigere til en app Alle apper du har tilgang til å endre på vises på dashboardet. Gå til appen ved å klikke på appen. Dersom du ikke har en lokal klone av appen, vil du bli bedt om å opprette det.\nHvis du ønsker å gå til app-repositoryet når du er inne i en app i Designer, er det en lenke i menyen som ligger i profilmenyen øverst til høyre.\nRedigere en app Det er to navigasjonsmenyer - en toppmeny og en venstremeny.\nI toppmenyen kan du navigere mellom ulike funksjonelle områder av applikasjonen. I venstremenyen kan du navigere innad i området.\n Om  Om appen   Lage  Datamodell UI-Editor Tilgangsstyring   Språk  Tekster   Deploy  "
},
{
	"uri": "https://docs.altinn.studio/api/authentication/enterpriseuser/",
	"title": "Autentication with enterprise users",
	"tags": [],
	"description": "Description how to use enterprise users in Altinn 3",
	"content": "Overall description Enterprise users is a concept where you can use a enterprise certificate in combination with a username and password.\nEnterprise users must be assigned roles and / or rights from the organization to which they belong, but the user can then use these the rights in machine to machine communication with Altinn without that someone in the business needs to be involved in authorization.\nEnterprise users in Altinn 3 Enterprise users in Altinn 3 can be used via regular business user login on Altinn.no with a certificate stored in a browser but is most relevant in connection with API use.\nThis is done in a 2 step process. First you autehenticate the organization using Maskinporten and than you add username and password together\nthe machine port for the actual authentication of the certificate, as well as an exchange of the machine port token together with the username and password.\nAdministration of Enterprise users is documented [here] (https://altinn.github.io/docs/api/rest/kom-i-gang/virksomhetsbrukere/).\nLogin and exchange of tokens are documents here [here] (https://altinn.github.io/docs/api/rest/kom-i-gang/virksomhet/#autentisering-med-virksomhetsbruker-og-maskinporten)\nPostman example can be found [here] (https://github.com/Altinn/altinn-studio/blob/master/src/test/Postman/collections/Organization.postman_collection.json).\nFurther use against the Altinn App API and Platform API is similar to having an Altinn token based on an ID port session.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/back-end/error-handling/",
	"title": "Error handling",
	"tags": ["development", "error-handling"],
	"description": "Guidelines for exception handling in backend logic.",
	"content": "Exception Handling Exception handling is the act of catching an exception with the intention of handling the situation so that normal execution flow can continue. It should not be used as any part of an expected execution flow. It should also be avoided if the situation continue to be unrecoverable.\n.Net core provides a default middleware UseExceptionHandler that will catch exceptions and log them. You can read more about this here. This is the preferred mechanism when it comes to dealing with errors the application logic is unable to handle elegantly on its own. The middleware should be configured to generate a response that is appropriate for the running environment.\nExceptions that can be handled by the application logic should be handled as soon and as specific as possible. The following example is found in the platform Storage application. More specifically the DataController.GetDataElementAsync method.\nActionResult errorMessage; try { DataElement dataElement = await _dataRepository.Read(instanceGuid, dataGuid); return (dataElement, null); } catch (DocumentClientException dce) { if (dce.StatusCode == HttpStatusCode.NotFound) { errorMessage = NotFound($\u0026#34;Unable to find any data element with id: {dataGuid}.\u0026#34;); } else { throw; } } In this example the try..catch is interested only in the DocumentClientException, and on top of that only when the StatusCode is NotFound. All other exceptions and exception reasons are ignored and will end up in the .Net Core middleware.\nAPI Response Exceptions that are handled by application logic can result in almost any response. The outcome will depend on the type of exception and how it is handled:\n 200 - Ok - The original request is considered successfully processed. 400 - BadRequest - The exception was caused by a faulty request. In this case it is preferred that the application logic does active validation instead of needing to deal with an exception. 401 - Unauthorized - Similar to BadRequest, but logic is associated with authentication. 403 - Forbidden - Similar to BadRequest, but logic is associated with authorization. 404 - NotFound - The requested resource does not exist.  By limiting the usage of status codes, we can ease the handling of different status codes at client side. Application logic should (ideally) never produce a 500 response. Exceptions that are not handled by application logic, but the default middleware will always result in a response with status code 500.\nMiddleware configuration Handling of unrecoverable errors should be done by the built in middleware mentioned previously. The configuration should be different between production environments and other environments. In development and staging environments the middleware should allow detailed exception information to be exposed by the API.\nConfiguration of the middleware is done in the Startup.Configure method. This is an example from the platform Storage application:\nif (env.IsDevelopment() || env.IsStaging()) { app.UseDeveloperExceptionPage(); } else { app.UseExceptionHandler(\u0026#34;/storage/api/v1/error\u0026#34;); } This configuration requires an ErrorController that can handle the server side redirect performed by the middleware. The following code sample is a stipped version of the ErrorController in the platform Storage application:\n[ApiController] [ApiExplorerSettings(IgnoreApi = true)] [AllowAnonymous] [Route(\u0026#34;storage/api/v1\u0026#34;)] public class ErrorController : ControllerBase { [Route(\u0026#34;error\u0026#34;)] public IActionResult Error() =\u0026gt; Problem(); } "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/error-handling/",
	"title": "Error handling",
	"tags": ["development", "error-handling"],
	"description": "Guidelines for error handling front-end",
	"content": "This page is a work-in-progress. Because we do not have details on how potential errors should be shown to the users, this is only a general overview currently. More details will be added once we have a functional understanding of how users should experience errors. \rReact components Error boundaries Error boundaries are React\u0026rsquo;s official way of handling errors that occur in a component. This functionality is available from React 16. Using this allows a component to fail without unmounting the whole application, and allows us to control how the user is exposed to unexpected errors.\nSee the official React documentation or this official blog post for more information about error boundaries and how to implement them.\nWe need a generic error boundary component that can be configured and reused for all of the sub-applications. Each sub-application should be wrapped in this error boundary component. This will allow the main applications (service-development and dashboard) to keep functioning even though any sub-applications throw an error.\nIn addition we should have a generic \u0026ldquo;something went wrong\u0026rdquo; error boundary for the main applications.\nWithin the sub-applications, it may be beneficial to implement error boundaries around key components. This will typically be relevant for components that act as containers for other components. An example could be the preview-component in the UI-editor, which shows the working surface of the forms designer.\nEvent handlers Error boundaries do not catch errors that occur within event handlers, as mentioned in the official React documentation. Thus, any direct API calls from within an event handler in a React component should be wrapped in a try/catch block.\nOptional props Any use of props that have been defined as optional should be done together with a null/undefined-check, to make sure that the prop is actually available.\nRedux Actions All actions should have sibling actions for success and error. See naming conventions for actions. The success action is triggered when everything is ok, while the error action is triggered if something goes wrong.\nSagas If a saga needs to make an API call (or uses logic/utils that make API calls), this should be wrapped in a try/catch block. If an error occurs, this should be logged and the corresponding error action should be triggered. If no error occurs then the corresponding success action should be triggered. See here for more information on actions and sagas.\nReducers If an error handling action is triggered, the reducer should update the corresponding error object in the state to reflect that an error has occured.\nLogging errors We need to decide if all errors should be logged on the server or not. If all front-end errors should be logged on the server, we need to create an API we can call from the front-end to to the logging. \rAll errors that are caught should be logged to the console using console.error.\n"
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/file-upload/",
	"title": "File upload",
	"tags": [],
	"description": "The file upload module lets the user upload one or multiple files",
	"content": "You should not request that the user upload an attachment unless it is strictly necessary for the service. Before requesting a file upload, check if the data can be collected differently, perhaps through an API?\nGuidelines:  Be as flexible as possible as to which file types are accepted. Not everyone has the competence to change file types/formats, or compress files. If the upload has an error, be as specific as possible in the error message. Saying \u0026ldquo;Incorrect format\u0026rdquo; is not enough, the requirement has to be exactly specified. If your form requires multiple attachments of different types/categories, we recommend requesting them in multiple steps with a file upload module for each step. Specify what should be uploaded on each page, so that the user is never in doubt.  Example of usage: \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/",
	"title": "Front-end",
	"tags": ["development", "front-end"],
	"description": "Coding guidelines for front-end",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/getting-started/\u0026quot;\u0026gt;Getting started\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Get started working with the frontend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/developing/\u0026quot;\u0026gt;Developing locally\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Running the frontends locally for development\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/routine/\u0026quot;\u0026gt;Routines for development\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Describes routines for developing frontend code for resources in the DevOps team.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/new-component/\u0026quot;\u0026gt;Creating components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Get started creating new form components for the apps\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/react/\u0026quot;\u0026gt;React\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for using React in Altinn Studio\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/redux/\u0026quot;\u0026gt;Redux\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for using Redux in Altinn Studio\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/debug/\u0026quot;\u0026gt;Debug\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Debug documentation for altinn.studio frontend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/best-practices/\u0026quot;\u0026gt;Best practices\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Best practices for altinn.studio frontend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/build/\u0026quot;\u0026gt;Build\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Build documentation for altinn.studio frontend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/component-library/\u0026quot;\u0026gt;Component Library\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Component documentation for altinn.studio\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/error-handling/\u0026quot;\u0026gt;Error handling\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for error handling front-end\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/postmessage/\u0026quot;\u0026gt;Post Message\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for using post message functionality in Altinn Studio\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/styling/\u0026quot;\u0026gt;Styling (css)\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for styling components in Altinn Studio\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/versioning/\u0026quot;\u0026gt;Versioning\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for versioning of front-end\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/cheatsheet/",
	"title": "General",
	"tags": ["development", "todo"],
	"description": "General coding guidelines",
	"content": "TODO\nGit git add .\ngit commit -m \u0026ldquo;\u0026rdquo;\nRevert local commit git reset --soft HEAD~1 Azure CLI az login --use-device-code Kubectl "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/getting-started/",
	"title": "Getting started",
	"tags": ["development"],
	"description": "Information about how to get started",
	"content": "\r.highlight-source-batchfile {\rcolor: #fff !important;\r}\r\r\r\r\rlet content = document.getElementById('readmeContent');\rif (content.innerHTML === '') {\rcontent.innerHTML = 'Loading from github...';\r} axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://github.com/Altinn/altinn-studio/blob/master/README.md`)\r.then((res) = {\rconst doc = new DOMParser().parseFromString(res.data, \"text/html\");\rcontent.innerHTML = doc.getElementById('readme').innerHTML;\r});\r\r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/git/",
	"title": "Git",
	"tags": ["development", "git"],
	"description": "Information about version control with Git",
	"content": "\r\r\rlet content = document.getElementById('contributionContent');\rif (content.innerHTML === '') {\rcontent.innerHTML = 'Loading from github...';\r}\raxios.get(`${'https://cors-anywhere.herokuapp.com/'}https://github.com/Altinn/altinn-studio/blob/master/CONTRIBUTING.md`)\r.then((res) = {\rconst doc = new DOMParser().parseFromString(res.data, \"text/html\");\rcontent.innerHTML = doc.getElementById('readme').innerHTML;\r});\r\r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/routing/traefik/installation/",
	"title": "Installation of Traefik 2.0",
	"tags": ["development", "routing", "traefik", "installation"],
	"description": "How to install traefik",
	"content": "Installation of traefik is done through helm, and we have a traefik helm chart for Altinn Tjenester 3.0.\nIf there is a fresh installation of traefik 2.0 with helm 3.0, make sure that there is a folder called crds in that helm chart folder. After that it is just to install with helm, and wait for the traefik service to have a public IP before updating the Azure DNS zone with a A record.\n"
},
{
	"uri": "https://docs.altinn.studio/api/storage/instances/",
	"title": "Instances",
	"tags": ["api"],
	"description": "The Platform API to work with instances",
	"content": "Overview An instance works as a form of envelope or folder where data can be collected and exchanged between the user and owner of the application. The instance document is a way for Altinn and external parties to track the state of one specific data exchange. How long an instance can live and how many interactions there can be between the application owner and user will vary from one app to another. Advanced Apps will have their own documentation.\nbasePath = https://{hostname}/storage/api/v1/instances Query instances It is possible to query instances based on a number of query parameters.\nApplication owners can search for from a single application or across all applications that they have. Using this endpoint requires the scope \u0026lsquo;altinn:instances.read\u0026rsquo;. And query parameter \u0026lsquo;org\u0026rsquo; or \u0026lsquo;appId\u0026rsquo; must be included in the request.\nUsers can search for instances linked to either themselves or an instanceOwner they are authorized to read the instances of. Query parametr \u0026lsquo;instanceOwner.partyId\u0026rsquo; must be included in the request if using this endpoint as an end user.\nSearch for instances with a simple GET request towards the instances endpoint. Avaliable query paramters include:\n process.currentTask (string)\nSearch for instances at a specific step in its process. process.isComplete (bool)\nSearch for instances where the process is completed. process.endEvent (string)\nDeprecated. The parameter doesn\u0026rsquo;t have any code associated with it. process.ended (datetime)\nFilter instances based on ended date. instanceOwner.partyId (int)\nFilter instances based on the instance owner party id. lastChanged (datetime)\nFilter instances based on the last time they where worked on. created (datetime)\nFilter instances based on when they where initially created. visibleAfter (datetime)\nFilter instances based on when they became visible. dueBefore (datetime)\nFilter instances based on their due date. excludeConfirmedBy (string)\nExclude instances already confirmed by a specific stakeholder. Usually the short name of an application owner. isArchived (bool) Filter instances based on whether they are archived. isSoftDeleted (bool) Filter instances based on whether they are soft deleted. isHardDeleted (bool) Filter instances based on whether they are hard deleted. Note that hard deleted instances are only included if an application owner retrieves instances, and the results may include deleted drafts.  Some examples:\nGet all instances of application org/app, that is at process task with id Task_2 (which is Submit, see process definition), and has last changed date greater than 2019-05-01.\nGET {storagePath}/instances?appId=org/app\u0026amp;process.currentTask=Task_2\u0026amp;lastChanged=gt:2019-05-01 Get all instances of all applications of a given application owner org that has ended date greater than 2020-03-10.\nGET {storagePath}/instances?org=org\u0026amp;process.ended=gt:2020-03-10 Get all instances of all applications of a given application owner org that has not already been confirmed completed by org.\nGET {storagePath}/instances?org=org\u0026amp;excludeConfirmedBy=org Get all instances of an application that are at a specific process task e.g. Task_1.\nGET {storagePath}/instances?appId={org}/{app}\u0026amp;process.currentTask={taskId} On query parameters specifying date time you can use the following operators:\n gt: - greater than gte: - greater than or equal to lt: - less than lte: - less than or equal to eq: - equal (can also be blank)  They can be combined to define a range:\ndueBefore=gt:2019-02\u0026amp;dueBefore=lt:2019-03-01 The query returns a result object (page) which includes a collection of instances that matched the query. 100 instances is returned by default. Use size to get more or less instances per page. To get to the next page you have to use the continuationToken present in the next link.\nThe instances endpoint returns a query result object with information about how many total hits totalHits that the query matched and how many objects returned count.\nThe endpoint supports application/json.\nAccept: application/json { \u0026#34;totalHits\u0026#34;: 234, \u0026#34;count\u0026#34;: 50, \u0026#34;self\u0026#34;: \u0026#34;{storagePath}/instances?appId=org/app\u0026amp;size=50\u0026#34;, \u0026#34;next\u0026#34;: \u0026#34;{storagePath}/instances?appId=org/app\u0026amp;size=50\u0026amp;continuationToken=%257b%2522token%2522%253a%2522%252bRID%...\u0026#34; \u0026#34;instances\u0026#34;: [ {...}, {...}, ... ] } } "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/intro/",
	"title": "Intro for developers",
	"tags": [],
	"description": "Introduction",
	"content": "Altinn Studio aka. \u0026ldquo;Tjenester 3.0\u0026rdquo; What are we creating  A app development solution Altinn Studio: The development tool Altinn Platform: The supporting platform Altinn Apps: The solution to host the Apps   What technologies are we using  .NET Core : Backend / API React : Frontend Altinn Studio \u0026amp; App Docker: Apps are created as Docker Containers Kubernetes: The containers are hosted in Kubernetes Azure: We use Azure for Kubernetes hosting   Altinn Studio  Design frontend Define frontend logic Define datamodel for app Define app logic for backend Build \u0026amp; deploy app container Source Control for App files       Altinn Apps  Kubernetes Cluster where apps are hosted One cluster per Organisation   Altinn Platform  Supporting functionality Authentication Authorization Storage Register Profile   Documentation  The different solutions are described in detail on docs Terms Architecture   The End Tilbake\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/test/k6/",
	"title": "k6",
	"tags": ["development", "testing", "api"],
	"description": "Performance and Functional Testing of API with K6",
	"content": "k6 is a developer-centric, free and open-source load testing tool built for making performance testing a productive and enjoyable experience. read more about K6 here\nSet up k6 tests  Clone the k6 tests from GitHub Repo Install docker and make sure the drive having the k6 tests is shared. Open cmd and download the latest k6 docker image docker pull loadimpact/k6  How to write k6 tests  Find the area/collection where the new test has to be added. k6 test project is divided into three basic folders.  tests - includes all the .js test files that send data to methods in api and validated response data - includes all the testdata ex., attachments, formdata, appmetadata, etc., api - includes the api calls to platform/app apis by getting data from the tests and returns the response of the http requests. (post, get, put, delete)   Begin by adding the endpoint to config.json Create a new method for the actual api in a .js file under folder K6/src/api which gets in data from the tests and returns response. Refer below picture for a sample method calling an api with endpoint and headers and returning the response.  Create a test .js file under K6/src/tests. Refer below picture for a sample test file. More about k6 test scripts One test can call many api endpoints with appropriate data, the result output of the test is determined by the checks in a tests and the thresholds defined in a test. More about k6 test checks and thresholds  Run k6 tests locally with a k6 docker image and visualize results in grafana  Before a test can be run, the files mentioned under .gitignore has to be created under the data folder. In cmd, change directory to \\altinn-studio\\src\\test\\K6 Download and run docker containers of influxdb and grafana  docker-compose up -d influxdb grafana  Open http://localhost:3000/ in a browser and the dashboard gets preloaded and is visible under \u0026lsquo;Recently viewed dashboards\u0026rsquo;. Run the below example command where pdf.js testscript is run for 1 minute with a maximum of 20 virtual users and with a ramp up and ramp down of virtual users. The testscript targets 5 vus for first 10 seconds, targets 20 vus for next 40 seconds and ramps down to 5 vus for the last 10 seconds.  docker-compose run k6 run --vus=20 --stage 10s:5,40s:20,10s:5 /src/tests/platform/pdf/pdf.js -e env=value  Once the above script it run, one could see results in grafana similar to the below image.   k6 test pipeline in Azure Devops Azure Devops Pipeline for Platform\nAzure Devops Pipeline for App\nVisualizing k6 results k6 by default outputs in stdout format while running a test. Below is described various methods to visualise results.\n  To get a junit.xml output from k6 tests, use handleSummary and the logic to export junit from the summary.json This comes in handy to view test results in CI/CD pipelines.\n  k6 performance test results can be visualised with the help of a influxdb and grafana instance that stores and reads the test results and displays as graph. More about influxdb and grafana results\n  Initial results from a sample tests against performance test environment  Test case: Login - Build test data - Create instance - Upload formdata - validate and archive instance Http-requests: 14 Iteration: 1 Iteration duration: ~27 seconds Average http_req_duration : 1.9s  "
},
{
	"uri": "https://docs.altinn.studio/app/testing/local/",
	"title": "Test of app locally",
	"tags": ["translate-to-english"],
	"description": "Description of how test of an app locally on your own machine.",
	"content": "Dersom man skal skrive en del kode (f.eks. logikk), eller kjapt sjekke hvordan skjema ser ut kan det være nytting å kunne teste endringer uten å måtte deploye hele appen til testmiljø.\nNår appen lages, kommer den med alle nødvendige filer og oppsett til å kunne kjøres som en frittstående applikasjon. Ved å laste ned alle filene knyttet til appen fra repoet til appen, kan man kjøre appen lokalt på egen maskin, og på den måten enkelt teste endringer.\nI testmiljø bruker appen et sett med plattform-tjenester for å kunne hente ut/lagre data osv. Det er opprettet en forenklet versjon av disse tjenestene som kan settes opp og kjøres lokalt, og dette er nødvendig for at appen skal kunne testes lokalt.\nKjøre appen lokalt  Naviger til app repoet i Altinn Studio. Se her for hvordan man navigerer seg dit. Last ned alle filene i repoet   ved å bruke git clone kommandoen (les mer) ved å trykke på nedlastingsikonet (da lastes det ned som en zip-fil)  Se Altinn Studio på Github for informasjon om hvordan man laster ned og kjører den lokale plattformen,og hvordan man kjører appen.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/testing/local/apitests/\u0026quot;\u0026gt;Testing the app APIs locally\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to test app APIs locally.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/testing/local/debug/\u0026quot;\u0026gt;Debugging of app\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;When running the apps locally one can debug using various tools.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/testing/local/testusers/\u0026quot;\u0026gt;Test-user for local testing\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;We have defined a small set of test users available for local test.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/back-end/logging/",
	"title": "Logging",
	"tags": ["development", "logging"],
	"description": "Guidelines logging in backend",
	"content": "This page is a work-in-progress. Because we do not have details on how potential errors should be shown to the users, this is only a general overview currently. More details will be added once we have a functional understanding of how users should experience errors. \rLogging .Net core provides a standard logging framework that can be used to log exceptions or events to a desired logging provider (console, eventlog, azure app service, application insights). You can read more about logging in asp.net core from here.\nWhat to log? Context is very important to any warning message or error that is logged. Without context, it can be difficult to relate applicaiton failures to logs. So it is important to include the following details in the log\n Where in the code did the application fail? Who was using the system when it failed? What was the system doing when it failed? Specify a log level that can be used to filter logs when needed  Where do we log? The idea is to send the logs to the console and collect them using Application Insights (Note: Application Insights involves data limitation and costs vary based on needs). It is also possible to log to different log providers by configuring it in the config file. F.ex It is possible log only error and warning message to appinsights and information logs to console.\nThird Party Logging Frameworks There are a bunch of third party logging frameworks available for .net core. Serilog is one of them and Altinn Studio will use it to log. There are many advantages of using serilog\n It\u0026rsquo;s open source Allows logging to many sinks like slack, azure, etc. It has support for logging to files (Microsfot basic logging doesn\u0026rsquo;t have support for logging in file at this point) It allows to define a custom message template for logging. Provides prebuilt enrichers through nuget. These add more value and information to the log events. This can be used to filter events in Application Insights.  Step one - Init logger in Program.cs public static IWebHostBuilder CreateWebHostBuilder(string[] args) =\u0026gt; WebHost.CreateDefaultBuilder(args) .ConfigureLogging((hostingContext, logging) =\u0026gt; { logging.ClearProviders(); Serilog.ILogger logger = new LoggerConfiguration() .WriteTo.Console() .CreateLogger(); logging.AddProvider(new SerilogLoggerProvider(logger)); }); Step two - inject logger where it is needed private ILogger logger; public ApplicationsController( IApplicationRepository repository, ILogger logger) { this.logger = logger; this.repository = repository; } Step three - log error _logger.LogError(exception, \u0026#34;Unable to process request...\u0026#34;); "
},
{
	"uri": "https://docs.altinn.studio/api/authentication/maskinporten/",
	"title": "Authenticate with Maskinporten",
	"tags": ["translate-to-english"],
	"description": "Description of how the service owner&#39;s systems can use Maskinporten in order to get access to APIs.",
	"content": "Samarbeidsportalen I Min profil i Samarbeidsportalen så har du tilgang til selvbetjening for Maskinporten, og der kan du opprette nye integrasjoner (klienter).\n https://tt02.altinn.no er testmiljø for apper i Altinn, og det er koblet mot Ver 2-miljøet i Maskinporten. https://www.altinn.no er koblet mot Produksjon.  Tilgang som tjenesteeier For å kunne hente data fra Storage i Altinn 3 via API som tjenesteeier, så må man opprette en integrasjon (klient) i Maskinporten, med nødvendige scopes.\nFølgende scopes er opprettet av Altinn, og delegert til tjenesteeier. Disse scopene behøves for å benytte APIene relatert til instanser som tjenesteeier:\naltinn:serviceowner/instances.read altinn:serviceowner/instances.write Klienter med write scope kan bl.a. instansiere apper på vegne av bruker via appens eget API, laste opp data, oppdatere metadata og prosess-status. Klienter med read scope kan kun lese data, metadata og events.\nI de fleste tilfeller så vile en klient for tjenesteeier ha behov for begge scopene.\nOppretting av klient kan gjøres via API eller i Samarbeidsportalen.\nPOST https://integrasjon.difi.no/clients/ { \u0026#34;integration_type\u0026#34;: \u0026#34;maskinporten\u0026#34;, \u0026#34;client_name\u0026#34;: \u0026#34;DIHE testklient for instanser\u0026#34;, \u0026#34;client_type\u0026#34;: \u0026#34;CONFIDENTIAL\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Klient for å hente data fra mine apper\u0026#34;, \u0026#34;scopes\u0026#34;: [ \u0026#34;altinn:serviceowner/instances.read\u0026#34;, \u0026#34;altinn:serviceowner/instances.write\u0026#34; ], \u0026#34;token_reference\u0026#34;: \u0026#34;SELF_CONTAINED\u0026#34; } Veksle til Altinn Token Altinn godtar ikke Maskinporten API direkte. Disse må veksles inn i Altinn token. Se detaljer i scenario under.\nMer informasjon  For mer informasjon, se dokumentasjon for API-konsument fra Maskinporten. Se også scenario for autentication for enda flere detaljer (på engelsk).  "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/naming/",
	"title": "Naming Conventions",
	"tags": ["development"],
	"description": "Naming guidelines for Altinn Studio development",
	"content": "C# The Altinn project will use Microsoft’s coding conventions as a general guideline when no other guidelines are given.\nExceptions/additions to the general guideline:\nImplicit typing (var) should only be used when a variable is initialized with an anonymous type, which is a common scenario in LINQ query expressions. In general implicit typing makes the code more difficult to read and understand,and should be avoided. Altinn specific coding guidelines:\nMethods should not be more than 50 lines long When dealing with XML you should prefer XDocument to XmlDocument (especially in new methods) If/for/while/using and other structures should normally not be more than 2-3 levels deep All disposeable objects (proxies, DbCommand and so on) should be disposed by using a using block. Altinn specific naming guidelines:\nNames for classes, methods and variables should be describing, but not too long WCF-Artifact Naming TUL Naming Standard Namespace \u0026amp; Solution Structure\nReact Names of react-components should be descriptive and in pascal case\nActions Names of actions should be descriptive and in camel case.\nAn action should have the initial action, for instance fetchFormLayout, and an action if it succeeds and if it fails. For instance fetchFormLayoutFulfilled(succeed) and fetchFormLayoutRejected(failed).\nSagas Names of sagas should have the name of the action it listens to, and the word Saga appended to the end. For instance fetchFormLayoutSaga.\nAnd for saga-watchers, should have the watch-word appended to the start, and the saga name it watches. For instance watchFetchFormLayoutSaga.\nReducers Names of reducers should have a descriptive name of that it is responsible for updating in the redux-store, and the word Reducer appended to the end. For instace formLayoutReducer.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/loadbalancer/",
	"title": "Nginx loadbalancing in studio",
	"tags": ["development", "nginx", "routing"],
	"description": "Information about routing with nginx",
	"content": "Nginx routing The router config is stored as a configmap in our kubernetes cluster, and mounted to the pod as a .conf file. When the config needs to be changed, the changes should be done in the loadbalancer-configmap for the correct environment (dev/prod).\nApply the changes, and restart the pod:\nOption 1: kill the pod and let the deployment spinn up a new pod.\nOption 2: open a shell into the pod kubectl exec -it [POD_NAME] -- sh and run the command nginx -s reload\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/routing/nginx/",
	"title": "Nginx routing",
	"tags": ["development", "nginx", "routing"],
	"description": "Information about routing with nginx",
	"content": "Nginx routing The router config is stored as a configmap in our kubernetes cluster, and mounted to the pod as a .conf file. When the config needs to be changed, the changes should be done in the loadbalancer-configmap for the correct environment (dev/prod).\nApply the changes, and restart the pod:\nOption 1: kill the pod and let the deployment spinn up a new pod.\nOption 2: open a shell into the pod kubectl exec -it [POD_NAME] -- sh and run the command nginx -s reload\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/loadbalancer/ssl-certificate/",
	"title": "Nginx SSL/TLS certificate",
	"tags": ["development", "nginx", "routing", "ssl", "tls", "certificate"],
	"description": "Information about SSL/TLS certificates with nginx",
	"content": "Generate SSL/TLS certificates from .PFX file In altinn studio we are using nginx as a proxy for internal routing. After issues with creating SSL/TLS certificates for nginx we we have written a guide for future developers to follow when creating SSL/TLS certificate secrets in kubernetes and mounting them to the nginx pods.\nDownload .pfx file At the moment of writing this guide, we store our *.altinn.studio certificate in azure keyvault and you will need access to download it from that vault. When you have downloaded the .pfx file, you can start extracting the CA certificate bundles, private key and the certificate.\nExtracting the values from the pfx file With openssl installed and in path, open a terminal and type the command\nExtracting the private key $ openssl pkcs12 -in \u0026lt;filename.pfx\u0026gt; -nocerts -nodes -out star.altinn.studio.key Extracting the certificate $ openssl pkcs12 -in \u0026lt;filename.pfx\u0026gt; -clcerts -nokeys -out star.altinn.studio.cert Extracting the CA certificates $ openssl pkcs12 -in \u0026lt;filename.pfx\u0026gt; -cacerts -nokeys -chain -out star.altinn.studio.ca.cert Assembling a SSL/TLS bundle After extracting all the certificate and keys, you will have 3 new files in the same directory that you have the .pfx file. These files will be:\n star.altinn.studio.key star.altinn.studio.crt star.altinn.studio.ca.crt  Now you can start assembling an SSL/TLS certificate bundle.\nIn the file star.altinn.studio.ca.crt you will have 2 certificate, one intermediate and a root certificate. The root certificate doesn\u0026rsquo;t need to be in the SSL/TLS bundle, so copy the second certificate block (including the -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----) in this file and paste it at the bottom in star.altinn.studio.crt-file.\nUsing the SSL/TLS values in the kubernetes pod Kubernetes encodes secrets with base64, so you will need to encode the contents of star.altinn.studio.cert and star.altinn.studio.key files. And create a secret in the kubernetes cluster. The secret can be defined like this:\napiVersion: v1 kind: Secret metadata: name: ssl-cert type: Opaque data: star.altinn.studio.cert: \u0026lt;BASE 64 ENCODED SSL/TLS-BUNDLE\u0026gt; star.altinn.studio.key: \u0026lt;BASE 64 ENCODED PRIVATE KEY\u0026gt; The names under data will be the filenames mounted on the kubernetes pods (these will have to match with the filenames defined in the nginx.conf config file, which is a configmap).\nnginx.conf:\n\r...\rserver {\rlisten 443 ssl http2;\rssl_protocols TLSv1.2 TLSv1.3;\rssl_prefer_server_ciphers on;\rssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;\rssl_certificate /etc/nginx/ssl/altinn_studio/star.altinn.studio.cert;\rssl_certificate_key /etc/nginx/ssl/altinn_studio/star.altinn.studio.key;\rssl_stapling on;\rssl_stapling_verify on;\rssl_trusted_certificate /etc/nginx/ssl/altinn_studio/star.altinn.studio.cert;\rssl_session_cache shared:SSL/TLS:40m;\rssl_session_timeout 4h;\rssl_session_tickets on;\r...\r}\rThe path of where the certificates are mounted is described in the helm deployment. It will be a volume and volumeMount on the deployment. (same as mounting of configuration through a configmap).\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/back-end/nuget-package/",
	"title": "Nuget Package",
	"tags": ["nuget"],
	"description": "Overview of nuget package usage in altinn studio",
	"content": "Altinn 3 NuGet Packages Altinn 3 has published a number of nuget packages to share common libraries between different solutions. You can read more about nuget here.\nThe following nuget packages are available for download here\n Altinn.App.Api Altinn.App.Common Altinn.App.PlatformServices Altinn.Common.PEP Altinn.Authorization.ABAC Altinn.Platform.Storage.Interface Altinn.Platform.Models JWTCookieAuthentication Altinn.Common.AccessToken Altinn.Common.AccessTokenClient  Procedure for changes involving NuGet Packages  Implement all changes necessary in the NuGet package project. Remember to update the package version, assembly version and file version so they match. Submit a pull request on these changes only. No implementation on other projects should be included. Once pull request is approved and changes are merged into master; create and publish new NuGet package based on master branch. Continue with implementation, referencing the updated package wherever it is needed. Remember to update all outdated references to the package and check that all tests run successfully before submitting a final PR.  Creating a NuGet package Detailed documentation on how to create a NuGet package, guidelines etc can be found here.\nAn example of nuget package creation Open the project csproj file to edit it as an xml file:\n\u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net5.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;OutputType\u0026gt;Library\u0026lt;/OutputType\u0026gt; \u0026lt;Version\u0026gt;4.14.0\u0026lt;/Version\u0026gt; \u0026lt;AssemblyVersion\u0026gt;4.14.0.0\u0026lt;/AssemblyVersion\u0026gt; \u0026lt;PackageId\u0026gt;Altinn.App.PlatformServices\u0026lt;/PackageId\u0026gt; \u0026lt;PackageTags\u0026gt;Altinn;Studio;App;Services;Platform\u0026lt;/PackageTags\u0026gt; \u0026lt;Description\u0026gt; This class library holds most of the Altinn App business logic and clients for communication with the platform. \u0026lt;/Description\u0026gt; \u0026lt;PackageReleaseNotes\u0026gt;https://docs.altinn.studio/community/changelog/app-nuget/\u0026lt;/PackageReleaseNotes\u0026gt; \u0026lt;Authors\u0026gt;Altinn Platform Contributors\u0026lt;/Authors\u0026gt; \u0026lt;RepositoryType\u0026gt;git\u0026lt;/RepositoryType\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/Altinn/altinn-studio\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;IncludeSymbols\u0026gt;true\u0026lt;/IncludeSymbols\u0026gt; \u0026lt;SymbolPackageFormat\u0026gt;snupkg\u0026lt;/SymbolPackageFormat\u0026gt; \u0026lt;IsPackable\u0026gt;true\u0026lt;/IsPackable\u0026gt; \u0026lt;!-- SonarCloud requires a ProjectGuid to separate projects. --\u0026gt; \u0026lt;ProjectGuid\u0026gt;{98E6200A-ED99-418E-B30C-81BA564B509A}\u0026lt;/ProjectGuid\u0026gt; \u0026lt;/PropertyGroup\u0026gt;  Save the changes Open a command line utility like git bash, powershell or cmd. Navigate to the project folder. Build the project using Release configuration:\ndotnet build -c Release Pack the project into a NuGet package:\ndotnet pack -c Release --include-source -p:SymbolPackageFormat=snupkg\nThe package will now be created in {projectfolder}\\bin\\Release. Navigate to the release folder. Publish the package:\ndotnet nuget push Altinn.Platform.Storage.Interface.2.5.10.nupkg -k [nuget api key] -s https://api.nuget.org/v3/index.json Your package will now be published to nuget.org  "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/older/",
	"title": "Older",
	"tags": [],
	"description": "Overview of changes introduced into app nuget packages up to (not including) major version 3.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/older/breaking-changes/\u0026quot;\u0026gt;Breaking changes\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of breaking changes introduced into app nuget packages in v1.0.62-alpha to 2.0.1\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-nuget/older/whats-new/\u0026quot;\u0026gt;What\u0026amp;#39;s new\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v1.0.62-alpha -- 2.0.1\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/azure-devops/pipelines/",
	"title": "Pipelines",
	"tags": ["development"],
	"description": "Quality checklist and overview of pipelines in Azure DevOps",
	"content": " Quality checklist Build pipelines Release pipelines  Quality Checklist  all sensitive information is marked as secret. Read more about setting variables as secret here. verify that no sensitive information is available in the exported API JSON definition (https://dev.azure.com/brreg/d0be3bbb-9145-4490-8d76-fd8024277467/_apis/pipelines/{definitionId}) make sure that no secrets are shared with forks of github repos if you are using a github integrated pipeline. Read more about that here. if it exists a built in task for the job the pipeline should do, this should be prefered over writing your own scripts. Both for maintainability and security reasons. referencing other pipelines is done by definitionId.  Build Pipelines The build pipelines are grouped in folders based on either the part of the solution they are used for or the purpose of the pipeline. See build pipelines here.\n altinn-apps altinn-platform altinn-studio code-analysis load-test test  altinn-apps There are pull request and master pipelines for app frontend and kubernetes wrapper.\nThe pull request pipeline builds a dockerimage and is triggered whenever a pull request is created or updated that modifies code related to the component.\nThe master pipeline builds a docker image and pushes it to Azure Container Registry. The pipeline is triggered whenever new code is merged into the master branch that modifies code related to the component.\nRemaing pipelines in this folder are described below.\naltinn-studio-build-app-image  trigger: triggered by app developers in Altinn Studio details: builds a docker image of an app and pushes it to Container Registery. cloud component integrations: Azure Container Registry  altinn-studio-deploy-app-image  trigger: triggered by app developers in Altinn Studio. details: Gets APIM Subscription key if required and deploys a new helm release to the correct AKS cluster. cloud component integrations: Azure API Management, Azure Kubernetes services  altinn-studio-update-deploy-release-db  trigger: final step in build/deploy app image pipelines details: Sends request to designer to update status of a given buil or release of an app.  altinn-platform / altinn-studio Pipelines in altinn-platform and altinn-studio share the same structure. There is a pull request and master pipeline for each component.\nThe pull request pipeline builds a dockerimage and is triggered whenever a pull request is created or updated that modifies code related to the component.\nThe master pipeline builds a docker image and pushes it to Azure Container Registry. The pipeline is triggered whenever new code is merged into the master branch that modifies code related to the component.\nThe pull request pipeline for the .net app template does not build a docker image, but simply ensures that it is possible to build the app template used by Altinn Studio.\nPipelines follow this naming standard: [component]-(master/pull-request).\ncode-analysis Each component in the solution has their own analysis pipeline. The pipeline runs unit and integration tests and triggers a sonar cloud analysis of the code.\nPipelines follow this naming standard: [component]-analysis-[langugage].\nload-test The load-test pipelines are administered by the load-testing team. The pipelines run k6 tests aimed at YT01.\ntest There are automated tests that are aimed at our running solutions and that can be run in any environment.\nThe pipelines in this project have varying triggers. Some are on a schedule and regularily run in one or all of our environments. Others are triggered when a new release is deployed to an environment.\napps-and-platform-postman  trigger: nightly schedule environment: at22 details: tests platform and app APIs  studio-cypress  trigger: final task in release pipeline for Designer environment: all details: runs cypress test in Altinn Studio to validate most common functionality.  apps-k6  trigger: N/A environment: N/A details: k6 tests to verify Altinn Apps behavior  platform-k6  trigger: final task in release pipeline for relevant platform components. environment: all except YT01. details: k6 tests to verify Altinn Platform functionality.  Release Pipelines See all release pipelines here.\nOur release pipelines are set up with multiple stages. This allows for different policies related to deploy and varying triggers.\nCommon for all release pipelines is that they rely on an artifact containing the helm chart which is packed in Azure Studio Ops project.\nDeploy to TT02 or production requires approval from a team member. Weekly releases are scheduled for these environments.\nHOWTO Setting a variable as secret Marking a variable is secret is straight forward. Navigate to the pipeline variables.\nAll that is needed in order for a variable to be secured in the pipeline is click on the lock icon at the right hand side.\nDisable sharing of secrets on github forks Disabling of secret sharing on repo forks are done by navigating from the pipeline to Triggers and selecting the github integration under \u0026ldquo;Pull Request Validation\u0026rdquo;. Here you can disable secret sharing by disabling the build on forks.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/postmessage/",
	"title": "Post Message",
	"tags": ["development", "front-end"],
	"description": "Guidelines for using post message functionality in Altinn Studio",
	"content": "Window.postMessage() is introduced to handle communication between components that has no connection other then the need to communicate/trigger events. Eg. its used to communicate with the syncBar to get it to perform a new status check. To read more see: Window.postMessage\nUsage Dispatching a message event is done the following way:\n// variables should be used for messages var SAVED_EVENT = \u0026#39;SAVED\u0026#39; window.postMessage(SAVED_EVENT, window.location.href); Catching the event is done by adding an event listener to the component one needs to communicate with:\npublic componentDidMount() { window.addEventListener(\u0026#39;message\u0026#39;, this.eventThatShouldHappend); } public eventThatShouldHappend(){ if (event.data === SAVED_EVENT){ //Do necessary handling of correct message  } } When the commponent is unmounting the event listener should be removed:\npublic componentWillUnmount() { window.removeEventListener(\u0026#39;message\u0026#39;, this.eventThatShouldHappend); }  Remember to create \u0026ldquo;message variables\u0026rdquo; that make sense when comparing different messages. Example: \u0026ldquo;SAVED_IN_UI_EDITOR\u0026rdquo;, \u0026ldquo;SAVED_IN_OTHER_PLACE\u0026rdquo; or \u0026ldquo;FETCH_REPO_STATUS\u0026rdquo;.\n "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/postgres/",
	"title": "PostgreSQL",
	"tags": ["development"],
	"description": "Setting up PostgreSQL for local development",
	"content": "\rNOTE: Work in progress.\n\r\rInstall PostgreSQL and pgAdmin4 Follow the instructions on https://www.postgresql.org/download/\nSet up database Open pgAdmin 4. We will be working on the PostgreSQL 13 server.\n  Right click on Databases and select Create.   Fill inn database name eventsdb and click Save.   You should now be able to see a new database in the list. If you don\u0026rsquo;t - right click the server and select REFRESH.   Set up admin user   Right click on Login/Group Roles , select Create and Login/Group Roles.   In the General tab fill out the username platform_events_admin   Navigate to the Definition tab and insert password: Password   Navigate to the Priviliges tab and enable all options and click Save.   Confirm that the user has been created in the side bar. If you cannot see the user, try refreshing the Login/Group Roles section.   Set up app user   Right click on Login/Group Roles , select Create and Login/Group Roles.   In the General tab fill out the username platform_events   Navigate to the Definition tab and insert password: Password   Navigate to the Priviliges tab and enable Can log in and click Save.   Confirm that the user has been created in the side bar. If you cannot see the user, try refreshing the Login/Group Roles section.   Create a schema called events. [A more detailed description to come..]\n  Right click the database in the side menu and select Query tool\u0026hellip;   Run script grating user privilliges on schema resources.\n  GRANT USAGE ON SCHEMA events TO platform_events; GRANT SELECT,INSERT,UPDATE,REFERENCES,DELETE,TRUNCATE,REFERENCES,TRIGGER ON ALL TABLES IN SCHEMA events TO platform_events; GRANT ALL ON ALL SEQUENCES IN SCHEMA events TO platform_events; The result should be as shown in the picture below. "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/test/postman/",
	"title": "Postman",
	"tags": ["development", "testing", "api"],
	"description": "API Testing with postman",
	"content": "Postman To test API endpoints the tool postman enables easy configuration and setup of various HTTP requests, read more about postman here.\nAuthentication Several of the exposed APIs requires various cookies, for instance authentication and gitea information. To be able to do requests against these APIs the cookies have to be included in the HTTP request, and configured in postman. The cookies can be found in the following way:\n In your browser login to dev.altinn.studio/altin.studio/altinn3.no depending on what environment you are targeting Notice that the cookies AltinnStudioDesigner, AltinnStudioRuntime and i_like_gitea (among others) has been saved for the domain name you have logged in to.  For Chrome cookies can be found under settings -\u0026gt; advanced -\u0026gt; cookies -\u0026gt; see all.    The two cookies AltinnStudioDesigner and AltinnStudioRuntime works as auth against the Designer and APP API respectively, so if you are targeting a Designer API you should include the AltinnStudioDesigner cookie, along with the i_like_gitea cookie, and if you are targeting a runtime API the AltinnStudioRuntime cookie should be included. Cookies are easily added to the postman requests under the slightly hidden cookies setting, see:\nSet up postman tests  Download and install postman native app. Import the files from src/test/Postman/Collection to the collections area in Postman. Import the environment .json file from src/test/Postman to the environments area in Postman.  How to write postman tests  Find the area/collection where the new test has to be added. Add a new request of type GET/POST/PUT/DELETE under the right folder. Provide the endpoint, input for the request. Make sure the variable values are accessed from environments file. Write the tests as a javascript code in the \u0026lsquo;tests\u0026rsquo; section of a request. More about test scrips Tests should have one test to verify valid response code and another test to validate the content of the response.  Information about the postman collections  Collections folder include postman collections for Platform API, Storage API, APP API. All collection uses altinn3.postman_environment as an environment file. One has to fill in the values (testdata) in the environment file based on the environment under test. The collections has steps that would authenticate an user and set appropriate cookies.  Run Postman tests against a test environment.  Open Postman and Import the Postman collection file and the corresponding envrinonment file. Select the environment file and fill in the necesary information for the required collection. Required Test data for App / Storage / Negative Tests Collection are envUrl, org(appOwner, app(level2-app), testUserName(level2LoginUser), testUserPassword(use same password for two users), level3-app, level1-app, testUserName2(level1LoginUser) Platform requests require appsaccesskey, sblaccesskey also. Open the Postman runner -\u0026gt; Select the collection and environment and click \u0026lsquo;Start Run\u0026rsquo;  Note: newman can be used to a Postman collection from command line interface.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/processing/process/process_interaction/",
	"title": "Process Interaction",
	"tags": ["app-backend"],
	"description": "",
	"content": "App backend exposes different APIS that is relevant during a app process.\nThis page show examples\nProcess Interaction App Frontend - App Backend - \nFull Screen\nThe above example show the following\n  User clicks link to a App from service catalog\n  The browser redirect to the start service page in the app. The react application renders the correct view\n  User click on instantiate button.\n  App Frontend calls instansiate API\n  Instantiate create a new instance with data for the datamodell with prefill and returns instance information that user should be redirect to.\n  User/browser open the instance\n  App frontend calls app backed to get the instance state\n  App Frontend render the correct component for the given state.\n  User input data . App Frontend call Data API to update data. If calculation or dataretrieavel causes additional data updates on server side, the response indicates to app frontend to get the latest data\n  App frontend gets the updated data 9 and 10 is repeated as long user has data to input\n  User press complete/send inn button\n  App frontend Saves data\n  App frontend calls validation API and any possible errors are presented to the user. If\n  If no errors are returned App Frontend call Process API to complete Task. Process Api trigger task validation to make sure it is allowed to move process forward. If validation fails, process API returns\n  Process Interaction End User System - App Backend - \nFull Screen\nProcess Interaction Sirius Use case \nFull Screen\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/rest/",
	"title": "RESTful APIs (Representation State Transfer)",
	"tags": ["development", "api"],
	"description": "Guidelines for designing REST apis for microservices in Altinn",
	"content": "This page is work-in-progress. This is a proposed api which most likely is going to change.\r\rREST REST is an architectural style for designing loosely coupled applications over HTTP which was coined by Rob Fielding in 2000. We will define services according to REST.\n  REST APIs should start with /api so that we with ease can differentiate between an rest api call and a ux-application call.\n  REST APIs should start with a short word to indicate the logical domain or group of apis.\n  REST APIs should be versioned, with semantic versioning: v1 major (incompatible API changes), v1.1 minor (add backwards-compatible functionality), and v1.1.1 patch (bugfix). We should strive to make REST APIs backwards compatible, hence clients should not break if we add a new parameter.\n  REST APIs paths should be in lower case letters. Query parameter names should be lowerCamelCase.\n  REST APIs should be resource oriented. A resources is a thing that the client and server knows about. The API provides methods to find, create, update, delete or manipulate a resource object. A resource in a system should have only one logical URI, which should provide a way to fetch related or additional data about the resource.\n  REST APIs specifications should be public awailable as OpenApi 3.0 (swagger).\n  /api/{domain}/{version}/{resource} Example:\nCreate a new instance resource. Post to instances with query params that identifies the application and the instance owner. This call should return identifier of the new instance resource or the json of the instance resource itself.\n/api/storage/v1/instances?applicationId=KNS-sailor\u0026amp;instanceOwnerId=1024 GET one instance or PUT to to this url to update the instance.\n/api/storage/v1/instances/23f1faab-bdb3-4cba-aed2-d515e1be6db8 Get (query) all instances that is instance owner has\n/api/storage/v1/instances\u0026amp;instanceOwnerId={instanceOwnerId}[\u0026amp;since=2017-01-01] "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/routing/",
	"title": "Routing",
	"tags": ["development", "routing"],
	"description": "Information about routing",
	"content": "Routing  \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/routing/nginx/\u0026quot;\u0026gt;Nginx routing\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Information about routing with nginx\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/routing/traefik/\u0026quot;\u0026gt;Traefik routing\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/securecoding/",
	"title": "Secure DevOps",
	"tags": ["development", "routing"],
	"description": "Security is an important concern in all the phases of the DevOps cycle for Altinn 3.",
	"content": "Having a Secure DevOps process requires that security is built into the applications, the process, the infrastructure, and the configuration, and more.\nBelow you find information on what kind of tools, patterns, and processes we follow to make sure we think about application and infrastructure security for all phases.\nPlanning phase During the planning phase, the requirements for features are gathered. Already in this phase, we identify changes that need special security considerations. Typical this is done as part of grooming. We mark our security-related features and bugs to a specific label. Details of security-related issues are in many cases kept out of GitHub.\nCode phase During the development of a feature, we have several processes and tools to help us creating secure code.\nDevelopment checklists We have a development checklist that ensures that developers and reviewers consider the different security aspects.\nSee checklist.\nIDE and tools We use both Visual Studio and Visual Studio Code. Those provide us with tools for static code analysis.\n StyleCop analyzes C# source code to enforce a set of style and consistency rules. See project Code Analysis verifies the code after a ruleset defined by Altinn  Unit and integration tests As part of the coding process unit and integration-tests are created. Besides, to cover functionality, many of them cover security aspects like authentication and authorization.\nBuild phase Once a developer has finished coding a feature he/she creates a pull request in our repository.\nPeer Reviews All pull requests require peer review from at least one team member from the Altinn DevOps team.\nSee active pull requests.\nRun Unit and integration tests As part of the build pipelines, all unit and integration tests are run. This makes sure that security functionality has not been broken.\nStatic code analysis Sonar Cloud Every pull request is analyzed by Sonar Cloud\nSonar Cloud analyzes the code by a defined rule set and checks the code against OWASP Top 10, SANS Top 25 and the Co\nWe have defined some quality gates that the code need to adhere to to be able to merging pull request in to master.\nOur current active issues are available here.\nLGTM LGTM is a code analysis platform for identifying vulnerabilities and preventing them from reaching production.\nThis is run for every pull request.\nTest Each feature added to our platform is tested.\n Integration tested with positive and negative tests for access control where possible Manual functional tests Manual security testing for selected features  Dynamic code analysis. We use different tools to perform dynamic code analysis.\nSome of the tools are\n HCL AppScan  We also regulary use third party secyurity companies to go through our code.\nRelease phase Releases are created automatically. For Test environments, every build is deployed automatically. For the Application Test environment and production, we deploy once a week. Those releases are created automatically. Deploy are needs to be approved by one team member.\nDeploy phase All deployment is done with an automated tool like Azure Pipelines reducing the risk for misconfiguration.\nApplications are deployed to Azure Kubernetes Services that has standard policies defined with a focus on the reduction of risk. Read more about Secure DevOps with AKS.\nOperate phase When the different applications are in production the DevOps team make sure that everything works as expected\nWe have different tools to identify security threats for our running applications.\n Application Insights presents log and traffic information making it possible to detect different types of attacks X y  Monitor phase During the monitor phase, the team follows up on how the different solutions are working and identifying improvements and changes.\nDependency updates We use Dependabot and WhiteSource Bolt to monitor updates for dependencies.\nIt creates pull request in a mirror repository\n"
},
{
	"uri": "https://docs.altinn.studio/community/about/slide/",
	"title": "Slides",
	"tags": [],
	"description": "A presentation of goals and concepts for &#34;Tjenester 3.0&#34;",
	"content": "Altinn Studio Aka. \u0026ldquo;Tjenester 3.0\u0026rdquo; Dagens løsning  Produksjonsatt sommeren 2010 Basert på InfoPath og SharePoint 115.000.000 skjema fylt ut 404 aktive innsendingstjenester i 2018   Bakgrunn og mål  Behov har vært kjent lenge POC utviklet i 2015 (men lagt på is grunnet manglende finansiering) Finansiering på Statsbudsjettet 2018 Startet opp igjen våren 2018    Hva er målet med prosjektet?  En modern utviklingsplattform Et effektivt utviklingsverktøy En moderne infrastruktur En plattform for gjenbruk En platform for deling av data og erfaringer   En moderne utviklingsplattform Altinn Studio er en åpen og modern utviklingsplattform\n Versjonering og samarbeid via Git Støtte for distribuert utvikling All programvare som benyttes er åpen kildekode. Også selve 3.0-plattformen. Funksjonalitet i Altinn tilgjengelig via API’er Moderne og populær teknologi, f.eks. React og Visual Studio Code Full selvbetjening Tekniske utviklere kan benytte best-of-breed utvikler-verktøy og teknologi, slik de er vant til.       Et effektivt utviklingsverktøy Altinn Studio tilbyr enkel, effektiv og 100% selvbetjent utvikling og forvaltning av tjenester, også for ikke-teknologer.\n Brukergrensesnitt (GUI) API’er Arbeidsflyt Logikk og dynamikk Datamodellering Konfigurasjon og tilgangsstyring Automatisert testing …   En moderne infrastruktur Altinn Studio (og tjenester som lages der) vil kjøre på en moderne infrastruktur.\n Docker containers for applikasjoner Kubernetes for orkestrering av containers  Dette gir isolering mellom applikasjoner (microservices), enklere skalering og understøtter “DevOps”.\n  Hva kan jeg gjøre med MVP?  Opprette bruker og logge inn i Altinn Studio  Lage (og finne igjen) en tjeneste  Finne tjenester fra andre organisasjoner  Laste opp en datamodell som fungerer i tjenesten (Seres eller OR)  Lage et skjemadesign med drag and drop av elementer (begrenset utvalg av komponenter)  Legge inn tekster/tekstnøkler for tjeneste  Legge inn regler for skjemalogikk (validering, kalkulering, dynamikk)  Bruke API-oppslag i tjenesten (forutsetter Ajax kall kodet i GUI)\n Endre på standardfil for arbeidsflyt  Endre på filer med versjonskontroll  Legge den ferdige tjenesten i test- og produksjonsmiljø  Tjenster 3.0 vs Tjenester 2.0  Skjemaverktøy  Egenutviklet vs InfoPath React vs SharPoint formserver Responsivt vs ikke responsivt   Arbeidsflyt  BPMN vs Custom   Tjenester som API  REST vs SOAP Individuell API vs Generelle   Ressurser  Isolerte vs delte Raskt skalerbar vs lang leveringstid   Dataformat  JSON/XML vs XML   Kontroll på logikk  Full kontroll på når ting skjer i plattformen i motsetning til Infopath   Shipment  Inntil videre kun pull-basert nedlasting av skjemadata.   Videre arbeid i MVP  Fokus på infrastruktur Skyløsninger Sikkerhet Deploy av tjenester Integrasjon med tjenesteeier Understøtte piloter   Detaljer løsning Tre nye løsninger\n Altinn Studio Altinn Apps Altinn Platform   Altinn Studio  Altinn Apps  Altinn Platform  Status Du kan følge utviklingen på Github. Motivasjon Se Archimate arkitekturmodell. The End Tilbake\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/",
	"title": "Solution-Specific (functional) Application Components",
	"tags": ["solution", "architecture"],
	"description": "Solution-Specific (Functional) Application Components describes the different applications and their functional components. It does not go in to detail about technology.",
	"content": "Functionality in Altinn is distributed between five different solutions\n Altinn Studio - The new application development solution Altinn Apps - The new hosting and infrastructure solution for applications Altinn Platform - The new supporting platform solution SBL - The old hosting solution for InfoPath services TUL - The old app development solution  The diagram below shows where functionality is located in the five different solutions:\nFull screen | Visio\n\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-apps/\u0026quot;\u0026gt;Solution-specific application components Altinn Apps\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the Altinn Studio solution\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-platform/\u0026quot;\u0026gt;Solution-specific application components Altinn Platform\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Functionality in Altinn Platform is distributed between different reusable components.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-studio/\u0026quot;\u0026gt;Solution-specific application components Altinn Studio\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Studio have many functional components that lets the app developer create, manage and deploy applications.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/local-dev/\u0026quot;\u0026gt;Solution-specific application components local deveolopment\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;As part of the platform it is created a solution to develop and test applications.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/api/apps/stateless-data-elements/",
	"title": "Stateless data elements",
	"tags": ["api"],
	"description": "The app API to work with stateless date elements not associated with an instance",
	"content": "Overview A stateless data element is a data object based on a data model without relations to an instance, instance owner or a state. The data is never persisted anywhere, and the avilable endpoints simply creates, prefills and/or runs calculations on a data object before returning it to the caller.\nbasePath\n{org}/{app}/v1/data Create new data Endpoint for creating a new stateless dataelement based on a data type.\nPOST basePath?dataType=[dataTypeId] Accept: application/{xml/json} The dataType parameter is required and should reference one of the data types defined on the application that requires app logic.\nIf prefill or calculations are defined for the data type, these will be run on the data element before it is returned.\nResponse A response with the data element in the body will be returned if a valid data type is provided.\nCalculate data Endpoint for running calculations on a data element.\nPUT basePath?dataType=[dataTypeId] Accept: application/{xml/json} The dataType parameter is required and should reference one of the data types defined on the application that requires app logic.\nThe Content-Type is used by Altinn to deserialize the request into a strongly typed object. A request must either be application/json or application/xml. No other Content-Types are supported. Content-Type is not validated against allowed Content-Types on the data type.\nProviding data as application/json Content-Type: application/json { \u0026#34;dataFormatProvider\u0026#34;: \u0026#34;SERES\u0026#34;, \u0026#34;dataFormatId\u0026#34;: \u0026#34;5703\u0026#34;, \u0026#34;dataFormatVersion\u0026#34;: \u0026#34;34553\u0026#34;, \u0026#34;Tjenesteeier\u0026#34;: null, \u0026#34;Kontaktperson\u0026#34;: { \u0026#34;navn\u0026#34;: \u0026#34;Sophie Salt\u0026#34;, \u0026#34;epost\u0026#34;: \u0026#34;1337@altinnstudiotestusers.com\u0026#34;, \u0026#34;telefonnummer\u0026#34;: \u0026#34;90001337\u0026#34; }, \u0026#34;OEnsketBruk\u0026#34;: null } Providing data as application/xml Content-Type: application/xml \u0026lt;BliTjenesteeier_M xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; dataFormatProvider=\u0026#34;SERES\u0026#34; dataFormatId=\u0026#34;5703\u0026#34; dataFormatVersion=\u0026#34;34553\u0026#34;\u0026gt; \u0026lt;Kontaktperson\u0026gt; \u0026lt;navn\u0026gt;Sophie Salt\u0026lt;/navn\u0026gt; \u0026lt;epost\u0026gt;1337@altinnstudiotestusers.com\u0026lt;/epost\u0026gt; \u0026lt;telefonnummer\u0026gt;90001337\u0026lt;/telefonnummer\u0026gt; \u0026lt;/Kontaktperson\u0026gt; \u0026lt;/BliTjenesteeier_M\u0026gt; "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/styling/",
	"title": "Styling (css)",
	"tags": ["development", "front-end", "styling"],
	"description": "Guidelines for styling components in Altinn Studio",
	"content": "Summary Styling in React is done per component using a combination of Material-UI and compatible JSS.\n Components shall not be styled with CSS classes in .CSS files.\n Different component types should use different styling methods, or a combination.\nProposed order of styling methods The following order is proposed when considering styling methods:\n Styled Components (Accepts props, logic, theming) Material-UI\u0026rsquo;s JSS (Accepts theming) Inline Styling, the React way (Accepts props, logic, theming. Not directly compatible with Material-UI)  Shared Components Shared components should utilize \u0026ldquo;Styled Components\u0026rdquo; which can write Props directly in the CSS styling. The alternative way is handling styling via props is leveraging \u0026ldquo;inline styling\u0026rdquo; combined with Material-UI\u0026rsquo;s JSS. When using inline styling, the component\u0026rsquo;s styling will be configured in two different places. Inline style example\n\u0026lt;FormControl fullWidth={true} style={{ width: this.props.width ? this.props.width : null, }} \u0026gt; Styled Components example\nconst theme = createMuiTheme(altinnTheme); const StyledPopper = styled(({ ...otherProps }) =\u0026gt; ( \u0026lt;Popper {...otherProps} /\u0026gt; ))` color: ${theme.altinnPalette.primary.black}; background: ${theme.altinnPalette.primary.redLight}; border-radius: 0; box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.25); font-size: 16px; padding: 24px; max-width: 550px; margin-top: 10px; z-index: ${(props) =\u0026gt; props.zIndex || 1}`; class AltinnPopper extends React.Component\u0026lt;IAltinnPopperComponentProvidedProps, IAltinnPopperComponentState\u0026gt; { public render() { const open = Boolean(this.props.anchorEl); return ( \u0026lt;StyledPopper open={open} anchorEl={this.props.anchorEl} placement={\u0026#39;bottom-start\u0026#39;} \u0026gt; {this.props.message} \u0026lt;/StyledPopper\u0026gt; ); } } export default AltinnPopper; Exception There will be examples where \u0026ldquo;Styled Components\u0026rdquo; are hard to configure using some of Material-UI\u0026rsquo;s components where \u0026ldquo;Props\u0026rdquo; with styling needs to be passed down to sub-components. Then the regular CreateStyles method from Material-UI needs to be leveraged and can be used in a combination with Styled Components.\nStyled object example\nconst styles = { searchBoxInput: { fontSize: \u0026#39;16px\u0026#39;, color: \u0026#39;#000000\u0026#39;, padding: \u0026#39;6px\u0026#39;, }, searchBoxIcon: { color: \u0026#39;#000000\u0026#39;, fontSize: \u0026#39;30px\u0026#39;, marginRight: \u0026#39;10px\u0026#39;, }, }; React component, with Styled Component AND \u0026lsquo;classes.searchBoxInput\u0026rsquo; from Styled Object example above.\nclass AltinnSearchInput extends React.Component\u0026lt;IAltinnSearchInputComponentProvidedProps, IAltinnSearchInputComponentState\u0026gt; { public render() { const { classes } = this.props; return ( \u0026lt;StyledFormControl id=\u0026#39;StyledForm\u0026#39; fullWidth={true} \u0026gt; \u0026lt;TextField id={this.props.id} placeholder={this.props.placeholder} onChange={this.props.onChangeFunction} InputProps={{ disableUnderline: true, startAdornment: \u0026lt;InputAdornment position={\u0026#39;end\u0026#39;} classes={{ root: classNames(classes.searchBoxIcon) }} \u0026gt; \u0026lt;i className={\u0026#39;ai ai-search\u0026#39;} /\u0026gt; \u0026lt;/InputAdornment\u0026gt;, classes: { root: classNames(classes.searchBoxInput) }, }} /\u0026gt; \u0026lt;/StyledFormControl\u0026gt; ); } } export default withStyles(styles)(AltinnSearchInput); Contained Components Contained components are React components which are not shared in other parts of the React application. It\u0026rsquo;s encouraged to consider the styling order above.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/back-end/swagger/",
	"title": "Swagger",
	"tags": ["development"],
	"description": "Guidelines for setting up swagger",
	"content": "We use Swagger to document our APIs.\nSwashbuckle We use Swashbuckle to generate the documentation. Further documentation on Swashbuckle.AspNetCore is available here\nThe configurations described below are all located in Program.cs in the AddSwaggerGen method.\nConfigure authorization Most of our APIs requires authorization. To enable the end user to test these endpoints through Swagger support for authentication must be configured.\nThe authorization box above is created with the configuration below. It enables the user provide a JWT token to the requests that are sent through Swagger as a bearer token.\nc.AddSecurityDefinition(\u0026#34;Bearer\u0026#34;, new OpenApiSecurityScheme { In = ParameterLocation.Header, Description = \u0026#34;Please enter JWT token\u0026#34;, Name = \u0026#34;Authorization\u0026#34;, Type = SecuritySchemeType.Http, BearerFormat = \u0026#34;JWT\u0026#34;, Scheme = \u0026#34;bearer\u0026#34; }); c.AddSecurityRequirement(new OpenApiSecurityRequirement { { new OpenApiSecurityScheme { Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = \u0026#34;Bearer\u0026#34; } }, Array.Empty\u0026lt;string\u0026gt;() } }); Further documentation on setting up security definitions and requirements is available here.\nSet up schema filter The swagger documentation contains examples of each schema that is used in the request and/or response of the APIs. By default, the example contains the default value of each value type. Our experience is that this might not be very explanatory to the end user.\nTo overwrite these examples with custom ones a SchemaFilter can be set up. First a schema filter class that implements the interface ISchemaFilter must be created. Secondly, the filter class must be registered in the AddSwaggerGen method in Program.cs.\nThe result of running a schema through a filter when generating the OpenAPI specification is shown below.\n[ { \u0026#34;id\u0026#34;: \u0026#34;8fb5a622-87e7-4f5e-b25e-215c93c3b86b\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;https://ttd.apps.altinn.no/ttd/apps-test/instances/50015641/a72223a3-926b-4095-a2a6-bacc10815f2d\u0026#34;, \u0026#34;specversion\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;app.instance.created\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;/party/50015641\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/person/27124902369\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2020-10-29T07:22:19.438039Z\u0026#34; } ] Implementation example This example implements a schema filter for the CloudEvent model. The full implementation is shown below and then broken down to explain each part.\npublic class SchemaExampleFilter : ISchemaFilter { /// \u0026lt;inheritdoc/\u0026gt;  public void Apply(OpenApiSchema schema, SchemaFilterContext context) { if(context.Type.Name == nameof(CloudEvent)){ schema.Example = new OpenApiObject { [\u0026#34;id\u0026#34;] = new OpenApiString(Guid.NewGuid().ToString()), [\u0026#34;source\u0026#34;] = new OpenApiString(\u0026#34;https://ttd.apps.altinn.no/ttd/apps-test/instances/50015641/a72223a3-926b-4095-a2a6-bacc10815f2d\u0026#34;), [\u0026#34;specversion\u0026#34;] = new OpenApiString(\u0026#34;1.0\u0026#34;), [\u0026#34;type\u0026#34;] = new OpenApiString(\u0026#34;app.instance.created\u0026#34;), [\u0026#34;subject\u0026#34;] = new OpenApiString(\u0026#34;/party/50015641\u0026#34;), [\u0026#34;alternativesubject\u0026#34;] = new OpenApiString(\u0026#34;/person/27124902369\u0026#34;), [\u0026#34;time\u0026#34;] = new OpenApiString(\u0026#34;2020-10-29T07:22:19.438039Z\u0026#34;) }; } return; } } The class SchemaExampleFilter is created and it implements the interface ISchemaFilter. The interface contains a single public method\npublic void Apply(OpenApiSchema schema, SchemaFilterContext context) { } The context object will have details on the current type an example may be provided for. We choose to match the types using context.Type.Name and nameof().\nThe example is an OpenApiObject and is bound to the Example property of the input parameter schema.\nschema.Example = new OpenApiObject { [\u0026#34;id\u0026#34;] = new OpenApiString(Guid.NewGuid().ToString()), [\u0026#34;source\u0026#34;] = new OpenApiString(\u0026#34;https://ttd.apps.altinn.no/ttd/apps-test/instances/50015641/a72223a3-926b-4095-a2a6-bacc10815f2d\u0026#34;), [\u0026#34;specversion\u0026#34;] = new OpenApiString(\u0026#34;1.0\u0026#34;), [\u0026#34;type\u0026#34;] = new OpenApiString(\u0026#34;app.instance.created\u0026#34;), [\u0026#34;subject\u0026#34;] = new OpenApiString(\u0026#34;/party/50015641\u0026#34;), [\u0026#34;alternativesubject\u0026#34;] = new OpenApiString(\u0026#34;/person/27124902369\u0026#34;), [\u0026#34;time\u0026#34;] = new OpenApiString(\u0026#34;2020-10-29T07:22:19.438039Z\u0026#34;) }; Note that we use OpenApiString for many of the types, this is to simply the setup on our part, and will not be communicated to the end user as the type to use.\nFinally the class must be registered as a schema filter in Program.cs.\nservices.AddSwaggerGen(c =\u0026gt; { c.SwaggerDoc(\u0026#34;v1\u0026#34;, new OpenApiInfo { Title = \u0026#34;Altinn Platform Events\u0026#34;, Version = \u0026#34;v1\u0026#34; }); IncludeXmlComments(c); c.EnableAnnotations(); c.SchemaFilter\u0026lt;SchemaExampleFilter\u0026gt;();  }); Set up request body filter When using schema filters, it is only possible to provide a single example per schema. In the case where the schema in the request body can have many variants where all could have the benefit of being exemplified in Swagger, request body filters should be used.\nTo overwrite the schema example with a request body example a RequestBodyFilter can be set up. First, a request body filter class that implements the interface IRequestBodyFilter must be created. Secondly, the filter class must be registered in the AddSwaggerGen method in Program.cs.\nThe result of running a request body through a filter when generating the OpenAPI specification is shown below for the SubscriptionRequestModel.\n{ \u0026#34;source\u0026#34;: \u0026#34;https://ttd.apps.altinn.no/ttd/apps-test/instances/50015641/a72223a3-926b-4095-a2a6-bacc10815f2d\u0026#34;, \u0026#34;specversion\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;app.instance.created\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;/party/50015677\u0026#34; } Implementation example This example implements a request body filter for the SubscriptionRequestModel. The full implementation is shown below.\npublic class RequestBodyExampleFilter : IRequestBodyFilter { public void Apply(OpenApiRequestBody requestBody, RequestBodyFilterContext context) { if(context.BodyParameterDescription.Type.Name == nameof(CloudEventRequestModel)){ OpenApiMediaType appJson = requestBody.Content[\u0026#34;application/json\u0026#34;]; List\u0026lt;(string Name, OpenApiObject Value)\u0026gt; examples = new() { (\u0026#34;Instance created event with alternative subject\u0026#34;, CreateOpenApiObject(new List\u0026lt;(string Name, string Value)\u0026gt;() { (\u0026#34;source\u0026#34;, \u0026#34;https://ttd.apps.altinn.no/ttd/apps-test/instances/50015641/a72223a3-926b-4095-a2a6-bacc10815f2d\u0026#34;), (\u0026#34;specversion\u0026#34;, \u0026#34;1.0\u0026#34;), (\u0026#34;type\u0026#34;, \u0026#34;app.instance.created\u0026#34;), (\u0026#34;alternativesubject\u0026#34;, \u0026#34;/person/01017512345\u0026#34;) })), (\u0026#34;Instance created event without alternative subject\u0026#34;, CreateOpenApiObject(new List\u0026lt;(string Name, string Value)\u0026gt;() { (\u0026#34;source\u0026#34;, \u0026#34;https://ttd.apps.altinn.no/ttd/apps-test/instances/50067592/f3c92d96-0eb3-4532-a16f-bcafd94bde3a\u0026#34;), (\u0026#34;specversion\u0026#34;, \u0026#34;1.0\u0026#34;), (\u0026#34;type\u0026#34;, \u0026#34;app.instance.created\u0026#34;), (\u0026#34;subject\u0026#34;, \u0026#34;/party/50067592\u0026#34;) })) }; examples.ForEach(entry =\u0026gt; appJson.Examples.Add(entry.Name, new OpenApiExample { Value = entry.Value })); requestBody.Content[\u0026#34;application/json\u0026#34;] = appJson; } return; } } Finally the class must be registered as a schema filter in Program.cs.\nservices.AddSwaggerGen(c =\u0026gt; { c.SwaggerDoc(\u0026#34;v1\u0026#34;, new OpenApiInfo { Title = \u0026#34;Altinn Platform Events\u0026#34;, Version = \u0026#34;v1\u0026#34; }); IncludeXmlComments(c); c.EnableAnnotations(); c.RequestBodyFilter\u0026lt;RequestBodyExampleFilter\u0026gt;();  }); "
},
{
	"uri": "https://docs.altinn.studio/api/apps/data-elements/tags/",
	"title": "Tags",
	"tags": ["api"],
	"description": "The app API to work with the tags on a data element.",
	"content": "Overview The tag API for data elements have endpoints for listing of tags, adding a tag and removing a tag.\nbasePath\n{org}/{appname}/instances/{instanceOwnerPartyId}/{instanceGuid}/data/{dataGuid}/ Get tags Endpoint for retrieving a list of tags already added to a data element.\nGET basePath/tags Accept: application/json Add tag Endpoint for adding a tag to a data element.\nPOST basePath/tags Content-Type: application/json \u0026#34;letters\u0026#34; The body should contain the new word in quotes. This is the JSON representation of a text and the Content-Type needs to be application/json. The word being added can consist of any letter from all languages.\nThe response is a list of tags on the data element including the new word.\nDelete tag Endpoint for removing a tag from a data element.\nDELETE basePath/tags/{tag} The response will have status code 204 if the operation was successfull.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/test/",
	"title": "Test",
	"tags": ["development", "testing"],
	"description": "Coding guidelines for tests",
	"content": "Coding guidelines for tests  \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/test/automated-test-app/\u0026quot;\u0026gt;App for automated test\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;An app used solely for automated testing in the browser\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/test/cypress/\u0026quot;\u0026gt;Cypress\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Functional Testing of Altinn Studio and Altinn app-frontend with Cypress\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/test/k6/\u0026quot;\u0026gt;k6\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Performance and Functional Testing of API with K6\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/test/postman/\u0026quot;\u0026gt;Postman\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;API Testing with postman\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/test/test-strategy/\u0026quot;\u0026gt;Test Strategy\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Test Strategy\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/test/unit-testing/\u0026quot;\u0026gt;Unit testing with Jest\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to write jest test in altinn studio, what we know so far. This page summarizes how UI testing is performed with Jest and related libraries for Altinn Studio.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/test/xunit-testing/\u0026quot;\u0026gt;Xunit Testing\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Xunit Testing\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/test/test-strategy/",
	"title": "Test Strategy",
	"tags": ["development", "testing"],
	"description": "Test Strategy",
	"content": "What should be tested? In tjenester 3.0, there is a need for both testing Altinn Studio, the app designer, as well as testing apps that are developed by an app developer in Altinn Studio Runtime. Testing these two areas of Altinn Studio requires different approaches.\nTesting of Altinn Studio is to be tested automatically at the unit and integration levels of testing. Unit testing of the system involves, for example, the testing of individual javascript functions, and individual pieces of logic relating to react/UI components. At the integrasion level of test, API\u0026rsquo;s and smaller modules are typically tested: Effective unit and integration testing demands good testing frameworks that tjenester 3.0 developrs can easily pick up and use, and that can be easily integrated in the current codebase and the current build toolchain.\nTesting of workflows, and the usage of ALtinn Studio, as well as testing of apps developed in Altinn Studio, is the primary responsibility of the test developer in the team. On a regression, or end-to-end, level of test, one tests that the users whole journey through the altinn studio system, or the developed app, works as expected in relation to stated acceptance criteria.\nA good end-to-end test tool has the same requirements as tooling and frameworks that is to be put to use for unit and integration testing. Additionally, the tool needs to be give the opportunity for less technically minded app developers to quickly develop UI tests for apps they develop and deploy to Altinn Studio. The end-to-end tool should also allow the test developer to easily run a full regression test suite, as well as reduce the amount of time to run such a set of regression tests accurately.\nTooling After a discussion internally in the tjenester 3.0 team, these tools and frameworks have been decided to be put to use for testing\n Unit testing: Jest / Enzyme / xUnit Integration testing: Jest / Sinon Regression testing: Cypress  The chosen tool set has been chosen for their ease of integration into the exisiting codebase, and also because they are all open source tools. Cypress also gives the possibility of recording tests with cypress dashboard, the test framework and UI test project will be the responsibility of the test developer in the team. Developers write unit and integration tests by using Jest and xUnit. See the other pages under test in this handbook for more information on how to effectively write unit tests or regression tests.\nDocumentation for the mentioned tools can be found below:\n xUnit Jest Enzyme Sinon Cypress  Test in the first MVP delivery Testing in the first MVP delivery was primarily done thru unit testing with test written in xunit, and jest, as well as thru manual functional tests of user stories under development. The unit testing frameworks xunit and jest were integrated in the MVP01 delivery, and the tests are executed using pipeline definitions in azure devops. The unit test pipelines are automatically triggered both by pull requests to the altinn github repo, as well as when code is merged into master. The pipelines for unit tests can be found here for the xunit pipeline, and here for the jest test pipeline. At the end of MVP01, testcafe tests also began running in their own pipeline. The regression tests in the testcafe pipeline are run as a nightly build, and does not deploy on pull requests, to avoid slowing down and hindering the work of developers. The pipeline for testcafe can be found here\nTest in the second MVP delivery In the second MVP delivery, deploying apps created in the Altinn Studio designer to Altinn Studio runtime has been prioritized as a \u0026ldquo;hill\u0026rdquo;, or main deliverable. In this context, regression tests written with testcafe wil focus on the workflow the developer \u0026ldquo;Christian\u0026rdquo; will be using to be able to deploy on of his apps to a test environment. The goal of test automation is to reduce the time taken to run all test in the Altinn Studio regression test suite, to run these tests accurately, and free up the time of the test developer to write better test cases. Both automatic and manual regression tests are run against dev.altinn.studio to assure the quality of developed code that is to be deployed to production. Unit and system testing in MVP02 will work in much the same way as in the MVP01 delivery: Developers write unit and integration tests in their respective frameworks, and focus on testing business logic they have developed. Snapshot testing, which was begun in MVP01, is deprioritized in MVP02 as they were found to be brittle and not contributing to the overall quality of the code. \u0026ldquo;Look and feel\u0026rdquo; testing will be the responsibility of functional designers, and the test developer in the team.\nTest levels The pyramid figure below shows an overview of the different levels of test, the possible tools associated with the testing level, as well as which rle has the responsibilty for writing tests at that level.\nTestdata To be be able to easily and effectively test on all levels, it can be necessary to put a tool in place to easily retrieve or store different test data. The Tjenester 3.0 team must decide on whether to creat testdata classes that can be imported in the different test projects. Another possibility is to fetch spesific pre-made dataset (for example testdata set 164/5) from a json file or similar. In MVP02 the testcafe project uses a naive testdata class, that will be expanded as the new for more complex testdata grows: TestData.js contains a class for creating users in Altinn Studio at the moment. Refer to the Jest section under test for an overview on using data in unit tests.\n#Methodology During sprint planning, the product owner, the developers, and the test developer agree on an approach for teting on individual user stories that are pulled into the sprint. A plan is then created for how the responsible role will test the required functionality, and sub tasks are created on the different user stories. It is possible, and likely, that a user story will contain tasks to develop tests on all the testing levels specified above. When a test is written and completed, it can be integrated into a testing build.\nNaming convention for element ids' Cypress has different methods of getting elements from the DOM. The easiest and most robust method of defining a selector is with a css id selector. The idea behind using html-id\u0026rsquo;s is to avoid finding elements by their relative location in the DOM, or by the element\u0026rsquo;s inner texts, as tests become brittle with these selectors due to design changs. The id\u0026rsquo;s must be unique, to ensure the uniqueness of a Selector, the following naming convention for element id\u0026rsquo;s is proposed: Id\u0026rsquo;s must be tekstbased and written in camelCase, id\u0026rsquo;s follow a logical location the Altinn Studio system, such as; \u0026ldquo;Pagelocation Submenu Elementtype Descriptiveword\u0026rdquo;. The text box element id under the GUI creator could then be assigned the following id: \u0026ldquo;designerSkjemakomponenterKnappTekstområde\u0026rdquo;.\nBuilding and deploying testcode See the pipeline hyperlinks above in this document.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/routing/traefik/tls-configuration/",
	"title": "TLS in Traefik 2.0",
	"tags": ["development", "routing", "traefik", "tls"],
	"description": "How to set up TLS",
	"content": "TLS sertificates stored as secrets on the cluster apiVersion: v1 kind: Secret metadata: name: altinn-tls-secret data: tls.crt: [[BASE 64 ENCODED CERTIFICATE]] tls.key: [[BASE 64 ENCODED PRIVATE KEY]] TLS Options To set up TLS options we need to use the custom resource TLSOption. A basic set up of this is:\napiVersion: traefik.containo.us/v1alpha1 kind: TLSOption metadata: name: altinn-tls-options namespace: default spec: minVersion: VersionTLS12 Adding TLS to an Ingress Route Add a tls attribute to the spec if the ingress route, with secretName (secret that contains the TLS certificate and private key) and optionally a options-attribute with the name of the TLSOption we made and the namespace (if nothing is specified when creating the secret it would be in the default namespace).\napiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: altinn-runtime spec: entryPoints: - web - websecure routes: - match: Host(`dev.altinn.studio`) # priority: 25 kind: Rule services: - name: altinn-runtime port: 5005 tls: secretName: altinn-tls-secret options: #Optional name: altinn-tls-options namespace: default "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/routing/traefik/custom-resources/",
	"title": "Traefik custom resources",
	"tags": ["development", "routing", "traefik", "custom resources", "crds"],
	"description": "Definitions for traefik 2.0 custom resources in kubernetes",
	"content": "IMPORTANT These resources have to be installed before creating any of the resources they describe. They are most likely installed with helm when installing traefik 2.0.\nTo support new features in routing and middlewares with IngressRoutes and dynamic tls options, traefik supplies it\u0026rsquo;s own kubernetes custom resources defined in the traefik docs. These are:\napiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: ingressroutes.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: IngressRoute plural: ingressroutes singular: ingressroute scope: Namespaced --- apiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: middlewares.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: Middleware plural: middlewares singular: middleware scope: Namespaced --- apiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: tlsoptions.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: TLSOption plural: tlsoptions singular: tlsoption scope: Namespaced --- apiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: ingressroutetcps.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: IngressRouteTCP plural: ingressroutetcps singular: ingressroutetcp scope: Namespaced They will extend the types of resources you can have on your cluster.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/routing/traefik/ingress-routes/",
	"title": "Traefik ingress routes",
	"tags": ["development", "routing", "traefik", "ingress routes", "ingress"],
	"description": "How to set up an ingress route and route trafic based on rules and middlewares",
	"content": "Before traefik 2.0 the only supported way of routing in kubernetes was through the Kubernetes Ingress prodvider, which limited the functionality traefik could offer.\nAs a result of introducing the custom resource IngressRoutes in traefik 2.0 we don\u0026rsquo;t need to write many annotations on the ingress. And it is easier to configure access to a kubernetes cluster.\nResource configuration apiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: altinn-runtime spec: entryPoints: - web - websecure routes: - match: Host(`dev.altinn.studio`) # priority: 25 kind: Rule services: - name: altinn-runtime port: 5005 This is the simplest service to port over to traefik 2.0 within Altinn Studio. Since it is the \u0026ldquo;default\u0026rdquo; route if nothing else matches (routes for /repos or /designer).\nPay close attencion to the priority-field. If nothing is specified it will be the length of the string in the match-field. So longer rules are higher prioritized.\nRouting Middlewares In the earlier example we can hook up middlewares. You can define middlewares in this format:\napiVersion: traefik.containo.us/v1alpha1 kind: Middleware metadata: name: fetch-cookie-and-redirect spec: replacePath: path: /Redirect/FetchCookieAndRedirectHome/ This example is for when the designer fetches cookies and redirects to \u0026ldquo;/home\u0026rdquo;.\nThe different specs can be found in the traefik docs.\nSo first create a middleware resource in kubernetes and then you can use it in the ingressRoute like this\nname: altinn-designer-root namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; Path(`/`) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; Path(`/`) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; Path(`/`) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; Path(`/`) kind: Rule strategy: RoundRobin middlewares: [] - name: altinn-designer-home namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; PathPrefix(`/Home`) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/Home`) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/Home`) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/Home`) kind: Rule strategy: RoundRobin middlewares: [] - name: altinn-designer-designer namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; PathPrefix(`/designer`) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/designer`) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/designer`) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/designer`) kind: Rule strategy: RoundRobin middlewares: [] - name: altinn-designer-repos namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) kind: Rule strategy: RoundRobin middlewares: - name: fetch-cookie-and-redirect At the last entry in the routes element uses the middleware. It references the middleware by name.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/routing/traefik/",
	"title": "Traefik routing",
	"tags": ["development", "traefik", "routing"],
	"description": "",
	"content": "In Altinn Tjenester 3.0 we are migrating from nginx to traefik for routing.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/routing/traefik/installation/\u0026quot;\u0026gt;Installation of Traefik 2.0\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to install traefik\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/routing/traefik/tls-configuration/\u0026quot;\u0026gt;TLS in Traefik 2.0\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to set up TLS\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/routing/traefik/custom-resources/\u0026quot;\u0026gt;Traefik custom resources\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Definitions for traefik 2.0 custom resources in kubernetes\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/routing/traefik/ingress-routes/\u0026quot;\u0026gt;Traefik ingress routes\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to set up an ingress route and route trafic based on rules and middlewares\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/test/unit-testing/",
	"title": "Unit testing with Jest",
	"tags": ["development", "front-end", "testing"],
	"description": "How to write jest test in altinn studio, what we know so far. This page summarizes how UI testing is performed with Jest and related libraries for Altinn Studio.",
	"content": "When should you write tests? Unit testing includes testing of javascript functions and react/UI components. Listing of the highest priority of unit-testing:\n API calls with the correct formatted parameters Rendering of isolated components. Functions in general.  Exporting and importing your component A quick way to get started testing your component is first to export the React Component:\nexport class CloneServiceComponent extends React.Component\u0026lt;ICloneServiceComponentProps \u0026amp; RouteChildrenProps, ICloneServiceComponentState\u0026gt; { and then reference it in your test the following way:\nimport { CloneServiceComponent } from \u0026#39;../../../src/dashboardServices/cloneService/cloneServices\u0026#39;; it(\u0026#39;+++ this is the test\u0026#39;, async () =\u0026gt; { const mountedComponent = mount( \u0026lt;CloneServiceComponent language={mockLanguage} services={mockServices} classes={mockClasses} location={mockLocation} history={mockHistory} match={mockMatch} /\u0026gt;, ); const instance = mountedComponent.instance() as CloneServiceComponent; } This will test the component without state, router or styles (read Material UI), so values usually passed in by Redux store, by means of routing or styles/Material UI needs to be reference as if they are props passed into the component (match={mockMatch}).\nMethods in your component Methods can be called directly from your test, or executed when clicked on UI elements (See own section). Calling methods is done like this:\ninstance.getCurrentRepositoryInfo(); instance.componentDidMount();  If you call networked functions in componentDidMount() you need to mock the networked functions before mounting.\n If you have one function that calls another function, and you want to be sure that both functions ran at the end of the test, you can use jest\u0026rsquo;s spyOn functionality described here:\nconst spy = jest.spyOn(instance, \u0026#39;funcitonTwoCalledWithinFunctionOne\u0026#39;); instance.functionOne(); expect(spy).toHaveBeenCalled();  You can read more about Jest.expect() here: Jest.expect()\n User Interface and Methods In the example above, testing the actual interface is excluded. Simulating a click on an element might need to be performed twice in some cases. Simulating a click can be done using the elements ID and the simulate method from Enzyme:\nmountedComponent.find(\u0026#39;button#editService\u0026#39;).simulate(\u0026#39;click\u0026#39;);  ReactWrapper will pass a SyntheticEvent object to the event handler in your code. If the code you are testing uses properties that are not included in the SyntheticEvent, for instance event.target.value, you will need to provide a mock event for it to work. Read more at Enzyme\u0026rsquo;s Simulate documentation here.\n Networked functions (get, post, put) If you are using get, post or put from the shared networking.ts component you need to mock the actual call to be able to test functions that calls either get, post or put. This can be done in the following way:\n// Add this to the import statements in you test file: import * as networking from \u0026#39;../../../../shared/src/utils/networking\u0026#39;; // To resolve the promise and and to return the value, first make sure your test is async: it(\u0026#39;should handle successfully returned data from API\u0026#39;, async () =\u0026gt; { /* Mounting goes here, commented to get markdown colors correctly const mountedComponent = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); */ // Creating the instance so you can spy or call methods directly  const instance = mountedComponent.instance() as HandleMergeConflictAbort; // Spies for regular methods  const spyOnClickFunctionHandler = jest.spyOn(instance, \u0026#39;clickFunctionHandler\u0026#39;); // Before you call the methods which use netowrking, you must create the spy and mock:  const mockData = { isSuccessStatusCode: true, }; const getStub = jest.fn(); const mockGet = jest.spyOn(networking, \u0026#39;get\u0026#39;).mockImplementation(getStub); getStub.mockReturnValue(Promise.resolve(mockData)); // Simulate clicks  mountedComponent.find(\u0026#39;button#editService\u0026#39;).simulate(\u0026#39;click\u0026#39;); // OR call methods  instance.clickFunctionHandler(); // Expect functions to be called, both handler and networking  expect(spyOnClickFunctionHandler).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Resolve mocked networking  await Promise.resolve(); // Expect something to happen  expect(instance.state.networkingRes.isSuccessStatusCode).toEqual(true); }); Rejecting Promises / Error testing / Negative tests If you want to test how your component handles rejected Promises / errors, for example in your Try/Catch you can use the following modification:\n// This is the rejected version of the mock gode const mockError = Error(\u0026#39;mocked error\u0026#39;); const getStub = jest.fn(); const mockGet = jest.spyOn(networking, \u0026#39;get\u0026#39;).mockImplementation(getStub); getStub.mockReturnValue(Promise.reject(mockError)); // You \u0026#34;execute\u0026#34; the network function the same way as a resolved promise await Promise.resolve(); You can spy on the console.error with the following code:\nlet consoleError: any; beforeAll(() =\u0026gt; { consoleError = jest.spyOn(console, \u0026#39;error\u0026#39;).mockImplementation(() =\u0026gt; { return {}; }); }); // And the following inside your test: expect(consoleError).toHaveBeenCalled();  See example #2, for more detailed test\n Using Router If you are testing a component that uses React Router, you might have to build router props and pass them to the component you are testing. Here is an example on how this can be done:\nmockLocation = { pathname: \u0026#39;pathname\u0026#39;, search: \u0026#39;search\u0026#39;, state: {}, hash: \u0026#39;hash\u0026#39;, }; mockHistory = { length: 1, action: \u0026#39;PUSH\u0026#39; as Action, location, push: () =\u0026gt; false, replace: () =\u0026gt; false, go: () =\u0026gt; false, goBack: () =\u0026gt; false, goForward: () =\u0026gt; false, block: () =\u0026gt; (null) as any, listen: () =\u0026gt; (null) as any, createHref: () =\u0026gt; \u0026#39;\u0026#39;, }; mockMatch = { params: {}, isExact: false, path: \u0026#39;\u0026#39;, url: \u0026#39;\u0026#39;, }; Example #1, positive test import { mount } from \u0026#39;enzyme\u0026#39;; import \u0026#39;jest\u0026#39;; import * as React from \u0026#39;react\u0026#39;; import * as networking from \u0026#39;../../shared/src/utils/networking\u0026#39;; import { HandleMergeConflictAbort } from \u0026#39;../src/features/handleMergeConflict/components/HandleMergeConflictAbort\u0026#39;; describe(\u0026#39;HandleMergeConflictAbort\u0026#39;, () =\u0026gt; { let mockLanguage: any; beforeEach(() =\u0026gt; { mockLanguage = {}; }); it(\u0026#39;should handle successfully returned data from API\u0026#39;, async () =\u0026gt; { const wrapper = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); const instance = wrapper.instance() as HandleMergeConflictAbort; // Spies  const spyOnAbortPopover = jest.spyOn(instance, \u0026#39;AbortPopover\u0026#39;); const spyOnAbortConfirmed = jest.spyOn(instance, \u0026#39;AbortConfirmed\u0026#39;); // Mocks  const mockData = { isSuccessStatusCode: true, }; const getStub = jest.fn(); const mockGet = jest.spyOn(networking, \u0026#39;get\u0026#39;).mockImplementation(getStub); getStub.mockReturnValue(Promise.resolve(mockData)); // Expected no result from networking yet  expect(instance.state.networkingRes).toEqual(null); // Expect discard button to exist  expect(wrapper.exists(\u0026#39;#abortMergeBtn\u0026#39;)).toEqual(true); // workaround, have to click twice the first time  wrapper.find(\u0026#39;button#abortMergeBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); // Click the discard button  wrapper.find(\u0026#39;button#abortMergeBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); expect(spyOnAbortPopover).toHaveBeenCalled(); // Expect the button inside the popover to exist  expect(wrapper.exists(\u0026#39;#abortMergeConfirmBtn\u0026#39;)).toEqual(true); // Click the confirm button  wrapper.find(\u0026#39;button#abortMergeConfirmBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); // Expect functions to be called  expect(spyOnAbortConfirmed).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Expect state to change  expect(instance.state.popoverState.isLoading).toEqual(true); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(false); // Resolve mocked networking  await Promise.resolve(); // Expect state to change  expect(instance.state.popoverState.isLoading).toEqual(false); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(true); expect(instance.state.networkingRes.isSuccessStatusCode).toEqual(true); }); }); Example #2, negative test (Error handling) import { mount } from \u0026#39;enzyme\u0026#39;; import \u0026#39;jest\u0026#39;; import * as React from \u0026#39;react\u0026#39;; import * as networking from \u0026#39;../../shared/src/utils/networking\u0026#39;; import { HandleMergeConflictAbort } from \u0026#39;../src/features/handleMergeConflict/components/HandleMergeConflictAbort\u0026#39;; describe(\u0026#39;HandleMergeConflictAbort\u0026#39;, () =\u0026gt; { let mockLanguage: any; let consoleError: any; beforeAll(() =\u0026gt; { consoleError = jest.spyOn(console, \u0026#39;error\u0026#39;).mockImplementation(() =\u0026gt; { return {}; }); }); beforeEach(() =\u0026gt; { mockLanguage = {}; }); it(\u0026#39;should catch error from networked function\u0026#39;, async () =\u0026gt; { const wrapper = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); const instance = wrapper.instance() as HandleMergeConflictAbort; // Spies  const spyOnAbortPopover = jest.spyOn(instance, \u0026#39;AbortPopover\u0026#39;); const spyOnAbortConfirmed = jest.spyOn(instance, \u0026#39;AbortConfirmed\u0026#39;); // Mocks  const mockError = Error(\u0026#39;mocked error\u0026#39;); const getStub = jest.fn(); const mockGet = jest.spyOn(networking, \u0026#39;get\u0026#39;).mockImplementation(getStub); getStub.mockReturnValue(Promise.reject(mockError)); // Expected no result from networking yet  expect(instance.state.networkingRes).toEqual(null); // Expect discard button to exist  expect(wrapper.exists(\u0026#39;#abortMergeBtn\u0026#39;)).toEqual(true); // workaround, have to click twice the first time  wrapper.find(\u0026#39;button#abortMergeBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); // Click the discard button  wrapper.find(\u0026#39;button#abortMergeBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); expect(spyOnAbortPopover).toHaveBeenCalled(); // Expect the button inside the popover to exist  expect(wrapper.exists(\u0026#39;#abortMergeConfirmBtn\u0026#39;)).toEqual(true); // Click the confirm button  wrapper.find(\u0026#39;button#abortMergeConfirmBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); // Expect functions to be called  expect(spyOnAbortConfirmed).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Error is thrown  await Promise.resolve(); // Expect state to change, and error to be saved to state  expect(instance.state.popoverState.isLoading).toEqual(false); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(false); expect(instance.state.errorObj).toMatchObject(Error(\u0026#39;mocked error\u0026#39;)); expect(instance.state.networkingRes).toEqual(\u0026#39;error\u0026#39;); // Expect console.error to be called.  expect(consoleError).toHaveBeenCalled(); }); }); "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/storage-interfaces/v2/",
	"title": "v2",
	"tags": [],
	"description": "Overview of changes introduced in v2 of the Altinn.Platform.Storage.Interface package.",
	"content": "2.5.10 Dependency on .NETStandard2.0  The package was changed to depend on .NetStandard2.0 in place of .NetStandard2.1. This should ensure that applications based on .NET Framework 4.7 can use the package.  2.5.9 Expanded the eFormidlingContract with SecurityLevel  eFormidlingContract model was given a new property holding security level information. #5740  2.5.8 Extended eFormidlingContract with additional parameters  eFormidlingContract model was given three new properties to support eFormidling in apps. #5740  2.5.7 Extended eFormidlingContract with a new property: sendAfterTaskId  eFormidlingContract model was given a new property to identify which task should trigger an eFormidling shipment. #5740  2.5.6 Adjustments around PresentationField and texts  Fixes to how PresentationFields were annotated. New class PresentationTexts to hold a list of texts generated by presentation field rules on an instance.  2.5.5 Added PresentationFields to Application  New class PresentationField to represent a data extraction rule. Instance model was given a new property called presentationFields. #5638  2.5.4 Fix the OpenAPI specification of ReadStatus  ReadStatus was changed to be defined as a string. #5637  2.5.3 eFormidling support  Added a new model to support integration with eFormidling.  2.5.2 Dependency on .NETStandard2.1  The package was changed to depend on .NetStandard2.1 in place of .NETCoreApp3.1. The dependency to the Microsoft.AspNetCore.Mvc.NewtonsoftJson package was removed and there is now instead a direct dependency to the Newtonsoft.Json package.  2.5.1 DataElement IsRead is true by default  The value of IsRead is changed to have default value true.  "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-frontend/v3/",
	"title": "v3",
	"tags": [],
	"description": "Overview of changes introduced in v3 of app frontend.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-frontend/v3/breaking-changes/\u0026quot;\u0026gt;Breaking changes\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of breaking changes introduced into app frontend in v3.0.0\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/app-frontend/v3/whats-new/\u0026quot;\u0026gt;What\u0026amp;#39;s new\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v3 of app frontend.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/front-end/versioning/",
	"title": "Versioning",
	"tags": ["development", "front-end", "versioning"],
	"description": "Guidelines for versioning of front-end",
	"content": "The frontends, both for Altinn Studio and Apps are set up as node modules, using a package.json to import external dependencies. In package.json for each package we can specify the version of the package. In this context, package refers to the different applications we are bulding, such as altinn-app-frontend, receipt, etc.\nEach time we make a change to a package, we need to update the version of the package to reflect the change. This is especially important in the packages related to Altinn.Apps - whenever changes are merged into the master branch, the compiled javascript is uploaded to a CDN where it can be used by the app, and the CDN supports versioning. So an app can refer to a specific version of f.ex. the app frontend.\nThe packages use semantic versioning:\n Given a version number MAJOR.MINOR.PATCH, increment the:\n MAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards compatible manner, and PATCH version when you make backwards compatible bug fixes. Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.   Each time a change is made to any frontend applications, the version in the corresponding package.json must be updated according to the rules above.\nThe default is for a new app to refer to the latest MAJOR version of the app frontend. If any changes are made that cause us to update the MAJOR version, remember to also update\rthe app template, so that any new apps will refer to the newest MAJOR version.\r\r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/test/xunit-testing/",
	"title": "Xunit Testing",
	"tags": ["development", "testing"],
	"description": "Xunit Testing",
	"content": "Find code on xunit tests here\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authentication/",
	"title": "Application architecture authentication component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "The Authentication component is an a ASP.NET Core MVC Application exposing REST-API to Altinn Apps.",
	"content": "The solution is available at https://platform.altinn.cloud/authentication/api/v1.\nAuthenticate user The authentication resource enables authenticating a user and redirecting it to another Altinn-url. If the user is not authenticated already it will be sent to the login page before redirecting the user to its final destination {url}.\nGET /authentication?goto={url} Refresh a valid JwtToken GET /refresh Exchange a JWT token from an external token provider Accepted providers include: maskinporten and id-porten. Request must include a bearer token in the authorization header. Set test equal to true if retrieving a token for Testdepartementet. (This ony works with maskinporten as the token provider.)\nA token from id-porten contains both an id-token and and access-token. Only the access token it to be exhanged using this endpoint.\r\rGET /exchange/{tokenProvider}?test={bool} "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/",
	"title": "Application Construction Components",
	"tags": ["architecture"],
	"description": "Application Construction Components refers to the required components and configurations needed to create the different applications in the different solutions.",
	"content": "It also describes the internal frameworks used in the different applications and how they consume and produce data.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-studio/\u0026quot;\u0026gt;Application construction components Altinn Studio\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The application construction components for Altinn Studio includes all components uses to create the Altinn Studio Applications.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/\u0026quot;\u0026gt;Application construction components for Altinn Apps\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Application created in Altinn Studio is deployed to Altinn Apps.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-platform/\u0026quot;\u0026gt;Application construction components for Altinn Platform\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Platform consist of serveral components that is constructed with help of different frameworks and components.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/security/\u0026quot;\u0026gt;Security Enforcement Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the Altinn Studio, Altinn Apps, Altinn Platform security architecture providing runtime capabilities for the solutions.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authorization/",
	"title": "Altinn Platform - Authorization",
	"tags": ["architecture", "solution"],
	"description": "The authorization component provides functionality to authorize access to applications and components in Altinn Apps and Altinn Platform.",
	"content": "The authorization components are based on attribute based access control (ABAC).\nIn short, a request is authorized based on attributes for the request. Eg what data element is the user accessing, who owns it, what type of data element, and so on.\nThe authorization architecture for the Altinn Platform is based on the XACML reference architecture.\nThe following diagram describes the different solution components that provide Authorization capabilities.\nThis architecture defines the following components.\nPDP - Policy Decision Point Responsible to decide if a request is authorized or not. Read more\nPAP - Policy Administration Point Responsible for defining and administration authorization policies. Read more\nPRP - Policy Retrieval Point Responsible for identifying the correct policy for a request. Read more\nContext Handler Responsible for enriching the decision request so it can correctly be evaluated. Read more\nPIP - Policy information point Responsible for providing information about the subject and the resource to the context handler. Read more\nPEP - Policy Enforcement Point Responsible for enforcing the decision from PDP. This is the component that blocks a request or let it through.\nFor details about how the components are constructed go here.\nThe Overall Authorization flow The sequence diagram below shows how a request is authorized\nExample process The following example flow describes in detail the authorization process when the REACT frontend calls an API to store form data\n User trigger save in the REACT application. REACT application makes an HTTP post request against the ServiceAPIController in The configured Policy Enforcement Point for the API, the Service Access Handler,\ntriggers to verify that user is authorized The PEP identifies the authenticated user from authorizationhandler context and find the relevant resource ID from request The PEP calls the PDP functionality in Authorization Component in Altinn Platform PDP calls context handler to enrich the decision request Context handler calls Storage PIP to get resource information Context handler calls authorization PIP to get roles user have for resource party Context handler enriches the decision request and returns to PDP PDP calls PRP to get the policy for the resource PDP evaluates the decision request and returns a decision response If the result was Permit, the PEP validates the obligation from PDP to see if the authentication level was high enough. If it is enough the request is let through If the authentication level is not high enough the PEP will throw a not authorized exception (403) If the result was \u0026ldquo;Not Applicable\u0026rdquo; the PEP will throw a not authorized exception (403)  Authorization API The Authorization component exposes a REST-API to Altinn Apps. Use the authorization API to manage authorizations in altinn platform.\nParties A party is a person whom you can represent and perform a request on his behalf. A logged in user can retrieve a list of parties that he/she can represent.\nOperations Get a list of parties that the user can represent. The userid is sent as parameter.\nGET /authorization/api/v1/parties?userid={userid} Validate that a given user is allowed to represent a given party. The partyid and userid are sent as parameters.\nGET /authorization/api/v1/parties/{partyId}/validate?userid={userid} Roles A role in altinn offers or denies right to the logged in user to perform an action or group of actions for him or on behalf of someone.\nOperations Get a list of roles that the user can perform for the selected party.\nGET /authorization/api/v1/roles Policies A set of polices contains authorization rules.\nOperations Stores / updates rules for a given app, defined in the query string. The rules are sent in the body of the request. Reade more about the policy format.\nPOST /authorization/api/v1/policies?org=org\u0026amp;app=app Altinn Authorization - Future In the coming years, Authorization will be modernized from being a part of Altinn 2 monolith to a cloud-native architecture.\nThe diagram below shows the different solution components.\nAltinn Access Management This component will be the component responsible for the administration of access to self and organization\n Giving the end-users an overview of which rights he and other has Administration of AccessGroups Possibility to delegate and revoke rights  Altinn Resource Registry This component will provide a register of\n Altinn 3 Apps Altinn 2 apps External services that are hosted in other platforms but registered in Altinn for authorization purposes.  A POC is planned\nAltinn Access Groups Altinn Access Groups component contains the Altinn defined Access Groups and information which is member of this groups.\nExposes API to list and delegate Access Groups.\nA POC is planned\nAltinn Access Policies Store for the different policies. Able to identify the correct policy based on Authorization Request.\nHave functionality to create delegated policies\nA POC is planned\nAltinn Access Information Altinn Access Information exposes API for Reportee, access groups, and rights for external consumers. Therefore, it needs to be highly scalable.\nAltinn Consent Provides functionality to request consent and give consents\nAltinn Policy Decision Point This is the core PDP responsible to evaluate if the user should get access to a given resource.\nDepends on Altinn Access Groups for groups information and Altinn Access Policies for policy information.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-platform/authorization/accessgroups/\u0026quot;\u0026gt;Access Groups\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Access groups\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-platform/authorization/contexthandler/\u0026quot;\u0026gt;Context Handler\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The responsibility to the Context Handler is to enrich a decision request sent from a PEP so it can be evaluated by PDP.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-platform/authorization/pap/\u0026quot;\u0026gt;Policy Administration Point\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Policy Administration Point is responsible for creating and modifying the different authorization policies used by the PDP\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-platform/authorization/pdp/\u0026quot;\u0026gt;Policy Decision Point\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Policy Decision Point is responsible to evaluate if users and systems is authorized to perform the requested operation on a resource.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-platform/authorization/pep/\u0026quot;\u0026gt;Policy Enforcement Point\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;In Altinn Platform there are PEP\u0026amp;#39;s that enforce access to different types of API\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-platform/authorization/pip/\u0026quot;\u0026gt;Policy Information Point\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Policy Information Point(s) are responsible for providing needed information to the context handler so it can enrich the context request.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-platform/authorization/prp/\u0026quot;\u0026gt;Policy Retrieval Point\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Policy Retrieval Point is the functionality where Policy Decision Point (PDP) can retrieve the policy defined for an app resource.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-platform/authorization/resourceregistry/\u0026quot;\u0026gt;Resource Registry\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Resource Registry\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-platform/authorization/xacml/\u0026quot;\u0026gt;XACML - Altinn Studio\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;XACML stands for \u0026amp;#34;eXtensible Access Control Markup Language\u0026amp;#34;.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/nonsolutionspecific/",
	"title": "Non-Solution-Specific",
	"tags": ["solution", "architecture"],
	"description": "Non-Solution-Specific Application components refer to all components other than the core solution or solution-specific Application typical used for devops.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/nonsolutionspecific/development/\u0026quot;\u0026gt;Development Applications\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Development Applications are used by the devops team to support the different development capabilities required.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/nonsolutionspecific/operations/\u0026quot;\u0026gt;Operations Application\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Operations Applications are used by the devops team for supporting the different operation and management capabilities required\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/thirdpartytools/",
	"title": "Third Party Tools",
	"tags": ["third party tools"],
	"description": "One important aspect of the Altinn Studio is that we encourage to use third party development tools to create and modify applications.",
	"content": "Since application code and config is versioned in Altinn Studio Repos and that is a GIT based source control any development tool with GIT support can clone application repository to local develoment machine.\nIn addition the application is based on a asp.net core web application that is supported in tools like Visual Studio Code.\nSuggested tools The following tools are examples on tools that you as a developer can install and use for application development.\nGit Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Altinn Studio Repository uses a git based source control system.\nYou can download a git client here\nVisual Studio Code Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity)\nThe application repos created in Altinn Studio contains workspace configuration for Visual Studio Code.\nYou can download Visual Studio Code here.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/events/",
	"title": "Application architecture Events component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "The Events component is an a ASP.NET Core MVC Application exposing REST-API to Altinn Apps and other Altinn Platform components.",
	"content": "In addition it contains serveral Azure Functions to support push of events.\nSee event capabilities for functional description of the platforms event capabilities.\nThe solution is available at https://platform.altinn.cloud/events/api/v1.\nAPI Structure The API\u0026rsquo;s is structured so the URLs are filtered queries into the events storage.\nInstances events for Org Endpoint GET path: platform.altinn.no/events/api/v1/app/{org}/{appName} Usage This will be used by application owners to identify changes on instances for their applications.\nAuthorization We will use scopes from Maskinporten to authorize access. In this way, it should also be possible for an org to delegate access to events for a given org/app.\nThe full detail for this API is described in this issue.\nRequest The following url parameters and http headers have been defined. Person is given as a http header because of security.\n   Parameter Type Description     org string Required: the org owning the application   appName string Required: the application related to the event   after string Required**: the id of the last event processed by the client   from datetime Required**: The time (UTC) to search from   to datetime Optional: The time (UTC) to search up until   party string Optional: the partyId   type List\u0026lt;string\u0026gt; Optional: a list of event types   unit string Optional: the organisation number nine digits for reportee   person string (http header) Optional: the f or d number of the person   size int Optional: upper limit for number of returned events    * Needs to give one identifcator of the subject, unit,person or party parammeter.\n** After or from is required\n*** Source allows for escaping a single character _ or an undefined number of characters %\nResponse Response includes a next header that can be used to get the events following the last event returned by the response. Query parameter after is inserted or replaced and holds the id of the last event returned in the reponse.\nhttps://platform.tt02.altinn.no/events/api/v1/app/ttd/apps-test?after=5beae524-0b3d-4e3b-bf40-450575eaf5d6\u0026amp;from=2020-10-01 11:35:00 Response body includes a list of cloud events on the form\n[ { \u0026#34;id\u0026#34;: \u0026#34;8c99c887-3861-4c2a-9ac9-178a20b1ee70\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;https://nav.apps.altinn.no/nav/app/instances/1234324/6fb3f738-6800-4f29-9f3e-1c66862656cd\u0026#34;, \u0026#34;specversion\u0026#34;: \u0026#34;1.x-wip\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;instance.created\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/567890\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2020-10-13T15:46:02.557971Z\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/person/01038712345\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;data field\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5beae524-0b3d-4e3b-bf40-450575eaf5d6\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;https://nav.apps.altinn.no/nav/app/instances/1234324/6fb3f738-6800-4f29-9f3e-1c66862656cd\u0026#34;, \u0026#34;specversion\u0026#34;: \u0026#34;1.x-wip\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;instance.deleted\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/567890\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2020-10-14T10:33:33.022379Z\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/person/01038712345\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;data field\u0026#34; } ] Events for a given party A very common scenario is that a party needs to know about events for the party itself or other party that party has a relationship for (client, child unit++).\nEndpoint GET platform.altinn.no/events/api/v1/app/party Usage This is used by end users to see events for a given party. This will list all changes for a given party, identified with a partyId, person number or organisation number.\nAuthorization Access to events needs to be authorized. To be able to read events, you need to have the read right for the given app for the given party.\nThe topic and subject would be used to identify the correct XACML-policy to use.\nThe operation would be read and the proccess task will be set to null. This way there would be no need to verify the current state of an instance.\nThe full detail for this API is described in this issue.\nRequest The following url parameters and http headers has been defined. Person is given as a http header because of security.\n   Parameter Type Description     after string Required**: the id of the last event processed by the client   from datetime Required**: The time (UTC) to search from   to datetime Optional: The time (UTC) to search up until   party string Required* the partyId   type List\u0026lt;string\u0026gt; Optional: a list of event types   source List\u0026lt;string\u0026gt; (regex allowed)*** Optional: a list of strings to match the event source   unit string Required* the organisation number nine digits   person string (http header) Required* the f or d number of the person   size int Optional: upper limit for number of returned events   * Needs to give one identifcator of the subject, unit,person or party parammeter.      ** After or from is required\n*** Source allows for escaping a single character _ or an undefined number of characters %\nResponse Response includes a next header that can be used to get the events following the last event returned by the response. Query parameter after is inserted or replaced and holds the id of the last event returned in the reponse.\nhttps://platform.tt02.altinn.no/events/api/v1/app/party?after=5beae524-0b3d-4e3b-bf40-450575eaf5d6\u0026amp;from=2020-10-01 11:35:00 We have this example\n[{ \u0026#34;source\u0026#34;: \u0026#34;https://skd.apps.altinn.no/skd/skattemelding/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/234234422\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;instance.process.completed\u0026#34;,  \u0026#34;time\u0026#34;: \u0026#34;2020-02-20T09:06:50.3736712Z\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;ssid\u0026#34;:\u0026#34;orgno:974760673\u0026#34; }] To be able to read this event, the authenticated party is required to have the rights for SKD/Skattmelding for the party 234234422. This is something it gets throug roles for that specific application.\nAdding events Endpoint POST {platformurl}/events/api/v1/app This returns the created ID for the event.\nUsage This is used by the application to publish app events. Events are submitted as CloudEvents.\nA CloudEvent consists of a number of attributes, such as the ID of the event and the type of the event.\nThe following attributes is used by the Events component.\n   Attribute Name Type Note     id String Optional. The ID of the event. A CloudEvent is uniquely identified with its source and id. The Events component will assign the id of the event.   source String (URI-reference) Required. The source of the event.   specversion String Required. The version of CloudEvents Specification the Cloud Event uses.   type String Required. The type of the event.   subject String Required. The subject of the event.   time String (Timestamp) Optional. The timestamp when the event happens. The Events component will set this.   alternativesubject String Optional. The alternative subject of the event.    We have this example\n[{ \u0026#34;specversion\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;instance.created\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;skd/skattemelding/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8\u0026#34;,  \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2020-02-20T08:00:06.4014168Z\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/234234422\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;party/131555662\u0026#34; }] Adding Subscription Endpoint POST {platformurl}/events/api/v1/subscriptions/ This returns the created subscription with IDs\nUsage This is used by the consumer to add a subscription.\nThe consumer needs to ba an org authenticated with maskinporten or a end user autenticated with ID-porten\nWe have this example that adds a subscription for all events for the app ttd/apps-test to be pushed to a Slack webhook\n{ \u0026#34;endPoint\u0026#34;: \u0026#34;https://hooks.slack.com/services/TSRSASBVNF3/ADRRSDSSSAahttsasdfasFO3w83456ss\u0026#34;, \u0026#34;sourceFilter\u0026#34;: \u0026#34;https://ttd.apps.at21.altinn.cloud/ttd/apps-test\u0026#34; } API Documentation The full detail for this API is described here.\nPush Functions A important part of the Events components are three different Azure Functions that is responsible for the following\n Inbound Function: Send every event to an subscription matching and authorization function Outbound Function: Pushes events to subscription endpoints Subscription Validation Function  See more details in the construction components for Events\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/profile/",
	"title": "Application arhicture profile component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Description of profile component",
	"content": "The profile component is an ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\nThe profile solution is now available locally at http://platform.altinn.cloud/profile/api/v1 and all resources are avaiable through endpoints defined below.\nResources: users\n/users A user is the entity which is logged in in Altinn and performs actions for on behalf of an instance owner.\nUser type    Attribute Type Description     UserId int user ID   UserName string username set by the user   PhoneNumber string phone number   Email string email address   PartyId int party ID   Party Party party object that represents the user   UserType UserType user type   ProfileSettingPreference ProfileSettingPreference object containing the users profile setting preferences    Operations Get information about a user from user id:\nGET /users/{userId} Get information about a user from SSN. Send a POST request with the SSN contained in the request body.\nPOST /users "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-restorage/",
	"title": "Altinn ReStorage",
	"tags": ["altinn-apps"],
	"description": "Altinn ReStorage is a comand line application that can be used by operators to recover and restore data from Altinn Platform Storage.",
	"content": "Altinn ReStorage can be found on GitHub.\nConcepts The consepts of the application are releated to the different parts of a command line command.\nExample: data info -ig e415477d-7964-4ffe-97b1-4b2cbf7ba8fe -lv\nCommand: data\nSubCommand: info\nOptions:\n -ig e415477d-7964-4ffe-97b1-4b2cbf7ba8fe -lv  Command The name of the command gives an indication of which type of resource the user wishes to interact with.\nSubCommand The sub command defines the operation to be performed on the command resource\nOption An option is a named parameter that is passed to the command.\nCommands Commands and examples of their usage are available on GitHub.\nSoftware implementation The command line interface is implemented using the popular CommandLineUtils library written by natemcmaster. In this section the file structure of the project is describes and code samples on how to add new commands.\nFolder structure structure This section gives an overview of the most important folders and files in the project. Hopefully, making it clear how to include new files into the project and where to place them.\nAttributes A folder containing attribute validation classes used to verify command line options.\nCommands A folder containing IBaseCmd.cs and a folder for each command e.g. data.\nIBaseCmd.cs An interface that all commands and subcommand classes must inherrit.\nData A folder containing the subfolder Subcommands and Data.cs\nServices A folder containing service interfaces and their implementation.\nHow to \u0026hellip; This section contains instructions the most common development tasks when expanding the tool.\n Concepts  Command SubCommand Option   Commands Software implementation  Folder structure structure How to \u0026hellip;  \u0026hellip; add a new root command \u0026hellip; add a new sub command \u0026hellip; add a new option to a command \u0026hellip; validate an option \u0026hellip; add a new service      \u0026hellip; add a new root command   Create a new folder using the name of the command and include a new class with the same name.   Make the class an extention of the IBaseCmd interface.\npublic class NewCommand : IBaseCmd { }   The command attribute must be set on the class It is possible to add more parameters, explore which ones might be usefor for your command. The ones listed below are suggested as a minimum for all commands. The name parameter is what will be used to navigate to this command when running the app. Note that the name should be all lower case.\nusing McMaster.Extensions.CommandLineUtils; [Command( Name = \u0026#34;newcommand\u0026#34;, OptionsComparison = StringComparison.InvariantCultureIgnoreCase, UnrecognizedArgumentHandling = UnrecognizedArgumentHandling.CollectAndContinue)] public class NewCommand :IBaseCmd { } Note that the McMaster nugetpackage is references in the class.\n  Inlcude the override of the OnExecuteAsync from the base class. The implementation below will show the help for the command and then complete the task. If the command does not have any sub commands simply remove app.ShowHelp(); and include your own implementation.\n/// \u0026lt;inheritdoc/\u0026gt; protected override Task OnExecuteAsync(CommandLineApplication app) { app.ShowHelp(); return Task.CompletedTask; } Place all logic and operations you wish to be executed when the command is called. If you require any input parameters check the how to section for this below.\n  The new command should now be included in Program.cs. This is so that the command is recognized and executed when inputed in the running program.\nAdd a new parameter:\nprivate static readonly CommandLineApplication\u0026lt;NewCommand\u0026gt; _newCommandCmd = new CommandLineApplication\u0026lt;NewCommand\u0026gt;(); In the Task function the standard conventions are set for the new command and all DI services are made available.\n_newCommandCmd.Conventions .UseDefaultConventions() .UseConstructorInjection(serviceProvider);   Finally the command must be added to the switch case that identifies the input and routes it to the correct CommandLineApplication. Extend the switch case a shown below.\ncase \u0026#34;newcommand\u0026#34;: await _newCommandCmd.ExecuteAsync(args); break; The standard error message in the default clause of the loop should also be modified to include the new command.\ndefault: Console.WriteLine($\u0026#34;Unknown argument {string.Join(\u0026#34; \u0026#34;, args)}, Valid commands are data, instance and settings.\u0026#34;); break;   \u0026hellip; add a new sub command   Add a new class in the correct Subcommands-folder. It there is not subcommands folder for the command, please create this first. The class should share a name with the sub command.\n  The command attribute must be set on the class Name should be in lower case and match the class name. Note that the McMaster nugetpackage must be references to use the Command attribute.\n[Command( Name = \u0026#34;newsubcommand\u0026#34;, OptionsComparison = StringComparison.InvariantCultureIgnoreCase, UnrecognizedArgumentHandling = UnrecognizedArgumentHandling.CollectAndContinue)] public class NewSubCommand :IBaseCmd { }   The root command must include a reference for the new subcommand, so navigate back to newCommand.cs Add the following attribute to the class [Subcommand(typeof(NewSubCommand))]. If the class has multiple sub commands simply comma seperate them as such:\n[Subcommand(typeof(NewSubCommandA),typeof(NewSubCommandB), typeof(NewSubCommandC))]   Make the class an extention of IBaseCmd and include an override of the OnExecuteAsync method.\npublic class NewCommand : IBaseCmd { protected override Task OnExecuteAsync(CommandLineApplication app) { return Task.CompletedTask; } } OnExecuteAsync will be triggered whenver the subcommand is called, so this is where all logic should be implemented. If you require input parameters check the how to below. If you require services through dependency injection a constructor should be included in the blass.\n  \u0026hellip; add a new option to a command An option is simply implemented as a public property in the command class with an option attribute included. There are several input parameters for the options attribute. The ones belowe are what we suggest, but feel free to add more parameters if you require.\n[Option( CommandOptionType.SingleValue, ShortName = \u0026#34;dg\u0026#34;, LongName = \u0026#34;dataGuid\u0026#34;, ShowInHelpText = true, Description = \u0026#34;DataGuid for the data element.\u0026#34;)] public string DataGuid { get; set; } Not that the command class is not instantiated with each new command, so if you have some optional parameters, ensure that these are reset for their default value after the command is executed.\n\u0026hellip; validate an option Instead of validating the format of an option that is shared by several commands in each command where it is used it is easier to create a validation class and simply include this attribute on the option. This way validation is triggered before the command is even executed, notifying the user about their incorrect input.\nAll validation attribute classes must extend ValidationAttribute and override the validation method. See GuidAttribute for an example.\nIf an option is required add the [Required] as an attribute on the property.\n\u0026hellip; add a new service  Define an interface for the service. Implement a class that extends the interface. Add the service in the function GetAndRegisterServices in Program.cs Depending on the required lifetime of the service you will have to use one of the implementations below.  services.AddScoped\u0026lt;IService, Service\u0026gt;(); services.AddSingleton\u0026lt;IService, Service\u0026gt;(); services.AddTransien\u0026lt;IService, Service\u0026gt;(); Documentation on service lifetim is available here.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/register/",
	"title": "Application arhicture register component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Description of register component",
	"content": "The register component is an ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\nThe solution is now available at https://platform.altinn.cloud/register/api/v1 and all resources are avaiable through endpoints defined below.\nResource: Organizations, Parties, Persons\n/organizations Get information about an organisation:\nOrganization type    Attribute Type Description     OrgNumber string the organisation number nine digits   Name string the registered name of the organisation   UnitType string    TelephoneNumber string the telephone number   MobileNumber string the mobile number   FaxNumber string the fax number   EMailAddress string the email adress   InternetAddress string the url for a web site   MailingAddress string the adress for sending mail to the organisation   MailingPostalCode string the postal code for sending mail to the organisation   MailingPostalCity string the city for sending mail to the organisation   BusinessAddress string the address of the daily business   BusinessPostalCode string the postal code for the daily business   BusinessPostalCity string the city for the daily business    Operations GET /organizations/{orgNr} /persons Person type    Attribute Type Description     SSN string Social security number   Name string the person\u0026rsquo;s full name   FirstName string the person\u0026rsquo;s first name   MiddleName string the person\u0026rsquo;s middle name   LastName string the person\u0026rsquo;s last name   TelephoneNumber string telephone number   MobileNumber string mobile number   MailingAddress string mailing address   MailingPostalCode string mailing postal code   MailingPostalCity string mailing postal city   AddressMunicipalNumber string adress municipal number   AddressMunicipalName string adress municipal name   AddressHouseNumber string address house number   AddressHouseLetter string address house letter   AddressPostalCode string address postal code   AddressCity string adress city    Operations Get information about a person: Send a GET-request with the persons SSN contained in the request body to\nGET /persons /parties Party type    Attribute Type Description     PartyId int the party ID   PartyTypeName PartyType the type of the party; organisation or person   OrgNumber string the organisation number. Empty string if party is person.   SSN string the social security number. Empty string if party is organisation.   UnitType string    Name string the full name of the person or name of the organisation   IsDeleted bool true is the organisation has been deleted from the registery   OnlyHiearhyElementWithNoAccess bool true if party is a parent unit with no access in current context   Person Person the person the party represents   Organization Organization the organisation the party represents   ChildParties List List of sub units if the party is an organisation    Operations Get information about a party:\nGET /parties/{partyId} Lookup a party id based on social secutiry number or organisation number: (SSN or OrgNumber should be included in string format in the request body.)\nGET /parties/lookup Lookup a party based on social secutiry number or organisation number: (SSN or OrgNumber should be included in string format in the request body.)\nGET /parties/lookupObject "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/storage/",
	"title": "Altinn Platform - Storage",
	"tags": ["architecture", "solution", "platform"],
	"description": "Storage provides persistent storage service for applications in Altinn.",
	"content": "The Storage component exposes a REST-API to Altinn Apps.\nStorage is mostly used by the app-backend to store information about instances and their data elements. It provides a registry of all applications metadata, data types and events. It is also intended to be used by organisations and other clients to read data.\nResources: Instance, Application, DataType, ApplicationLogic, InstanceEvent, ApplicationEvent, MessageBoxInstance, ProcessHistory.\nInstance An application instance is created when a instance owner (reportee) starts a process in an Altinn application. An instance replaces Altinn2 Message. An instanceOwner is a person/company that reports information via Altinn. An appId refers to the application information element which defines the metadata about the application.\n{ \u0026#34;id\u0026#34;: \u0026#34;60238/762011d1-d341-4c0a-8641-d8a104e83d30\u0026#34;, \u0026#34;appId\u0026#34;: \u0026#34;test/sailor\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;partyId\u0026#34;: \u0026#34;60238\u0026#34; }, \u0026#34;created\u0026#34;: \u0026#34;2019-03-06T13:46:48.6882148+01:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;user32\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2019-03-07T23:59:49+01:00\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;user34\u0026#34;, \u0026#34;dueBefore\u0026#34;: \u0026#34;2019-06-10T00:00:00.00Z\u0026#34;, \u0026#34;visibleAfter\u0026#34;: null, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Færder påmelding 2019\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Fearder Race Registration 2019\u0026#34; }, \u0026#34;process\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2019-09-25T09:32:44.20Z\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2019-10-10T32:22.00Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Data_1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Fyll ut\u0026#34;, \u0026#34;altinnTaskType\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;validated\u0026#34;: { \u0026#34;timestamp\u0026#34;: \u0026#34;2019-10-04T12:00.00Z\u0026#34;, \u0026#34;canCompleteTask\u0026#34;: true } } }, \u0026#34;status\u0026#34;: { \u0026#34;softDeleted\u0026#34;: null, \u0026#34;archived\u0026#34;: \u0026#34;2019-12-20T20:30:33.233Z\u0026#34;, \u0026#34;hardDelete\u0026#34;: null, \u0026#34;readStatus\u0026#34;: \u0026#34;Read\u0026#34;, \u0026#34;substatus\u0026#34;:{ \u0026#34;label\u0026#34;:\u0026#34;substatus.accepted.label\u0026#34;, \u0026#34;description\u0026#34;:\u0026#34;substatus.accepted.description\u0026#34; } }, \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;boatdata\u0026#34;, \u0026#34;contentType\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;test/sailor/60238/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff.json\u0026#34;, \u0026#34;filename\u0026#34;: \u0026#34;davidsyacht.json\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-03-06T15:00:23+01:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;XXX\u0026#34;, \u0026#34;size\u0026#34;: 2003, \u0026#34;locked\u0026#34;: true }, { \u0026#34;id\u0026#34;: \u0026#34;999911d1-d341-4c0a-8641-d8a104e83d30\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;crewlist\u0026#34;, \u0026#34;contentType\u0026#34;: \u0026#34;text/xml\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;test/sailor/60238/762011d1-d341-4c0a-8641-d8a104e83d30/data/999911d1-d341-4c0a-8641-d8a104e83d30\u0026#34;, \u0026#34;filename\u0026#34;: \u0026#34;crewLIst.xml\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-03-07T23:59:49+01:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;XXX\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2019-03-10T23:59:49+01:00\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;XXX\u0026#34; } ] } Instance type    Attribute Type Description User Owner App Storage     id string unique id    C   appId string application id    C   instanceOwner.partyId integer id of instance owner C C     create dateTime creation time    C   createdBy string user id    C   lastChanged dateTime? last changed time    C   lastChangedBy string user id    C   dueBefore dateTime? deadline for submit  CU     visibleAfter dateTime? when visible for user  CU     process ProcessState process state info   U    status InstanceStatus instance status info   U C   data List data elements   CU    completeConfirmations List\u0026lt;CompleteConfirmation\u0026gt; List of stakeholders that are done with their processing the instance   C     C - creation time, U - can be updated\nInstanceStatus Model The instance status holds data on delete, archive, read, and substate of the instance. Setting the archive and read state of the instance is handled by the application itself. By default, both the end user and app owner can set the delete state of an instance. Only app owner is able to set the substatus of an instance.\n   Attribute Type Description     Archived DateTime? Date and time for when the instance was archived. Null if instance is active.   SoftDeleted DateTime? Date and time for when the instance was soft deleted. Null if instance is not deleted.   HardDeleted DateTime? Date and time for when the instance was hard deleted. Null if instance is not deleted.   ReadStatus ReadStatus An enum reflecting if the instance is unred, read og updated since last review.   SubStatus Substatus Substatus of the instance. Label \u0026amp; description should be text keys in order to enable language support.    CompleteConfirmation Model\nThe complete confirmation is used to inform Altinn about when a given stakeholder considers their own process as complete with regards to an instance.\n   Attribute Type Description     StakeholderId string Unique identifier for a stakeholder.   ConfirmedOn DateTime Date and time for when the complete confirmation was created.    Operations Create a new instance of an app for a given instance owner. Post with query params that identifies the appId and the instance owner. An instance object can be sent as json data to set certian values.\nPOST /instances?appId=test/sailor { \u0026#34;instanceOwner\u0026#34;: { \u0026#34;partyId\u0026#34;: \u0026#34;60238\u0026#34; }} Get information about one instance.\nGET /instances/{instanceId} Get (query) all instances that an instance owner has\nGET /instances/{instanceOwnerPartyId} Query all instances of an application owner\u0026rsquo;s organisation\nGET /instances?org={org} Delete a specific instance (also deletes its data).\nDELETE /instances/{instanceId} Update read status of an instance. UpdatedState can hold values: \u0026ldquo;read\u0026rdquo;, \u0026ldquo;unread\u0026rdquo;, \u0026ldquo;updatedSinceLastReview\u0026rdquo;\nPUT /instances/{instanceId}/readstatus?status={updatedState} Update substatus of an instance.\nPUT /instances/{instanceId}/substatus Data service A data element is a file that contains a specific form element of an instance. It may be structured file, e.g. json, xml, or it may be a binary file, e.g. pdf. The application metadata restricts the types of form elements that are allowed {dataType}.\nGet a specific data element\nGET /instances/{instanceId}/data/{dataId} Post to create a specific data element. Content a file (as MultipartContent). After success the instance\u0026rsquo;s data section is updated, with the appropriate dataId guid that is used to identify the specific data element\nPOST /instances/{instanceId}/data?dataType={dataType} Put to replace a specific data element. Delete to remove data element.\nPUT /instances/{instanceId}/data/{dataId} Notice that PDFs, such as receipts or simmilar, is handled the same way as data elements.\nApplication Application metadata used to validate data element types in instances. And to provide application events.\nResource: /applications/test/sailor\n{ \u0026#34;id\u0026#34;: \u0026#34;test/sailor\u0026#34;, \u0026#34;versionId\u0026#34;: \u0026#34;v32.23-xyp\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;app\u0026#34;: \u0026#34;sailor\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-03-06T13:46:48.6882148+01:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;XXX\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Testapplikasjon\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Test Application\u0026#34; }, \u0026#34;processId\u0026#34;: \u0026#34;standard\u0026#34;, \u0026#34;validFrom\u0026#34;: \u0026#34;2019-04-01T12:14:22+01:00\u0026#34;, \u0026#34;validTo\u0026#34;: null, \u0026#34;maxSize\u0026#34;: null, \u0026#34;dataTypes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;boatdata\u0026#34;, \u0026#34;description\u0026#34;: {\u0026#34;nb\u0026#34;: \u0026#34;Båtdata\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Boat data\u0026#34;}, \u0026#34;allowedContentTypes\u0026#34;: [\u0026#34;application/json\u0026#34;], \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: true, \u0026#34;classRef\u0026#34;: \u0026#34;Skjema\u0026#34;, \u0026#34;schemaRef\u0026#34;: \u0026#34;schemas/boatname\u0026#34; }, \u0026#34;maxSize\u0026#34;: 200000, \u0026#34;maxCount\u0026#34;: 1 }, { \u0026#34;id\u0026#34;: \u0026#34;crewlist\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [\u0026#34;application/xml\u0026#34;], \u0026#34;taskId\u0026#34;: \u0026#34;Task_2\u0026#34;, \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: false, \u0026#34;classRef\u0026#34;: \u0026#34;CrewList\u0026#34;, \u0026#34;schemaRef\u0026#34;: \u0026#34;schemas/crewlist\u0026#34; }, \u0026#34;maxSize\u0026#34;: null, \u0026#34;minCount\u0026#34;: 1, \u0026#34;maxCount\u0026#34;: 3 }, { \u0026#34;id\u0026#34;: \u0026#34;certificate\u0026#34;, \u0026#34;allowedContentType\u0026#34;: [\u0026#34;application/pdf\u0026#34;], \u0026#34;appLogic\u0026#34;: null, \u0026#34;maxSize\u0026#34;: null, \u0026#34;maxCount\u0026#34;: 1 } ] } Application type    Property Type Description     id string application id   versionId string release or commit id   processId string application process id   title LanguageString[] application title in different languages   validFrom dateTime when the application is valid from   validTo dateTime? when the application is valid to   dataTypes DataType[] Metadata about data requirements in the application. See DataType.   maxSize integer the maximum number of bytes that the data elements can have    DataType The DataType model represents data requirements for an application for different process tasks.\n   Property Type Description     id string Required. Id of the data type.   description LanguageString[] A short description of the data type. Language support.   allowedContentTypes string[] A list of allowed content types.   allowedContributers string[] A list of allowed contributers. On the format \u0026lsquo;{keyword}:{value}\u0026rsquo; Approved keywords are: org and orgno.   taskId string Required. Associated task from the process definition. Defines that the data is required to progress to next task in a process.   appLogic ApplicationLogic Data object that connect data to application models. This should be null for data types describing attachments. See ApplicationLogic.   maxSize int Maximum allowed size of a data item of this type. Undefined means that the limit is unbounded.   maxCount int Maximum allowed data item count of this type. Zero or below indicate unbounded.   minCount int Minimum number of data items of this type. Zero or below indicate that the data type is optional.    Example { \u0026#34;id\u0026#34;: \u0026#34;receipt\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [\u0026#34;image/jpeg\u0026#34;, \u0026#34;image/png\u0026#34;], \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;appLogic\u0026#34;: null, \u0026#34;maxSize\u0026#34;: 20, \u0026#34;minCount\u0026#34;: 1, \u0026#34;maxCount\u0026#34;: 3 } In order to complete process task Task_1 the user must upload at least one image. It can be either a jpg or png below 20 MB. The user is allowed to upload additional 2 images. The application does not have any business logic associated with the data type.\nApplicationLogic The ApplicationLogic model describes the connection between a data type and a corresponding data model in the application. This is required for all data types associated with an XSD or JSON Schema. In most cases it also implies that there is a UI with a form the user can fill in.\n   Property Type Description     autoCreate bool Indicate that the application should automatically create a data item of this type with every new application instance.   classRef string Reference to the class definition representing the data model.   schemaRef string Reference to the XSD or JSON schema.    Operations Get a list of all Applications\nGET /applications Get metadata about a specific application\nGET /applications/{appId} Get application events.\nGET /applications/{appId}/events InstanceEvent User actions on an instance trigger instance events such as created, saved, _submitted, deleted, and undeleted. The events are associated with an instance, a user and an instance owner and generated by the application and stored in CosmosDB.\nFormat of the JSON object stored in the database.\n{ \u0026#34;id\u0026#34;:\u0026#34;6dff32bc-0928-4ae8-937c-b362d6941c89\u0026#34;, \u0026#34;instanceId\u0026#34;: \u0026#34;60238/5c6b1a71-2e1f-447a-ae2f-d1807dcffbfb\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;deleted\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-05-02T13:08:21.981476Z\u0026#34;, \u0026#34;instanceOwnerPartyId\u0026#34;: \u0026#34;60238\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;userId\u0026#34;: 3, \u0026#34;authenticationLevel\u0026#34;: 1, \u0026#34;enduserSystemId\u0026#34;: 2 } } Instance Event type    Attribute Type Description     id Guid? Id set by CosmosDB when the instance event is stored   instanceId string {instanceOwnerPartyId}/{instanceGuid}   dataId string Id of data element if event is related to a data element.   created DateTime? DateTime set by CosmosDB when the event is stored   eventType string the event type. Available instance event types are listed here   instanceOwnerPartyId string the instance owner id   user.userId int? the user who triggered the event   user.authenticationLevel int the authentication level for the user or system that triggered the event   user.endUserSystemId int? the end user system that triggered the event   process ProcessState the process step during which the event occured    Operations GET /instances/{instanceId}/events Create an event. POST with body. Note id and createDateTime is set by the system and should not be included in the json object.\nPOST /instances/{instanceId}/events Get all instance events for a specific instance.\nGET /instances/{instanceId}/events Get all instance events for a specific instance filtered by event types\nGET /instances/{instanceId}/events?eventTypes={eventTypeA},{eventTypeB} Get all instance events for a specific instance within a time frame The times are strings defined in UTC-format. E.g. \u0026ldquo;2019-05-03T12:55:23\u0026rdquo;\nGET /instances/{instanceId}/events?from={fromtime}\u0026amp;to={totime} Get all instance events for a specific instance within a time frame filtered by event types\nGET /instances/{instanceId}/events?from={fromtime}\u0026amp;to={totime}\u0026amp;eventTypes={eventTypeA},{eventTypeB} Delete all instance events for a specific instance. DELETE request.\nDELETE /instances/{instanceId}/events MessageBoxInstance A message box instance is a compressed instance object stripped for data that is not relevant for the Altinn II message box. In addition some properties from the application metadata such as application title are included in the object.\nMessageBoxInstance type    Attribute Type Description     id string unique id (corrresponds to instance guid)   instanceOwnerId integer id of instance owner   org string Application owner for the app   appName string name of the application   title string title of the application in language defined in the request   processCurrentTask string current task in the process state   createDateTime dateTime creation time   lastChangedBy string user id of the user who last changed the instance   lastChangedBy string user id   dueDateTime dateTime? deadline for submit   bool allowDelete is current user allowed to delete instance   bool authorizedForWrite is current user allowed to write to edit the instance   deletedDateTime dateTime? date the instance was deleted   archivedDateTime dateTime? date the instance was archived    Operations Get a single instance in message box instance format in (optional) preffered language. Default lanugage is norsk bokmål (nb). Available language specifications: en, nb, nn-NO.\nGET /sbl/instances/{instanceOwnerPartyId}/{instanceId}?language={languageId} Get list of all instances for an instance owner in a specific state, with a visible dateTime that has passed and (optional) preffered language. Available states: active, deleted, archived. Available language specifications: en, nb, nn-NO.\nGET /sbl/instances/{instanceOwnerPartyId}?state={instanceState}\u0026amp;language={languageId} Search instances based on query parameters All query parameters are optional.\nGET /sbl/instances/search?instanceOwner.partyId={instanceOwnerPartyId}\u0026amp;language={languageId}\u0026amp;appId={applicationId} Mark an instance for deletion in storage. Set parameter hard equal to true or false to indicate soft or hard deletion. Calling this endpoint will not the delete the instance from Storage, simply mark is as deleted.\nDELETE /sbl/instances/{instanceOwnerPartyId}/{instanceId}?hard={true/false} Restore a soft deleted instance.\nPUT /sbl/instances/{instanceOwnerPartyId}/{instanceId}/undelete ProcessHistory The process history is a list comprised of process history events for a given instance.\nProcessHistoryItem type    Attribute Type Description     EventType string the event type. Available process event types are listed here with the prefix process_   ElementId string element id for the process flow step   Occured DateTime? event occurence time   Started DateTime? task start time   Ended DateTime? task end time    Operations Get process history for a given instance\nGET /instances/{instanceOwnerPartyId}/{instanceId}/process/history Texts Represents text resources for an application.\nText type    Property Type Description     id string text id {org-app-language}. Only used internally for storage purposes. Auto generated.   language string the language. Two letter ISO name.   org string the org. Only used internally for storage purposes. Auto generated.   resources TextResource[] list of text resources    The id and org fields are generated by the system, and should not be included when using POST the text resource object. Example of an text element that should be sent during a POST:\n{ \u0026#34;language\u0026#34;: \u0026#34;nb\u0026#34;, \u0026#34;resources:\u0026#34;: [ {\u0026#34;id\u0026#34;: \u0026#34;some_id\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;some value\u0026#34;}, {\u0026#34;id\u0026#34;: \u0026#34;some_other_id\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;some other value\u0026#34;}, {\u0026#34;id\u0026#34;: \u0026#34;yet_another_id\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Text containing two variables: {0} and {1}.\u0026#34;, \u0026#34;variables\u0026#34;:[ { \u0026#34;key\u0026#34;: \u0026#34;dataSouce.TextKey_1\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.dataModelName\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;dataSouce.TextKey_2\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.dataModelName\u0026#34; }] } ] } TextResource type    Property Type Description     id string text resource id (for instance schema.postplace)   value string the value   variables list\u0026lt;TextResourceVariable\u0026gt; list of text resource variables.    TextResourceVariable type    Property Type Description     key string the key for the text resource variable   dataSource string the datasource for the text resource variable. Allowed prefix: \u0026ldquo;dataModel\u0026rdquo;    Operations Create a new text resource for an application.\nPOST /applications/{appId}/texts Get a specific text resource for an application.\nGET /applications/{appId}/texts/{language} Update a specific text resource for an application.\nPUT /applications/{appId}/texts/{language} Delete a specific text resource for an application.\nDELETE /applications/{appId}/texts/{language} "
},
{
	"uri": "https://docs.altinn.studio/app/design/guidelines/components/picture-component/",
	"title": "Image",
	"tags": [],
	"description": "Use images and illustrations to emphazise points or illustrate concepts which are difficult to explain using text",
	"content": "Guidelines:  You must add alternative texts which explain the image. If an image is decorative, it\u0026rsquo;s best to not include an alternative text. Don\u0026rsquo;t use images for images sake. Ask yourself if the image illustrates a point or increases the understanding of what you are trying to tell. Check if the image scales well on different devices, like on mobile or a tablet. An image which looks good on a PC can quickly fill a smaller screen. Avoid using images with text, as it cannot be read by screen readers.  How to write good alternative text It is important that alternative texts are written consequently. We recommend following the suggested method by UUtilsynet\n Never start with \u0026ldquo;Image of \u0026hellip;\u0026rdquo; Write short and start with the most important part of the image End by saying if the photo is a photo, illustration or graphic.  Example \u0026ldquo;Three old wooden trolly. Photograph.\u0026rdquo;\nExample of use: \r"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/copy-app/",
	"title": "Copy app in Altinn Studio",
	"tags": [],
	"description": "How to make a copy of an application in Altinn Studio",
	"content": "In Altinn Studio you can make a copy of an existing application within an organization. This is done through the dashboard. In order to do this you have to have permission to create new repositories within your org. Members of the teams \u0026ldquo;Owners\u0026rdquo; and \u0026ldquo;Developers\u0026rdquo; have these rights by default. If you don\u0026rsquo;t have permissions you should talk to your organizations administrator.\n Click the \u0026ldquo;\u0026hellip;\u0026quot;-icon in the far right table row of the app you want to copy. Press \u0026ldquo;Lag kopi\u0026rdquo; from the menu Add the name you want for the new application. This name is used to identify the application, as well as the repository name, and URLS and API\u0026rsquo;s. The name should be short and descriptive, for instance \u0026ldquo;sick-leave\u0026rdquo; or \u0026ldquo;local-election-2019\u0026rdquo;. The name can not be changed after the application has been published. Create the copy by clicking \u0026ldquo;Kopier app\u0026rdquo;. When the application has been copied you will be redirected to the copied app. In order for the copied app to work there is some changes in the source code. These changes has automatically been added as a pull request against your repository. To navigate to the repo click the profile-icon in the top right corner and choose \u0026ldquo;Åpne repository\u0026rdquo;  Navigate to the tab \u0026ldquo;Pull requests\u0026rdquo; and the that the changes under the pull request named \u0026ldquo;Auto-generated: Final changes for cloning app.\u0026rdquo;.  Look through the pull request and make sure that the changes matches the new name of your application. If everything is in order the pull request can be merged by clicking \u0026ldquo;Merge pull request\u0026rdquo;. The final step is now to pull these changes to studio. Navigate to the tab with your created app and click \u0026ldquo;Pull\u0026rdquo; to fetch the changes you just merged.  Voila! You are now ready to develop on your copied app.  "
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/create-app/",
	"title": "Create app in Altinn Studio",
	"tags": [],
	"description": "How to create a new application in Altinn Studio.",
	"content": "Altinn Studio is used to create applications (apps). An app could be anything from a simple form to a more complex application with APIs, user interfaces, and everything in between.\nYou create an app from the dashboard in Altinn Studio.\n  Click on \u0026ldquo;Opprett ny applikasjon\u0026quot;-button in the top right corner of the dashboard.\n  Select the eier of the app. If you don\u0026rsquo;t have access to any organisations, you have to select your self and the app would be created in your \u0026ldquo;sandbox\u0026rdquo;.\n  Add the navn of the app. This name is used to identify the application and will be used as the repository name, in URL\u0026rsquo;s, and APIs. There are some rules related to naming of av application, in addiion to this, the name should be short and descriptive, for instance \u0026ldquo;sick-leave\u0026rdquo; or \u0026ldquo;local-election-2019\u0026rdquo;.\nName can not be changed after an app has been deployed.\n Rules for naming an aplication\n Name can only contain lower case alphanumeric characters and dash (-), Mane must begin with a letter Name mustend with a letter or a number     Click \u0026ldquo;Opprett applikasjon\u0026rdquo; to create the app.\n  Once the app is created, you will be forwarded to the created application.\n"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/dashboard/",
	"title": "Dashboard in Altinn Studio",
	"tags": [],
	"description": "How to use the dashboard",
	"content": "Context In the dashboard there is a possibility to select which context you want to filter applications on. This is done by clicking on the profile icon at the rop right of the dashboard.\nHere you are presented with a menu of the available contexts. The context can be an organisation you are a part of, everything, or just yourself.\nIf you select a given organisation only applications from the selected organisation will be shown in the repository list.\nFavorites From the dashboard you have easy access to your favorite applications. These favorites reflect the \u0026ldquo;Star\u0026rdquo;-concept in Gitea, and any repository starred in Gitea will automagicly appear as a favorite in the dashboard. These appilcations will always be displayed at the top of the dashboard and be independent of the chosen context.\nYou have the option to add or remove favorites by marking the applications you want by toggling the star icon.\nSearch From the dashboard you have the possibility to search for all the applications you have access to. The results will appear in the table below.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/partytype/",
	"title": "Party types",
	"tags": [],
	"description": "How to ensure that only specific types of party types can use an app.",
	"content": "Limit access using Altinn Studio designer You can limit which actors have access to an app by using the Altinn Studio Designer. Role access options are placed in the \u0026ldquo;Lage\u0026rdquo; category in the top menu, on the page \u0026ldquo;Tilgangsstyring\u0026rdquo;, represented by the keyhole on the leftmost side menu. On this page you can mark the actor types the app should be accessible for. If none (or all) actor types are marked, everyone will have access. The option \u0026ldquo;Virksomhet\u0026rdquo; is used in cases where a report is filed on behalf of a company or other organization.\nThe screenshot below shows the settings for full access to the application for all organization numbers (both main entity and sub entities).\nLimit access by editing applicationmetadata.json If you prefer working with code, you can find the option to adjust access between actor types in applicationmetadata.json, which is located in the folder App/config in the app repository. The example below displays that same settings as the screenshot.\n\u0026#34;partyTypesAllowed\u0026#34;: { \u0026#34;bankruptcyEstate\u0026#34;: false, \u0026#34;organisation\u0026#34;: true, \u0026#34;person\u0026#34;: false, \u0026#34;subUnit\u0026#34;: true }, "
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/migrate-services/",
	"title": "Migrate services",
	"tags": ["translate-to-english"],
	"description": "From Altinn 2 to Altinn 3.",
	"content": "Migrere en eksisterende tjeneste til Altinn 3 Gjør deg kjent med Tjenesteeier-funksjonalitet i Altinn 3.\n Opprett bruker og app i Altinn Studio.\nNår bruker er opprettet kan du be om å bli en del av en organisasjon. Dette for å kunne samarbeide med andre i organisasjonen og ha tilgang til å kjøre deploy av apper. Utvikle app/tjeneste.\nHer finner du veiledninger som er nyttige når man utvikler en app i Altinn Studio. Se også punkt 9. Laste opp datamodell.\nDet er mulig å gjenbruke datamodeller som er basert på InfoPath uten for store endringer. Slik importerer du datamodellen i Altinn Studio. Kombiner UI editor og kodeverktøy.\nAltinn Studio UI editor gjør det enkelt å legge til og flytte skjema komponenter. Kodeverktøy er enklere å bruke når man skal redigere koden. Test lokalt.\nLokalt test miljø er en effektiv måte å teste apper uten å måtte kjøre en delploy. Test app i testmiljø.\nUnder fanen Deploy i Altinn Studio kan du bygge og deploye app. Når Appen er klart kan du logge inn i test miljøet med en testbruker for å kjøre tjenesten. Sette opp App i produksjonsmiljø og bestille om skjema-side.\nFør man setter app i produksjon må man ha tilgang til et produksjonsmiljø. Nyttig informasjon på om skjema-side gjør bruker av tjenesten selvhjulpen og Altinn brukerservice i stand til å hjelpe brukere. Tilrettelegge system for mottak av data.\nDet finnes standardiserte mønstre basert på REST-API for å sende og motta data fra/til dine interne systemer. Autentisering skjer med Maskinporten og du laster ned data ved pull fra database, og laster opp data direkte mot API i den enkelte applikasjon. Vår referanseapplikasjon Altinn CLI​ viser disse mønstrene og kan brukes for å komme i gang. Konvertere fra tjenster med Altinn2-converter.\nAltinn2-converter er et komandolinje basert verktøy for å konvertere Altinn 2 tjenester til Altinn 3 apps. Dette verktøyet har status som Proof of concept (POC) og kan derfor mangle en del funksjonalitet.  Lag en skisse av skjema For å migrere en utvalgt tjeneste kan det være nyttig å lage seg en skisse av tjenesten slik at man gjør seg kjent med designelementer i Altinn 3, og slik at man har en referanse å se til når man utvikler løsningen. Slik gjør du dette.\n\rVis/skjul innhold\r\rLage en skisse av skjema i Figma.\r\r\r Gå inn på nettsiden https://www.figma.com/ og lag deg en bruker. Figma kan installeres lokalt eller brukes i din nettleser. Altinn har et åpent design kit for eksterne og det finner du her. Gå inn på denne siden for å få mer informasjon om hvordan du kan komme i gang med Figma.  \r\r "
},
{
	"uri": "https://docs.altinn.studio/api/apps/process/",
	"title": "Process",
	"tags": ["api"],
	"description": "The process API endpoints to lead an instance through the defined process.",
	"content": "Overview All apps have a process definition that specifies start events, end events, tasks and the allowed flows (transitions) between these. A process is started by the application, which selects a start event to start and follows the sequence flow to the first task and creates a current task object to hold the process state.\nA process is represented by an process modell in BPMN/XML notation. Each task has an unique id, which is used to refer to the task in the api.\nProcess model Get the application\u0026rsquo;s process model.\nGET {appPath}/process Returns the bpmn file defining the process.\n\u0026lt;bpmn2:process id=\u0026#34;Process_1\u0026#34; isExecutable=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;bpmn2:startEvent id=\u0026#34;StartEvent_1\u0026#34;\u0026gt; \u0026lt;bpmn2:outgoing\u0026gt;Flow_1\u0026lt;/bpmn2:outgoing\u0026gt; \u0026lt;/bpmn2:startEvent\u0026gt; \u0026lt;bpmn2:task id=\u0026#34;Task_1\u0026#34; name=\u0026#34;Utfylling\u0026#34; altinn:tasktype=\u0026#34;data\u0026#34;\u0026gt;  \u0026lt;bpmn2:incoming\u0026gt;Flow_1\u0026lt;/bpmn2:incoming\u0026gt; \u0026lt;bpmn2:outgoing\u0026gt;Flow_2\u0026lt;/bpmn2:outgoing\u0026gt; \u0026lt;/bpmn2:task\u0026gt; \u0026lt;bpmn2:endEvent id=\u0026#34;EndEvent_1\u0026#34;\u0026gt; \u0026lt;bpmn2:incoming\u0026gt;Flow_2\u0026lt;/bpmn2:incoming\u0026gt; \u0026lt;/bpmn2:endEvent\u0026gt; \u0026lt;bpmn2:sequenceFlow id=\u0026#34;Flow_1\u0026#34; sourceRef=\u0026#34;StartEvent_1\u0026#34; targetRef=\u0026#34;data_1\u0026#34; /\u0026gt; \u0026lt;bpmn2:sequenceFlow id=\u0026#34;Flow_2\u0026#34; sourceRef=\u0026#34;Task_1\u0026#34; targetRef=\u0026#34;EndEvent_1\u0026#34; /\u0026gt; \u0026lt;/bpmn2:process\u0026gt; Altinn specific task types Application developers can in their BPMN Definition specify some altinn specific task types, see altinn:tasktype, which signify the behaviour of the task. So far we have defined the following:\n data - user is asked to fill inn one or more data elements, e.g. upload data or fill in forms confirmation - user is asked to confirm the correctness of the information which has been filled in on previous tasks feedback - user is asked to wait while external feedback is uploaded to the instance  Get process state of a specific instance GET {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process For an ongoing process this process state can look like the json below. It indicates that the process was started at a given date time and that it\u0026rsquo;s current task is Task_1. The flow number indicates the sequence of process events/tasks that occurs during the execution of the process. Notice that same task can be visited multiple times in a process if there is a sequence flow that allows that.\n{ \u0026#34;started\u0026#34;: \u0026#34;2019-09-25T09:32:44.20Z\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;flow\u0026#34;: 2, \u0026#34;started\u0026#34;: \u0026#34;2019-10-10T32:22.00Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Fyll ut\u0026#34;, \u0026#34;altinnTaskType\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;validated\u0026#34;: { \u0026#34;timestamp\u0026#34;: \u0026#34;2019-10-04T12:00.00Z\u0026#34;, \u0026#34;canCompleteTask\u0026#34;: true } } } For an ended process the following will be returned:\n{ \u0026#34;started\u0026#34;: \u0026#34;2019-09-25T09:32:44.20Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;ended\u0026#34;: \u0026#34;2019-10-10T14:01:22.034Z\u0026#34;, \u0026#34;endEvent\u0026#34;: \u0026#34;EndEvent_1\u0026#34; } Process events The system will generate a number of process related events, which can be found in the instances event history.\n Start Event StartTask Event EndTask Event End Event  Start Event { \u0026#34;instanceId\u0026#34;: \u0026#34;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;process:Start\u0026#34;, \u0026#34;processInfo\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2019-09-25T09:32:44.20Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34; }, \u0026#34;createdDateTime\u0026#34;: \u0026#34;2019-10-10T14:01:22.034Z\u0026#34;, } StartTask Event { \u0026#34;instanceId\u0026#34;: \u0026#34;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;process:StartTask\u0026#34;,  \u0026#34;processInfo\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2019-09-25T09:32:44.20Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;flow\u0026#34;: 2, \u0026#34;started\u0026#34;: \u0026#34;2019-10-01T13:22.01Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Fyll ut MVA rapport\u0026#34;, \u0026#34;altinnTaskId\u0026#34;: \u0026#34;data\u0026#34; } }, \u0026#34;createdDateTime\u0026#34;: \u0026#34;2019-10-01T13:22.01Z\u0026#34;, } EndTask Event { \u0026#34;instanceId\u0026#34;: \u0026#34;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;process:EndTask\u0026#34;,  \u0026#34;processInfo\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2017-10-01T13:22.00Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;flow\u0026#34;: 2, \u0026#34;started\u0026#34;: \u0026#34;2019-10-05T01:11.33Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;altinnTaskId\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;ended\u0026#34;: \u0026#34;2019-10-05T01:11.33Z\u0026#34; } }, \u0026#34;createdDateTime\u0026#34;: \u0026#34;2019-10-05T01:11.33Z\u0026#34;, } End Event { \u0026#34;instanceId\u0026#34;: \u0026#34;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;process:EndEvent\u0026#34;,  \u0026#34;processInfo\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2017-10-01T13:22.00Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;ended\u0026#34;: \u0026#34;2019-10-05T08:15:23.544Z\u0026#34;, \u0026#34;endEvent\u0026#34;: \u0026#34;EndEvent_1\u0026#34; }, \u0026#34;createdDateTime\u0026#34;: \u0026#34;2019-10-05T08:15:23.544Z\u0026#34;, } Get process history of a specific instance Based on the process events the history of the instance\u0026rsquo;s process is generated. The following illustrates an ended process:\nGET {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/history { \u0026#34;processHistory\u0026#34;: [ { \u0026#34;eventType\u0026#34;: \u0026#34;process_StartEvent\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;occured\u0026#34;: \u0026#34;2020-01-21T13:49:09.3109169Z\u0026#34; }, { \u0026#34;eventType\u0026#34;: \u0026#34;process_StartTask\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;started\u0026#34;: \u0026#34;2020-01-21T13:49:09.4264322Z\u0026#34;, \u0026#34;ended\u0026#34;: \u0026#34;2020-01-21T13:49:39.66609Z\u0026#34; }, { \u0026#34;eventType\u0026#34;: \u0026#34;process_EndEvent\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;EndEvent_1\u0026#34;, \u0026#34;occured\u0026#34;: \u0026#34;2020-01-21T13:49:39.7681248Z\u0026#34; } ] } Start Process To start a process one can post start to the process endpoint.\nPOST {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/start[?startEvent=StartEvent_1] This will start the process and move the process state to the first task from the given start. If process has more than one start event, then the client has to chose which one to start with the startEvent query parameter.\nComplete and move to next task The process logic attempts to finish the current task and then moves the process forward to the next task in the flow. The cannot always select the next task, especially when more than one tasks can be chosen. In this case the client must chose which process element id to select.\nPUT {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/next[?id=Task_2] Complete the process The complete process method will attempt to complete the process for an instance. Hence, the app will move the process from one task to the next until it reaches an valid end state.\nIf a task\u0026rsquo;s exit condition is not met, the process will be stopped in the last valid task. And the user must manually fix the problem and complete the process.\nPUT {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/completeProcess Get the next tasks in a process Returns an list of the next tasks/events that can be reached from the current task.\nGET {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/next Start a task If you are at a specific task and want to start the next task you can try to put next to the process endpoint. The process controller then tries to close the current task and start the wanted task. Updates process state accordingly. If exit condition of current task is not met, an error will be returned. If the task is not directly reachable by the flow, an error will be returned.\nPUT {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/next?id=Task_2 "
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/access-management/",
	"title": "Access",
	"tags": [],
	"description": "How to get access to Altinn Studio, app secrets and app logs.",
	"content": "\rApps infrastructure access\rHow to order access to Altinn Apps infrastructure.\n\rAltinn Studio access\rHow to configure access for teams in Altinn Studio.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/access-management/apps/",
	"title": "Apps infrastructure access",
	"tags": ["translate-to-english"],
	"description": "How to order access to Altinn Apps infrastructure.",
	"content": "Tilgang til logger og hemmeligheter Det er definert to forskjellige typer roller for tilgang i driftsmiljøene i Altinn Apps.\n Developer gir tilgang til Application Insights der applikasjonslogger samles for tjenesteeier sine applikasjoner i miljøet. Operations gir tilgang til Key Vault for å laste opp hemmeligheter som sertifikater, passord og api-nøkler.  Disse rollene er videre delt opp i tilgang til test (TT02) og produksjon (prod). En bruker kan tildeles en eller flere roller.\nTjenesteeiere kan bestille følgende tilganger for sine ressurser i miljøene TT02 og produksjon:\n Test Developer Test Operations Prod Developer Prod Operations  For å få aksess til disse rollene må autoriserte bestillere hos Tjenesteeier, bestille dette på vår Selvbetjeningsportal. Velg Support, så ny sak. Her skal du finne skjemaet Apps under menyvalget Bestilling/tilganger.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/datafields/",
	"title": "Data fields on instance object",
	"tags": [],
	"description": "Configuration of data fields for app.",
	"content": "It is useful to add extra information to instance objects in some cases. For example allowing routing the instance to the correct system in a service owners backend.\nThis can be done in two ways, by configuration or manually. Using configuration, the system will extract data from the form fields and add these to the instance object. This method is limited to form fields, but avoids programming it by yourself. If you choose to do it manually you have the freedom to add data you might want from for example external APIs, calculations, string constants, etc.\nIt is also possible to make use of both methods as long as you use different ids on the data fields. The configured values will then be collected together with the manual ones in the instance.\nData fields are in many ways similar to presentation fields. But where the use of presentation fields is predefined, the use of data fields is completely up to the individual application owner.\nConfiguration Configuration of data fields is done in applicationmetadata.json which is located in the folder App/config.\nAdd a new object with the key dataFields, using the following properties\n   Name Description     id The ID of the datafield. Used to identify the field when saved in the instance.   path Datamodel path to the form field. This value is the same value that is bound to a component in the app\u0026rsquo;s layout file.   dataTypeId Id of the datamodel where the value is collected from.    The configuration for an app with two defined data fields will look like this:\n\u0026#34;dataFields\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;AnsettelseAntAar\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;OpplysningerOmArbeidstakeren-grp-8819.Arbeidsforhold-grp-8856.AnsattAar-datadef-33267.value\u0026#34;, \u0026#34;dataTypeId\u0026#34;: \u0026#34;default\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;Navn\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;OpplysningerOmArbeidstakeren-grp-8819.OpplysningerOmArbeidstakeren-grp-8855.AnsattNavn-datadef-1223.value\u0026#34;, \u0026#34;dataTypeId\u0026#34;: \u0026#34;default\u0026#34; }] The result will be a list in the instance object with values from the configured fields:\n\u0026#34;dataValues\u0026#34;: { \u0026#34;AnsettelseAntAar\u0026#34;: 10, \u0026#34;Navn\u0026#34;: \u0026#34;Ola Nordmann\u0026#34; } Notice that the instance object is named dataValues even when the configured is named dataFields, this is because dataValues is the result of the configuration which is done in dataFields.\nManually To manually add data values the method UpdateDataValuesfrom the IInstance interface is used. It is the same method which is called when the fields in dataValues are populated from configuration and it will merge all values into a list.\nBe aware that it is the application developer's responsibility to ensure unique IDs if you combine data values between configuration and a manual implementation.\rValues that share IDs will override each other and there is no way to guarantee which will be saved in the instance. \rThe example below displays how to set data values manually. In this case it is done by adding code within RunProcessTaskEnd in App.cs, which is run when a task is completed.\npublic override async Task RunProcessTaskEnd(string taskId, Instance instance) { var customDataValues = new DataValues() { Values = new Dictionary\u0026lt;string, string\u0026gt;() { { \u0026#34;customKey\u0026#34;, \u0026#34;customValue\u0026#34; } } }; var (instanceOwnerPartyId, instanceGuid) = InstanceHelper.DeconstructInstanceIdFromUrl(_httpContextAccessor.HttpContext.Request.Path.Value); await _instanceService.UpdateDataValues(instanceOwnerPartyId, instanceGuid, customDataValues); await Task.CompletedTask; } It is recommended to think through the necessity of these values for the instance object so that it avoids unnecessary API calls which impact the performance of the application.\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/messagebox/hide_instances/",
	"title": "Hide instances",
	"tags": [],
	"description": "Configuration for hiding instances from the message box.",
	"content": "For applications with a complex process flow it can be useful to hide instances from the message box during parts of, or the whole, process.\nConfiguration The configuration has a retroactive effect and will also apply to previously created instances.\r\rConfiguration for hiding instances is defined in applicationmetadata.json, which you can find in ythe appliation repository in the folder App/config.\nAdd a new section called messageBoxConfiguration with the child property hideSettings.\nHideSettings can consist of one of two properties\n   Name Description     hideOnTask A list of tasks where the instance should be hidden from the messagebox.   hideAlways A boolean indicating that the instance should always be hidden.    Examples The configuration for an application where instances should be hidden on Task_1 and Task_3, but be visible for all other process tasks.\n\u0026#34;messageBoxConfig\u0026#34;: { \u0026#34;hideSettings\u0026#34;: { \u0026#34;hideOnTask\u0026#34;:[\u0026#34;Task_1\u0026#34;, \u0026#34;Task_3\u0026#34;] } } The configuration for an application that should never be shown in the message box:\n\u0026#34;messageBoxConfig\u0026#34;: { \u0026#34;hideSettings\u0026#34;: { \u0026#34;hideAlways\u0026#34;:true } } "
},
{
	"uri": "https://docs.altinn.studio/api/authentication/id-porten/",
	"title": "Authenticate with ID-porten",
	"tags": ["translate-to-english"],
	"description": "Description of how systems can use ID-porten to get access to APIs in Altinn 3.",
	"content": "Systemer for sluttbrukere kan autentisere brukere via ID-porten. Dette for å kunne benytte API fra applikasjoner kjørende i Altinn Apps og enkelte funksjoner i Altinn Platform på vegne av sluttbruker.\nDet er i hoveddsak to typer systemer hvor dette er aktuelt. Dette er webbaserte løsninger og tykke klienter.\nFelles for begge løsninger er at sluttbruker vil logge inn via nettleser i ID-porten med den autentiseringsmekanismen de ønsker.\nDette er for eksempel:\n Min-ID BankID på mobil BankId  Systemet må forespøre et sett med scopes i ID-porten som sluttbruker må akseptere at systemet kan utføre på vegne av sluttbruker.\nDet er disse scopene som tildels avgrenser hva systemet kan utføre på vegne av sluttbruker.\nScopene som er definert og relevant for Altinn 3 er:\n altinn:instances.meta - Se oversikt over innboks og arkiv i Altinn altinn:instances.read - Lese innholdet i innboks og arkiv i Altinn for alle elementer som sluttbruker er autorisert for altinn:instances.write - Fylle ut, signere og sende inn skjema i Altinn for alle elementer sluttbruker er autorisert for altinn:lookup - Benytte innsynstjenester i Altinn altinn:reportees - Se hvem du kan representere i Altinn  Bildet nedenfor viser hvordan sluttbruker må bekrefte tilgangen.\nFor detaljer om scope og opplisting av alle scopes tilgjengelig se dokumentasjon fra ID-porten.\nDet er disse scopene som avgjør hva sluttbruker kan utføre. Bildet nedenfor viser hvordan sluttbruker må bekrefte tilgangen.\nNår pålogging er gjennomført vil systemet ha tilgang til et ID-token, refresh token og et access token.\nDette access tokenet har begrenset levetid, men kan fornyes med ved hjelp av refresh token.\nWeb baserte systemer Webbaserte systemer består av løsninger med en webbasert frontend som kjører i nettleser, samt serverside kode.\nSe detaljer hos ID-porten.\nTykke klienter Med tykke klienter mener vi applikasjoner som installeres og kjøres lokalt på en datamaskin og ikke i nettleser.\nDisse må likevel benytte seg av nettleser for å logge inn.\nSe detaljer hos ID porten.\nVeksling av access token til Altinn token Access-tokenet som utstedes fra ID-porten må veksles inn i et Altinn-token før det kan benyttes mot Altinns API\u0026rsquo;er.\nDette Altinn-tokenet vil ha samme levetid som access-tokenet.\nFlytdiagrammet nedenfor viser hvordan tokenet veksles inn.\nSe detaljer i Altinns API dokumentasjon under metoden GET /exchange/{tokenProvider}.\nSluttbrukere har i Altinn mulighet til å få oversikt over alle systemer og hvilke tilganger de har.\nPå denne måten kan man trekke langvarige tilganger. Systemet vil da bli avvist neste gang det prøver å refresehe access-token.\nBildet nedenfor viser hvordan dette vil bli i Altinn (ikke satt i produksjon enda).\nEt system som har fått tilgang til et token fra ID-porten vil kunne utføre handlinger som bruker er autorisert kun begrenset av bruksområdet til scope. Det betyr at hvis system har fått scope for innsending av skjema så vil systemet kunne sende inn alle skjema for alle avgivere som sluttbruker er autorisert for. Det er derfor viktig at sluttbruker kan stole på systemet.\n"
},
{
	"uri": "https://docs.altinn.studio/app/testing/deploy/",
	"title": "Test app in test environment",
	"tags": ["translate-to-english"],
	"description": "Description of how test in test environment can be performed.",
	"content": "Klargjøring av app og deploy til testmiljø gjøres fra Deploy-fanen i Altinn Studio.\nBygge app Før en app kan deployes til testmiljø, må alle nødvendige filer samles sammen i en pakke som kan deplpoyes. Dette gjøres ved å bygge appen.\nMerk at det er filene fra app-repoet som benyttes i bygget. Dersom en har gjort endringer på en app i Altinn Studio så må disse sendes til repoet for at endringene skal bli med i bygg-pakken.\rDette gjøres ved å velge _Push_ fra _Lage_-fanen i Altinn Studio.\r\rNår en app er klar til test, kan den bygges ved å gå til Deploy-fanen i Altinn Studio (inne på den appen som skal deployes).\nPå høyre side vises et panel for å bygge appen.\nMerk at det kun er mulig å bygge ny versjon av appen dersom det faktisk er gjort endringer i appen. Dersom det er gjort endringer og det ikke er mulig å bygge ny versjon, pass på at endringene har blitt sendt til app repoet.\r\r Skriv inn versjonsnummer for den versjonen av appen som skal bygges. Må være unikt (altså ikke brukt tidligere for denne appen). Skriv inn beskrivelse for denne versjonen av app\u0026rsquo;en. Trykk på Bygg versjon for å starte bygget.  Status for bygget vises under Tidligere bygg av applikasjonen. Når status er grønn, er denne versjonen av app\u0026rsquo;en klar til å bli deployet til testmiljø.\nDeploy av app til testmiljø Når en app er bygget ferdig kan den deployes til testmiljø. Dette gjøres fra Deploy-fanen. Der vises en oversikt over tilgjengelige miljø, i tilegg til en oversikt over hvilke versjoner av appen som er i de forskjellige miljøene.\n Velg versjonen av appen som skal deployes fra nedtrekkslisten som ligger under det aktuelle miljøet. Trykk på Deploy ny versjon.  Valgt versjon vil da deployes til valgt miljø. Her er det mulig å deploye ny versjon, eller rulle tilbake til en eldre versjon om det er ønsket.\nTeste app i testmiljø Logg inn i testmiljø med testbruker. Bruk lenken som vises over hvert miljø i Deploy-fanen for å komme til ønsket testmiljø og starte ny instans av appen.\nAlle instanser vil være synlig i meldingsboks/arkiv til valgt aktør, på samme måte som dagens tjenester (som er basert på Altinn II).\n"
},
{
	"uri": "https://docs.altinn.studio/api/storage/instance-events/",
	"title": "Instance events",
	"tags": ["api"],
	"description": "The Platform API for working with instance events.",
	"content": "Instance events All instance events, e.g. creation, read, save, change process state, \u0026hellip;\nGET {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/events Example of event data.\n{ \u0026#34;id\u0026#34;:\u0026#34;6dff32bc-0928-4ae8-937c-b362d6941c89\u0026#34;, \u0026#34;instanceId\u0026#34;: \u0026#34;60238/5c6b1a71-2e1f-447a-ae2f-d1807dcffbfb\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;deleted\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-05-02T13:08:21.981476Z\u0026#34;, \u0026#34;instanceOwnerPartyId\u0026#34;: \u0026#34;60238\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;userId\u0026#34;: 338829, \u0026#34;authenticationLevel\u0026#34;: 1, \u0026#34;enduserSystemId\u0026#34;: 2 }, \u0026#34;process\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2019-05-01T12:45:01.3233Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;Start_22\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;elementId\u0026#34;: \u0026#34;Task_2\u0026#34; } } } Application events (for application owners)  WARNING: This section will be redesigned\n Selected instance events. Created, first read, change process state. Optinally specified by application developer.\nEvents can be queried. May be piped.\nGET {storagePath}/applications/org/app/events?created=gte:2019-03-30\u0026amp;process.currentTask=Task_2 "
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/navigation/",
	"title": "Navigation in Altinn Studio",
	"tags": [],
	"description": "Navigating between the different parts of Altinn Studio.",
	"content": "As a user of Altinn Studio, you can use different tools, depending on expertise, preferences and the complexity of what you want to develop.\nHow to navigate is different between the tools.\n\rDesigner\rHow to navigate in Altinn Studio Designer.\n\rRepos\rHow to navigate in Altinn Studio Repos.\n\rCode\rHow to navigate in Altinn Studio Code.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/development/data/prefill/",
	"title": "Prefilling data",
	"tags": [],
	"description": "How to configure prefill for an app.",
	"content": "As of today, Altinn offers three methods for prefilling data in an app for a user. These methods can be combined freely to reach the desired result.\nPrefill from national register and user profile Altinn apps support prefill with data from the Central Coordinating Register (Enhetsregisteret), the National Population Register (Folkeregisteret) and user profile in Altinn.\nBy following the description below, you will during instantiation of a form prefill the data model with the defined values obtained from Altinns data base.\nSetup of prefill in the application repository Create a new json file in the app repo under App/models. The name of the file should contain the name of the data model and have the postfix \u0026ldquo;.prefill.json\u0026rdquo;. If the data model is called appModel you should now be able to find these three files in the map: appModel.metadata.json, appModel.schema.json, appModel.prefill.json\nPaste the code below into the file.\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/prefill/prefill.schema.v1.json\u0026#34;, \u0026#34;allowOverwrite\u0026#34;: true, \u0026#34;ER\u0026#34;: { }, \u0026#34;DSF\u0026#34;: { }, \u0026#34;UserProfile\u0026#34;: { } } Configuration of prefill.json   $schema points to the json schema definition of the file. The current version is v1. Because of this file, Visual Studio Code will validate and offer intellisense/autocomplete when you edit the file locally.\n  allowOverwrite determines whether prefill defined in this file can overwrite a field in the data model if it already has a value.\n  ER here you enter fields from the data model that are to be prefilled with data from the Central Coordinating Register. Fields that are prefilled with ER-data will only have a value if you instantiate on behalf of an organization. Instantiation will fail if you attempt to prefill ER-data, but do not have an organization available.\n  The example below will populate the field Datamodell.Organisasjon.Organisasjonsnummer with the organization number retrieved from the Central Coordinating register.\n\u0026#34;ER\u0026#34;: { \u0026#34;OrgNumber\u0026#34;:\u0026#34;Datamodell.Organisasjon.Organisasjonsnummer\u0026#34; }  DSF here you enter fields from the data model that are to be prefilled with data from the National Population Register. The field that is prefilled with DSF-data will only have a value if you instantiate on behalf of a person. Instatiation will fail if you attempt to prefill DSF-data, but do not have a person available.  The example below will populate the field Datamodell.Person.Nummer with the phone number retrieved from the National Population Register.\n\u0026#34;DSF\u0026#34;: { \u0026#34;TelephoneNumber\u0026#34;:\u0026#34;Datamodell.Person.Nummer\u0026#34; }  UserProfile here you enter fields from the data model that are to be prefilled with data from the users profile in Altinn. Note that it is the logged in user who instantiates the app the data is collected for.  The example below will populate the field Datamodell.Bruker.Epost with the email retrieved from the users profile in Altinn.\n\u0026#34;UserProfile\u0026#34;: { \u0026#34;Email\u0026#34;:\u0026#34;Datamodell.Bruker.Epost\u0026#34; } Available prefill values The JSON-schema definition of the prefill file is also available [here]https://altinncdn.no/schemas/json/prefill/prefill.schema.v1.json). The use of a schema enables editors, e.g. Visual Studio Code, to validate and offer intellisense for faster editing.\nThe National Population Register The personal data that is exposed is attached to the person the form is instantiated on behalf of. If Ola Nordmann were to instantiate a form on behalf of Kari Nordmann, it would be Kari\u0026rsquo;s data that would be exposed. Available values for prefill includes:\n SSN Name FirstName MiddleName LastName TelephoneNumber MobileNumber MailingAddress MailingPostalCode MailingPostalCity AddressMunicipalNumber AddressMunicipalName AddressStreetName AddressHouseNumber AddressHouseLetter AddressPostalCode AddressCity  The Central Coordinating Register The unit exposed is that which is attached to the organization a form is instantiated on behalf of. Available values for prefill includes:\n OrgNumber Name UnitType TelephoneNumber MobileNumber FaxNumber EMailAddress InternetAddress MailingAddress MailingPostalCode MailingPostalCity BusinessAddress BusinessPostalCode BusinessPostalCity  User profile The user profile exposed is the profile belonging to the one who instantiatd the service. If Ola Nordmann instantiates a form on behalf of Kari Nordmann, the data retrieved from here would belong to Ola. For the objects Party.Organization and Party.Person, you will find the same fields that are included in ER and DSF-prefill. Note that Party.Organization will be null if the user is logged in as an individual, and the equivalent if they are logged in with a business user. The prefill will fail if the object you prefill from does not exist, so if you wish to dynamically prefill based on these values it has to be setup as custom prefill.. Available values for prefill includes:\n UserId UserName PhoneNumber Email PartyId Party.PartyId Party.PartyTypeName Party.OrgNumber Party.SSN Party.UnitType Party.Name Party.isDeleted Party.OnlyHierarchyElementWithNoAccess Party.Person Party.Organization Party.ChildParties UserType ProfileSettingPreference.Language ProfileSettingPreference.PreSelectedPartyId ProfileSettingsPreference.DoNotPromptForParty  Custom prefill Altinn apps enable prefill of an instance with custom data, whether it is the result of an API call, calculations done under instantiation or other logic. This is implemented in the method DataCreation in the file InstantiationHandler.cs that can be found in the application repo under App/logic.\nThe example below populates the field Bruker.FulltNavn in the model Datamodell with the value \u0026ldquo;Test Testesen\u0026rdquo;.\npublic async Task DataCreation(Instance instance, object data) { if (data.GetType() == typeof(Datamodell)) { Datamodell model = (Datamodell)data; model.Bruker.FulltNavn = \u0026#34;Test Testesen\u0026#34;;  } } Replace Data model with the name on the C# class that has been generated based on the xsd uploaded to Altinn Studio. If you use a suitable code editor you will be able to define fields to be populated using intellisense.\nKeep in mind that if you have complex types in your model, these will need to be instantiated before you can assign a value to one of the type\u0026rsquo;s subelements. See the example below where we assume that Bruker and Name are separate C# classes.\npublic async Task DataCreation(Instance instance, object data) { if (data.GetType() == typeof(Datamodell)) { Datamodell model = (Datamodell)data; Bruker b = new Bruker(); b.Navn = new Name(); b.Navn.FulltNavn = \u0026#34;Test Testesen\u0026#34;; } } Instantiation with prefill Altinn apps support instantiation with prefill. The form data is attached in a multipart in the instantiation request that is sent to the app. Below you will se an example of a requeest to instantiate an app with prefill for partyID 12345.\nContent-Type: multipart/form-data; boundary=\u0026#34;abcdefg\u0026#34; Body: --abcdefg Content-Type: application/json; charset=utf-8 Content-Disposition: form-data; name=\u0026#34;instance\u0026#34; { \u0026#34;instanceOwner\u0026#34;: { \u0026#34;PartyId\u0026#34; : \u0026#34;12345\u0026#34;  } } --abcdefg Content-Type: application/xml Content-Disposition: form-data; name=\u0026#34;Endring-av-navn\u0026#34; \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;Skjema xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; skjemanummer=\u0026#34;1533\u0026#34; spesifikasjonsnummer=\u0026#34;11172\u0026#34; blankettnummer=\u0026#34;RF-1453\u0026#34; tittel=\u0026#34;Endring av navn\u0026#34; gruppeid=\u0026#34;9308\u0026#34;\u0026gt; \u0026lt;Innledning-grp-9309 gruppeid=\u0026#34;9309\u0026#34;\u0026gt; \u0026lt;NavneendringenGjelderFor-grp-9310 gruppeid=\u0026#34;9310\u0026#34;\u0026gt; \u0026lt;SubjektFornavnFolkeregistrert-datadef-34730 orid=\u0026#34;34730\u0026#34;\u0026gt;Ola Nordmann\u0026lt;/SubjektFornavnFolkeregistrert-datadef-34730\u0026gt; \u0026lt;/NavneendringenGjelderFor-grp-9310\u0026gt; \u0026lt;Kontaktinformasjon-grp-9311 gruppeid=\u0026#34;9311\u0026#34;\u0026gt; \u0026lt;MelderFultnavn orid=\u0026#34;34735\u0026#34;\u0026gt;LANGØY MADS\u0026lt;/MelderFultnavn\u0026gt; \u0026lt;/Kontaktinformasjon-grp-9311\u0026gt; \u0026lt;/Innledning-grp-9309\u0026gt; \u0026lt;/Skjema\u0026gt; --abcdefg-- "
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/messagebox/presentationfields/",
	"title": "Presentation fields",
	"tags": [],
	"description": "Configuration of presentation fields for app.",
	"content": "In some cases it can be useful with presentation fields to easier differentiate instances of a single application.\nBy configuring presentation fields on an application, these values are extracted from the form data and included in the instance object. The data values are appended to the application title when the instance is displayed in the message box.\nConfiguration Configuration of presentation fields is defined in applicationmetadata.json, which you can find in ythe appliation repository in the folder App/config.\nAdd a new section named presentationField that consists of the proprties below\n   Name Description     id Id for the presentation field. used to identify the presentation text when it is stored on the instance object.   path Datamodel path to the presentation field. This value is the same that is bound to a component in the layout file of the app.   dataTypeId Id of the data type of the data model to retrieve the value from.    The complete presentation fields configuration in an application might look like this:\n\u0026#34;presentationFields\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;Ansettelse\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;OpplysningerOmArbeidstakeren-grp-8819.Arbeidsforhold-grp-8856.AnsattAar-datadef-33267.value\u0026#34;, \u0026#34;dataTypeId\u0026#34;: \u0026#34;default\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;Navn\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;OpplysningerOmArbeidstakeren-grp-8819.OpplysningerOmArbeidstakeren-grp-8855.AnsattNavn-datadef-1223.value\u0026#34;, \u0026#34;dataTypeId\u0026#34;: \u0026#34;default\u0026#34; }] Result The result in the message box will be the title of the application followed by the presentation texts in a comma separated list.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/process/",
	"title": "Define application process",
	"tags": [],
	"description": "How to define the process of an app.",
	"content": "An application has defined a process that controls the flow. The process is defined as BPMN 2.0.\nSupported Process Task Types The current application template supports the following tasks:\n Data (Corresponds to fill-in steps in Altinn II) Confirmation Feedback  Future process steps (tentative)  Signing Payment Parallel signing User-controlled signing External validation  Change the process To change the process, you can manually edit the BPMN file with an text, XML or BPMN editor. It is stored in the app repo as App/config/process/process.bpmn.\n\rAutomatic deletion\rAn application can be configured to delete all traces of it when the process is over.\n\rCustomize Views of Step\rHow to customize views in different steps of a process.\n\rMessage\rHow to set up a message in Altinn Studio.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/queryparameters/",
	"title": "Query parameters",
	"tags": [],
	"description": "Available query parameters for an app.",
	"content": "returnUrl Query parameter returnUrl is used by the app to redirect users to that value when they click the exit-button in the app.\nRules:\n returnUrl must have a valid URL-format The host defined in returnUrl must be the same host as the URL has (see example below). The value of returnUrl must be a base64-encoded string  Example without base64-encoded string:\nhttps://foo.apps.tt02.altinn.no/foo/bar?returnUrl=https://foo.apps.tt02.altinn.no/foo/foobar\nExample with base64-encoded string:\nhttps://foo.apps.tt02.altinn.no/foo/bar?returnUrl=aHR0cHM6Ly9mb28uYXBwcy50dDAyLmFsdGlubi5uby9mb28vZm9vYmFy\nHere one can see that returnUrl has a valid URL-format and it has the same host name as the app defined in the beginning.\nFor readability, the examples below does not use base64-encoded strings.\nOne can not link to a different host name, this will not pass query parameter validation:\nhttps://foo.apps.tt02.altinn.no/foo/bar?returnUrl=https://foo.apps.altinn.no/foo/foobar\nIt is important to have the correct order of query parameters and special characters in the URL. Here is an example showing a correct URL:\nhttps://ttd.apps.at21.altinn.cloud/ttd/level1-app?returnUrl=https%3A%2F%2Fttd.apps.at21.altinn.cloud%2Fttd%2Fapps-test%2F%23%2Finstance%2Finstanceownerid%2Finstanceguid/#/instance/instanceownerid/instanceguid\n"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/navigation/repos/",
	"title": "Repos",
	"tags": ["translate-to-english"],
	"description": "How to navigate in Altinn Studio Repos.",
	"content": "Repos er verktøyet der appene er lagret som Git repositoryer, og kan bli funnet på https://altinn.studio/repos.\nHovedmeny Hovedmenyen øverst inneholder disse elementene:\n Altinn-logoen - tilbake til Altinn Studio-dashboardet. Dashboard - Lister ut dine aktiviteter og de repositoryene og organisasjonene du har tilgang til. Du kan også se dashboard for den enkelte organisasjonen. Issues - Lister ut åpne og lukkede issues som er relevant for deg. Pull requests - Lister ut åpne og lukkede pull requests som er relevant for deg. Utforsk - Gir deg tilgang til å se alle repositoryer, brukere og organisasjoner  Navigere innad i et repository Når du har navigert til et repository dukker det opp et nytt sett menyvalg som er relevant for repositoryet.\n Kode - innholdet, alle filer appen består av Issues - \u0026ldquo;saker\u0026rdquo; for repositoryet Pull Requests - for repositoryet Releases - opprettet for repositoryet Aktivitet - hva har skjedd i repositoryet  Hvis du vil til Designer for det aktuelle repositoryet, er det et valg for dette i toppmenyen:\n"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/access-management/studio/",
	"title": "Altinn Studio access",
	"tags": ["translate-to-english"],
	"description": "How to configure access for teams in Altinn Studio.",
	"content": "Tilgangsstyring for organisasjonen Som eier av en organisasjon i Altinn Studio har man mulighet til å konfigurere tilgangene til de øvrige brukerne knyttet til organisasjonen. Dette gjøres via Gitea på følgende lenke: https://altinn.studio/repos/org/{organisasjonens kortnavn}/teams/\nDet er definert fire standard team som legger føringer for hva en bruker har tillatelse til å gjøre innad i en organisasjon i Altinn Studio. Ved behov kan man som eier kan man legge til/fjerne brukere i team, opprette nye team og endre konfigurasjon på eksisterende team.\nOwners Beskrivelse Medlemmer i dette teamet kan tenkes på som administrator for organisasjonen. De vil kunne administrere tilgangsstyringen for alle team og repositories knyttet til organisasjonen.\nSom medlem i dette teamet kan man blant annet:\n opprette/slette team legge til og fjerne brukere i ulike team endre konfigurasjon for team  Konfigurasjon Dette teamet ligger inne som standard i alle organisasjoner og det er ikke mulig å endre konfigurasjonen for dette teamet.\nDeploy-Production Beskrivelse Medlemmer i dette teamet kan deploye applikasjoner til produksjonsmiljøet.\nØvrige rettigheter kan defineres fritt av owners. Default konfigurasjon inkluderer rettigheter for:\n Lesetilgang i samtlige repositories Kan ikke opprette nye repositories Full tilgang til alle områder i Gitea  Konfigurasjon Konfigurasjonen av dette teamet kan justeres av owners etter behov, muligheten til å deploye til produksjonsmiljø er ikke avhengig av øvrig config.\nStandard konfigurasjon for teamet inkluderer rettigheter til å\n Lese samtlige repositories Aksessere alle områder i Gitea  Deploy-TT02 Beskrivelse Medlemmer i dette teamet kan deploye applikasjoner til testmiljøet.\nØvrige rettigheter kan defineres fritt av owners. Default konfigurasjon inkluderer rettigheter for:\n Lesetilgang i samtlige repositories Kan ikke opprette nye repositories Full tilgang til alle områder i Gitea  Konfigurasjon Konfigurasjonen av dette teamet kan justeres av owners etter behov, muligheten til å deploye til testmiljø er ikke avhengig av øvrig config.\nStandard konfigurasjon for teamet inkluderer rettigheter til å\n Lese samtlige repositories Aksessere alle områder i Gitea  Devs Beskrivelse Medlemmer i dette teamet jobber med å utvikle applikasjoner og har tilgang til samtlige repositories.\nKonfigurasjon Konfigurasjonen av dette teamet kan justeres av owners etter behov, avhengig av hvor mye frihet man ønsker at apputvikleren skal ha. Merk at det blant annet er mulig å spesifisere hvilke(t) repository teamet skal ha tilgang til.\nStandard konfigurasjon for teamet inkluderer rettigheter til å\n Opprette nye repositories Skrive til samtlige repositories Aksessere alle områder i Gitea  Tilgangsstyring for repository En administrator for organisasjonen kan også styre hvem som har tilgang til det enkelte repository. Det gjøres ved at man går til repositoryet i Gitea, og går til fanen Collaboration under Innstillinger. Tilgang kan gis både til team og enkeltbrukere. For å holde oversikt anbefaler vi primært å sette opp team for tilgangsstyring. For å gi et team tilgang, søk det fram og klikk Add Team.\n"
},
{
	"uri": "https://docs.altinn.studio/api/apps/validation/",
	"title": "Validation",
	"tags": ["api"],
	"description": "The validation API endpoints for instances and data elements.",
	"content": "Overview There are multiple endpoints that can trigger validation and provide feedback regarding the state of an instance and its data. Some of them validates data already uploaded and stored in Altinn while others can validate input.\nValidate stored instance This action will validate an entire instance including the all data elements already uploaded and stored in Altinn. Validation will be performed based on current task in the process. Validation will ensure that all required data elements, as defined by the application metadata, have been uploaded and are valid. If the result of the validation is that nothing is missing or wrong, the action will update the instance with information indicating that the instance is valid. The response will be an empty array. In the case of validation issues the response will provide an array of the identified issues. Validation of a full instance use validation of data as described in the chapter below.\nGET https://{org}.apps.at21.altinn.cloud/{org}/{app}/instances/{instanceOwnerPartyId}/{instanceId}/validate Example response:\n[ { \u0026#34;severity\u0026#34;: \u0026#34;Error\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;INSTANCE\u0026#34;, \u0026#34;targetId\u0026#34;: null, \u0026#34;field\u0026#34;: null, \u0026#34;code\u0026#34;: \u0026#34;TooManyDataElementsOfType\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;TooManyDataElementsOfType\u0026#34; } ] Validate stored data This action will validate a specific data element already uploaded and stored in Altinn. The logic validates that the data element has the correct Content-Type, that it isn\u0026rsquo;t too large and so on. Data elements with a model bound to them will be validated against the model (Schema).\nValidation will also check that the data element being validated is required for the current task in the process. If the data is validated during a task different from what is intended, the validator will give a warning.\nGET https://{org}.apps.at21.altinn.cloud/{org}/{app}/instances/{instanceOwnerPartyId}/{instanceId}/data/{dataid}/validate Example response:\n[ { \u0026#34;severity\u0026#34;: \u0026#34;Error\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;targetId\u0026#34;: null, \u0026#34;field\u0026#34;: null, \u0026#34;code\u0026#34;: \u0026#34;MissingContentType\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MissingContentType\u0026#34; } ] Validate data The application will provide a method to validate the datamodel without creating a instance of the data. Data must be provided as formdata. The validate method takes a data file of an dataType and performs validation on that file. It returns a validation report.\nPUT {appPath}/validate?dataType=modelA "
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/local-dev/",
	"title": "Local development",
	"tags": [],
	"description": "How to get started with local development",
	"content": "When developing an application one will often have to work both in Altinn Studio and in a local development environment. Here is an overview of how to get started with local development.\nPreparations Follow the steps decribed on GitHub to prepare your local environment for development and testing of Altinn Apps.\nHow to clone an application to the local environment   Find the application you want to work with in the dashboard in Altinn Studio\n  Navigate to the repository by clicking the Repository-button   Cupy the link of the repository (the blue square), either manually or by clicking the button marked with the red circle.\n  Open a terminal in your local environment\n Navigate to the desired location for the application repository Write the command git clone and paste the URL you copied in the previous step  $git clone https://altinn.studio/repos/ORG/APP.git  In the terminal you should be seeing an output like the one below  Cloning into \u0026#39;APP\u0026#39;... remote: Enumerating objects: 982, done. remote: Counting objects: 100% (982/982), done. remote: Compressing objects: 100% (950/950), done. remote: Total 982 (delta 600), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (982/982), 166.38 KiB | 1.51 MiB/s, done. Resolving deltas: 100% (600/600), done.   You should not be able to fine a new folder with the contents of the application repository. Open your preferred dev tool and get going with the app development!\nHow to synchronize changes in Altinn Studio Upload changes to master  Click Push on the Lage-page of the application in Altinn Studio  Add a descriptive comment of the change(s) and click Valider endringer  Wait for the changes to be validated  If a conflict occurs, click Løs konflikt and follow the instructions   Click Push to upload the changes to master  If everything is successful you should see this confirmation   Download changes from master  Click Pull on the Lage-page of the application in Altinn Studio  If everything is successful you should see this confirmation   How to synchronize changes in local dev environment Synchronization of changes made in the local dev environment can be achieved in several ways. Many dev tools have great integrations for this, check if your tool has this.\nA description of how to synchronize changes from command line is available below.\nUpload changes to master   Navigate to the application repository folder in a terminal\n  Add the files you want to push to master with the command git add {insert path of the file} The command can be run for single files, multiple files at once or a folder\n  Commit the changes with a descriptive message with the command git commit -m {insert comment}\n  Push the changes to master with git push\n  Download changes from master Navigate to the application repository folder in a terminal and run the command git pull.\nRead more about git pull here\n"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/navigation/code/",
	"title": "Code",
	"tags": ["translate-to-english"],
	"description": "How to navigate in Altinn Studio Code.",
	"content": "Selv om vi har støtte for å redigere kode og konfigurasjonsfiler direkte i Altinn Studio Repos, er det ofte mer behagelig å gjøre det lokalt på din maskin.\nFor å gjøre dette må du laste ned og installere et koderedigeringsverktøy.\nVi anbefaler Visual Studio Code, men det er fritt fram hvilket verktøy du velger.\nFinne adressen til et repo URL-en til et gitt app repository er strukturert slik, så bytt ut owner og repo-navn:\nhttps://altinn.studio/repos/owner/repo.git.\nDu kan finne URL-en ved å navigere til repositoryet. Klikk ikonet til høyre for å kopiere.\nDu kan også finne samme URL i en popup i Designer hvis du klikker på \u0026ldquo;Clone\u0026rdquo;-knappen.\nKlone koden Etter at du har åpnet Visual Studio Code, åpne den integrerte terminalen (ctrl + ø) og skriv klone-kommandoen. Husk å få med riktig organisasjon og repo-navn.\ngit clone https://altinn.studio/repos/owner/repo Om du ikke er kjent med Visual Studio Code eller Git arbeidsflyt, er det god dokumentasjon her:\nhttps://code.visualstudio.com/docs/getstarted/introvideos https://code.visualstudio.com/docs/editor/versioncontrol#_git-support\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/data/options/",
	"title": "Code lists (options)",
	"tags": [],
	"description": "How to configure Options / Code lists for an app.",
	"content": "Altinn offers two different ways an application can use code lists - static and dynamic. Both is done through the options api exposed by the application, and the code lists are available through the endpoint {org}/{app}/api/options/{optionsId}. Checkbox, Dropdown, and RadioButton components will automatically be able to fetch such lists if you connect the component to the option id in question.\nStatic codelists from the application repository By adding json based option files in the application repository, the application will automatically read the file and expose it through the options api. For this to work, the files must be placed in the App/options/ folder and be named according to the following conventions {optionId}.json for the application to recognize them.\nFor example if you have a list of countries in a file named countries.json, the optionId would be countries, and would be exposed through the api at {org}/{app}/api/options/countries. The static codelists should be in a special format as shown below:\n[ { \u0026#34;value\u0026#34;: \u0026#34;norway\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;Norge\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;denmark\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;Danmark\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;sweden\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;country.label.sweden\u0026#34; } ] Note that the label field can be a key to a text resource (as shown above for sweden) or plain text.\nDynamic codelists generated runtime As an alternative to the static files you can have code that determines what the lists should be during runtime. This makes it possible to expose dynamic values that for instance are filtered or looked up in external sources. Dynamic codelists can either be open and accessible to all or secured and limited to those with read access to the instance.\nIn versions prior to 4.24.0 this was done by overriding the GetOptions method in App.cs. This method is now deprecated and is replaced by putting the option code in separate classes implementing an interface and registering the implementation in the application dependency injection container. This allows for better separation, inject dependencies into the constructor, pass in language and other query parameters and generally handle all aspects of the implementation as you see fit.\nFor codelists that are open you implement the IAppOptionsProvider interface and for codelists that should be secured you implement the IInstanceAppOptionsProvider interface. The pattern is the same for both, and the models returned is the same, but the implementation is kept separate to avoid exposing data that should be secured.\nOpen dynamic codelists Below you find an example of how to implement a open custom options provider. The url will will still be exposed from the same endpoint as before {org}/{app}/api/options/countires.\nusing Altinn.App.Common.Models; using Altinn.App.PlatformServices.Options; using System.Collections.Generic; using System.Threading.Tasks; namespace Altinn.App.Core { public class CountryAppOptionsProvider : IAppOptionsProvider { public string Id { get; set; } = \u0026#34;countries\u0026#34;; public Task\u0026lt;AppOptions\u0026gt; GetAppOptionsAsync(string language, Dictionary\u0026lt;string, string\u0026gt; keyValuePairs) { var options = new AppOptions { Options = new List\u0026lt;AppOption\u0026gt; { new AppOption { Label = \u0026#34;Norway\u0026#34;, Value = \u0026#34;47\u0026#34; }, new AppOption { Label = \u0026#34;Sweden\u0026#34;, Value = \u0026#34;46\u0026#34; } } }; return Task.FromResult(options); } } } For your implementation to be picked up you need to add the following line in your Startup.cs:\nservices.AddTransient\u0026lt;IAppOptionsProvider, CountryAppOptionsProvider\u0026gt;(); Note that you can have multiple registrations of this interface. The correct implementation is resolved by finding the one with the correct id.\nThe interface has a property Id, which should be set to the optionId, and a method GetAppOptionsAsync for resolving the options. This method accepts a language code and a dictionary of key/value pairs. Both parameters will typically be query parameters picked up from the controller and passed in. Allthough language could be put in the dictionary as well it\u0026rsquo;s decided to be explicit on this particular parameter.\n Language codes should be based on ISO 639-1 or the W3C IANA Language Subtag Registry. The latter is built uppon the ISO 639-1 standard but is guaranties uniques of the codes, where as ISO 639-1 have conflicting usage for some codes.\n Secured dynamic options NOTICE: to use this functionality the app must use version \u0026gt;= 4.27.0 of the nuget packages Altinn.App.PlatformServices, Altinn.App.Common and Altinn.App.Api.\n\rIf you want to expose options that are sensitive you can use IInstanceAppOptionsProvider, which will validate that the user has read rights defined in the authorization policy defined in the app\u0026rsquo;s policy.xml-file. Below you find an example of how to implement a secured custom options provider. The IInstanceAppOptionsProvider interface must be implemented, and a secure-prop must be added to the component. The following option will be exposed at /{org}/{app}/instances/{instanceOwnerId}/{instanceGUID}/options/children.\nusing System.Collections.Generic; using System.Threading.Tasks; using Altinn.App.Common.Models; using Altinn.App.PlatformServices.Models; namespace Altinn.App.Core { public class ChildrenAppOptionsProvider : IInstanceAppOptionsProvider { public string Id { get; set; } = \u0026#34;children\u0026#34;; public Task\u0026lt;AppOptions\u0026gt; GetInstanceAppOptionsAsync(InstanceIdentifier instanceIdentifier, string language, Dictionary\u0026lt;string, string\u0026gt; keyValuePairs) { // ...  // Some custom code to get the list of children from the instance owner  // ...  var options = new AppOptions { Options = new List\u0026lt;AppOption\u0026gt; { new AppOption { Label = \u0026#34;Ole\u0026#34;, Value = \u0026#34;1\u0026#34; }, new AppOption { Label = \u0026#34;Dole\u0026#34;, Value = \u0026#34;2\u0026#34; }, new AppOption { Label = \u0026#34;Doffen\u0026#34;, Value = \u0026#34;3\u0026#34; } } }; return Task.FromResult(options); } } } For your implementation to be picked up you need to add the following line in your Startup.cs:\nservices.AddTransient\u0026lt;IInstanceAppOptionsProvider, ChildrenAppOptionsProvider\u0026gt;(); Note that you can have multiple registrations of this interface. The correct implementation is resolved by finding the one with the correct id.\nThe interface has a property Id, which should be set to the optionId, and a method GetInstanceAppOptionsAsync for resolving the options. This method accepts a language code and a dictionary of key/value pairs. Both parameters will typically be query parameters picked up from the controller and passed in. Allthough language could be put in the dictionary as well it\u0026rsquo;s decided to be explicit on this particular parameter. These parameters are the same as for the open variant of options, in addition the instance id (which identifies both the instance owner and the instance itself) will be passed in.\nThe final configuration needed is the secure-boolean on the component. Example:\n{ \u0026#34;id\u0026#34;: \u0026#34;dropdown-component\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Dropdown\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Some title\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Some description\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;some.field\u0026#34; }, \u0026#34;required\u0026#34;: true, \u0026#34;optionsId\u0026#34;: \u0026#34;children\u0026#34;, \u0026#34;secure\u0026#34;: true  } Connect the component to options (code list) This is done by adding the optionId you would like to refer to either through the component UI in Designer or direcytly in FormLayout.json as shown below:\n{ \u0026#34;id\u0026#34;: \u0026#34;8e6f7b2f-fcf0-438d-8336-c1a8e1e03f44\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Dropdown\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: {}, \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;optionsId\u0026#34;: \u0026#34;countries\u0026#34;, } Pass query parameters when fetching options Options supports query parameters when making the api call. language is added automatically, and you can also add custom parameters by defining mapping on the component.\n{ \u0026#34;id\u0026#34;: \u0026#34;c66d7b69-2e18-4786-af44-1fa913853618\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Dropdown\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;NyGarantiLoyvetype\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;soknad.nyGaranti.loyvetype\u0026#34; }, \u0026#34;required\u0026#34;: true, \u0026#34;optionsId\u0026#34;: \u0026#34;loyvetyper\u0026#34;, \u0026#34;mapping\u0026#34;: { \u0026#34;soknad.transportorOrgnummer\u0026#34;: \u0026#34;orgnummer\u0026#34; } }, In the example above, the query parameter orgnummer={nr}, where {nr} is the value of soknad.transportorOrgnummer will be set. If an option is setup with mapping and the given data field changes app-frontend will refetch the option. This can be used to dynamicly decide which choices are availibable based on information given by the end user.\nDuring PDF-generation the app will try to call the same option endpoint as app-frontend does.\rWe currently has a weakness where mapping paramteres not are included in this request, see issue [#7903.](https://github.com/Altinn/altinn-studio/issues/7903)\rA possible workaround here is to return an empty array when the PDF-generator asks for options with empty query params, example:\nstring someArg = keyValuePairs.GetValueOrDefault(\u0026#34;someArg\u0026#34;); string someOtherArg = keyValuePairs.GetValueOrDefault(\u0026#34;someOtherArg\u0026#34;); if (string.IsNullOrEmpty(someArg) || string.IsNullOrEmpty(someOtherArg)) { return await Task.FromResult(new List\u0026lt;AppOption\u0026gt;()); } Notice that this wil result in the option value and not the label being present as the end users answer.\n\rOptions based on repeating groups from Redux Traditional options are based on resources fetched from the backend. This approach differs a bit from this, as it enables setting up a direct connection from the options to the form data that is stored in app frontend. A use case here would typically be if the user fills out a repeating list of data that should later be selected in a dropdown/checkbox/radiobutton.\nConfiguration To set up options from redux we have set up a new property on RadioButtons, Checkboxes, and Dropdown-components called source. This property contains the fields group, label, and value. Example:\n{ \u0026#34;id\u0026#34;: \u0026#34;dropdown-component-id\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Dropdown\u0026#34;, ... \u0026#34;source\u0026#34;: { \u0026#34;group\u0026#34;: \u0026#34;some.group\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;dropdown.label\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;some.group[{0}].someField\u0026#34; } }, Explanation:\n group - the group field in the data model to base the options on label - a reference to a text id to be used as the label for each iteration of the group, see more below. value - a reference to a field in the group that should be used as the option value. Notice that we set up this [{0}] syntax. Here the {0} will be replaced by each index of the group.  Notice that the value field must be unique for each element. If the repeating group does not contain a field which is unique for each item it is recommended to add a field to the data model that can be used as identificator, for instance a GUID.\nAs for the label property, we have to define a text resource that can be used as a label for each repetition of the group. This follows similar syntax as the value, and will also be familiar if you have used variables in text.\nExample text resource connected:\n{ \u0026#34;language\u0026#34;: \u0026#34;nb\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;dropdown.label\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Person: {0}, Age: {1}\u0026#34;, \u0026#34;variables\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;some.group[{0}].name\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.default\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;some.group[{0}].age\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.default\u0026#34; } ] } ] } In the example above we have two parameters in the text which is referencing fields in the group. We also recognize the [{0}] syntax in the key prop which enables the usage of this label for each index in the group.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/secrets/",
	"title": "Secrets",
	"tags": [],
	"description": "How to deal with secrets and sensitive data in an app.",
	"content": "Administration of secrets in Azure As an application developer you administer the secrets which the application use in the Azure Key Vault.\nRoutines for ordering access to your organizations resources are described here.\nConfigure support for secrets in your app To make secrets accessible within your application the affiliated helm chart has to be updated.\nIn your application repository you can find the file values.yaml in the folder deployment.\nUnder the section volumeMounts you add the following lines:\n- name: altinn-appsettings-secret mountPath: \u0026#34;/altinn-appsettings-secret\u0026#34; Under the section volumes you add the following lines:\n- name: altinn-appsettings-secret secret: secretName: altinn-appsettings-secret Be wary of indentations while working in _values.yaml_.\rIn yaml indents should be spaces and not tabs, tab will cause the file to not be interpreted as a yaml file.\r\rThe last part of the file should look something like this after your changes are complete.\nHow to make use of secrets in your application The service ISecret is exposed to the application and can be dependency injected into the class in which you need to collect a secret.\nLocal mock To run your service locally without connecting to the Azure Key vault you have to create the file secrets.json under the folder App. In the json structure you can add dummy data for the secrets you need for your service. If you have uploaded a secret into the key vault with the name \u0026ldquo;secretId\u0026rdquo;, the content should look like the following:\n{ \u0026#34;secretId\u0026#34;: \u0026#34;local secret dummy data\u0026#34; } Types of secrets Secret - Stored as a string directly in the keyvault. For ex. a base64 encoded certificate or a token. Key - key Certificate - certificate\nCode example In this section you can find an example of how to use a secret to populate a form field during instantiation.\nThe logic is implemented within InstantiationHandler.cs\nusing Altinn.App.Models; using Altinn.App.Services.Interface; using Altinn.App.Services.Models.Validation; using Altinn.Platform.Storage.Interface.Models; using System.Threading.Tasks; namespace Altinn.App.AppLogic { public class InstantiationHandler { private IProfile _profileService; private IRegister _registerService; private ISecrets _secretsService; /// \u0026lt;summary\u0026gt;  /// Set up access to profile and register services  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;profileService\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;registerService\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  public InstantiationHandler(IProfile profileService, IRegister registerService, ISecrets secretsService) { _profileService = profileService; _registerService = registerService; _secretsService = secretsService; } /// \u0026lt;summary\u0026gt;  /// Run events related to instantiation  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;remarks\u0026gt;  /// For example custom prefill.  /// \u0026lt;/remarks\u0026gt;  /// \u0026lt;param name=\u0026#34;instance\u0026#34;\u0026gt;Instance information\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;data\u0026#34;\u0026gt;The data object created\u0026lt;/param\u0026gt;  public async Task DataCreation(Instance instance, object data) { if (data.GetType() == typeof(Skjema)) { Skjema model = (Skjema)data; model.etatid = await _secretsService_.GetSecretAsync(\u0026#34;secretId\u0026#34;); } await Task.CompletedTask; } } }   The private variable for the service is included in the class\nprivate ISecrets _secretsService;   The ISecrets service is dependency injected into the class, and the private variable assigned a value\npublic InstantiationHandler(IProfile profileService, IRegister registerService, ISecrets secretsService) { _profileService = profileService; _registerService = registerService; _secretsService = secretsService; }   In the method where you need the secret you call the service secretId will be the name of our secret in KeyVault, or in our local mock.\nawait _secretsService_.GetSecretAsync(\u0026#34;secretId\u0026#34;);   If you try to build the solution now, it will fail.\nISecrets will be missing where the InstantiationHandler is instantiated. Navigate to App.cs and dependency inject the service into the constructor in App.\nThe service must be added to the call where InstantiationHandler is instantiated as illustrated below.\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService, ISecrets secretsService ) : base(appResourcesService, logger, dataService, processService, pdfService, prefillService) { _logger = logger; _validationHandler = new ValidationHandler(); _calculationHandler = new CalculationHandler(); _instantiationHandler = new InstantiationHandler(profileService, registerService, secretsService); }   "
},
{
	"uri": "https://docs.altinn.studio/app/development/data/attachments/",
	"title": "Attachments",
	"tags": [],
	"description": "In an application one can facilitate uploading file attachments both via GUI and API.",
	"content": "Methods for uploading file attachments In an Altinn application there are two options for uploading file attachments:\n File upload component in a form API-call to app backend  The former will be a good alternative for all data where it is expected that the user will upload files through the user interface in the app. The latter is recommended for use if it is only expected that systems will upload the attachment. There is no limit to how many attachments that can be included in one application and both upload methods can be used within the same application.\nBelow is a simple description of how you can accommodate your application to be able to receive attachments.\nSubmitting file attachments with file upload component in a form When building your form in Altinn Studio, a file upload component is available. It is possible to upload multiple file attachments on one single component, and how many file upload components you use in your application will be determined by the characteristics of the documents you expect to be uplaoded and any restrictions you need to impose. (see configuration of file attachments for more information on this).\nNote: It will also be possible to upload file attachments of the type defined in the attachment component through API.\nThe image above shows the file upload component in Altinn Studio. Part of the configuration for the uploaded attachments can be set up here.\n Custom file types can be specified if you want to limit the file types that can be submitted. In this case, a user will be prevented from uploading if the file type is not in the approved list. The minimum/maximum amount of file attachments can be specified if you want a specific amount of attachments uploaded through the component. By setting the value of minst antall filvedlegg to \u0026lsquo;0\u0026rsquo; it will not be required to upload a file. The maxmimum file size is specified in MB.  Additional configurations that can be set for attachments include: allowed contributors and description. This is conigured in applicationMetadata.json which is placed under App/config in the application repo.\nFile upload component with tagging There is also a separate component where the user tags the file using a dropdown list. This is configured pretty similarily to the normal file upload component, with the addition of a codelist-ID and the name you want the tag to have.\nBelow you can see it in use\nSubmission of attachments with API-call To accommodate being able to submit attachments without this being supported in GUI, you will need to add a datatype object in the applicationMetadata.json (the file is under App/config in the application repo). It will then only be possible to submit attachments of this type through API-calls. For a more detailed description of the available fields, see configuration of attachments\nConfiguration of attachments In applicationMetadata.json (placed in App/config in the application repo) you will find a property called \u0026lsquo;dataTypes\u0026rsquo;. Configuration of all data types supported in the application can be found here, both form data (app model data) and file attachments. The field appLogic, that can also be found among some of the objects in the list, should only be used for form data.\nBelow there are two examples of dataTypes-instances from a deployed application.\n\u0026#34;dataTypes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;53a50f0d-2345-448d-9fba-f18e6bbe71f8\u0026#34;, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxSize\u0026#34;: 25, \u0026#34;maxCount\u0026#34;: 1, \u0026#34;minCount\u0026#34;: 1, \u0026#34;allowedContentTypes\u0026#34;:[\u0026#34;application/pdf\u0026#34;] }, { \u0026#34;id\u0026#34;: \u0026#34;attest\u0026#34;, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxSize\u0026#34;: 25, \u0026#34;maxCount\u0026#34;: 1, \u0026#34;minCount\u0026#34;: 0, \u0026#34;allowedContributers\u0026#34;: [\u0026#34;org:nav\u0026#34;, \u0026#34;orgNo:XXXXXXXXXX\u0026#34;], \u0026#34;grouping\u0026#34;: \u0026#34;Attester\u0026#34;, } ]   Id on the attachment type This will be set as a GUID if you use an attachment component from Altinn Studio like the one you can find in the first element in the dataTypes list. If you want to change the value to a more sensible name then you should note that this change must be done two places: applicationMetadata.json and FormLayout.json. (Only relevant if you added a file upload component to the GUI)\n  taskID denotes which step in the process it is expected that this attachment is uploaded to. This value must be identical to one of the tasks in process.bpmn.\n  maxSize denotes the maximum allowed size of the attachment.\n  maxCount denotes the upper limit for how many attachments of this type that are to be uploaded per instance.\n  minCount denotes the lower limit for how many attachments of this type that are to be uploaded per instance. If the value is 0 then it is not required to upload a file attachment of this type.\n  allowedContributors specifies who is allowed to create and/or modify file attachments of this type. This is specified on the format {key}:{value}. Allowed keys include: \u0026lsquo;org\u0026rsquo;; three letter abbreviation for organization and *orgNo'; organization number. It is as of today not possible to specify an organization that is not registered as a service owner.\n  allowedContentTypes specifies which file attachment types that are allowed. The most frequently used include: application/pdf, text/xml, image/jpeg. If you do not want to set a limit to the type of attachments, you will not need to define this parameter. Read more on mime types here.\n  grouping denotes the group that the file attachments should be gropued according to. This is an optional attribute, where file attachments with the same grouping will be sorted into the same list. Grouping can be both a string (e.g. \u0026ldquo;Certificates\u0026rdquo;) or a text key if you wish to configure multiple languages (e.g. \u0026ldquo;form.attachmentgrouping\u0026rdquo;). Here is an example where the grouping \u0026ldquo;Demogruppe\u0026rdquo; is set on an file attachment type:\n  "
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/eformidling/",
	"title": "eFormidling",
	"tags": [],
	"description": "How to configure integration with eFormidling for an app.",
	"content": "Activate eFormidling integration for your application Nuget versions = 4.22.0 are required for your application to support eFormidling.\r[See how to update the nuget references of your application here](../update/#nuget-pakker).\r\rIntegration with eFormidling needs to be explicitly activated in the application.\nIn the file appsettings.json in the folder App, the following must be added to the AppSettings section.\n\u0026#34;EnableEFormidling\u0026#34;: true In addition, continuing in the same file, a new section EFormidlingClientSettings should be added. The contents of the code snippet below can be copied in its entirety. This sets up the url for the integration point. The link points to the mock that can be ran locally. Read more about setting up the local mock for the integration point here.\nWhen an application is deployed to TT02 or production, this value will be substituted to point to the integration point hosted in Altinn Platform.\n\u0026#34;EFormidlingClientSettings\u0026#34;: { \u0026#34;BaseUrl\u0026#34;: \u0026#34;http://localhost:9093/api/\u0026#34; } In the case you do not wish to test the eFormidling integration when running your app locally, you can override this configuration in appsettings.Development.json.\nCreate the section AppSettings, if it does not already exist, and set EnableEFormidling to false.\n\u0026#34;AppSettings\u0026#34;: { \u0026#34;EnableEFormidling\u0026#34;: false } Adding support for eFormidling in App.cs The next step in setting up support of eFormidling , is to make the required services available for the application. All changes are made in App.cs, which you fill find in the _App/logic folder.\nAt the top of the file, among the library references, include the following three lines.\nusing Altinn.Common.EFormidlingClient.Models; using Altinn.Common.EFormidlingClient; using Altinn.Common.AccessTokenClient.Services; Further, you need to inject services in the constructor of both the class and the base class.\nBefore making any changes, the constructor should look like the example below, but which services are included may vary from application to application. This shows the most common setup.\npublic App( IAppResources appResourcesService, (...) IHttpContextAccessor httpContextAccessor):base( appResourcesService, (...) httpContextAccessor) The list of services in the constructor should be extended with the four services listed below.\nIEFormidlingClient eformidlingClient, IOptions\u0026lt;AppSettings\u0026gt; appsettings, IAccessTokenGenerator tokenGenerator, IOptions\u0026lt;PlatformSettings\u0026gt; platformSettings Further, these services should be forwarded to the base class as well, but in this case only include the names, not the types.\neformidlingClient, appsettings, platformSettings, tokenGenerator Final result should look like this:\npublic App( IAppResources appResourcesService, (...) IHttpContextAccessor httpContextAccessor, IEFormidlingClient eformidlingClient, IOptions\u0026lt;AppSettings\u0026gt; appsettings, IAccessTokenGenerator tokenGenerator, IOptions\u0026lt;PlatformSettings\u0026gt; platformSettings):base( appResourcesService, (...) httpContextAccessor, eformidlingClient, appsettings, platformSettings, tokenGenerator) Configuring key values for eFormidling in your application Metadata related to the eFormidling shipment is required, and this is set up in applicationmetadata.json. You find the file in the App/config folder.\nCreate a new section eFormidling and populate values for the parameters defined in the table.\n   Id Description     serviceId Id that specifies the shipment type* DPO, DPV, DPI or DPF   dpfShipmentType The DPF shipment type used for routing in the receiving system   process Id which wil be included in the scope of the StandardBusinessDocumentHeader**   dataTypes List of data types to automatically include in the shipment   sendAfterTaskId Id of the task to be completed before the shipment is sent. We recommend this be a confirmation task   receiver Organisation number of the receiver. Only Norwegian organisations supported. (Can be omitted)   standard DocumentIdentification standard   type Id for the message type   typeVersion Version of the message type   securityLevel Security lever set on the StandardBusinessDocument    * per January 2022 only DPF is supported.\n** available process for each receiver is available at https://platform.altinn.no/eformidling/api/capabilities/{mottaker-orgnummer}\nAn example of a configuration in application metadata:\n\u0026#34;eFormidling\u0026#34;: { \u0026#34;serviceId\u0026#34;: \u0026#34;DPF\u0026#34;, \u0026#34;dpfShipmentType\u0026#34;: \u0026#34;altinn3.skjema\u0026#34;, \u0026#34;process\u0026#34;: \u0026#34;urn:no:difi:profile:arkivmelding:administrasjon:ver1.0\u0026#34;, \u0026#34;dataTypes\u0026#34;: [ \u0026#34;ref-data-as-pdf\u0026#34; ], \u0026#34;sendAfterTaskId\u0026#34;: \u0026#34;Task_2\u0026#34;, \u0026#34;receiver\u0026#34;: \u0026#34;910075918\u0026#34;, \u0026#34;standard\u0026#34;: \u0026#34;urn:no:difi:arkivmelding:xsd::arkivmelding\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;arkivmelding\u0026#34;, \u0026#34;typeVersion\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;securityLevel\u0026#34;: 3 } Shipment metadata generation in the application The application developer is responsible for creating the message that will follow a shipment through eFormidling. Read about the various message types available in eFormidling.\nThis is achieved by including the function below in App.cs.\nExpected output from this function is a tuple containing to elements. First, the name of the metadata file and then a stream containing the metadata.\n/// \u0026lt;inheritdoc /\u0026gt; public override async Task\u0026lt;(string, Stream)\u0026gt; GenerateEFormidlingMetadata(Instance instance) { Altinn.Common.EFormidlingClient.Models.Arkivmelding arkivmelding = new (); // bygg opp arkivmeldingen eller annet metadataobjekt her.  MemoryStream stream = new MemoryStream(); XmlSerializer serializer = new XmlSerializer(typeof(Altinn.Common.EFormidlingClient.Models.Arkivmelding)); serializer.Serialize(stream, arkivmelding); stream.Position = 0; StreamContent streamContent = new StreamContent(stream); streamContent.Headers.ContentType = MediaTypeHeaderValue.Parse(\u0026#34;application/xml\u0026#34;); return await Task.FromResult((\u0026#34;arkivmelding.xml\u0026#34;, stream)); } Dynamically setting the shipment receiver In App.cs it is possible to override the method retrieving the receiver from applicationmetadata.json. This functionally can be used whenever the receiver of a shipment is to be determined dynamically.\nThree steps are required when defining the receiver in the application logic, and all steps are executed in App.cs.\n At the top of the file, a reference to the eFormidling library must be included.  using Altinn.Common.EFormidlingClient.Models.SBD;  Include the function below in the class. Expected output from this method is a list containing at least one receiver object.\npublic override async Task\u0026lt;List\u0026lt;Receiver\u0026gt;\u0026gt; GetEFormidlingReceivers(Instance instance) { Identifier identifier = new Identifier { Authority = \u0026#34;iso6523-actorid-upis\u0026#34; }; // 0192 prefix for all Norwegian organisations.  identifier.Value = \u0026#34;[INSERT ORGANISATION NUMBER HERE WITH PREFIX `0192:`]\u0026#34; ; Receiver receiver = new Receiver { Identifier = identifier }; return new List\u0026lt;Receiver\u0026gt; { receiver }; }   Add custom logic to populate identifier.Value in the function. Note that only Norwegian organisations are supported, and that the prefix 0192: is required before the organisation number.\n  Testing eFormidling integration locally It is possible to test the eFormidling integration for an application in your development environment. In addition to Altinn\u0026rsquo;s Localtest, and the application, there are two things that need to run:\n eFormidling integration point (Integrasjonspunktet) A mock of eFormidling  Setup   Install the latest version of Java. Download link and installation guide is available here\n  In the next steps you will be downloading a number of files. Define a suitable placement for everything eFormidling related on your local machine and navigate there in your terminal.\n  Clone the eFormidling mock repository with the following command\ngit clone --branch development https://github.com/felleslosninger/efm-mocks.git   Download the integration point. The contents can be places at the same level as the efm-mocks folder.\n  Running eFormidling locally  Open a terminal and navigate to efm-mocks (Command prompt or bash is recommended, PowerShell will not work.) Run docker-compose up -d Navigate to the folder where the integration point file exists. Run the command java -Xmx2g -Dspring.profiles.active=mock -jar integrasjonspunkt-2.2.6.jar If you have a newer version of the integration point, the commands last section should be adjusted to reflect this.  Verify that eFormidling is set up correctly This requires that node and npm is present on your machine, but they are note required to use the mock.\n Open a terminal and navigate to efm-mocks/tests/ Run npm i Navigate into the folder next-move Run node NextMove.js dpf Verify in a browser at localhost:8001 that there are new table entries containing the sent messages.  Read more about the mock here\nTesting eFormidling integration in a test environment Thorough testing for the eFormidling integration in an application is encouraged.\rSafety measures and retry mechanisms are in place to ensure that a shipment reaches the receiver when errors are due to weak network connections.\rHowever, invalid shipments, including but not limited to missing attachments or mistakes in the \"arkivmelding\",\rvil cause the shipment to fail without explicit warning the end user or app owner.\r\rThe integration point exposes endpoints that allow you to monitor the status of a shipment. https://platform.altinn.no/eformidling/api/conversations?messageId={instanceGuid}\nReplace {instanceGuid} with the guid of the instance that has been archived.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/events/",
	"title": "Events",
	"tags": [],
	"description": "How to create custom events for an app.",
	"content": "Activate generation of events in your application To allow generating events for your application it must refer to nuget version = 1.2.4.\rSee how you update nuget references for your application [here](../update/#nuget-packages).\r\rGeneration and storing of events is not enabled by default in applications per 22.10.2020. Because of this, a manual step is required before your application can generate events.\nIn the file appsettings.json in the folder App the following should be added into the section AppSettings\n\u0026#34;RegisterEventsWithEventsComponent\u0026#34;: true Pushing self defined events into your application The service IEvents is exposed in the application and can be dependency injected into the class where you need to generate a self defined event.\nThe method AddEvent requires the name of the eventtype and the instance as input\nCode example In this section you can find an example of how to generate a self defined event by instantiation within the application\nThe logic is implemented in InstantiationHandler.cs\nusing Altinn.App.Services.Interface; using Altinn.App.PlatformServices.Interface; using Altinn.App.Services.Models.Validation; using Altinn.Platform.Storage.Interface.Models; using System.Threading.Tasks; // using Altinn.App.Models; // Uncomment this line to refer to app model(s)  namespace Altinn.App.AppLogic { public class InstantiationHandler { private IProfile _profileService; private IRegister _registerService; private IEvents _eventsService; /// \u0026lt;summary\u0026gt;  /// Set up access to profile and register services  /// \u0026lt;/summary\u0026gt;  public InstantiationHandler(IProfile profileService, IRegister registerService, IEvents eventsService) { _profileService = profileService; _registerService = registerService; _eventsService = eventsService; } /// \u0026lt;summary\u0026gt;  /// Run validations related to instantiation  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;example\u0026gt;  /// if ([some condition])  /// {  /// return new ValidationResult(\u0026#34;[error message]\u0026#34;);  /// }  /// return null;  /// \u0026lt;/example\u0026gt;  /// \u0026lt;param name=\u0026#34;instance\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;validationResults\u0026#34;\u0026gt;\u0026lt;/param\u0026gt;  /// \u0026lt;returns\u0026gt;The validation result object (null if no errors) \u0026lt;/returns\u0026gt;  public async Task\u0026lt;InstantiationValidationResult\u0026gt; RunInstantiationValidation(Instance instance) { return await Task.FromResult((InstantiationValidationResult)null); } /// \u0026lt;summary\u0026gt;  /// Run events related to instantiation  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;remarks\u0026gt;  /// For example custom prefill.  /// \u0026lt;/remarks\u0026gt;  /// \u0026lt;param name=\u0026#34;instance\u0026#34;\u0026gt;Instance information\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;data\u0026#34;\u0026gt;The data object created\u0026lt;/param\u0026gt;  public async Task DataCreation(Instance instance, object data) { await _eventsService.AddEvent(\u0026#34;app.test.event\u0026#34;, instance); await Task.CompletedTask; } } }   The private variable in the service is included in the class\nprivate IEvents _eventsService;   Namespace for IEvents must be included in the class. Add the line below among the other using statements in the top of the file.\nusing Altinn.App.PlatformServices.Interface;   The IEvents service is dependency injected into the class. And the private variable is assigned a value.\npublic InstantiationHandler(IProfile profileService, IRegister registerService, IEvents eventsService) { _profileService = profileService; _registerService = registerService; _eventsService = eventsService; }   In the method where you need to generate an event you call the service.\nHere the self defined event has received the name app.test.event, in addition the instance is sent. This is used to populate remaining metadata about the event\nawait _eventsService.AddEvent(\u0026#34;app.test.event\u0026#34;, instance);   If you try building the solution at this point, it will fail.\nIEvents will be missing the location where the InstantiationHandler is instantiated. Navigate to App.csand dependency inject the service into App\u0026rsquo;s constructor.\nFurther the service must be added into the call where InstantiationHandler is instantiated as shown below.\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService, IEvents eventsService ) : base(appResourcesService, logger, dataService, processService, pdfService, prefillService) { _logger = logger; _validationHandler = new ValidationHandler(); _calculationHandler = new CalculationHandler(); _instantiationHandler = new InstantiationHandler(profileService, registerService, eventsService); }   Your application is now ready to generate a self defined event during instantiation. You can test this locally before eventually deploying to a test environment.\n  "
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/settings/",
	"title": "Settings and environmental variables",
	"tags": [],
	"description": "How to add configuration and environmental specific values so that they are available from app code.",
	"content": "Standard .NET configuration Altinn 3\u0026rsquo;s app template is based on an ASP.Net Core application and has a multidude of possibilities for controlling configuration of an app. This documentation is therefore in large part quotes from or links to Microsoft\u0026rsquo;s own documentation. However, not everything is possible in an application because Altinn 3 does not give full access to the environment an app is run within.\nappsettings.json The first and simplest source for configuration information are the appsettings files. Every new app which is created will come with an existing appsettings.json file. This file is read by an app during startup independently of what environment the app runs in. This means the file should only contain settings which are equal in all environments. The file contains some settings that are already in use and the values are in large part meant for a development environment where the application is run within LocalTest\nIn appsettings.json the values are organized in different sections. It is not recommended to add new values to the existing sections, creating new sections is recommended. The following sections are reserved to avoid collisions: Kestrel, AppSettings, GeneralSettings, PlatformSettings, PEPSettings, ApplicationInsights, kvSettings.\n{ \u0026#34;ExampleSection\u0026#34;: { \u0026#34;ExampleValue\u0026#34;: \u0026#34;Verdi lest inn i alle miljøer, men kanskje overstyrt av miljøspesifikke kilder\u0026#34; }, \u0026#34;AppSettings\u0026#34;: { ... }, \u0026#34;GeneralSettings\u0026#34;: { ... }, \u0026#34;PlatformSettings\u0026#34;: { \u0026#34;ApiStorageEndpoint\u0026#34;: \u0026#34;http://localhost:5101/storage/api/v1/\u0026#34;, \u0026#34;ApiRegisterEndpoint\u0026#34;: \u0026#34;http://localhost:5101/register/api/v1/\u0026#34;, ... }, \u0026#34;ApplicationInsights\u0026#34;: { \u0026#34;InstrumentationKey\u0026#34;: \u0026#34;retrieved from environment at runtime\u0026#34; } } In the future new apps will have a designated section which is simple to expand. In the meantime we refer to Microsoft\u0026rsquo;s own documentation for how this should be done.\nEnvironment specific appsettings A new app will contain a set of environment specific appsettings files: appsettings.Development.json, appsettings.Staging.json and appsettings.Production.json. These files are read in their respective environments. The TT02-environment is defined as staging and the production environment is defined as Production.\nEvery file should contain the values which are unique or different in at least one of the environments. Examples of values that vary from environment to environment is the \u0026ldquo;timeout\u0026rdquo; values. You might want an app to wait longer for a response from an external API during development than what you want to allow during production.\nappsettings.Development.json { \u0026#34;ExampleSection\u0026#34;: { \u0026#34;ExampleValue\u0026#34;: \u0026#34;Verdi lest inn kun for utviklingsmiljø\u0026#34; } } appsettings.Staging.json { \u0026#34;ExampleSection\u0026#34;: { \u0026#34;ExampleValue\u0026#34;: \u0026#34;Verdi lest inn kun for TT02\u0026#34; } } appsettings.Production.json { \u0026#34;ExampleSection\u0026#34;: { \u0026#34;ExampleValue\u0026#34;: \u0026#34;Verdi lest inn kun for produksjon\u0026#34; } } Environment variables Standard behaviour for an ASP.Net application is to read Environment variables. This is also done for an app, but it isn\u0026rsquo;t possible for an app developer to create or change any of these values. Altinn 3 considers the other method of controlling Environment specific variables to be covered by appsettings and KeyVault.\nCommand line arguments It is technically possible to override all other data sources by using command line arguments. It is however not possible to use this to change values from one environment to another.\nAzure KeyVault Every application owner should have access to their own Azure KeyVault for storage of sensitive values. Sensitive values includes values which you don\u0026rsquo;t want to be visible in code or configuration files. Examples include usernames and passwords for external APIs, certificates, private keys, etc.\nCurrently values from KeyVault are not read into the configuration control of an App. Instead the secrets component is used. This is documented under Secrets.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/startup/",
	"title": "Configure behavior during startup",
	"tags": [],
	"description": "How to configure app behavior during startup of app-frontend",
	"content": "In applicationmetadata.json there is an option to configure the user interface when a user navigates to a direct link to the application. This is done in the field onEntry.show where you have the possibility to set the values new-instance (default) or select-instance. Standard behaviour if this field is not present is to create a new instance for the user.\nSelect from active instances Notice: in order to use this functionality the application must reference version \u0026gt;= 4.15.2 of the nuget packages Altinn.App.PlatformServices, Altinn.App.Common and Altinn.App.Api.\n\rIf the field onEntry.show is set to select-instance the user is presented with a list of active instances for the selected reportree when navigating to the application.\nExample The following configuration is added to applicationmetadata.json to configure select from active instance.\n{ \u0026#34;id\u0026#34;: \u0026#34;ttd/demo-app\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Starte fra aktiv instans\u0026#34; }, ... \u0026#34;onEntry\u0026#34;: { \u0026#34;show\u0026#34;: \u0026#34;select-instance\u0026#34; } } For users that do not have any active instances, a new instance will be created, while users that have active instances will be presented with the following user interface:\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/stateless/",
	"title": "Stateless application (lookup-service)",
	"tags": [],
	"description": "How to add configuration to control behavior at the application startup.",
	"content": "Introduction to stateless applications A stateless application differentiates itself from standard applications by not storing any data, including form data or metadata about instances of the application. Because of this, a stateless application is a good choice for information transparency services where the end user or a system is doing a lookup against one or more resources or presents data from a third party based on who the user is. It is also possible to configure a stateless application to only allow anonymous users, or users that are not logged on.\nConfiguration This is brand new functionality. Setup has to be completed manually until further notice.\nNotice: To make use of this functionality, version \u0026gt;= 4.5.2 of the nuget packages Altinn.App.PlatformServices, Altinn.App.Common and Altinn.App.Api is required.\n\rIn the application metadata it is possible to control behaviours during startup. Your application can now act like a stateless application if it is enabled. For an application like this, no data or metadata is stored, and the application will also not end up in the message box of an end user. This is equivalent to a stateless application in Altinn 2.\nConfiguration of this is done in applicationmetadata.json. Example:\n{\r\u0026quot;id\u0026quot;: \u0026quot;ttd/stateless-app-demo\u0026quot;,\r\u0026quot;org\u0026quot;: \u0026quot;ttd\u0026quot;,\r\u0026quot;title\u0026quot;: {\r\u0026quot;nb\u0026quot;: \u0026quot;Stateless App Demo\u0026quot;\r},\r\u0026quot;dataTypes\u0026quot;: [\r{\r\u0026quot;id\u0026quot;: \u0026quot;ref-data-as-pdf\u0026quot;,\r\u0026quot;allowedContentTypes\u0026quot;: [\r\u0026quot;application/pdf\u0026quot;\r],\r\u0026quot;maxCount\u0026quot;: 0,\r\u0026quot;minCount\u0026quot;: 0\r},\r{\r\u0026quot;id\u0026quot;: \u0026quot;Stateless\u0026quot;,\r\u0026quot;allowedContentTypes\u0026quot;: [\r\u0026quot;application/xml\u0026quot;\r],\r\u0026quot;appLogic\u0026quot;: {\r\u0026quot;autoCreate\u0026quot;: true,\r\u0026quot;classRef\u0026quot;: \u0026quot;Altinn.App.Models.StatelessV1\u0026quot;\r},\r\u0026quot;taskId\u0026quot;: \u0026quot;Task_1\u0026quot;,\r\u0026quot;maxCount\u0026quot;: 1,\r\u0026quot;minCount\u0026quot;: 1\r}\r],\r...\r\u0026quot;onEntry\u0026quot;: { \u0026quot;show\u0026quot;: \u0026quot;stateless\u0026quot; } // legg til denne linjen\r}\rIn the field onEntry.show there is the opportunity to reference a layout set which you want to display during startup of the application. Read more about layout-sets here.\nThe layout sets you refer to here will be used as the display the user is presented before navigating to the application.\nThe configuration file layout-sets.json can be created if it doesn\u0026rsquo;t already exist. It should be located in the folder App/ui. In layout-sets.json you add the actual set you are refering to from applicationmetadata.json, Example:\n{ \u0026#34;sets\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;stateless\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;Stateless\u0026#34; } ] } In the example above the layout-set stateless is referring to the datamodel Stateless. Example of an app structure for an application which is set up in this way:\n├───App ├───config ├───logic ├───models │ Stateless.cs │ Stateless.metadata.json │ Stateless.schema.json │ Stateless.xsd ├───ui │ layout-sets.json │ └───stateless | RuleConfiguration.json │ RuleHandler.js │ Settings.json │ └───layouts FormLayout.json FormLayout.json should then be set up the same way as any normal application, and will support all components which are possible to use in a normal app with the exception of:\n File upload Button  App frontend will read the configuration in applicationmetadata.json and understand that it isn\u0026rsquo;t supposed to instantiate, and then collect the layout-files and the connected datamodel, and present it to the end user.\nConfiguring access without login Note! Form components that affect process (Button for submission or instantiation) are not supported for anonymous users!\rNote: To make use of this functionality you must use version \u0026gt;= 5.1.0 of the nuget packages Altinn.App.PlatformServices, Altinn.App.Common and Altinn.App.Api.\n\rTo permit use of an app by a user that is not logged in, you must follow the steps that are described above. You also have to define the data type which is used by the stateless app to allow anonymous use. This is done by modifying the dataType-element in applicationMetadata.json. The datatype\u0026rsquo;s appLogic-object needs a new setting, \u0026quot;allowAnonymousOnStateless\u0026quot;: true. See example below:\n{\r\u0026quot;id\u0026quot;: \u0026quot;ttd/stateless-app-demo\u0026quot;,\r\u0026quot;org\u0026quot;: \u0026quot;ttd\u0026quot;,\r\u0026quot;title\u0026quot;: {\r\u0026quot;nb\u0026quot;: \u0026quot;Stateless App Demo\u0026quot;\r},\r\u0026quot;dataTypes\u0026quot;: [\r{\r\u0026quot;id\u0026quot;: \u0026quot;ref-data-as-pdf\u0026quot;,\r\u0026quot;allowedContentTypes\u0026quot;: [\r\u0026quot;application/pdf\u0026quot;\r],\r\u0026quot;maxCount\u0026quot;: 0,\r\u0026quot;minCount\u0026quot;: 0\r},\r{\r\u0026quot;id\u0026quot;: \u0026quot;Stateless\u0026quot;,\r\u0026quot;allowedContentTypes\u0026quot;: [\r\u0026quot;application/xml\u0026quot;\r],\r\u0026quot;appLogic\u0026quot;: {\r\u0026quot;autoCreate\u0026quot;: true,\r\u0026quot;classRef\u0026quot;: \u0026quot;Altinn.App.Models.StatelessV1\u0026quot;,\r\u0026quot;allowAnonymousOnStateless\u0026quot;: true,\r},\r\u0026quot;taskId\u0026quot;: \u0026quot;Task_1\u0026quot;,\r\u0026quot;maxCount\u0026quot;: 1,\r\u0026quot;minCount\u0026quot;: 1\r}\r],\r...\r\u0026quot;onEntry\u0026quot;: { \u0026quot;show\u0026quot;: \u0026quot;stateless\u0026quot; } }\rPopulating data When using a stateless data type you will be able to populate the data model in when the app front-end requests the form data.\nData will be populated in two steps during the initial call from the front-end (GET):\n Prefill, read more about this here. Data processing, read more about this here.  The following updates to the same form data (POST) will then run prefill one more time, but the calculation is triggered. This allows manipulating the data based on the user\u0026rsquo;s input even in stateless application.\nExample of a calculation which populates the data model mentioned in the example above:\npublic async Task\u0026lt;bool\u0026gt; ProcessDataRead(Instance instance, Guid? dataId, object data) { if (instance.GetType() == typeof(StatelessV1)) { StatelessV1 form = (StatelessV1) data; // Here you can do what you want, for ex. an API-call  // if your service is supposed to act as an information transparency service  form.Fornavn = \u0026#34;Test\u0026#34;; form.Etternavn = \u0026#34;Testesten\u0026#34;; return true } return false; } Authorization with third party solutions Controlling access for stateless applications can be done with standard app-authorization Where by using Altinn roles you define who has access to the service. If you require further securing of your service you can implement logic for authorization of users with third party solutions. This can be an API which is exposed in your organization or an open API from a different provider.\nIn the example below, an API from the Financial Supervisory Authority of Norway is used to determine if a company that is represented by a user in Altinn has the necessary licenses to use a service.\nThe source code for the example application can be found here. (Requires account in Altinn Studio.)\nFurther down this page we will use the designation user synonymously with an organization represented by a person in Altinn.\n  Expand the data model with fields for authorization\nIn addition to a field for user input and a field to display the result, in this example we have a field for holding information about if the user is authenticated and a field for holding a dynamic error message.\n\u0026lt;xs:sequence\u0026gt; \u0026lt;xs:element name=\u0026#34;searchString\u0026#34; type=\u0026#34;xs:string\u0026#34; /\u0026gt; \u0026lt;xs:element name=\u0026#34;result\u0026#34; type=\u0026#34;xs:string\u0026#34; /\u0026gt; \u0026lt;xs:element name=\u0026#34;userAuthorized\u0026#34; type=\u0026#34;xs:boolean\u0026#34; /\u0026gt; \u0026lt;xs:element name=\u0026#34;errorMessage\u0026#34; type=\u0026#34;xs:string\u0026#34; /\u0026gt; \u0026lt;/xs:sequence\u0026gt; Skip to step 4 if the application will only be used via an API.\n  Add a field to display error messages in the user interface\nThere are three components to the user interface of an application. A search field for user input, a text field dedicated to showing a search result and a paragraph which is reserved for error messages.\nThe components are connected to a data model and text resource in the following way in FormLayout.json\n\u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;sokeBoks\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;SearchString\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;searchString\u0026#34; }, \u0026#34;required\u0026#34;: false, \u0026#34;readOnly\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;resultatBoks\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TextArea\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Result\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;result\u0026#34; }, \u0026#34;required\u0026#34;: false, \u0026#34;readOnly\u0026#34;: true }, { \u0026#34;id\u0026#34;: \u0026#34;errorBoks\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Paragraph\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;ErrorMessage\u0026#34; }, \u0026#34;required\u0026#34;: false, \u0026#34;readOnly\u0026#34;: true } ]   Add dynamic rules to show/hide fields\nWe use dynamic rules to show/hide fields depending on the users level of authorization\nThere has been added a dynamic rule in RuleHandler.js which checks if a field in the datamodel has the value false. Configuration of rules is described more closely here.\nIn RuleConfiguration.json you can see how the rule is utilized. If the input value from the data model userAuthorized is false, the errorBox-component will be made visible, while the opposite happens to the search and result fields as those are hidden.\nDefault behaviour will be the opposite, that search and results are visibile while the error field is hidden.\n{ \u0026#34;data\u0026#34;: { \u0026#34;ruleConnection\u0026#34;: {}, \u0026#34;conditionalRendering\u0026#34;: { \u0026#34;e2dd8ff0-f8f1-11eb-b2bc-5b40a942c260\u0026#34;: { \u0026#34;selectedFunction\u0026#34;: \u0026#34;isFalse\u0026#34;, \u0026#34;inputParams\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;userAuthorized\u0026#34; }, \u0026#34;selectedAction\u0026#34;: \u0026#34;Show\u0026#34;, \u0026#34;selectedFields\u0026#34;: { \u0026#34;e2dd68e0-f8f1-11eb-b2bc-5b40a942c260\u0026#34;: \u0026#34;errorBoks\u0026#34; } }, \u0026#34;e2dd8ff0-f8f1-11eb-b2bc-5b40a942c261\u0026#34;: { \u0026#34;selectedFunction\u0026#34;: \u0026#34;isFalse\u0026#34;, \u0026#34;inputParams\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;userAuthorized\u0026#34; }, \u0026#34;selectedAction\u0026#34;: \u0026#34;Hide\u0026#34;, \u0026#34;selectedFields\u0026#34;: { \u0026#34;e2dd68e0-f8f1-11eb-b2bc-5b40a942c261\u0026#34;: \u0026#34;sokeBoks\u0026#34;, \u0026#34;e2dd68e0-f8f1-11eb-b2bc-5b40a942c262\u0026#34;: \u0026#34;resultatBoks\u0026#34; } } } } }   Add text resources\nIn addition to the name of the service, three text resources have been added.\nThe text resource for error messages contains a placeholder for the name of the user. The variable errorMessage will be populated in the data model when it is registered that the user lacks the authorization to access the service.\n{ \u0026#34;id\u0026#34;: \u0026#34;ErrorMessage\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;{0} mangler rettigheter til å bruke denne tjenesten.\u0026#34;, \u0026#34;variables\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;errorMessage\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.lookup\u0026#34; } ] }, { \u0026#34;id\u0026#34;: \u0026#34;Result\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Resultat\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;SearchString\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Legg inn søkeord her:\u0026#34; },   Implement authorization logic\nAll data processing for stateless applications is located in the file App\\logic\\DataProcessing\\DataProcessingHandler.cs, and it is also where the authorization logic should be placed.\nLogic for looking up data and authorizing the user is handled in the method ProcessDataRead. It is called every time a user opens the application or inputs any data.\npublic async Task\u0026lt;bool\u0026gt; ProcessDataRead(Instance instance, Guid? dataId, object data)\r{\rlookup lookup = (lookup)data;\r// Check if user is authorized to use service\rParty party = await _register.GetParty(int.Parse(instance.InstanceOwner.PartyId)); if (string.IsNullOrEmpty(party.OrgNumber) || !await _finanstilsynet.HasReqiuiredLicence(_settings.LicenseCode, party.OrgNumber))\r{\rlookup.userAuthorized = false;\rlookup.errorMessage = $\u0026quot;{party.Name}\u0026quot;;\rreturn true;\r} // logic for looking up data\rif (!string.IsNullOrEmpty(lookup.searchString))\r{\rlookup.result = $\u0026quot;You typed \\\u0026quot;{lookup.searchString}\\\u0026quot;. This is the result.\u0026quot;;\rreturn true;\r}\rreturn false;\r}\rThe method starts with logic for collecting form data for future use in the method.\nlookup lookup = (lookup)data Then comes the logic for checking if the user is authorized.\n// Check if user is authorized to use service Party party = await _register.GetParty(int.Parse(instance.InstanceOwner.PartyId)) if (string.IsNullOrEmpty(party.OrgNumber) || !await _finanstilsynet.HasReqiuiredLicence(_settings.LicenseCode, party.OrgNumber)) { lookup.userAuthorized = false; lookup.errorMessage = $\u0026#34;{party.Name}\u0026#34;; return true; } To know the identity of the user, the identificator instance.InstanceOwner.PartyId is used, this is used as an input for the method. We use Altinns register to collect the party-object which represents the user. It can contain either an organization or a person.\nParty party = await _register.GetParty(int.Parse(instance.InstanceOwner.PartyId)) Two checks are done to decide the authorization of a user. First it is verified that the party object has a defined organization number, if this is not the case and the user is not representing an organization they are not authorized.\n  The other check calls _finanstilsynet.HasReqiuiredLicence(), a method which looks up the Financial Supervisory Authority of Norway\u0026rsquo;s API to decide if an organization has been given a license. The implementation of that service is available [here]her.\nIf none of the checks are successful two fields in the data model are populated;\r- an indicator that the user is not authorized\r- an error message, with only the name of the user\rAnd `true` is returned to indicate that the data values have been updated.\r```cs\rlookup.userAuthorized = false;\rlookup.errorMessage = $\u0026quot;{party.Name}\u0026quot;;\rreturn true;\r```\rFinally the logic to display the results based on the query string.\r```cs\r// logic for looking up data\rif (!string.IsNullOrEmpty(lookup.searchString))\r{\rlookup.result = $\u0026quot;You typed \\\u0026quot;{lookup.searchString}\\\u0026quot;. This is the result.\u0026quot;;\rreturn true;\r}\rreturn false;\r```\r`lookup.result` is populated with the value from the lookup, in this case we just write the query string back to the user.\rAgain, `true` is returned to indicate that a data value has been changed, and `false` if this is not the case.\r Starting an instance from a stateless form This is brand new functionality. Setup must be completed manually until further notice and will not be supported in Altinn Studio.\nNote: To make use of this functionality you must use version \u0026gt;= 4.17.2 of the nuget packages Altinn.App.PlatformServices, Altinn.App.Common og Altinn.App.Api.\n\rIn a stateless application you have the opportunity to use the InstantiationButton component to start an instance. Currently we only support starting an instance from within the same application the stateless form is displayed in. Starting an instance in another application is functionality we will add in the future.\nThere is an example stateless application where the end user can choose to start an instance in the actual application. It can be used as inspiration for further development. The application with source code can be found here\nInstantiation with prefill An example use case for starting an instance from a stateless application could be an app where the user is presented some given data at first. From this information the user can choose to act on the listed data, and then continue using the service as a normal form.\nTo achieve this type of flow you are dependent on setting up your application as a stateless application, described under configuration. When this has been done, you can expand the stateless view to include InstantiationButton which can start a new instance when the user clicks the button. Standard behaviour for this button is to submit the entire data model that the user has used as a part of the instantiation under the field prefill. If one wishes to pick parts of the data model which are connected in the stateless step it will also be possible to add mappingto the InstantiationButton component. For example:\n{ \u0026#34;id\u0026#34;: \u0026#34;instantiation-button\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;InstantiationButton\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Start instans\u0026#34; }, \u0026#34;mapping\u0026#34;: { \u0026#34;some.source.field\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;some.other.field\u0026#34;: \u0026#34;id\u0026#34; } } When the user then chooses to start an instance the app frontend will gather the fields some.source.field and some.other.field from the data model in the stateless step and map these fields to name and id which are sent with the instantiation call for the application. Example request which will be sent to the backend which can be mapped to the data model used in the submit part of the application:\n{ \u0026#34;prefill\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Ola Nordmann\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;12345\u0026#34; }, ... } This prefill value can then be used in the method DataCreation in InstantiationHandler.cs to map against the fields that are needed as a part of the submittance part of the application during instantiation. Example:\npublic async Task DataCreation(Instance instance, object data, Dictionary\u0026lt;string, string\u0026gt; prefill) { if (data.GetType() == typeof(MessageV1)) { string name = \u0026#34;\u0026#34;; string id = \u0026#34;\u0026#34;; if (prefill.ContainsKey(\u0026#34;name\u0026#34;)) { name = prefill[\u0026#34;name\u0026#34;]; } if (prefill.ContainsKey(\u0026#34;id\u0026#34;)) { id = prefill[\u0026#34;id\u0026#34;]; } MessageV1 skjema = (MessageV1)data; skjema.Sender = name; skjema.Reference = id; } await Task.CompletedTask; } Intantiating from a repeating group If in the stateless step wanted the user to, for example, pick an element from a repeating group to continue on the chosen element, you can set up the InstantiationButton component as a part of the repeating group. Here you can then configure the instantiation button to map fields from the given index the user chose to start an instance from. This requires setting up mapping fields with an index on the actual group. Example:\n{ \u0026#34;id\u0026#34;: \u0026#34;instantiation-button\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;InstantiationButton\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Start ny instans\u0026#34; }, \u0026#34;mapping\u0026#34;: { \u0026#34;people[{0}].name\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;people[{0}].age\u0026#34;: \u0026#34;age\u0026#34; } } In the repeating group {0} will be replaced with the actual index of the group the user wishes to start from.\n"
},
{
	"uri": "https://docs.altinn.studio/app/deployment/",
	"title": "Deployment of apps to production",
	"tags": [],
	"description": "App owners can deploy their applications themselves.",
	"content": "Getting access to a production environment Before you can deploy an application to the production environment for the first time, a seperate cluster for the service owner needs to be provisioned.\nTo get the cluster provisioned, the following process applies:\n Send an e-mail with a message about which apps you have ready for deployment to production. Confirm that service owner accepts the terms of use Wait for a reply that cluster is created.  This routine just needs to be followed once. When the cluster is set up, the solution is 100% self-serviced afterwards.\nDeployment of app Deploy of an application to production is done in the same way as for test environments.\nOrder \u0026ldquo;About form\u0026rdquo;-page on altinn.no Altinn maintains an overview of all services. In order for Altinn User Service to be able to help users with a service, information must be entered here. The order form is called \u0026ldquo;Publiser informasjon om tjeneste på Altinn PROD og TT02\u0026rdquo;, and can be found after login on altinndigtal.no.\nNB! The form is currently optimized for Altinn II services. Therefore, do the following:\n In the field \u0026ldquo;Tjenestekode\u0026rdquo;, enter 9999 and in the field \u0026ldquo;Utgavekode\u0026rdquo; enter 9999. In the field \u0026ldquo;Hvem skal bruke skjemaet\u0026rdquo; remember to specify which roles are required for using the app in addition to the description of who the app is ment for.  "
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/deployment/",
	"title": "Deployment",
	"tags": [],
	"description": "Configuring deploy and runtime behavior",
	"content": "You can change how your application is deployed in kubernetes in the file deployment/values.yaml\nExamples of what options are available are: scale/autoscaling, ports and resources allocated.\nWe provide some default values that you can choose to override as you see fit. The default values are defined here\nTo override a value in this file you need do add it as a child to the deployment section in deployment/values.yaml\nAn example where initial scale is overridden.\nThe values.yaml in the centralized chart defines replicaCount at the root as follows:\nreplicaCount: 2 ... To override this in your deployment/values.yaml you add it as a child to the deployment section:\ndeployment: replicaCount: 3 Note the addition of \"deployment:\" and that the \"replicaCount\" is indented with two spaces (yaml-indents are spaces and not tab, your yaml will not be valid with tab indents!)\r\rScale Initial scale The initial scale is controlled by the field replicaCount. If autoscaling is enabled the autoscaler will override this value. Example where initial scale is set to 2:\ndeployment: replicaCount: 2 Autoscaling configuration From version 2.0.0 of the deployment helm-chart autoscaling is available and enabled by default.\nAutoscaling leverages Horizontal Pod Autoscaler to automatically scale your application based on CPU utilization.\nWhen configuring how the autoscaling of your app behaves, there are two sections in the values that affect it.\n resources cpu/memory guarantees and limits for the app pods at runtime, see: Resources Configuration autoscaling when and how the autoscaling should happen  Defaults if not overridden in deployment/values.yaml\ndeployment: autoscaling: enabled: true replicas: min: 2 max: 10 avgCpuUtilization: 70 behavior: stabilizationWindowSeconds: scaleUp: 0 scaleDown: 120 deployment.autoscaling.replicas min: The lowest number of pods the autoscaler is allowed to scale down to. max: The highest number of pods the autoscaler is allowed to scale up to.\ndeployment.autoscaling.avgCpuUtilization Average percentage of CPU request that is utilized.\nScale up is not instant as the new pod needs some time to start (1-2 min in most cases). If all the resources in the cluster is consumed azure also need to start a new node (5-10 min in most cases). Leave some resources that can handle the load while the extra capacity is provisioned.\ndeployment.autoscaling.behavior.stabilizationWindowSeconds The stabilization window is used to restrict the flapping of replicas when the metrics used for scaling keep fluctuating.\nBy default, apps initiate scale up as soon as the average utilization is above the threshold and wait two minutes before we start a scaledown.\nscaleUp: Number of seconds to wait from the last scale-event to a new scaleUp is evaluated. scaleDown: Number of seconds to wait from the last scale-event to a new scaleDown is evaluated.\nResources configuration Setting good requests and limits you need to know the app well, e.g. what tasks is it meant to perform and how it does it. We try to set sane defaults, but they might not be suited for your workloads.\nDefaults if not overridden in deployment/values.yaml\ndeplyoment: resources: requests: cpu: 300m memory: 256Mi All values available, the values are only provided as an example.\ndeplyoment: resources: requests: cpu: 200m memory: 256Mi limits: cpu: 1000m memory: 512Mi deployment.resources.requests This section in the yaml defines the resources that will be reserved by the kubelet for each pod of the app.\nRequests are used when the kubernetes scheduler decides what node the pod should run on. This will limit the number of pods that can run on a node.\nRequests are also used by the Horizontal Pod Autoscaler to determine if the app should scale up or down.\nGiven a cluster with 2 cores (2000 millicores) and 4Gi of memory and all the pods requesting 200m (200 millicores) and 256Mi.\nThe number of pods a node can run based on the CPU request is: 2000 / 200 = 10\nThe number of pods a node can run based on the memory request is: 4096Mi / 256Mi = 16\nThe number of pods a node can run, with or without actual load, is then 10.\nRequests does not limit how much CPU or memory a pod can use when there are available resources, but if resources are scarce pods exceeding their request can be evicted from the node.\ndeployment.resources.limits This section in the yaml defines the maximum of resources a pod of this app is allowed to use.\nIf a pod tries to use more CPU than the limit it is throttled.\nIf a pod tries to allocate more memory than the limit it is terminated with an Out Of Memory (OOM) error\nLinkerd By default all services are add to the Linkerd service mesh.\nWe strongly recommend not changing this setting as it add mutual TLS and other security features to all communication between services in the cluster.\ndeployment: ... linkerd: enabled: true ... Volumes and VolumeMounts This section defines volumes mounted into folders available to the application. There are some default mounts the default functionality needs to communicate with Altinn Platform.\ndeployment: ... volumes: - name : datakeys persistentVolumeClaim: claimName: keys - name: accesstoken secret: secretName: accesstoken At the time of writing there is one case for adding other Volumes: Secrets loaded from Azure Key Vault\nService In the service definition you can change the port forwarding rules to your application, most likely this is something you do not need to change.\nIf your application runs on a different port than 5005, set deployment.service.internalPort to the port your app is running on.\nDefaults are:\ndeployment: ... service: name: deployment type: ClusterIP externalPort: 80 ## If your application is running on another port, change only the internal port. internalPort: 5005 ... Sections overridden at deploytime  image ingressRoute  These sections are overridden at deploytime so changes have no affect.\n"
},
{
	"uri": "https://docs.altinn.studio/app/maintainance/",
	"title": "Maintenance of app in production",
	"tags": [],
	"description": "Applications in production require regular maintenance and updates.",
	"content": "When the application is put into production, there will be a need to maintain the application. The most common type of maintenance will be to update dependencies.\nTo make a new version of the application available for users, deploy it the same way as usual.\nExisting instances of the app in the user inbox will automatically be updated to use the latest app version, so it is important that you do not introduce changes that break existing instances.\n\rUpdate dependencies in app\rHow to update dependencies in an app.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/authentication/",
	"title": "Configuration of authentication",
	"tags": [],
	"description": "Some configurations can be useful when it comes to authentication",
	"content": "Authentication level Required authentication level is set in the XACML Policy as an obligation.\nID-provider It is possible to set up that an app will use a special ID-provider which is not the standard option. The standard option is ID-porten / Altinn\u0026rsquo;s login.\nCurrently the only approved ID-providers are:\n FEIDE UIDP  Use of OIDC provider is set in appSettings\n\u0026#34;AppOidcProvider\u0026#34;: \u0026#34;uidp\u0026#34; Read more about OIDC support under architecture.\n"
},
{
	"uri": "https://docs.altinn.studio/app/launched-apps/",
	"title": "Launched apps",
	"tags": [],
	"description": "Some of the apps that are in production, for information and inspiration.",
	"content": "July 2022  Oppstartveileder for enkeltpersonforetak (Brønnøysund Register Centre)\nInfo | Repo | App Oppstartveileder for enkeltpersonforetak uten innlogging (Brønnøysund Register Centre)\nInfo | Repo | App  June 2022  Apply for authorisation for manual car care, wheel change and wheel storage (The Labour Inspection Authority).\nInfo | Repo | App  April 2022  Nasjonalt arbeidstidsregister (STAMI).\nInfo | Repo | App  March 2022  Transportløyvegarantier (Statens vegvesen).\nInfo | Repo | App Bestilling av tilgang til Medarbeiderundersøkelsen i staten (STAMI).\nInfo | Repo | App Avtalevilkår for Medarbeiderundersøkelsen i staten (STAMI).\nInfo | Repo | App Mva-meldingen (Skatteetaten).\nInfo | Repo Skattemeldingen (Skatteetaten).\nInfo | Repo  February 2022  Algeskjema (Havforskningsinstituttet).\nInfo | Repo | App Søk om tillatelse til å arbeide med asbest (Arbeidstilsynet).\nInfo | Repo | App  January 2022  Behovskartlegging for opprettelse av vergemål (Statens sivilrettsforvaltning).\nInfo | Repo | App Forespørsel om endring av vergefullmakt (Statens sivilrettsforvaltning).\nInfo | Repo | App  August 2021  Valgkort (Valgdirektoratet).\nInfo | Repo | App  June 2021  Forhåndsgodkjenning av innreise for kjærestebesøk (UDI).\nInfo | Repo | App  May 2021  Søknad for unntak om opphold på karantenehotell ved sterke velferdsgrunner når du reiser til Norge fra utlandet (UDI).\nInfo | Repo | App Melding om registrering av bemanningsforetak (Arbeidstilsynet).\nInfo | Repo | App Årlig melding – Register over bemanningsforetak (Arbeidstilsynet).\nInfo | Repo | App  April 2021  Skattemelding med næringsspesifikasjon - pilot (Sirius) (Skatteetaten).\nInfo | Repo | App  February 2021  Søknad om forhåndsgodkjenning av innkvartering i forbindelse med innreisekarantene (Arbeidstilsynet).\nInfo | Repo | App Digital pliktavlevering (Nasjonalbiblioteket).\nInfo | Repo | App  December 2020  Søknad om autorisasjon som landmåler (Kartverket).\nInfo | Repo | App Vedlegg til søknad om autorisasjon som landmåler (Kartverket).\nInfo | Repo | App  June 2020  Ledige stillinger (RA0678) (SSB).\nInfo | Repo | App Bestill tilgang til REST API (Digdir).\nInfo | Repo | App Be om å bli tjenesteeier (Digdir).\nInfo | Repo | App Godkjenning av bruksvilkår for skytjenester fra Altinn (Digdir).\nInfo | Repo | App  \r"
},
{
	"uri": "https://docs.altinn.studio/community/roadmap/",
	"title": "Roadmap for Altinn",
	"tags": [],
	"description": "High level roadmap and functional description for Altinn.",
	"content": "Altinn is constantly under development. You\u0026rsquo;ll learn more about what we\u0026rsquo;ve done and what we\u0026rsquo;re planning to do here. For now only the roadmap for Altinn Studio and related functionality is available here. All other functionality has a separate roadmap.\nSee diagram below for the full feature overview with feature status. Click on boxes for detailed information.\n\nClick to open the diagram in fullscreen\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/roadmap/studio/\u0026quot;\u0026gt;Roadmap for Altinn Studio\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;High level roadmap and functional description for Altinn Studio and supporting functionality for the created apps.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/roadmap/studio/",
	"title": "Roadmap for Altinn Studio",
	"tags": [],
	"description": "High level roadmap and functional description for Altinn Studio and supporting functionality for the created apps.",
	"content": "\rFor information on how to use the functionalities described here, see the Apps and API sections.\n\r\r \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/roadmap/studio/appowner/\u0026quot;\u0026gt;App owner functionality in Altinn 3\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;This is the functionality available for app owners in Altinn 3, and some of the larger planned changes.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/roadmap/studio/enduser/\u0026quot;\u0026gt;End user functionality in Altinn 3\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;This is the functionality available for end users in Altinn 3, and some of the larger planned changes.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "docs\r"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/cli/configuration/maskinporten-setup/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Setting up a maskinporten client with a custom key Below follows a step-by-step guide on how to set up a client with Altinn-scopes and custom keys.\nTo follow this guide you must have a user in Samarbeidsportalen with access to Selvbetjening.\nRead more about creating user in Samarbeidsportalen here.\nLogin to Samarbeidsportalen.\nChoose Selvbetjening -\u0026gt; Integrasjoner for the environment you want.\nVer2 is test and Produksjon is production.\nChoose Ny integrasjon.\nFill in the scheme like below and then Opprett. We has named our example-client Altinn CLI Client.\nThe tree scopes you need is altinn:serviceowner, altinn:serviceowner/instances.read and altinn:serviceowner/instances.write\nThe value of Integrasjonens identifikator value will be the CLientId in appsettings.json for Altinn CLI.\nNow we can add own public keys. First we must generate a new JSON Web Key. In this example we use mkjwk.org. Fill in values like the example below and Generate.\nThen you will get keys like this.\nThis public key we will add to our client in Samarbeidsportalen. Press Egne public nøkler\nThe key must be stored in an array so add [].\nCopy the public key from the JSON Web key (marked 1 in the picture) and paste this into the array. Press Legg til.\nNow the client in maskinporten is complete.\nThe last part will be to use the public and private keypair in the Altinn CLI application. Copy this (marked 2 in the picture) and Base64 encode it. Base64encode.org can be used for encoding. Then use this value as EncodedJwk in appsettings.json.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/dotnet-core/",
	"title": ".NET Core",
	"tags": ["tech", "programming"],
	"description": "Server side development framework.",
	"content": ".NET Core is the cross-platform and open source development framework used in Altinn 3. ASP.NET Core is used for developing APIs.\nWe\u0026rsquo;ve also published a few packages on nuget.org.\nAltinn ❤️ dotnet.\nLinks  Documentation Download License Roadmap Docker Hub Runtime ASP.NET  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authorization/accessgroups/",
	"title": "Access Groups",
	"tags": ["architecture", "security", "authorization", "xacml"],
	"description": "Access groups",
	"content": "WORK IN PROGRESS - NOT FINALIZED\nAccess registry contains information about the sentral defined access groups.\nSee Github #25\nAccessGroup defintion  Type of group. Leaf or branch? Name of group in different languges AccessGroup identifier  AccessGroup relationship  Parent/child relantiship between AccessGroups Relationship for external roles (ER, AA,  AccessGroup Membership  MembershipID CoveredBy UserId Covered OfferedByParty AccessGroupId ValidTo?  AccessGroup Delegation  DelegatedByParty DelegatedByUserId DelegationType DelegatetDateTime  AccessGroup History  DelegatedBy AccessGroupID OfferedBy CoveredByUserId CoveredByPartyId ChangeType (created, deleted)   "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/security/authentication/accesstoken/",
	"title": "Access Token",
	"tags": ["architecture", "security"],
	"description": "A additional access token are used in the scenarious where we need to authenticate the application or component callin a component in Altinn Platform.",
	"content": "Altinn Studio The designer application creates a JWT based Access Token based on a certificate that designer has available when running in the Altinn Studio Kubernetes Cluster. The different Altinn Studio environments have their own certificate.\nThis makes it possible for each Altinn Platform environment to configure which Altinn Studio environment that is allowed to deploy and modify applications in that specific environment.\nThe token is generated with help of the Access Token generator and this is generated for each call designer are doing aginst the platform solution for Storage and Authorization.\nApps To be able to limit the clients that can access some of the functionality in Altinn Platform, some components/functionality requires that a AccessToken is added to the request header in addition to the JWT that identifes the user triggering the request.\nThe applications generes a token based on a org certificate available in the Kubernetes Cluster for the given org.\nThe token is generated with help of the Access Token generator and is used when calling Register as an example.\nThe required check is enabled in the platform components with enabling a AuthorizationRequirement on the controller. Example on Party controller here.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/alpine-linux/",
	"title": "Alpine Linux",
	"tags": ["tech"],
	"description": "Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.",
	"content": "We\u0026rsquo;re using Alpine Linux as the base for all our containers, including all apps.\nLinks  https://alpinelinux.org https://hub.docker.com/_/alpine https://en.wikipedia.org/wiki/Alpine_Linux  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/",
	"title": "Application construction components for Altinn Apps",
	"tags": [],
	"description": "Application created in Altinn Studio is deployed to Altinn Apps.",
	"content": "The diagram below shows the different components in Altinn Apps and below you find links to the description of the Application Architecture for the different components/parts of Altinn Apps.\nDownload as Visio.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/app/\u0026quot;\u0026gt;Application construction components App\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the application construction components for the app developed in altinn studio.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/kuberneteswrapper/\u0026quot;\u0026gt;Application Architecture Kubernetes Wrapper\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the application architecture for Kubernetes Wrapper\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/routing/\u0026quot;\u0026gt;Application Architecture Routing\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Descripton of the Application Architecture for the Routing Application\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-apps/",
	"title": "Solution-specific application components Altinn Apps",
	"tags": ["architecture", "solution"],
	"description": "Description of the Altinn Studio solution",
	"content": "Functionality in Altinn Apps are located in the apps deployed to the Altinn Apps functionality.\nThis functionality depends on what kind of application template the app is based on and what the app developer have added in addition.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/",
	"title": "Altinn Apps",
	"tags": ["solution", "apps"],
	"description": "Altinn Apps is a flexible, scalable and isolated hosting solution where apps created in Altinn Studio is deployed.",
	"content": "The applications has a web native architecture and is deployed to Kubernetes Clusters as docker containers.\nThe Kubernetes clusters are isolated between the different applications owners and hosted in a public cloud solution making it highly scalable.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-apps/app/\u0026quot;\u0026gt;App\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the app created in Altinn Studio and that is deployed to Altinn Apps.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/platform/presentation/altinn-cdn/",
	"title": "Altinn CDN",
	"tags": [],
	"description": "Description of Altinn Content Delivery Network",
	"content": "Altinn CDN is a safe place for hosting static resources that can be reused and cached client side.\n across Altinn solutions across all apps created in Altinn Studio across apps belonging to one organisation  These resources are defined in a repo on GitHub: https://github.com/Altinn/altinn-cdn\nThe files and folder structure in this repo is mirrored to https://altinncdn.no, and can be use by different solutions and apps.\nEach organisation (org) in Altinn has their own area for resources that they reuse across their apps. For example logo files. This means that organisations can, if they want to, easily change logo for all apps at once without deploying updates to each app.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/cli/",
	"title": "Altinn CLI",
	"tags": ["altinn-cli"],
	"description": "Altinn CLI is a command line application that can be used by app owners to access Altinn APIs.",
	"content": "The application supports commands for creating Altinn app instances both with and without prefill, and functions for fetching and storing instance data. Altinn CLI can be found on GitHub. The application can be used as it, or extended with custom functions developed by the app owners themselves.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/cli/commands/\u0026quot;\u0026gt;Commands\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;A description of all default Altinn CLI Commands\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/cli/configuration/\u0026quot;\u0026gt;Configuration\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;A description of required configurations before using Altinn CLI.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/cli/software-implementation/\u0026quot;\u0026gt;Software implementation\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;A run-through of the implementation of the Altinn CLI\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-platform/",
	"title": "Application construction components for Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Altinn Platform consist of serveral components that is constructed with help of different frameworks and components.",
	"content": "See below for application contruction components for the different components in Altinn Platform.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-platform/authentication/\u0026quot;\u0026gt;Application construction components - Altinn Platform Authentication\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The authentication component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-platform/authorization/\u0026quot;\u0026gt;Application construction components - Altinn Platform Authorization\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The authorization component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-platform/events/\u0026quot;\u0026gt;Application construction components - Altinn Platform Events\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Events component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-platform/pdf/\u0026quot;\u0026gt;Application architecture pdf component - Altinn Platform\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The PDF component is created as an Spring Boot (Java) web application hosted in Kubernetes as a Docker container.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-platform/profile/\u0026quot;\u0026gt;Application construction components - Altinn Platform Profile\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The profile component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-platform/receipt/\u0026quot;\u0026gt;Application architecture receipt component - Altinn Platform\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The receipt component is an application exposing a React receipt application, and internal APIs.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-platform/register/\u0026quot;\u0026gt;Application construction components - Altinn Platform Register\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The register component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-platform/storage/\u0026quot;\u0026gt;Application Construction components - Storage\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The storage component is an application hosted in Kubernetes as a Docker container.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/",
	"title": "Solution-specific application components Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Functionality in Altinn Platform is distributed between different reusable components.",
	"content": "The diagram below shows where the different functionality i located in the components.\n\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-platform/",
	"title": "Altinn Platform",
	"tags": ["altinn-apps"],
	"description": "Altinn Platform contains components with central functionality that can be used by apps. Currently, this is storage, authentication, authorization, profile, register, receipt, pdf and events.",
	"content": "The components are deployed as microservices.\nSee below for details about each component.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-platform/authentication/\u0026quot;\u0026gt;Authentication\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The authentication component provides functionality to authenticate users and systems accessing Altinn Apps and Altinn platform.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-platform/authorization/\u0026quot;\u0026gt;Authorization\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The authorization component contains a highly flexible policy decision point and policy retrieval point to authorize access to applications and Altinn platform components.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-platform/events/\u0026quot;\u0026gt;Events\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Events component receives and publishes events.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-platform/pdf/\u0026quot;\u0026gt;PDF\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The PDF component is responsible for generating PDF printouts for submitted instances of an app.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-platform/profile/\u0026quot;\u0026gt;Profile\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Profile component gives profile information for users in Altinn.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-platform/receipt/\u0026quot;\u0026gt;Receipt\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Receipt component in Altinn Platform presents a receipt for apps.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-platform/register/\u0026quot;\u0026gt;Register\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Register micro service gives register information to Apps.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-platform/storage/\u0026quot;\u0026gt;Storage\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Storage component gives storage capabilities to the apps.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/softwareconfiguration/deployment/altinn-studio/",
	"title": "Altinn Studio - Deployment Architecture",
	"tags": ["todo"],
	"description": "The Altinn Studio App Development solution is deployed to a Kubernetes Cluster.",
	"content": "\rNOTE: Outdated stuff alert! Needs to be updated. Runtime is no longer deployed as part of Studio.\n\r\rThe diagram below show the different applications that is part this.\nRepository Gitea is used as Repository in Altinn Studio App Development solution. There is one instance of Gitea running in a docker container in the solution. It uses cloud service database and cloud file share for configuration and remote repos.\nThe Repository is accessed both from the designer application and from code IDE\u0026rsquo;s from app developers computers.\nDesigner Designer is the web based editor for anything related to the app development (UI, workflow, rules, ++). It runs as a Linux container.\nRouting NGINX is used for routing between the different applications.\nLocal Developer App Developers can use locally installed IDE and other tools and communicate directly with the repository. This is targeted for the more experienced developers.\nLocal Developer with Altinn Studio For developers that is required to develop custom widgets (React) they can install Altinn Studio locally on their computer. (Altinn Studio support both Windows, Linux and macOS)\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-studio/",
	"title": "Solution-specific application components Altinn Studio",
	"tags": ["architecture", "solution"],
	"description": "Altinn Studio have many functional components that lets the app developer create, manage and deploy applications.",
	"content": "\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-studio/designer/\u0026quot;\u0026gt;Solution-specific application components Altinn Studio Designer\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Studio Designer is the custom appliaction where app developers manage and creates applications.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-studio/repositories/\u0026quot;\u0026gt;Solution components Altinn Studio Repositories\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;In Altinn Studio Repos you find the functional components related to source control and access management of the application developer.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/",
	"title": "Altinn Studio",
	"tags": [],
	"description": "Altinn Studio is the design-time solution for developing, maintaining, building and deploying applications. Applications created can target both simple and complex user scenarios and have a modern web native architecture.",
	"content": "Altinn Studio is a user-friendly solution where non-technical and technical developers can create apps based on reuse and configuration of existing building blocks.\nExamples on building blocks can be layouts, themes, web-components, texts, API-calls, code lists, and process tasks.\nAltinn Studio consist of serveral parts.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/thirdpartytools/\u0026quot;\u0026gt;Third Party Tools\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;One important aspect of the Altinn Studio is that we encourage to use third party development tools to create and modify applications.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/data-storage/\u0026quot;\u0026gt;Data Storage in Altinn Studio\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of how the data is stored in Altinn Studio\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/\u0026quot;\u0026gt;Altinn Studio Designer\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;This is where developers create, modify, build and deploy apps. In the background Designer uses Git to store code and config in Altinn Studio Repos.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/\u0026quot;\u0026gt;Altinn Studio Repos\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Git repository solution for storing and versioning apps developed with Altinn Studio.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/",
	"title": "Altinn Studio docs",
	"tags": [],
	"description": "Learn about Altinn Studio",
	"content": "Altinn Studio docs "
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-apps/",
	"title": "altinn-apps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-cli/",
	"title": "altinn-cli",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-cli-commands/",
	"title": "altinn-cli commands",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-cli-configuration/",
	"title": "altinn-cli configuration",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-cli-implementation/",
	"title": "altinn-cli implementation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-repos/",
	"title": "altinn-repos",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-studio/",
	"title": "altinn-studio",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/analysisanddesign/",
	"title": "Analysis &amp; Design Capabilities",
	"tags": ["architecture", "devops"],
	"description": "Analysis &amp; Design Capabilities are the capabilities needed to analyze needs and design solutions and applications for the Altinn 3 platform.",
	"content": "Analysis Enablement Capabilities Requirement Capture Requirements are gathered through:\n input on Github talks with organization  For some pilots, we choose to create larger epics on Github to group requirements.\nSome example issues are\n The issue for supporting Sirius App for tax department The issue for supporting NSM POB  See development application components to get an overview of the tools and applications we use.\nUser story Definition The DevOps team has the capability to define user stories in our GitHub repository. See all user stories.\nRequirement Validation Product owners and architects together with the teams are responsible for validation of requirements.\nRequirement Traceability Github keeps a full history on the different issues.\nPrototypes, Mock-Ups \u0026amp; Storyboarding The devopsteam has the capability to create prototypes.\nSee development application components for tools used.\nDesign Enablement Capabilities UI Design Enablement We use Figma to design the UI elements.\nData Modeling \u0026amp; Design Capability The devops team has the capability for data modelling and design.\nSee development application components to get an overview of the tools and applications we use.\nArchitecture Design Enablement Architecture design is presented on this site using Markdown and Visio.\nApplication Design Enablement Application design is presented on this site using Markdown and Visio.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/api/",
	"title": "api",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/api-expose/",
	"title": "API expose",
	"tags": ["api"],
	"description": "Apps created in Altinn Studio can be exposed as API together with UI, or only as API without any UI.",
	"content": "Each app will have its unique set of APIs. Compared to current API it makes it possible to create APIs that have documentation that is target for the specific app.\nFor more details, see altinn api.\nSee all issues for API-Expose on Github\n"
},
{
	"uri": "https://docs.altinn.studio/app/testing/local/apitests/",
	"title": "Testing the app APIs locally",
	"tags": [],
	"description": "How to test app APIs locally.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/testing/local/apitests/user/\u0026quot;\u0026gt;API use as an end user\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;When running the application locally one can test the API intended for end user.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/testing/local/apitests/org/\u0026quot;\u0026gt;API test org\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;When running the applications locally along with the local test platform one can test the APIs the application exposes.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/api-use/",
	"title": "API use",
	"tags": ["api"],
	"description": "To be able to support &#34;once-only&#34; it is essensial that it is easy to do API-call from an app to other systems APIs.",
	"content": "For å forenkle dette kan en mulig løsning være å støtte en type gjenbrukbar asset av type \u0026ldquo;API-plugins\u0026rdquo;, som gjør det enkelt å gjøre kall.\nEn ukjent faktor er den kommende \u0026ldquo;API-katalogen\u0026rdquo;, og hvilke egenskaper den vil tilby.\n Enkel bruk av API\u0026rsquo;er. Se på det som gjøres i eBevis. Må bort fra dagens mappere.  Dette er et område som ikke ble sett på i PoC.\nSee all issues related to API-Usage on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/api/apps/",
	"title": "App API",
	"tags": ["api"],
	"description": "The default APIs exposed by apps in Altinn 3.",
	"content": "Overview The features documented here are the default features of any app created based on the app template in Altinn Studio. Application owners are free to make changes to this, but it is probably safe to say that removal of features will be extremly rare. Any app with changes to its API should have its own documentation published by the application owner.\nAll app API endpoints have the same URL base path that will vary based on application owner and application name.\nTest environment (TT02)\nhttps://{org}.apps.tt02.altinn.no/{org}/{appname} Production\nhttps://{org}.apps.altinn.no/{org}/{appname} The URL identifies the application owner specific hostname using the short name org, and the identificator of the app consisting of both the application owner short name and the name of the app; org/appname.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/apps/metadata/\u0026quot;\u0026gt;App metadata\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The app API to get metadata information for the app.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/apps/instances/\u0026quot;\u0026gt;Instances\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The app API to work with instances of an app\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/apps/data-elements/\u0026quot;\u0026gt;Data elements\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The app API to work with the data elements associated with an instance.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/apps/stateless-data-elements/\u0026quot;\u0026gt;Stateless data elements\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The app API to work with stateless date elements not associated with an instance\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/apps/process/\u0026quot;\u0026gt;Process\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The process API endpoints to lead an instance through the defined process.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/apps/validation/\u0026quot;\u0026gt;Validation\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The validation API endpoints for instances and data elements.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/apps/spec/\u0026quot;\u0026gt;OpenAPI (swagger) for Apps\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/app/",
	"title": "Application construction components App",
	"tags": ["architecture"],
	"description": "Description of the application construction components for the app developed in altinn studio.",
	"content": "The App developed in Altinn Studio is currently based on a ASP.NET application template that contains backend and frontend components.\nThe app developer modifies and enhances the app with changing code and configuration in Altinn Studio or external devlopment tools like Visual Studio Code.\nThe application is built and deployed as a Docker container in a Kubernetes Pod to a Kubernetes cluster. See deployment architecture for deployment details.\nIn the future Altinn Studio will support apps based on different templates. Currently we support the below template(s).\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/app/app-backend/\u0026quot;\u0026gt;Application construction components App Backend\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the application construction components for App Backend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/\u0026quot;\u0026gt;App Frontend Application Architecture\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the Application architecture for App-Frontend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-apps/app/",
	"title": "Solution-specific application components for App based on ASP.Net template",
	"tags": ["architecture", "solution"],
	"description": "Description of the Altinn Studio solution",
	"content": "Functionality in Altinn Apps are located in the Apps deployed to the Altinn Apps functionality.\nThis functionality depends on what kind of application template the app is based on and what the app developer have added in addition.\n\nInstanstation The app has instansiation functionality that presents the user for a list over alternative parties that he can select to instansiate a app for.\nThe app developer can add instansiation controll that veriy the type of party selected.\nHe can also add instansiation validation logic that can check anything.\nFormfilling Formfilling renders the UI designed in Altinn Studio and lets the user input data\nProcess handling The app handles a defined process hand moves the app ahead in process depending on the task defined in the process. Currently it is limited to only data tasks\nReceipt When process is completed the user is shown a receipt.\nValidation Application developers can add validaiton logic to the app. User of the app will then gets it data validated and get error messages if the data is not valid.\nCalculation Application developers cann add calculation logic to the app. Users of the app will then get calculated data based on data inputed or prefilled\nPrefill Application developers can configure register and profile prefill. This means that the app will take values from register and profile and set them to the defined field in the datamodel.\nThe user will then experience that known fields of data about him or the choosen party is already filled out in the datamodel for the app.\nApplication developers can also add custom logic that retrieve prefill data from other api\u0026rsquo;s outside Altinn. This logic is run when app is instansiated.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/",
	"title": "App",
	"tags": ["altinn-apps"],
	"description": "Description of the app created in Altinn Studio and that is deployed to Altinn Apps.",
	"content": "The App is created, designed and build in Altinn Studio and deployed to Altinn Apps.\nCurrently there is only one \u0026ldquo;App Template\u0026rdquo; that is used, but in future the App could be based on different types of templates and even different types of frameworks.\nThe App template contains functionality for API, process handling, GUI, and many other features making it easy for the developers to create a Apps to support different types of functional needs.\nThe current version contains support for simple user needs, but the platform and the app templates will get more functionality in the future.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-apps/app/app-api/\u0026quot;\u0026gt;App API\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the APIs exposed by an app created in Altinn Studio.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-apps/app/apptemplates/\u0026quot;\u0026gt;App templates\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Altinn Apps architecture support that applications can be buildt based on many different framworks/templates.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-apps/app/features/\u0026quot;\u0026gt;Features\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of features in App\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-apps/app/frontend/\u0026quot;\u0026gt;Frontend\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the optional app frontend created in Altinn Studio and that is deployed to Altinn Apps.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-apps/app/processhandling/\u0026quot;\u0026gt;Process handling\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the process handling capability of Apps created in Altinn Studio.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/app-api/",
	"title": "App API",
	"tags": ["altinn-apps"],
	"description": "Description of the APIs exposed by an app created in Altinn Studio.",
	"content": "NOTE: Work in progress. Stuff will change.\r\rAPI\u0026rsquo;s have always been important to the Altinn platform. About 50% of all data going throug Altinn to organisations are coming from end user systems implementing Altinn APIs\u0026rsquo;s (SOAP and REST).\nMore than 100 different vendors of different types of applications integrates with Altinn\u0026rsquo;s APIs and submits data for different apps.\nIn addition mobile apps and external governmental portal consumes Altinn APIs to allow users to use services outside the Altinn Portal.\nOrganisations also have seperate APIs to interact with the apps. The below figure shows the different consumers of the API\u0026rsquo;s and show that consumers both interact with the app APIs and the shared platform APIs.\nDownload as Visio.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-apps/app/app-api/eus-rest/\u0026quot;\u0026gt;REST-API for End User Systems\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the REST APIs for end user systems.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-apps/app/app-api/org-rest/\u0026quot;\u0026gt;REST-API for orgs\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the API for organisations (orgs).\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/app/app-backend/",
	"title": "Application construction components App Backend",
	"tags": ["architecture", "app-backend"],
	"description": "Description of the application construction components for App Backend",
	"content": "In this app template the App Backend is based on ASP.NET Core and is a Web Api application.\nThe App Backend exposes REST-Api\u0026rsquo;s consumed by a optional App Frontend and/or external systems / mobile apps. The structure of the API\u0026rsquo;s is documented here\nThe diagram below show how the code is structured in different parts.\nAltinn.App.Api The REST-APIS are implemented in different web-api-controllers and uses attribute based routing to identify the correct operation. The web-api controllers are implemented in a library called Altinn.App.Api and is published to Nuget.\nThe app template is configured to use this nuget package.\nAltinn.App.PlatformServices Platform services are services that are configured in startup on the app and with help of dependendency injection is available to the API controllers and other code in the app. The services are implemented in a library called Altinn.App.PlatformServices and is published to Nuget.\nAltinn.App.Common In common functionality to read configuration from the docker drive is implemnted and other common functionality. The common functionality are implemented in a library called Altinn.App.Common and is published to Nuget.\nApp logic The app logic contains the custom application code that a app developer has generated/created in Altinn Studio or in third party development tools like Visual Studio Code.\nDatamodel The data model in an app is defined as an XSD. From the XSD it is generated a C# representation of that model.\nIn app backend all data is deserialized/serialized from/to this model when communication with frontend/external systems.\nAll logic in the app will typical be related to the datamodel. In the future we will support apps with multiple data models.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/app/app-backend/applogic-events/\u0026quot;\u0026gt;AppLogic events\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The app backend has a defined AppLogic event model that can be used by the app developer to control when logic in the app will run.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/app/app-backend/process/\u0026quot;\u0026gt;App Process\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the process handling of App Backend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/appdeploy/",
	"title": "Application build &amp; deploy capabilties",
	"tags": ["architecture"],
	"description": "Application developers using Altinn Studio to create Applications have access to build &amp; deploy capabilties",
	"content": "Altinn Apps is the solution where all the apps developed in Altinn Studio is deployed. The following diagram shows the deployment architecture for Altinn Studio together \u0026amp; Altinn Apps.\nDownload as Visio.\nContainer Orchestration by Kubernetes Each app created in Altinn Studio is deployed to Altinn Apps as separate applications running in Docker Containers. The containers will be orchestrated by Kubernetes.\nThe Altinn App is deployed as sets of Docker Containers defined as Kubernetes Deployment. The deployment will be in the organisation\u0026rsquo;s own Kubernetes Cluster.\n All organisations will have their own Kubernetes Cluster.\n Each set of Kubernetes Deployment will be scaled based on the usage of the app. Scaling of the Deployment will be configurable in the Kubernetes Deployment and automatically scaled using Kubernetes Replicaset.\n Kubernetes Clusters and Altinn Apps can do horizontal autoscaling. It is currently not decided if and how autoscaling will be used.\n The Altinn App in Kubernetes will be configured as a Kubernetes Service which consist of the latest runtime application available when building the Altinn App and the Altinn App with related code and configuration.\nKubernetes Clusters per Organisation In Altinn Apps, every organisation will have their separate Kubernetes Cluster in each environment. The Kubernetes Cluster architecture will be the same in test and production environment This will support scaling tailored each organisations needs and separation of each organisation\u0026rsquo;s app.\nSecrets Pods, where the Altinn App are delpoyed, gets access to secrets during deployment via HELM charts.\nKubernetes Namespace It\u0026rsquo;s not planned to use namespaces.\nKubernetes Service Each Altinn App will be a Kubernetes Service.\nNetworking Sub domains Each organisation will have their own sub domain \u0026lt;org\u0026gt;.apps.altinn.no.\nPath for the Altinn App \u0026lt;org\u0026gt;.apps.altinn.no/\u0026lt;app\u0026gt;\nEncrypted traffic and network policy There is ongoing analysis related to this topic. Click here to find more information on Github.\nRouting / Ingress-Controller Routing in Kubernetes is handled by an Ingress-Controller called Traefik.\nTo be able to route traffic to the correct Kubernetes Service (Altinn App), each container is tagged to a specific Altinn App. The routing mecahnism routes to the correct Kubernetes Service based on the url containing the Altinn App parameter.\nAPI Proxy API Proxy is needed for controlling credentials and outbound firewall rules from the platform. This might be handled by the API Managment software. Needs Analyzis\nAPI Management The platform requires API management software to handle SLA ++. Needs Analyzis\nApp build and deploy process Building the Altinn App with \u0026ldquo;app specific\u0026rdquo; files from Gitea, creating a \u0026ldquo;App Image\u0026rdquo;, deploying to Azure Container Registry and telling Kubernetes to deploy app.\nBuild process (Pipeline)  Downloading files from app repository in Gitea Building Docker base image with Dockerfile. This includes \u0026ldquo;Dotnet build\u0026rdquo; for C# files from Gitea. \u0026ldquo;Dotnet build\u0026rdquo; is executed on the Runtime Base Image reusing previous.  Docker Pull: Altinn/Runtime Base Image with SDK from ACR. This makes the AltinnApp build faster. Clone and build code from Gitea inside Altinn-Runtime Base Image. Docker Pull: Microsoft/DotNet AspNetCore. Copy Altinn Runtime, AltinnApp Build files and App Metadata/Resources from Gitea.   Publish to ACR.  The build and deploy app pipeline is controlled by different flags :\n APP_COMMIT_ID - used as id for the app image and should be used to reference the repository at that commit state APP_DEPLOY_TOKEN - used to identify user when cloning repository (is only really necessary for private repositorys but is mandetory) APP_ENVIRONMENT - represent which environment to deploy to (not yet used) APP_OWNER - the owner of the repository APP_REPO - the name of the repository to clone and use to create the app GITEA_ENVIRONMENT - the gitea environment to clone the repository from should_build - flag that can be used if one only wishes to deploy a app and not build it (default set to true) should_deploy - flag that can be used if one wishes to deploy an app (default set to false)  Triggered by:\n \u0026ldquo;Deploy\u0026rdquo;-button in Altinn Studio.  Manual deployment of Altinn App A manual deployment of the Altinn App requires access to you Kubernetes Cluster and knowledge about Helm.\nIf you want to configure the Helm chart and do a manual deployment you can find the Helm chart in your repo in the \u0026ldquo;deployment\u0026rdquo; folder.\nPlatform Cluster The platform cluster in Altinn Studio Apps will host common application like DataServices.\nPlatform integration The platform integration is a new application hosted in the existing infrastructure. It exposes REST-APIs for Profile, Register, Authorization, Intermediary and Authentication. These are services not part of the Altinn Platform (yet) and everyone planning to run the Altinn Platform would need to implement their own components that support. (?)\nData services The data services application is the application responsible exposing data related functionality to the Altinn App. This container will be scaled based on need.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/appdevelopment/",
	"title": "Application development capabilities",
	"tags": ["architecture"],
	"description": "Application development capabilities are capabilites that is used for developing applications in Altinn Studio",
	"content": "Code Creation Altinn Studio lets the application developer create custom code in the Application.\nWith help of third party IDE like Visual Studio Code , the developer can create code from local development machine.\nProcess definition The process defintion is defined in a BPMN 2.0 file located in the app repository. To change the process the app developer need to modify the BPNM file manually.\nLater Altinn Studio will support creating and updating process through GUI.\nSource control In Altinn Repository the app developer can check in their source code for the different apps.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/",
	"title": "App Frontend Application Architecture",
	"tags": ["architecture"],
	"description": "Description of the Application architecture for App-Frontend",
	"content": "App Frontend is a Single Page Application built using React + Redux.\nThis application is responsible for presenting a UI to the end user. The application consists of several different features that are responsible for handling the UI for different steps in the workflow.\nThe app frontend is automatically built and deployed to a CDN, and is versioned using semantic versioning. Each App developed in Altinn Studio will reference the app frontend, which will be served by the CDN. By default, an app will reference the latest major version that was available when the app was created. Each app may reference a specific version, so that there can be different versions of the app frontend for two different deployed apps.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/react/\u0026quot;\u0026gt;React \u0026amp;#43; Redux architecture\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;High-level description of React \u0026amp;#43; Redux architecture used in app frontend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/configuration/\u0026quot;\u0026gt;App Frontend configuration files\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the different configuration files used by app frontend\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/features/\u0026quot;\u0026gt;App frontend features\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;High-level description of app frontend features\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/structure/\u0026quot;\u0026gt;App frontend code structure\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;High-level overview of how the app frontend is structured\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-apps/app/app-frontend/rendering/\u0026quot;\u0026gt;App frontend rendering and flow\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;High-level overview of what happens when the app frontend is rendered\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/code-editor/",
	"title": "Create AppLogic with code",
	"tags": [],
	"description": "App behavior can be controlled by code.",
	"content": "Code Editor for back-end logic A developer can edit logic that will be part of app-backend when application is running in Altinn Apps.\nSee Getting started to se how to do that.\nCode Editor for front-end logic A developer can edit logic that will run in the browser for a given app.\nSee Getting started to se how to do that.\nSee github issues related to logic \u0026amp; rules.\n"
},
{
	"uri": "https://docs.altinn.studio/community/roadmap/studio/appowner/",
	"title": "App owner functionality in Altinn 3",
	"tags": [],
	"description": "This is the functionality available for app owners in Altinn 3, and some of the larger planned changes.",
	"content": "Launched functionality For information on How to use the functionalities described here, see the Altinn Studio and API user documentation.\n\r\rGUI based app development In the Altinn Studio GUI you can do the following:\n Create (and retrieve) an app Upload a data model Add and edit texts Create a simple form (one or more pages), which links elements, texts and data model Add and edit rules for dynamics (Note! Coded as JavaScript) Deploy app to test and production environments  Code based app development By downloading the app code (through Git) locally (or by editing the app files in the repository view) you can do a wide variety of changes to the app. This includes standard functionality for:\n Making rules for validation and calculation Add prefill Add lookup to external APIs Edit the process/workflow of the app Edit the authorisation rules for the app, and make custom logic for instantiating Make custom events  Test locally Once you have your app code locally, you can also take advantage of a local test enviroment for most types of app testing.\nIntegration with app owner Altinn 3 has standardised APIs that the app owner can use to upload and download data. For downloading Altinn 3 relies on the app owner polling for information and downloading data (pull). In addition app owner can use the app APIs to instantiate or change the data and/or status for instances.\nYou can reduce the amount of polling by using push events - where app owner can be notified when there is data available for download (Q2 2021) (#4728) ✔️\nTo use the APIs as an app owner, you need to authenticate using Maskinporten.\nMaintaining apps App owners get access to monitoring their apps, so they can keep track of how they are functioning. See also the pages about app maintenance.\n Let developers easily copy an old app into a new one (Q3 2021) (#5923) ✔️  Upcoming functionality Altinn 3 is in constant development, and functionality is released continuously. The backlog is revised eight times a year, and minor changes may occur between these revisions. In general, the further into the future a functionality is planned, the less certain the time frame is for said functionality.\nChanges described in italic are regarded as ideas, and if they are to be developed has not yet been decided.\nGUI based app development For all upcoming functionality, we assess if it\u0026rsquo;s suitable for solving i the GUI. At some point (2023 or later) we will intensify the effort to make more functionality available through GUI.\n Support branching in Altinn Studio (Q4 2021) (#985)  Data modelling The dependency on data modelling having to be done in an external tool will be removed. Some highlights from the plans for data modelling in Altinn 3 is:\n To work with a data modeli in a GUI (Q4 2021) (#5551) Integrations with Felles datakatalog (Q1 2022) (#3811) To get an auto-generated data model from the app GUI you build To get an auto-generated draft for an app GUI from the data model  Maintaining apps We wish to make app owners able to maintain their apps themselves in Altinn 3. To achieve this we will (among other things):\n Make it possible to decomission an app (Q4 2021) (#3717) Add a Web analysis tool for the apps  Integration with app owner Pull of data will stay as the main pattern for downloading data as an app owner, but a few exceptions will come:\n Possibility to use eFormidling as an interface to get data sent from Altinn to app owner (Q4 2021) (#4788) Split of data - multiple app owners can receive data from the same app (Q3 2022) (#4274)  "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/app-parameters/",
	"title": "App Parameters",
	"tags": ["todo"],
	"description": "The application contain different parameters that controlls the behaviour.",
	"content": "The different parameters can be configured either in Altinn Studio UI or through modifying the configuration files in the application repository.\nSupported App Parameters  party type requirements  Not (yet) supported App parameters  Valid to Valid from  See all issues related to App-Parameters on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/apptemplates/",
	"title": "App templates",
	"tags": [],
	"description": "The Altinn Apps architecture support that applications can be buildt based on many different framworks/templates.",
	"content": "These are the current supported templates:\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-apps/app/apptemplates/asp.net/\u0026quot;\u0026gt;ASP.NET Web Application Template\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of ASP.NET Web based App template for Altinn Apps\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/tags/app-backend/",
	"title": "app-backend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/app-structure/",
	"title": "app-structure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/app-csproj/",
	"title": "App.csproj",
	"tags": ["todo"],
	"description": "Description for App.csproj file.",
	"content": "Summary This is a c# project file that is generated when a new app is created. This project file is placed in the root of the app folder. This project file helps in compiling the app.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/application-metadata/",
	"title": "applicationmetadata.json",
	"tags": ["app-structure", "todo"],
	"description": "Description of format for application metadata.",
	"content": "Overview applicationmetadata.json describes meta information of an application. This is automatically generated on creation of a new application. This is located at /App/config/applicationmetadata.json in the app repo.\nFormat \u0026lsquo;applicationmetadata.json\u0026rsquo; has the application information such as application id, version information, organisation that owns the application, workflow information, form and attachment information.\nApplication Metadata Format Below is an example of application metadata json format\n{ \u0026#34;id\u0026#34;: \u0026#34;Brreg-testappmetaattachment\u0026#34;, \u0026#34;versionId\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;applicationOwnerId\u0026#34;: \u0026#34;Brreg\u0026#34;, \u0026#34;createdDateTime\u0026#34;: \u0026#34;2019-05-23T20:26:29.2001617Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;lastChangedDateTime\u0026#34;: \u0026#34;2019-05-23T20:26:29.2002739Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb-no\u0026#34;: \u0026#34;RF-1134 Test form title\u0026#34; }, \u0026#34;validFrom\u0026#34;: \u0026#34;2019-05-23T20:26:29.2001617Z\u0026#34;, \u0026#34;validTo\u0026#34;: \u0026#34;2020-05-23T20:26:29.2001617Z\u0026#34;, \u0026#34;WorkflowId\u0026#34;: null, \u0026#34;maxSize\u0026#34;: 0, \u0026#34;forms\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;description\u0026#34;: null, \u0026#34;allowedContentType\u0026#34;: [ \u0026#34;application/xml\u0026#34; ], \u0026#34;maxSize\u0026#34;: 0, \u0026#34;maxCount\u0026#34;: 0, \u0026#34;shouldSign\u0026#34;: false, \u0026#34;shouldEncrypt\u0026#34;: true }, { \u0026#34;id\u0026#34;: \u0026#34;74696338-540e-47e3-8f04-0996cc2bb239\u0026#34;, \u0026#34;description\u0026#34;: null, \u0026#34;allowedContentType\u0026#34;: [ \u0026#34;application/octet-stream\u0026#34; ], \u0026#34;maxSize\u0026#34;: 3, \u0026#34;maxCount\u0026#34;: 3, \u0026#34;shouldSign\u0026#34;: false, \u0026#34;shouldEncrypt\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;0cc6ee16-7fbf-45b3-9e00-2fda8668ab31\u0026#34;, \u0026#34;description\u0026#34;: null, \u0026#34;allowedContentType\u0026#34;: [ \u0026#34;application/pdf\u0026#34;, \u0026#34;text/plain\u0026#34;, \u0026#34;text/css\u0026#34; ], \u0026#34;maxSize\u0026#34;: 5, \u0026#34;maxCount\u0026#34;: 2, \u0026#34;shouldSign\u0026#34;: false, \u0026#34;shouldEncrypt\u0026#34;: false } ] } The meta data for attachment is updated in the application metadata when a fileupload component is dragged in the ui editor. When an application is deployed to a selected environment, the application metadata is read from the applicationmetadata.json and populated in the cosmos database.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/app/app-backend/applogic-events/",
	"title": "AppLogic events",
	"tags": [],
	"description": "The app backend has a defined AppLogic event model that can be used by the app developer to control when logic in the app will run.",
	"content": "Events are mapped to functional events triggered by end users or systems. This functional events are typical trigged by a API-call from App Frontend or other systems/applications using the API\u0026rsquo;s in App Backend.\nSome AppLogic Events happens in more than one functional event.\nAppLogic Events AppLogic events are defined in the IAltinnApp interface.\nThe following AppLogic Events are currently defined\n InstantiateValidation - Event where app developer can add custom code to validate instantiation. DataCreation - Event where app develoepr can add custom code to prefill data RunProcessDataRead - Where app developer can add custom data code for calculation or population of data when data is read from app RunProcessDataWrite - Where app developer can add custom data code for calculation or population of data when data is saved to app (POST/PUT) Calculation - Event where app developer can add custom calculation code OBSOLETE. Validation - Event where app developer can add custom code to validate the instance/data OnStartProcess OnStartProcessTask CanEndProcessTask OnEndProcessTask OnEndProcess  Functional events Below, different functional events, are listed. For each functional event there is described which AppLogic events that is triggered.\nInstansiation Instansiation is when the end user, end user system or organisation instansiates a new app instance. Events connected to instansiation can contain logic that can prefill the datamodell or validate if the user or system is allowed to instansiate that app.\nThe below sequence diagram shows how the app-logic events are combined with other logic for a requesting to start an app in the app catalogue.\nLoad form data (GET) Loading of form data can be performed by the App Frontend or an end user system that needs to get the latest updated form data.\nThe following events will be performed\nStoring of form data (POST) Update of form data can happen when frontend (REACT app) sends data to backend or a end user system does the same. When an update happend there is defined serveral events that is performed in a given order. The app developer can implement logic related to this event that could perform calculation, validation, API calls and much more.\nThe API for updating form data support different modes\n Create - Data should be stored as a new form instance Complete - Data is complete and the app should move ahead in the workflow Calculate - Logic in the calculation event should be performed and the updated form data should be returned Validate - Calculation will be performend and then validation logic is runned and any validation errors is returned. Update - Calculation is runned before data is stored in to the database.  The order of events are:\nUpdate form data (PUT) Update of form data happens when the frontend or external end user systems/applications want to update a existing form connected to an app instance\nThe following events happens:\nValidation Validation is triggered from App Frontend or from end user system.\nThe below sequence diagram shows the application events:\n"
},
{
	"uri": "https://docs.altinn.studio/community/devops/teams/apps/",
	"title": "Apps",
	"tags": [],
	"description": "Team Apps",
	"content": "Responsibilities  Roadmap and plans for migration of existing services Mapping out and understand existing service owners services, needs and requirements Follow up and implement migration projects with service owners Specify needs and requirements towards the Studio og Platform teams  \r"
},
{
	"uri": "https://docs.altinn.studio/tags/apps/",
	"title": "apps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/",
	"title": "Architecture",
	"tags": [],
	"description": "Altinn Studio, Altinn Apps and Altinn Platform has a modern cloud native architecture. This documentation describes everything from the requirements affecting the architecture to the defined capabilities and the components that provides them.",
	"content": "How is the architecture documented? The non functional and functional requirements have given input to which devops and runtime capabilities that is needed in the solutions. It also have given input which type of components that is needed to implement the capabilities.\nThe Architecture Principles and Architecture Patterns has been decided based on requirements and other goals with the new solutions. The Principles and patterns has been deciding factors how the components implements the capabilities needed.\nThe diagram below show the relationships and you can click the elements to read more about each architecture artifact or select in menu or section below diagram.\n\nDownload as Visio.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/requirements/\u0026quot;\u0026gt;Architecture Requirements\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Functional and non-functional requirements for the different solutions has been important to shape the architecture.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/principles/\u0026quot;\u0026gt;Architecture Principles\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Architecture Principles are guidelines for the construction of the architecture in Altinn 3.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/patterns/\u0026quot;\u0026gt;Architecture Patterns\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The architecture defines some patterns that is reused accross the different solutions.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/\u0026quot;\u0026gt;Architecture Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Architecture Capabilities are the logical building blocks of the solutions. They have been grouped into Development \u0026amp;amp; Operations (DevOps) Capabilities and Runtime (Execution) Capabilities.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/\u0026quot;\u0026gt;Architecture Components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Architecture Components describes the application, data, platform and infrastructure components that provides the capabilities.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/tags/architecture/",
	"title": "architecture",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/arkitektur/",
	"title": "arkitektur",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/apptemplates/asp.net/",
	"title": "ASP.NET Web Application Template",
	"tags": ["altinn-apps"],
	"description": "Description of ASP.NET Web based App template for Altinn Apps",
	"content": "This template is based on a ASP.NET Core Web application with REST APIs\nIt is integrated with Altinn Platform making it easy to utilize the functionality provided in Altinn Platform like storage, authentication, authorization and other components.\nFor web applications that need a web based UI, it has a React based frontend that can be configured in Altinn Studio.\nASP.NET Core is a cross-platform, high performance, open-source framework for building modern cloud-based, Internet-connected application.\nTogether with the added Altinn functionality in the template, it is a effective platform to build applications powered by Altinn Platform.\nApplications based on this templates are buildt as Docker Containers and hosted in Kubernetes.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/asynchronous-programming/",
	"title": "asynchronous-programming",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/api/authentication/",
	"title": "Authentication API",
	"tags": [],
	"description": "Description of how systems and service owners can use Maskinporten or ID-porten to access APIs in Altinn 3.",
	"content": "\rAutentication with enterprise users\rDescription how to use enterprise users in Altinn 3\n\rAuthenticate with Maskinporten\rDescription of how the service owner\u0026#39;s systems can use Maskinporten in order to get access to APIs.\n\rAuthenticate with ID-porten\rDescription of how systems can use ID-porten to get access to APIs in Altinn 3.\n\rDelegate API Access to a Supplier\rDescription of how service owner can delegate API accesses (scopes) to a subcontractor.\n\rOpenAPI (swagger) for Authentication\r\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/security/authentication/",
	"title": "Authentication Capabilities",
	"tags": ["architecture", "security"],
	"description": "The different solutions need different types of Authentication capabilties to support the different users and systems.",
	"content": "Altinn Studio Developer authentication The App Developer using Altinn Studio will authenticate with help of the build in account in Gitea.\nThe designer part of Altinn Studio integrates with Gitea so it identifies the user logged in in Gitea.\nGit repo authentication When users tries to update the Git-repo where source files for the app is stored it needs to authenticate against the Git-repo.\nThis can be done through using a App Key generated in Gitea or using the username/password for the Gitea account.\nAltinn Apps / Altinn Platform In Altinn Platform and Altinn Apps there is deployed applications and components that need to be able to authenticate users and systems accessing them.\nThis is needed when resources requiring authentication and authorization is requested.\nThis will typical be API\u0026rsquo;s that expose, or updates data owned by a specific party (person or organization).\nOverall Authentication architecture There are several requirements to an authentication architecture for Altinn Apps / Altinn Platform. The most important is\n Needs to be supported by different types of application frameworks Needs to support end users accessing Altinn Apps / Altinn Platform through a web browser running the REACT application Needs to be safe against XSS attacks. Needs to support scenarios where users are accessing through external systems or mobile apps Needs to support systems from org(s) that is authorized to perform application operations. Apps should not have access to secret so they can create their own token. Needs to support passing the identity to api\u0026rsquo;s that are consumed by Altinn Apps.  Since Altinn Platform will in the future support applications created by different frameworks (Java/.NET/Node.js, ++) it is important that the authentication mechanisms are supported by different types of platforms.\nJSON Web Token are an open, industry standard RFC 7519 method for representing claims securely between two parties and are chosen as the bearer of information about users and systems.\nThe JWTToken is created in an asymmetric process where the Authentication component will use a private key from a certificate to sign the token, and the different apps and components that needs to verify it will use the public key. See JWT Format for details on the algorithm used.\nThe illustration below show how JWT flows between the different parts of the solutions.\nDownload as Visio.\nEnd user using app frontend For end user accessing the app through browser that loads app frontend, the authentication mechanism is based on using a protected cookie containing a JWT Token. ( HttpOnly and Secure)\nThe reason for putting the JWT token in the cookie for this scenarious is to protect against XSS attacks.\nIf the REACT application stored the JWT token as part of browser memory (REDUX), XSS attacks could potential expose those tokens. When storing the tokens in secure cookies those tokens are not available to any JavaScript code running in the browser.\nThe cookie with the JWT token is created by Authentication component in the Altinn Platform solution.\nThe React application would need to refresh the token at given interval or the token will expire. To refresh a cookie token, the token API in Platform needs to be called.\nOrg systems accessing app and Platform APIs Org (the entity owning the application) will have seperate API\u0026rsquo;s in a spp to perform operations on. They are authenticated with help of agency system id + password. A API in the authentication component in Altinn creates a JWT token that can be used to authenticate the agency system when calling api\u0026rsquo;s on apps running in Altinn Apps.\nSee Authentication API for details.\nEnd user systems accessing app APIs This solutions is yet to be finalized. The assumption is that the either the organization that own the system is authenticated and have a jwt token containing the organization number for that given organization or that the user using the system is authenticated and the systems send user token with request.\nThis is analyzed in #3291 and #237.\nAuthentication of users in Altinn Apps against Altinn Platform Applications hosted in a Altinn Apps solution would in many cases need to authenticate the end user against the different Altinn Platform components.\nThe solution for this is that the Apps would forward the JWT Token from the bearer token or JWT Cookie to the component that is called. This would be forwarded as a bearer token in the Authorization header in the request against the component.\nThis makes it possible to configure JWTCookie authentication mechanismen to authenticate the end user also in the components.\nAuthentication of Altinn Studio against Altinn Platform To make sure it is only allowed for a Altinn Studio environment to deploy and update applications the calls from designer to platform is authenticated with a access token generated by Designer.\nSee more details in AccessToken.\nAuthentication of Apps and components against Altinn Platform Some components like Register and Profile is limited to be used only by the apps deployed to Altinn Apps or other components in Altinn Platform\nTo be able to enforce this the platform components requires a Access Token identifying the app/component that is calling the Platform component. Each org has their own certificate avaialble in their Kubernetes Cluster.\nThe apps deployed to this cluster has access to this certifcate and generates a JWT token with the needed claims. The platform components has access to the public part of the certificate and are able to validate it.\nSee more details in AccessToken.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/security/authentication/accesstoken/\u0026quot;\u0026gt;Access Token\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;A additional access token are used in the scenarious where we need to authenticate the application or component callin a component in Altinn Platform.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/security/authentication/authentication-api/\u0026quot;\u0026gt;Authentication APIs\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the Authentications API in Authentication Component\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/security/authentication/jwt-format/\u0026quot;\u0026gt;JWT Format\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the JWT Format used in Altinn Studio, Altinn Platform and Altinn Apps.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/security/authentication/oidcproviders/\u0026quot;\u0026gt;OIDC Providers\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Authentication support configuration of multiple OIDC Providers\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-platform/authentication/",
	"title": "Application construction components - Altinn Platform Authentication",
	"tags": ["architecture", "solution"],
	"description": "The authentication component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": "The application runs on port 5040. See full details in dockerfile\nApi Controllers  Authentication : Functionality to convert the different ID-tokens from ID providers OpenID : Contains well known endpoint Organization : TODO. is this needed  Dependencies Authentication component take use of libraries for OpenID connect to create and validate JWT tokens.\nSee full list of dependencies in csproj.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-platform/authentication/",
	"title": "Authentication",
	"tags": ["platform", "authentication"],
	"description": "The authentication component provides functionality to authenticate users and systems accessing Altinn Apps and Altinn platform.",
	"content": "The authentication component is not an ID-provider and only create authentication sessions based on external ID-providers.\nThe authentication component creates JWT tokens with claims about user and system. The claims are based on the authentication information coming from the ID-providers.\nToken exchange for Altinn Portal When a user logs in to the Altinn Portal (Legacy Solution) it gets a Cookie containing information about the logged-in user. This cookie is a propiaritary format for ASP.NET (Full Framework) and can only be understood with application based on .NET Framework having access to the symmetric encryption key.\nThe Altinn Platform is based on .ASP.NET Core and can`t understand the cookie.\nTo allow for a user accessing an App in Altinn Apps or a component in Altinn Platform the current platform will expose an API that can decrypt an ASP.NET cookie and return user information to the Authentication component in Altinn Platform.\nToken exchange for maskinporten Organizations authenticated in maskinporten can exchange their JWT token for a valid Altinn Platform JWT token to be used against Altinn Apps and Altinn Platform.\nToken exchange for ID-porten End users authenticated through ID-porten can exchange their JWT token for a valid Altinn Platform JWT token to be used agains Altinn Apps and Altinn Platform.\nArchitecture See the application solution components for details about the functional components in authentication.\nThe application construction components for details how this component is constructued.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/authentication/",
	"title": "authentication",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/security/authentication/authentication-api/",
	"title": "Authentication APIs",
	"tags": ["architecture", "security"],
	"description": "Description of the Authentications API in Authentication Component",
	"content": "As part of the authentication component, there is some APIs that support authentication of different types of users and systems.\nAPI for SBL Authentication cookie This API creates a JWT Cookie (A cookie with a JWT Token) based on the SBL Cookie created during login in the Legacy SBL solution. This API uses API in the SBL Bridge to verify the cookie and get information about the logged-in user.\nBased on this information this API creates a JWT token with claims about the user (userid, authentication level ++) and sign the JWT token with the private key of Altinn Platform.\nThe login process for a user that wants to access an app in Altinn Apps is described below.\nDownload as Visio.\nExchange API for tokens Altinn supports tokens from different ID-providers, and in the future, it is expected that the list of supported ID-providers will grow.\nTo reduce complexity and increase performance the clients need to exchange the external tokens for an Altinn token.\nIn this way, the different apps do not need to know about all ID-providers and are not required to look up org identification or Altinn userId/partyId that is added to the Altinn token.\nExchanging ODIC token from ID-porten Altinn supports end-users logging in with OIDC in their end user system. (local installation or cloud-based).\nThe end-user-system gets an ID-token and a access-token from ID-porten. This is documentet at ID-porten.\nThe access token is exchanged in the API to an Altinn JWT token containing the needed attributes like userId\nExchanging token from MaskinPorten To authenticate a system like this Altinn Platform requires that the system is registered as a client in Maskinporten for a given org. The org needs also to be given scopes that matches the scopes for the API requested in Maskinporten.\nThis will be given by Altinn to the org.\nThe org system should be given the scope needed by the administrator of org. (done through Maskinporten API described here)\nThe org system would need to request a access token from Maskinporten with the correct scope. This token will be used in the org API in Authentication component in the Altinn Platform to create a new JWT token that can be used for all org apis in Apps and platform.\nDuring the verification process of the Maskinporten JWT token the scope and org is verified.\nDuring this process the Maskinporten token is exchanged to a Altinn token containing information about the authenticated org. This increases performance since org information does not need to be looked up for each request and the different apps and platform components would not need to know about all the different ID-providers supported by Altinn.\nThe below sequence diagram show how this will happen:\nDownload as Visio.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/security/authorization/",
	"title": "Authorization",
	"tags": ["architecture", "security"],
	"description": "The Altinn 3 platform has very powerful and flexible authorization capabilities.",
	"content": "The authorization capabilities are based around ABAC (Attribute-Based Access Controls) and the XACML 3.0 standard.\nThese capabilities include:\n The capability to define wide/narrow authorization policies for apps. Rules can be valid for the whole application or only valid for a subset of resources. The capability to evaluate policies based on a request for a resource The capability to configure authorization policies for API endpoints The capability to enforce decision request (permit or deny) The capability to enrich decision request with needed information The capability to retrieve context information from different sources both regarding resources accessed and subjects doing that. The capability to authorize based on API scopes  Main Concept The following concepts are important\nAuthorization Components The authorization capabilities are provided by the following solution components\n PAP - Policy Administration Point: Where the authorization policies are defined PDP - Policy Decision Point: Where the authorization request is evaluated PEP - Policy Enforcement Point: The component making sure the user/system is authorized before accessing resources PIP - Policy Information Point: Components giving information to PDP about resources and subjects PRP - Policy Retrieval Point: Where the PDP can find the correct policy to use for a request Context Handler - Component adding context information to the decision request so PDP can evaluate a decision request correctly.  These components are described in detail under solution components\nRights In Altinn Apps/Platform a right is permission to act on a given resource. The action performed can be one of some predefined options like read, write and sign but can also be any other action defined on a custom API in the apps. The resource is typical an app instance or part of it where data belongs to a given party (person or organization).\nA user or system gets a right based on rules that describe permissions based on being a specific user or having a specific role.\nPolicy A policy defines one or many rules for a given set of resources. This policy is described as an XACML 3.0 Policy document.\nRule An authorization rule in the Altinn Platform defines who has been given the right to perform actions on a given resource. A rule consists of 5 elements\nResource This describes which resource the rule applies for. Altinn Apps currently supports the following resource types in rules.\n Org - Unique identifier of the organization responsible for the app. App - Application identifier which is unique within an organization. Task - A specific task in the process defined for an app Appresource - A resource for an instance/app that is not mapped to a task. Example: events  Some of the resource types are meant to be used in combination. As an example, you can have been given the right for an app for a given reportee\nSubject The subject in an authorization rule identifies who the rules apply for. In Altinn Apps/Platform the resource can be the following.\n RoleType org  When delegating is supported this would be expanded with\n userid partyid keyroleforpartyid  Action The Action part of the rule defines what type of action that the subject can perform on the resource.\nCurrently, the actions relevant for Altinn Apps and Altinn Platform are listed below. This list will increase over time.\n Read Write Sign Confirm Delete  Condition The condition part of the rule is extra conditions that need to be fulfilled for the rule to be valid. In Altinn Studio we have the following types of conditions.\n Valid To  Obligation An obligation is an obligation that needs to be followed if the user is permitted or denied. In Altinn Apps/Platform this is used to define the minimum authentication level.\nCreation of policies The policies in Altinn Studio Apps is defined when the app developer defines the rules for the app. The policy is deployed together with the App to a given Altinn Studio App environment. See details in Policy Administration Point in Altinn Studio.\nIn Altinn II end users can also create policies/rules. This happens when:\n When the user creates a local role that contains rights that users have through other roles When delegating single rights to a user or organization.  The rules is slightly different since rules defined by the end user have different subjects and can be defined for a more limited resource.\nThis will be supported in Altinn 3. See Github issue 1258\nAltinn Studio policy/rules User defined policy/rules Roles Altinn Studio Apps will retrieve roles from Altinn II Administration. This will later could be expanded to other sources for roles.\nScopes API Scopes are used in the solutions in some uses cases where organizations are authenticated through the external ID-Provider \u0026ldquo;MaskinPorten\u0026rdquo; or when end users are accessing the apps through end-user-systems.\nThe scopes are used to control what the user can do on behalf of the user/organization.\nScopes are always used together with the authorization rules for the specific app.\nDefined Scopes  altinn:instances.read : Give system the right to access API for reading instances altinn:instances.write : Give system the right to access API for writing to instances altinn:serviceowner/instances.read : Give orgs the right to access API for reading instances altinn:serviceowner/instances.write : Give orgs the right to access API for writing to instances  The Future The below show the future of Authorization Component. Work in progress\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-platform/authorization/",
	"title": "Application construction components - Altinn Platform Authorization",
	"tags": ["architecture", "solution"],
	"description": "The authorization component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": "The authorization component consists of several solution components.\nFor a functional description see details in application solution components.\nThe diagram below shows where the different solution components are located\nThe Authorization component is constructed as a asp.net MVC application exposing API. The API communicates with the different solution components\nThe below diagram shows the data flow including PEP.\nDecision API The decision API is the API that orchestrates the decision process.\nThe API supports both XACML XML and XACML Json Profile request.\nSee Decision Controller for code details\nPolicy Decision Point - PDP This is implemented as a separate class library This is published to Nuget.\nThis library contains all models defined for XAMCL XML/JSON and utility methods to handle XACML documents.\nThe Policy Decision Point is implemented in this class.\nIt expects both decision request and policy to be inputed.\nPolicy Retrieval Point - PRP Policy Retrieval Point component that stores authorization policies for applications.\nThe policies are stored as XACML (xml) documents in a blob storage.\nWhen an authorization request is received to PDP, PRP identifies the correct policy document in the policy storage.\nSee code.\nPRP is configured as a service in the Authorization Component and can easily be replaced with other implementation.\nContext Handler Context handler enriches the authorization request with information about the user and the resource requested. Roles are retrieved from SBL Brigde while resource information is retrieved from Instances in storage.\nSee code.\nContext Handler is configured as a service in Authorization Component and can easily be replaced with other implementation.\nPolicy Information Point - Roles PIP for roles, calls SBL bridge to get the rules a user or system has for a resource party.\nThis is implemented as a service. See implementation\nThis can easily be replaced with other implementation.\nPolicy Information Point - Party This is implemented as a service. See implementation\nThis can easily be replaced with other implementation.\nPolicy Information Point - Resources PIP for resoruces checks storage for instance information.\nThis is implemented as a service. See implementation\nThis can easily be replaced with other implementation.\nApi controllers  Decision Policy Roles Parties  Dependencies See csproj.\nHow to use Altinn Platform Authorization in your setup The PDP does not contain any Altinn specific functionality. What you need to implement in your setup is\nContext Handler You would need to write your own context handler functionality that undestand your domain. Meaning it would need to understand what kind of enrichment that is needed. It the simplest scenarious this does not need to do anything if the authorization request contains all information needed by PDP\nPRP You need to implement funcionality to identify the correct XACML Policy. In Altinn we have different policies for the different apps, but in some simple scenarios you would only need to reference a static XACML Policy.\nPIP If context handler need to enrich\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-platform/authorization/",
	"title": "Authorization",
	"tags": ["platform", "authorization", "todo"],
	"description": "The authorization component contains a highly flexible policy decision point and policy retrieval point to authorize access to applications and Altinn platform components.",
	"content": "The authorization component as based on XACML 3.0 and support both simple and complex policies defined for applications.\nThe Policy Decision Point\nThe Policy Retriavel Point identifes the correct policy for a request\nThe context handler get all information needed to authorize the request.\nThe authorization component consist of a Policy Decision Point (PDP), Policy Retriaval Point (PRP) and is integrated with other external Policy Information Points.\nApps integrated with PDP to authorize access to applications.\nIt also provides list for possible parties that a user or organization could represent.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/authorization-rules/",
	"title": "Set Authorization Rules",
	"tags": [],
	"description": "Altinn Studio let the developer set the authorization requirements for a App",
	"content": "The authorization rules are controlled by a XACML 3.0 Policy that is part of the repository.\nThe rules in policy can be configured with a regulard text editor.\nSee issues related to authorization on Github\n"
},
{
	"uri": "https://docs.altinn.studio/tags/authorization/",
	"title": "authorization",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/process/auto-delete/",
	"title": "Automatic deletion",
	"tags": [],
	"description": "An application can be configured to delete all traces of it when the process is over.",
	"content": "If you want to limit the end user\u0026rsquo;s access to an instance or data after submitting it can be done by configuring automatic deletion. Practically the resource will be made inaccessible to the user after submission, while the service owner still has access according to the application\u0026rsquo;s authorisation rules.\nIf the end user attempts to access a hard deleted resource with a direct link they will recieve 404 - Not found in response. The resource will also not be visible in the message box or be listed in any API-responses.\nWhen the service owner confirms that the instance has been recieved on their end (complete confirmed), the instance is marked as ready for deletion and will be removed from the Altinn database in 7 days.\nThe configuration for automatic deletion is done in applicationmetadata.json with the flag \u0026quot;autoDeleteOnProcessEnd\u0026quot;: true.\nAutomatic deletion of instances Example of configuration in applicationmetadata.json for instances:\n{ \u0026#34;id\u0026#34;: \u0026#34;ttd/apps-test-prod\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;apps-test-prod\u0026#34; }, \u0026#34;dataTypes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/xml\u0026#34; ], \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: true, \u0026#34;classRef\u0026#34;: \u0026#34;Altinn.App.Models.Skjema\u0026#34; }, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxCount\u0026#34;: 1, \u0026#34;minCount\u0026#34;: 1 }, { \u0026#34;id\u0026#34;: \u0026#34;ref-data-as-pdf\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/pdf\u0026#34; ], \u0026#34;maxCount\u0026#34;: 0, \u0026#34;minCount\u0026#34;: 0 }, { \u0026#34;id\u0026#34;: \u0026#34;6aa7d237-f20f-4d42-9361-0c84cf1a8ed0\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [], \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxSize\u0026#34;: 1, \u0026#34;maxCount\u0026#34;: 3, \u0026#34;minCount\u0026#34;: 1 } ], \u0026#34;partyTypesAllowed\u0026#34;: { \u0026#34;bankruptcyEstate\u0026#34;: false, \u0026#34;organisation\u0026#34;: false, \u0026#34;person\u0026#34;: false, \u0026#34;subUnit\u0026#34;: false }, \u0026#34;created\u0026#34;: \u0026#34;2020-06-04T12:11:36.9601284Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;someone\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-06-04T12:11:36.9601305Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;someone\u0026#34;, \u0026#34;autoDeleteOnProcessEnd\u0026#34;: true } Automatic deletion of data Example of configuration in applicationmetadata.json for data type:\nHere the data types Skjema and vedleggA are deleted, while the type ref-data-as-pdf stays after the process has been ended.\n\u0026#34;dataTypes\u0026#34;:[ { \u0026#34;id\u0026#34;: \u0026#34;Skjema\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/xml\u0026#34; ], \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: true, \u0026#34;classRef\u0026#34;: \u0026#34;Altinn.App.Models.skjema\u0026#34;, \u0026#34;allowAnonymousOnStateless\u0026#34;: false, \u0026#34;autoDeleteOnProcessEnd\u0026#34;: true \t}, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxCount\u0026#34;: 1, \u0026#34;minCount\u0026#34;: 1, \u0026#34;enablePdfCreation\u0026#34;: true }, { \u0026#34;id\u0026#34;: \u0026#34;ref-data-as-pdf\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/pdf\u0026#34; ], \u0026#34;maxCount\u0026#34;: 0, \u0026#34;minCount\u0026#34;: 0, \u0026#34;enablePdfCreation\u0026#34;: true }, { \u0026#34;id\u0026#34;: \u0026#34;vedleggA\u0026#34;, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxSize\u0026#34;: 25, \u0026#34;maxCount\u0026#34;: 1, \u0026#34;minCount\u0026#34;: 1, \u0026#34;enablePdfCreation\u0026#34;: true, \u0026#34;appLogic\u0026#34;: { \u0026#34;autoDeleteOnProcessEnd\u0026#34;: true \t} } ] "
},
{
	"uri": "https://docs.altinn.studio/tags/autorisasjon/",
	"title": "autorisasjon",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-studio/designer/backend/",
	"title": "Altinn Studio Designer - Back-end",
	"tags": [],
	"description": "Application construction components used in Altinn Studio Designer backend.",
	"content": "Altinn Studio Designer Back-end is a ASP.Net Core application that exposes web-API\u0026rsquo;s to be used by Altinn Studio Designer Frontend.\nIt is built and deployed as a Docker container running in Kubernetes.\nAPI Controllers The API controllers exposes the web-APIs.\nThey are structured in different controllers that is grouped by functional areas.\nThe controllers we have now are:\n ApplicationMetadata - responsible for functionality related to metadata Config Deployment Pipelines Releases Repository ServiceDevelopment UIEditor  Services Services in a asp.Net application is configured services that controllers and other components used. They are defined with a interface and a implementation and configured in startup.\nThis makes them easy to mock out when doing integration testing of the Altinn Studio Designer backend.\nThe services we have now is\n ApplicationInformation ApplicationMetaata AuthorizationPolicy Deployment Pipeline Release GiteaAPIWrapper Repository SourceControl  Model View Controllers The model view controllers are responsible for presenting razor views where we dont use React as frontend.\nWe are in process with moving functionality to using only React and API Controllers.\nFactories Model Factory Model factory is the module that generates metadata and C# models based on uploaded XSD.\nLibraries Altinn Studio Designer backend uses some libraries for different functionality\nLogging TODO\nApplication Insight TODO\nGIT Client The details about all libraries used can be found in the project file.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/platformoperations/backupandrecovery/",
	"title": "Backup &amp; Recovery",
	"tags": ["architecture"],
	"description": "As part of the Altinn 3 platform architecture we use different tools to have the capability to backup &amp; restore data",
	"content": "It is important to reduce the risk of losing data on the platform. The risks that are identified are\n Data is deleted by accident by DevOps team or by wrongly configured jobs Data is corrupted by bugs in platform or application code Data is accidentally corrupted or deleted by end-users or systems A storage account is deleted Blob storage is deleted Cosmos DB collection is accidentally deleted  In Altinn Platform different types of data is stored\nCosmos DB  Instances: Metadata about instances created InstanceEvents DataElements Applications  Blob Storage  Data for data elements (structured and unstructured data, small to potential gigabytes of data) XACML Policy for applications  The requirement is that we are able to restore data up to 90 days. The platform support this requirement for all types of data listed above.\nSee all details about the backup and recovery components.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/nonsolutionspecific/operations/backupandrecovery/",
	"title": "Backup and recovery",
	"tags": ["solution", "architecture"],
	"description": "All data created in the different solutions are backed up so it is possible to restore it in case of data loss.",
	"content": "As described below, the backup and recovery capabilities there are serveral scenarious where the different type of data is lost.\nThis page describes the application components that makes it possible to protect against data loss.\nBackup Altinn Platform As described in the data section of the architecture documentation Altinn Platform stores data both in Azure Cosmos DB and in Azure Blob Storage.\nThere is different solutions for the different data stores.\nCosmos DB Built in backup functionality Azure Cosmos DB automatically takes backups of your data at regular intervals. The automatic backups are taken without affecting the performance or availability of the database operations. All the backups are stored separately in a storage service, and those backups are globally replicated for resiliency against regional disasters.\nAzure Cosmos DB automatically takes a backup of your database every 4 hours and at any point of time, only the latest 2 backups are stored. However, if the container or database is deleted, Azure Cosmos DB retains the existing snapshots of a given container or database for 30 days.\nThis functionality is out of the box when using Azure Cosmos DB.\nThis backup would only be relevant to use if all data is lost from Cosmos DB.\nCustom backup with help of Azure Function To support recovery of single or group of documents we needed to create a custom backup mechanismen.\nFor this we use the change feed that Azure Cosmos DB expose.\nChange feed support in Azure Cosmos DB works by listening to an Azure Cosmos container for any changes. It then outputs the sorted list of documents that were changed in the order in which they were modified. The changes are persisted, can be processed asynchronously and incrementally, and the output can be distributed across one or more consumers for parallel processing.\nThe solution is to have a Azure Function that listens to the change feed\nand copies documents from Cosmos DB when they are created or modified to a blob storage.\nThe blob storage is a shared blob storage for all orgs. (The same way Cosmos DB is shared) The blob storage have enabled soft delete. All versions of a document in Cosmos should be written to the same blob. Soft delete will keep track of all versions.\nThe following collections has a Azure Function that takes backup. Click on name for code details about Azure Function\n Applications DataElements InstanceEvents Instance Texts  The below images show how the documents are backed up in a blob storage and soft delete has created a snapshot that last for 90 days. In theese 90 days we are able to recover the document to an earlier version.\nBlob storage Each org has their own separte storage account with a blob storage to store data for applications. In addition Altinn Platform has a shared blobstorge where metedata like XACML is stored for the different Apps.\nTo protect against unwanted deletion or changes we have enabled soft delete.\nWhen enabled, soft delete enables you to save and recover your data when blobs or blob snapshots are deleted. This protection extends to blob data that is erased as the result of an overwrite.\nWhen data is deleted, it transitions to a soft deleted state instead of being permanently erased. When soft delete is on and you overwrite data, a soft deleted snapshot is generated to save the state of the overwritten data.\nFor Altinn we have 90 days retention period. Inside that periode we can recover a blob to an earlier version.\nSee more about soft delete on Azure Documentation.\nRecovery Altinn ReStorage is a command-line interface application that enables operators to retrieve version history and metadata about elements as well as restore and undelete them.\nCurrently it supports restoring data elements. Further functionality is defined in this epic on GitHub.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/bekreftelsessteg/",
	"title": "bekreftelsessteg",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/bmpn/",
	"title": "BMPN",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/bpmn/",
	"title": "BPMN",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/tools/bpmn/",
	"title": "BPMN",
	"tags": ["process"],
	"description": "Business Process Model and Notation.",
	"content": "BPMN is a standard for business process modeling that provides a graphical notation for specifying business processes in a Business Process Diagram, based on a flowcharting technique very similar to activity diagrams from Unified Modeling Language (UML).\n BPMN 2.0 has a standardized XML format for exchanging BPMN 2.0 processes between different parties and software. BPMN 2.0 supports defining collaboartion between two or more collaborators.  BPMN 2.0 XML Extensibility In the formal specifications chapter 8.2.3 the following is described:\n The BPMN metamodel is aimed to be extensible. This allows BPMN adopters to extend the specified metamodel in a way that allows them to be still BPMN-compliant.\nIt provides a set of extension elements, which allows BPMN adopters to attach additional attributes and elements to standard and existing BPMN elements.\nThis approach results in more interchangeable models, because the standard elements are still intact and can still be understood by other BPMN adopters. It’s only the additional attributes and elements that MAY be lost during interchange.\n When extended the BPMN XML is still understood by other BPMN adopters, but the additional attributes and elements MAY be lost during interchange.\n Testing different BPMN software packages shows that the extended attributes in the XML does not show up as configurable properties in other software. Modifying the \u0026ldquo;default template\u0026rdquo; in the BeeBPMN editor did not remove the default Altinn properties.  https://www.omg.org/spec/BPMN/2.0/About-BPMN/\nBPNM.io - bpnm-js Homepage\nBMPN.io modeler\n bpmn-js uses BPMN 2.0 XML standard. bpmn-js is an open source BPMN 2.0 web-based rendering toolkit and modeler. bpmn-js can be extended with rules and custom elements.  Custom elements Nyan   bpmn-js has parameter sidebar link  "
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/branching/",
	"title": "Branching",
	"tags": ["development", "git", "branching"],
	"description": "Branching information for Altinn Studio.",
	"content": "Principles  Altinn Studio uses trunk-based development  This ensures the codebase is always releasable on demand and helps to make Continuous Delivery a reality.   Code is checked in using short living feature branches  naming standard for feature branches are feature/\u0026lt;issueNumber\u0026gt;-\u0026lt;description\u0026gt; , for instance: feature/1028-text-component naming standard for bug branches are bug/\u0026lt;issueNumber\u0026gt;-\u0026lt;description\u0026gt; , for instance: bug/877-performance-leak-ui-editor    Trunk Based Development Read more about trunk based development here.\n A source-control branching model, where developers collaborate on code in a single branch called “trunk” (master), resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after.\n Feature Branches Development is done on feature branches with short lifespans before PR is requested against the master branch.\nThe figure below illustrates\n A feature branch with three commits Pull request is create with QA and merge back to master A new commit (forth green circle) based on feedback from QA Merge back to master  Pull Requests A pull request (PR) is created to perform quality assurance (QA) and to merge a feature branch into master. You create a pull request after you have pushed your branch to our github repo.\n Include a reference to the issue that triggered the pull request (Fixes #issuenumber)  Once a pull request is submitted against our master branch it triggers various pipelines, such as builds, tests, static code analysis to ensure that code that breaks builds is not merged into master. These tests are triggered manually. Now that a PR has been submitted others may review your code and leave comments if they have feedback.\nOnce all the tests and QA have been completed we are ready to merge the new code into master. This is done using squash such that the history of the master branch is simple and understandable.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/branching/",
	"title": "branching",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-frontend/v3/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into app frontend in v3.0.0",
	"content": "As of v3.0.0 of app frontend, the font Altinn-DIN replaces the Roboto font that was used previously.\nOnce an app is upgraded to use v3 of the app frontend, all CSS expects the Altinn-DIN font to be loaded. In order for the app to display fonts as expected, the font that is loaded with the app must be updated.\nIn App/views/Home/Index.cshtml, replace the line\n\u0026lt;link href=\u0026#34;https://altinncdn.no/fonts/roboto/latin/roboto.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; with\n\u0026lt;link href=\u0026#34;https://altinncdn.no/fonts/altinn-din/altinn-din.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; The updated file, referring to v3 of app frontend, should reflect the changes of the file on the right:\n"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/older/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into app nuget packages in v1.0.62-alpha to 2.0.1",
	"content": "Support for autodelete when process ends For some apps, the fact that there\u0026rsquo;s traces of it in the user archive (and the data is stored) is a problem (e.g. for security reasons). The Altinn.App.* packages has been updated to support autodelete when process ends. This is introduced with version 2.0.0-alpha of the packages.\nUpdating to this version will require changes in multiple files.\n  Updated package dependencies Navigate to you application repository and find App.csproj in the App folder. Update nuget dependencies in App.csproj to version 2.0.0.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;2.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;2.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;2.0.0\u0026#34; /\u0026gt;   Changes in App.cs\nChange constructor:\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService ) : base(appResourcesService, logger, dataService, processService, pdfService, prefillService) to:\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService, IInstance instanceService ) : base(appResourcesService, logger, dataService, processService, pdfService, prefillService, instanceService)   Designer moves FormLayout.json from app/ui to app/ui/layouts In order to support multiple pages in an app we have done some restructuring of the app-template. When you are doing changes in Altinn Designer for your app the updated FormLayout.json will be put under the new structure. For apps that have nuget references to Altinn.App.Api, Altinn.App.Common, and Altinn.App.PlatformServices with versions below version 1.2.0 this will make the app unable to find the FormLayout.json on the network call against the app.\n  Navigate to you application repository and find App.csproj in the App folder. Update nuget dependencies in App.csproj to version 1.2.0-alpha or newer. We recommend updating to latest version which is currently at 1.3.1.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.3.1\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.3.1\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.3.1\u0026#34; /\u0026gt;   If there are some breaking changes when updating the nuget-version this should be documented below.\n  Added registration of events to the new Events component The Altinn.App.* packages has been updated to work with the new Events component in Altinn. This is introduced with version 1.1.11-alpha of the packages.\nUpdating to this version will require changes in multiple files.\n  Updated package dependencies Navigate to you application repository and find App.csproj in the App folder. Update nuget dependencies in App.csproj to version 1.1.11-alpha or newer..\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.1.11-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.1.11-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.1.11-alpha\u0026#34; /\u0026gt;   Changes in Startup.cs:\nservices.AddHttpClient\u0026lt;IEvents, EventsAppSI\u0026gt;(); Startup already have multiple similar lines with calls to AddHttpClient. Add the new line anywhere among them.\nThis will probably also require two new lines at the top of the file:\nusing Altinn.App.PlatformServices.Implementation; using Altinn.App.PlatformServices.Interface;   Changes in appsettings.json:\n  A new property has been included in called PlatformSettings.ApiEventsEndpoint. The value here is used for local test and will be replaced during deploy to test and production environments.\n\u0026#34;PlatformSettings\u0026#34;: { ... \u0026#34;ApiEventsEndpoint\u0026#34;: \u0026#34;http://localhost:5101/events/api/v1/\u0026#34; } |``` The default behaviour of the logic is to not send events. To override this there is a new setting called `AppSettings:RegisterEventsWithEventsComponent`. Update the appsettings file by adding an entry in the AppSettings section: ```json \u0026#34;AppSettings\u0026#34;: { ... \u0026#34;RegisterEventsWithEventsComponent\u0026#34;: false } Change the setting to true if the app should create and send events. Please note that the feature is under continued development and still considered experimental.\nSupport for deleting instances from endpoint in app #4871 was fixed with in release of 1.1.10-alpha of the app nugets. This change only affects users and app owners that try to delete an instance.\nErrors 403 response when trying to delete an instance using the endpoint exposed in the application.\nHow to fix If you are not using 1.1.10-alpha or above. Start by upgrading the nuget references in you application. If you are running a newer release, skip to step 2.\n  Navigate to you application repository and find App.csproj in the App folder. Update nuget dependencies in App.csproj to version 1.1.10-alpha or newer..\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.1.10-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.1.10-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.1.10-alpha\u0026#34; /\u0026gt;   Navigate to you application repository and find Startup.cs in the App folder. Add a new line to the services.AddAuthorization-section. The following should be added\noptions.AddPolicy(\u0026quot;InstanceDelete\u0026quot;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026quot;delete\u0026quot;)));\nand the final result should look like this\nservices.AddAuthorization(options =\u0026gt; { options.AddPolicy(\u0026#34;InstanceRead\u0026#34;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;read\u0026#34;))); options.AddPolicy(\u0026#34;InstanceWrite\u0026#34;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;write\u0026#34;))); options.AddPolicy(\u0026#34;InstanceDelete\u0026#34;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;delete\u0026#34;))); options.AddPolicy(\u0026#34;InstanceInstantiate\u0026#34;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;instantiate\u0026#34;))); options.AddPolicy(\u0026#34;InstanceComplete\u0026#34;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;complete\u0026#34;))); });   If deleting instances should be available for the application owner this must be explicitly stated in the application policy. The requred rule is documented here.\n  Update path of Data Protection Keys for Apps #4483 changed the way we use data protection keys in order to improve the support for running locally. These keys are used in XSRF-protection. When you are running apps locally, we are using the default behaviour (directory under current user) for .Net Core. The path is passed with an environment variable when running in an apps cluster. This change requires the deployment.yaml file to be updated with the correct variable.\nThe change affects all application created in Altinn Studio before 30.09.2020 using Altinn.App.PlatformServices 1.1.8-alpha and above\nErrors User may experience errors posting data when the app is restarted or when multiple replicas are used.\nHow to fix You need to add the environment variable in the deployment.yaml file. If you have not done any changes to the file previously, you can copy the file from here, otherwise you need to update the file directly. Both the name of the environment variable and the value must be set as follows:\nenv: - name: ALTINN_KEYS_DIRECTORY value: \u0026#34;/mnt/keys\u0026#34; Build pipeline failed on task: Build and push docker image to acr A namespace was renamed in Altinn.App.PlatformServices Version=\u0026ldquo;1.1.2-alpha causing the build of the application to fail if references to this namespace isn\u0026rsquo;t changed.\nThis affects all applications created before June 2020 that reference nuget versions \u0026gt;= 1.1.2-alpha.\nErrors Build pipeline fails due to failing task: Build and push docker image to acr.\nExpanding the task reveals error message:\nStartup.cs(5,35): error CS0234: The type or namespace name \u0026#39;Extentions\u0026#39; does not exist in the namespace \u0026#39;Altinn.App.PlatformServices\u0026#39; (are you missing an assembly reference?)\u0026#34;. Screenshot of the failing build pipeline. How to fix  Navigate to you application repository and find Startup.cs in the App folder. Change using Altinn.App.PlatformServices.Extentions; to using Altinn.App.PlatformServices.Extensions; If you have a local code editor, confirm that the code is able to compile locally before building the app in Altinn Studio.  Deploy pipeline failed to set subscription key Introduced in the newest version of Azure Powershell, which is used during deploy of apps. The change results in the subscription key for the app not being set. The subscription key is needed for the apps to have access to the platform APIs.\nThis only affects apps that were deployed some time within the period July 7th - July 22nd. Apps deployed for the first time to a specific environment are not affected.\nErrors Users will experience that instantiation fails, and only a blue screen is shown. If looking at the network traffic during instantiation, users will see that the call to user fails with code 404.\nHow to fix The deployment pipeline has been updated. Re-deploying the app to the same environment will solve the problem (no need to trigger another build).\nProperty type changed for UserProfile.ProfileSettingPreference Introduced with issue: #4466 and release v2020.28.\nThe change affects all applications in TT02 and PR with nuget version 1.0.98 and lower.\nErrors App doesn\u0026rsquo;t load only the blue background is visible.\nHow to fix  Navigate to you application repository and find App.csproj in the App folder. Update nuget dependencies in App.csproj from 1.0.86. to version 1.1.0-alpha. \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt;  Modify the function ConfigureServices() in App/Startup.cs.  Include the lines below in the function. Anywhere would do, but we suggest referencing the memory cache after _ services.AddControllersWithViews()_ and the HttpClient in the same section as the other AppSI services.\nservices.AddMemoryCache(); services.AddHttpClient\u0026lt;IText, TextAppSI\u0026gt;(); Your code changes should match the image below.\nNew endpoint introduced in Altinn.Apps.Api exposing application text resources Introduced with issue: #4451 and nuget 1.1.0.-alpha.\nThe change affects all application created in Altinn Studio before 8.07.2020 using nuget versions 1.1.0-alpha\nErrors How to fix Once the nuget references are updated to version 1.1.0-alpha, modify the function ConfigureServices() in App/Startup.cs.\nInclude the lines below in the function. Anywhere would do, but we suggest referencing the memory cache after _ services.AddControllersWithViews()_ and the HttpClient in the same section as the other AppSI services.\nservices.AddMemoryCache(); services.AddHttpClient\u0026lt;IText, TextAppSI\u0026gt;(); Your code changes should match the image below.\nPlatform authorization introduced for Platform Register and Profile Introduced with issue: #4162 and Release: v2020.23.\nThe change affects all application created in Altinn Studio before 03.06.2020.\nErrors Users will experience that instantiation, form filling and viewing receipt fails with the following error:\nWhen checking the network log one will find that the POST request to https://ttd.apps.at22.altinn.cloud/ttd/apps-test/instances?instanceOwnerPartyId= fails with status code 404.\nHow to fix There are three steps you must take in order to update your application to adhere to the breaking change.\n Update values.yaml in the deployment folder in your application repository. If no custom changes have been made to this file since you created the application, simply replace the content of the file with this code.\nThe picture illustrates which changes are required in the file if you wish to do it manually, or inspect your code. Be ware that indentation is important when working with .yaml files.  Update nuget dependencies in App.csproj to version 1.0.86-alpha. Navigate to you application repository and find App.csproj in the App folder. Upgrade the three Altinn.App nugetpackages to version 1.0.86. \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt;  Update Startup.cs in the App folder in your application repository. If no custom changes have been made to this file since you created the application, simply replace the content of the file with this code. The picture illustrates which changes are required in the file if you wish to do it manually, or inspect your code.  Updated client-side validation - frontend v2 and Nuget v1.0.82-alpha Introduced with issue: #3944, and applies to existing apps that upgrade to the new major version of app frontend (v2).\nThe client-side validation of the app frontend has been replaced with a JSON-schema validation in order to provide a more complete client-side validation. As of v2 of app frontend, client-side validation has support for type-checking basic types, including enums. When upgrading the frontend version to v2, the app must use nuget versions 1.0.82-alpha or newer. See details below.\nIn order to implement this, we have made changes to how we bind the data model to fields in the forms.\nThe change is only breaking for apps using OR-type xsd (or have fields with `-`-character in xsd).\rMost Seres-type data models will not be affected, and will work without needing to make changes, even after updating to v2 of app frontend.\rIf you do experience any problems with submitting/validating form data even with a seres-type xsd, follow the steps below.\r\rErrors For apps that use an OR-type xsd (or have fields with --character in xsd), the app may crash during submission/validation because the data model binding used does not match the true path in the json schema (and xsd). This is because we have been using a simplified path previously, to match with the C# model. We have now changed that so that the data binding name corresponds to the true xpath for the field.\nHow to fix   If using app frontend v2 or newer, make sure app is using nuget packages v1.0.82-alpha or newer. See documentation on how to update dependencies..\n  Open the app in altinn.studio and upload datamodel again to generate a new version of the model files, with all the updated paths.\n Please note that this overwrites any texts in the text resource files, so make sure to save a copy or push the app to the app repo before doing this, to recover any texts that might disappear.    Update data model bindings in altinn.studio UI Editor, or update FormLayout.json with new data model bindings (see below for new format).\n Each part of the path now corresponds to the xname of the field in the xsd. F.ex:  XSD:\n  \u0026lt;xs:schema xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34;\u0026gt; \u0026lt;!--title=\u0026#39;Eksempel xsd skjema\u0026#39; lang=\u0026#39;NOB\u0026#39;--\u0026gt; \u0026lt;xs:element name=\u0026#34;Skjema\u0026#34;\u0026gt; \u0026lt;xs:complexType\u0026gt; \u0026lt;xs:sequence\u0026gt; \u0026lt;xs:element minOccurs=\u0026#34;0\u0026#34; ref=\u0026#34;SomeGroup-grp-1111\u0026#34; /\u0026gt;\u0026lt;/xs:element\u0026gt; \u0026lt;/xs:sequence\u0026gt; \u0026lt;xs:anyAttribute /\u0026gt; \u0026lt;/xs:complexType\u0026gt; \u0026lt;/xs:element\u0026gt; \u0026lt;xs:element name=\u0026#34;SomeGroup-grp-1111\u0026#34;\u0026gt;  \u0026lt;xs:complexType\u0026gt; \u0026lt;xs:sequence\u0026gt; \u0026lt;xs:element minOccurs=\u0026#34;0\u0026#34; ref=\u0026#34;SomeField-datadef-12345\u0026#34; /\u0026gt; \u0026lt;/xs:sequence\u0026gt; \u0026lt;xs:attribute fixed=\u0026#34;1111\u0026#34; name=\u0026#34;gruppeid\u0026#34; type=\u0026#34;xs:positiveInteger\u0026#34; use=\u0026#34;required\u0026#34; /\u0026gt; \u0026lt;/xs:complexType\u0026gt; \u0026lt;/xs:element\u0026gt; \u0026lt;xs:element name=\u0026#34;SomeField-datadef-12345\u0026#34;\u0026gt;  \u0026lt;xs:simpleContent\u0026gt; \u0026lt;xs:extension base=\u0026#34;SomeTextformat\u0026#34;\u0026gt; \u0026lt;xs:attribute fixed=\u0026#34;12345\u0026#34; name=\u0026#34;orid\u0026#34; type=\u0026#34;xs:positiveInteger\u0026#34; use=\u0026#34;required\u0026#34; /\u0026gt; \u0026lt;/xs:extension\u0026gt; \u0026lt;/xs:simpleContent\u0026gt; \u0026lt;/xs:complexType\u0026gt; \u0026lt;/xs:element\u0026gt; \u0026lt;xs:simpleType name=\u0026#34;SomeTextformat\u0026#34;\u0026gt; \u0026lt;xs:restriction base=\u0026#34;xs:string\u0026#34;\u0026gt; \u0026lt;xs:length value=\u0026#34;11\u0026#34; /\u0026gt; \u0026lt;/xs:restriction\u0026gt; \u0026lt;/xs:simpleType\u0026gt; \u0026lt;/xs:schema\u0026gt;  Old format for data model binding: someGroupgrp1111.someFielddatatef12345.value. New format for data model binding: SomeGroup-grp-1111.SomeField-datadef-12345.  Once the data model and bindings are updated, build and deploy app for the changes to take effect.\nError when attempting to create an instance as Application Owner Introduced with issue: #3738.\nThe Register API had a few GET operations that took an input parameter through the body of an http request. Requests against these operations would work in AT environments, but would be broken by API Management in production like environments. The operations in question has now been removed and replaced with operations that require POST requests.\nErrors The methods that have been removed were used by an app when an instantiation were done by the Application owner. More specifically if the instanceOwnerPartyId were unknown. The instantiation request would then have the Person number or organization number instead, and the Register operation would be used to identify the correct party id.\nPOST https://{org}.apps.tt02.altinn.no/{app-id}/instances/ { \u0026#34;appId\u0026#34; : \u0026#34;org/app\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;personNumber\u0026#34;: \u0026#34;12247918309\u0026#34;, \u0026#34;organisationNumber\u0026#34;: null, \u0026#34;instanceOwnerPartyId\u0026#34;: null }, ... } How to fix Any issues related to this change can be fixed by upgrading to the latest version of Altinn.App.PlatformServices. This means the App must be updated and a the new version deployed to all environments. Existing instances are not affected.\nDeploy pipeline fails with error: UPGRADE FAILED Introduced with upgrade of AKS cluster. The api version (extensions/v1beta1) used to deploy apps to the AKS cluster is no longer supported.\nErrors When triggering deploy from altinn.studio the deploy fails. On closer inspection of the pipeline (byggloggen) the error message below is shown at the end of the failed step.\nHow to fix To fix this issue the deployment to use a new api version. Navigate to you application repository and find deployment.yaml. It is placed in the folder deployment/templates.\nMake the changes spesified below to the file, and update the repository. Remember to pull the latest version in altinn.studio before attempting to re-deploy.\n  Change apiVersion from extensions/v1beta1 to apps/v1.\n  Add the following lines under replicas in the spec section. Be ware of indentation here. Two spaces are used as indent for sub sections.\n  selector: matchLabels: app: {{ template \u0026#34;name\u0026#34; . }} Send-in / Validation fails with \u0026lsquo;Ukjent feil\u0026rsquo; Introduced with issue: #3927.\nThere was a vulnerability in the solution allowing to update a whole instance object using an endpoint in app backend or storage. This has been solved by refactoring app backend and removing the endpoints.\nError When sending in an instance after completing form filling the error below i prompted. In network you can see that the \u0026lsquo;validate\u0026rsquo;-request receives a 500 code in response.\nHow to fix Navigate to you application repository and find App.csproj. Upgrade the three Altinn.App nugetpackages to version 1.0.78.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.0.78-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.0.78-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.0.78-alpha\u0026#34; /\u0026gt; Validation fails for attachments in some cases after 30.03.2020 Introduced with issues: #1925 and #3915.\nIn Altinn Studio, all data types that were created from a FileUpload component were set with allowedContentTypes: [application/octet-stream] as default.\nThis was also set for all uploads from the app. This has now been changed, so that the file types defined by the app developer are also set in allowedContentTypes, and the file upload is sent with the corresponding Content-Type of the file in the request header.\nError Apps that were created before the fix was implemented (30.03.2020) may experience that validation fails for the attachment, even though it is of the correct format specified in Altinn Studio. This is because the dataType for the attachment expects application/octet-stream, but instead receives the actual mime type for the uploaded file.\nHow to fix Update allowedContentTypes for the data type that fails. This can either be done manually in the applications applicationMetadata.json for the affected data type(s) or by updating the FileUpload component in Altinn Studio so that the expected allowedContentTypes are saved.\nAfter updating, the app must be re-deployed.\nBuild fails after upgrading Altinn.App-nugets to version 1.0.62-alpha Introduced with issue: #3820.\nThe base class that every application inherits has been altered to allow for both data and task validation.\nError When building App.cs errors simillar to those depicted in the picture below are logged.\nHow to fix If you haven\u0026rsquo;t made any changes to App/logic/Validation/ValidationHandler.cs and App/logic/App.cs the quickest way to fix the build errors are to copy these files from the template and paste them into your repository. Find the template files here.\nIf changes have been made to these files, follow the instructions below to fix the errors.\nApp/logic/Validation/ValidationHandler.cs  Add a reference to Altinn.Platform.Storage.Interface.Models by including the snippet below amongst the using statements. using Altinn.Platform.Storage.Interface.Models;  Add the function below in the class. public async Task ValidateTask(Instance instance, string taskId, ModelStateDictionary validationResults) { await Task.CompletedTask; }   App/logic/App.cs  Rename function RunValidation to RunDataValidation Add the function below in the class  /// \u0026lt;summary\u0026gt; /// Run validation event to perform custom validations /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;validationResults\u0026#34;\u0026gt;Object to contain any validation errors/warnings\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;Value indicating if the form is valid or not\u0026lt;/returns\u0026gt; public override async Task RunTaskValidation(Instance instance, string taskId, ModelStateDictionary validationResults) { await _validationHandler.ValidateTask(instance, taskId, validationResults); } "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v3/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into app nuget packages in v3.0.0",
	"content": "We have added a new PDF handler to make it possible to hide pages and components in PDF.\nThe new version of the Altinn.App.* packages have breaking changes:\nUpdating to this version will require changes in multiple files.\n Updated package dependencies\nNavigate to you application repository and find App.csproj in the App folder.\nUpdate nuget dependencies in App.csproj to version 3.0.0. \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;3.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;3.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;3.0.0\u0026#34; /\u0026gt;  Create a new file for a new class called PdfHandler in the logic/Print folder File from template using System.Threading.Tasks; using Altinn.App.Common.Models; namespace Altinn.App.AppLogic.Print { /// \u0026lt;summary\u0026gt;  /// Handler for formatting PDF.  /// \u0026lt;/summary\u0026gt;  public class PdfHandler { /// \u0026lt;summary\u0026gt;  /// Method to format PDF dynamic  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;layoutSettings\u0026#34;\u0026gt;the layoutsettings\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;data\u0026#34;\u0026gt;data object\u0026lt;/param\u0026gt;  public async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { return await Task.FromResult(layoutSettings); } } }  Changes to the App.cs file\nAdd using using Altinn.App.AppLogic.Print; using Microsoft.Extensions.Options; using Microsoft.AspNetCore.Http; using Altinn.App.Services.Configuration; Add a new private field below InstantiationHandler\nprivate readonly PdfHandler _pdfHandler; Change constructor from:\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService, IInstance instanceService ) : base(appResourcesService, logger, dataService, processService, pdfService, prefillService, instanceService) to:\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService, IInstance instanceService, IOptions\u0026lt;GeneralSettings\u0026gt; settings, IText textService, IHttpContextAccessor httpContextAccessor) : base( appResourcesService, logger, dataService, processService, pdfService, prefillService, instanceService, registerService, settings, profileService, textService, httpContextAccessor) { _logger = logger; _validationHandler = new ValidationHandler(httpContextAccessor); _calculationHandler = new CalculationHandler(); _instantiationHandler = new InstantiationHandler(profileService, registerService); _pdfHandler = new PdfHandler(); } Add method\n/// \u0026lt;summary\u0026gt; /// Hook to run logic to hide pages or components when generatring PDF /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;layoutSettings\u0026#34;\u0026gt;The layoutsettings. Can be null and need to be created in method\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;data\u0026#34;\u0026gt;The data that there is generated PDF from\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;Layoutsetting with possible hidden fields or pages\u0026lt;/returns\u0026gt; public override async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { return await _pdfHandler.FormatPdf(layoutSettings, data); }   "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v4/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into app nuget packages in v4.0.0.",
	"content": "Altinn.App.* librarires target .Net 5 now, which requires that the application does the same.\nIn addition, all references to app and platform services have been moved from Startup.cs and should be replaced with two method calls.\nFollow the instructions below to ensure that the app is compatible with version 4 of the Altinn.App.* packages.\n  Update target framework and package dependencies\nNavigate to you application repository and find App.csproj in the App folder.\nUpdate target framework to .Net 5 by replacing\n\u0026lt;TargetFramework\u0026gt;netcoreapp3.1\u0026lt;/TargetFramework\u0026gt; with\n\u0026lt;TargetFramework\u0026gt;net5.0\u0026lt;/TargetFramework\u0026gt; In the same file, update the Altinn.App.* package references to version 4.0.0.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;4.0.0\u0026#34;\u0026gt; \u0026lt;CopyToOutputDirectory\u0026gt;lib\\$(TargetFramework)\\*.xml\u0026lt;/CopyToOutputDirectory\u0026gt; \u0026lt;/PackageReference\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;4.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;4.0.0\u0026#34; /\u0026gt; The changes in the file should match the image below:\n  Update Dockerfile to use .Net 5 images\nThe Dockerfile can be found in the root folder of the application repository.\nUpdate build image by replacing\nFROMmcr.microsoft.com/dotnet/core/sdk:3.1-alpine AS build with\nFROMmcr.microsoft.com/dotnet/sdk:5.0-alpine AS build And update the runtime image by replacing\nFROMmcr.microsoft.com/dotnet/core/aspnet:3.1-alpine AS final with\nFROMmcr.microsoft.com/dotnet/aspnet:5.0-alpine AS final The changes in the file should match the image below:\n  Replace references to services with call to extension method\nIn the App folder you will also find Startup.cs\nSeveral lines of code will be removed and replaced with the two lines below.\nservices.AddAppServices(Configuration, _env); services.AddPlatformServices(Configuration, _env); The code that should be removed from the file is marked in pink in the pictures below, which cover one section of the file each.\nDepending on how many custom changes you have made in your file the line numbers might not match. Do not worry, the services should still be grouped togheter roughly as shown in the picture. The application will run even if not all services are removed, so just do your best.\nStart by removing referenes to the Altinn App services.\nRemove references to all the Altinn Platform services.\nRemove all loading of configuration files.\nRemove logic to configure Application insights.\nRemove private method for retrieving the key for Application Insights.\nAs previously stated the removed references are now replaced by calls to two new methods that will load all existing and future platform and app services into your application.\nservices.AddPlatformServices(Configuration, _env); loads all configurations and services that the app requires to use Altinn Platform functionality, and services.AddAppServices(Configuration, _env); loads all remaining configurations and services that the app requires such as Authorization and Prefill services.\nEnsure that these lines are added withing the ConfigureServices fuction.\n  "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v5/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into app nuget packages in v5.0.0.",
	"content": "1. PDF generation implementation moved out from AppBase/IAltinnApp All code related the generation of Pdf has been extracted from AppBase.cs and moved into PdfService.cs which in turn implements IPdfService. This opens up and allows us as service developers to replace the default Pdf implementation entirely.\nSince App.cs passes parameteres to AppBase.cs you need to remove thos no longer in use in the call to base(...) in the cosntructor:\n processService settings textService  Your App constructor should then look something like this:\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPdfService pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService, IInstance instanceService, IOptions\u0026lt;GeneralSettings\u0026gt; settings, IText textService, IHttpContextAccessor httpContextAccessor) : base( appResourcesService, logger, dataService, pdfService, prefillService, instanceService, httpContextAccessor) It might be that you don\u0026rsquo;t use any of the removed services in you app code either, then you should remove those from the App constructor as well.\nIf you have implemented custom code to control Pdf generation, and depending on how you have done this, you have a couple options when it comes to what you need to do to resolve the breaking change. However the end result should be the same.\n  Custom code in PdfHandler.cs\nThis is when you have added custom code in PdfHandler.cs. You should continue to use this class but it needs to implement an interface by following the steps below:\n  Make sure the PdfHandler class implements the ICustomPdfHandler interface.\nNavigate to PdfHandler.cs and add : ICustomPdfHandler after the class name. The class should allready have the method defined in the interface. When adding the ICustomPdfHandlerinterface you also need to add a using statement using Altinn.App.PlatformServices.Interface;.\n/// \u0026lt;summary\u0026gt; /// Handler for formatting PDF. /// \u0026lt;/summary\u0026gt; public class PdfHandler : ICustomPdfHandler { /// \u0026lt;summary\u0026gt;  /// Method to format PDF dynamic  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;example\u0026gt;  /// if (data.GetType() == typeof(Skjema)  /// {  /// // need to create object if not there  /// layoutSettings.Components.ExcludeFromPdf.Add(\u0026#34;a23234234\u0026#34;);  /// }  /// \u0026lt;/example\u0026gt;  /// \u0026lt;param name=\u0026#34;layoutSettings\u0026#34;\u0026gt;the layoutsettings\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;data\u0026#34;\u0026gt;data object\u0026lt;/param\u0026gt;  public async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { // Your code here  return await Task.FromResult(layoutSettings); } }   Register the PdfHandler implementation in Startup.cs\nAdd the following line\nservices.AddTransient\u0026lt;ICustomPdfHandler, PdfHandler\u0026gt;(); You should add it above the registration of your application\nservices.AddTransient\u0026lt;ICustomPdfHandler, PdfHandler\u0026gt;(); // Altinn App implementation service (The concrete implementation of logic from Application repository) services.AddTransient\u0026lt;IAltinnApp, AppLogic.App\u0026gt;();   Your custom implementation will now be injected into the PdfService implementation and be called during the Pdf generation process. When adding a custom PdfHandler you also need the using Altinn.App.AppLogic.Print; statement.\n    Custom code in FormatPdf method\nThis the old way when you have your code directly in the overridden FormatPdf method in App.cs in your application.\npublic override async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { // You have code here... }   Create a new class PdfHandler.cs and have it implement the ICustomPdfHandler interface\n  Move your custom code to the FormatPdf method of the new class. You should then have a implementation similar to the example in step 1.1 above:\npublic class PdfHandler : ICustomPdfHandler { public async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { // Your code here  return await Task.FromResult(layoutSettings); } }     2. Obsolete method GetOptionId removed from App/AppBase/IAltinnApp In version 4.24.0 we introduced a new way of supporting dynamic options making the GetOptionId methods in obsolete. The methods have now been removed and you should use the new way of implementing options as described in the documentation\nWhen you update you app you should then remove the following from App.cs as this method is removed from AppBase.cs:\n/// \u0026lt;inheritdoc /\u0026gt; #pragma warning disable CS0672 // Member overrides obsolete member  public override Task\u0026lt;AppOptions\u0026gt; GetOptions(string id, AppOptions options) #pragma warning restore CS0672 // Member overrides obsolete member  { return Task.FromResult(options); } 3. Obsolete method RunAppEvent removed from App/AppBase/IAltinnApp The RunAppEvent method is a old construct for hooking into various application events. This have been made obsolete by having concrete method overrides for each type of event as described in the documentation. The RunAppEvent method was passed in an AppEventType enum which specified the type of event that was fired. You would then need to have code checking the type and performing the logic needed. The table below shows the old enum values and their corresponding new methods that should be used instead.\n   Enum Corresponding method     Calculation RunProcessDataRead or RunProcessDataWrite   Instantiation RunDataCreation   ValidateInstantiation RunInstantiationValidation   Validation RunDataValidation   DataRetrieval RunProcessDataRead   BeforeProcessChange OnStartProcess   AfterProcessChange OnEndProcess   AppModelCreation CreateNewAppModel    The AppEventType.cs has been removed. This was referenced and used in App.cs - both the using reference and usage needs to be removed.\nDelete the following:\nusing Altinn.App.Common.Enums; and\n/// \u0026lt;summary\u0026gt; /// Run app event /// \u0026lt;/summary\u0026gt; /// \u0026lt;remarks\u0026gt;DEPRECATED METHOD, USE EVENT SPECIFIC METHOD INSTEAD\u0026lt;/remarks\u0026gt; /// \u0026lt;param name=\u0026#34;appEvent\u0026#34;\u0026gt;The app event type\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;model\u0026#34;\u0026gt;The service model\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;modelState\u0026#34;\u0026gt;The model state\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;True if the event was handled\u0026lt;/returns\u0026gt; public override async Task\u0026lt;bool\u0026gt; RunAppEvent(AppEventType appEvent, object model, ModelStateDictionary modelState = null) { _logger.LogInformation($\u0026#34;RunAppEvent {appEvent}\u0026#34;); return await Task.FromResult(true); } The RunAppEventmethod should be replaced with the appropriate methods as described above.\n4. Obsolete methods RunCalculation removed from AppBase/IAltinnApp In version 4.7.0 the RunCalculation method was replaced with the methods RunProcessDataRead and RunProcessDataWrite. RunCalculation has now been removed and those that have code in this method needs to move this to either RunProcessDataRead or RunProcessDataWrite.\nThe process to update is:\n Add the DataProcessing folder and DataProcessingHandler class from our app template to your app. Update App.cs. Add a class field for DataProcessingHandler and copy new methods (RunProcessDataRead and RunProcessDataWrite) from App.cs Move logic from calculation handler to DataProcessingHandler Remove RunCalculation method from App.cs Remove CalculationHandler when code has been moved to DataProcessingHandler. Compile and test your app.  "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v6/breaking-changes/",
	"title": "Breaking changes",
	"tags": ["translate-to-norwegian"],
	"description": "Oversikt over breaking changes introdusert i App Nuget-pakker i v6.0.0.",
	"content": "\rAlpha Release\nThis is a alpha relase and is not used by default in new applications. Currently the v6 is a technical update only and introduces no new features compared to the latest 5.x.x version. It\u0026rsquo;s under consideration to include restructuring of app template, originally planned for the next major release, in this version as well to reduce the number of packages introducing breaking changes.\n\r\rAltinn.App.* librarires target .Net 6 now, which requires that the application does the same.\nIn addition, all references to app and platform services have been moved from Startup.cs and should be replaced with two method calls.\nFollow the instructions below to ensure that the app is compatible with version 6 of the Altinn.App.* packages.\n  Update target framework and package dependencies\nInstall .Net 6 SDK before you start changing code.\nNavigate to you application repository and find App.csproj in the App folder.\nUpdate target framework to .Net 6 by replacing\n\u0026lt;TargetFramework\u0026gt;net5.0\u0026lt;/TargetFramework\u0026gt; with\n\u0026lt;TargetFramework\u0026gt;net6.0\u0026lt;/TargetFramework\u0026gt; In the same file, update the Altinn.App.* package references to version 6.0.0.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;6.0.0\u0026#34;\u0026gt; \u0026lt;CopyToOutputDirectory\u0026gt;lib\\$(TargetFramework)\\*.xml\u0026lt;/CopyToOutputDirectory\u0026gt; \u0026lt;/PackageReference\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;6.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;6.0.0\u0026#34; /\u0026gt;   Update Dockerfile to use .Net 6 images\nThe Dockerfile can be found in the root folder of the application repository.\nUpdate build image by replacing\nFROMmcr.microsoft.com/dotnet/sdk:5.0-alpine AS build with\nFROMmcr.microsoft.com/dotnet/sdk:6.0-alpine AS build And update the runtime image by replacing\nFROMmcr.microsoft.com/dotnet/aspnet:5.0-alpine AS final with\nFROMmcr.microsoft.com/dotnet/aspnet:6.0-alpine AS final   Update program.cs\nThe structure of program.cs has changed for dot net 6. Copy code from this file.\n  Add custom service referances\nIf you have already added custom services and other changes to startup.cs and program.cs you need to add it to program.vs\n  Delete startup.cs\nThis is no longer needed\n  "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/deployment/v1/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into deployment in v1.0.0",
	"content": "Helm templates moved to external repository. Follow the migration guide\n"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/deployment/v2/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into deployment in v2.0.0",
	"content": " Rename of deployment object might lead to a downtime equal to the startup time of the application. Default number of replicas changed from 1 to 2 and autoscaling enabled by default (min: 2, max: 10). If your application cannot run multiple replicas you need to override this in deployment/values.yaml  deployment: replicaCount: 1  autoscaling: enabled: false "
},
{
	"uri": "https://docs.altinn.studio/tags/build/",
	"title": "build",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/build_and_test/",
	"title": "Build &amp; Test Capabilities",
	"tags": ["architecture", "devops", "todo"],
	"description": "Involves everything from the capability to write and building code to the different types of testing of the code.",
	"content": "Below list the capabilities with a short description and possible link to the different components providing that capability.\nSoftware Generation Capabilties Code \u0026amp; Config Writing Capability Most of our code is written manually.\nSee development application components to get a overview over tools and application we use.\nBuild \u0026amp; Integration Enablement Capabilities Software Compilation \u0026amp; Validation The project uses .Net, Java or Typescript compilers.\nSofware Linking \u0026amp; Packaging The project has the capability to build packages.\nSee development application components for details how we do this.\nBuild Orchestration We use Auzure Pipelines to build the source code.\nSee development application components to get a overview over tools and application we use.\nContinuous Integration Capabilities Azure Piplines are used for Continuous Integration. When a pull request is created a build is triggered that builds the code and run unit and integration tests.\nTest Management Capabilities Test Case \u0026amp; Script Creation \u0026amp; Management  Test scripts are collected in Github.  Test Execution Tracking \u0026amp; Reporting The team\nTest Data Creation \u0026amp; Management  Test data for local testing and integration testing is kept in Github.  Test Execution \u0026amp; Automation Capabilities Functional Test The devopsteam has the capability to perform functional testing.\nUnit Test As part of the development unit test are created. They are run for every pull request.\nService \u0026amp; API Test Performance Testing \u0026amp; Profiling "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/build_and_test/build/",
	"title": "Build process",
	"tags": ["build", "ci"],
	"description": "Altinn Studio Build Processes",
	"content": "Build Pipelines Quality Build When creating a Pull Request a pipeline is building the applications, running tests and style check/linting. TSLint, SonarCloud (for Typescript) and Stylecop (C#) is used for style check/linting.\nTriggered by:\n Pull Request  Altinn Studio and Runtime Docker Images Separate pipelines will build and deploy the Altinn Studio Docker Image and the Runtime Docker Image to Azure Container Registry. The different Altinn Studio applications (React Apps) is built in seperate Docker images to utilize Docker\u0026rsquo;s cache technique and minimize unnecessary rebuilding.\nDocker-Compose is used when developing and running Altinn Studio locally, building several Docker images and using the same caching technique used in the Pipeline.\nTriggered by:\n Git Merge to Master  Altinn Studio Release Build When the build for Altinn Studio is successfully ran, a release build will start. The Release Build will update the Kubernetes cluster with the images created in the Altinn Studio build pipelines.\nTriggered by:\n Successfull build of Altinn Studio.  Generating Altinn Pipelines Images Summary  The Altinn Azure Pipelines Image (image) is built with Packer. The Packer JSON configuration is based on the same configuration used by Microsoft to build their own Hosted Agent images. The image is built in Azure Pipelines passing in \u0026ldquo;secrets\u0026rdquo; to the Packer configuration with Environment Variables not visibly available during the build process.  Usage  Create a Virtual Machine in Azure using the pre built image found under \u0026ldquo;browse all images and disks\u0026rdquo;. Create a username and password (should be stored in Azure Vault).  Installing Agent Host The script for installing the Agent Host is found at: Maintenance/azure-pipelines-image/scripts/agent/agent-install.sh (Currently a manual job)\nA computer can have one or several Agent Hosts installed. Several Agents, on one or several servers, can connect to one Agent Pool.\nCreating Pipelines Image with Packer.io The process of creating an Image with Packer is described here.\nThe variables used in the Packer JSON configuration file is passed in via hidden Pipelines environment variables.\nUbuntu1604-full The \u0026ldquo;full\u0026rdquo; image contains components for building Dotnet and NodeJS applications, running JavaScript based headless tests and running Docker Images. See the JSON file for specifications.\nUbuntu1604-light The \u0026ldquo;light\u0026rdquo; image only contains Git and Docker and is created for only running Docker images.\nClean-up Packer creates Resource Groups in Azure keeping the image build for history and debuggind purposes.\nTo remove this Resource Group run AZ Cli: az group delete -n PackerResourceGroup\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/",
	"title": "Building and configuring apps",
	"tags": [],
	"description": "Altinn Studio can been seen as a collection of different editors or applications specialized to create and edit different aspects of an Altinn Studio app.",
	"content": "To support building apps Altinn Studio have different functionality to building and configuring different aspects of the app.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/api-expose/\u0026quot;\u0026gt;API expose\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Apps created in Altinn Studio can be exposed as API together with UI, or only as API without any UI.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/api-use/\u0026quot;\u0026gt;API use\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;To be able to support \u0026amp;#34;once-only\u0026amp;#34; it is essensial that it is easy to do API-call from an app to other systems APIs.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/code-editor/\u0026quot;\u0026gt;Create AppLogic with code\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;App behavior can be controlled by code.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/app-parameters/\u0026quot;\u0026gt;App Parameters\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The application contain different parameters that controlls the behaviour.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/authorization-rules/\u0026quot;\u0026gt;Set Authorization Rules\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Studio let the developer set the authorization requirements for a App\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/data-modeling/\u0026quot;\u0026gt;Data modeling\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Defining the data model(s) for an app is important. Altinn Studio will support importing existing data models and creating new data models.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/helptext/\u0026quot;\u0026gt;Configure help texts\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Help developer configure help texts for components\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/prefill/\u0026quot;\u0026gt;Configure Prefill\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Studio will let the developer define prefill for datamodel from register and profile.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/define-process/\u0026quot;\u0026gt;Define app process\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;As part of the development one must define a process for the app that end user needs to follow.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/text/\u0026quot;\u0026gt;Text and translations\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Using texts when designing UI, defining workflow, other settings, deploy, and more.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/ui-designer/\u0026quot;\u0026gt;UI Design\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The UI-designer is the part of Altinn Studio where the developer can create UI for the app.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/c-sharp/",
	"title": "C#",
	"tags": ["tech", "programming"],
	"description": "Server side programming language.",
	"content": "C# is the server-side development language used in Altinn Studio.\nLinks  Extension for Visual Studio Code C# documentation C# language design History  "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/calculationhandler/",
	"title": "CalculationHandler.cs",
	"tags": ["todo"],
	"description": "Beskrivelse av format for calculation handler.",
	"content": "Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes\rvidere med i MVP.\r\rOverordnet \u0026lsquo;CalculationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som gjør kalkuleringer.\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom CalculationHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/logic/calculation/",
	"title": "Calculations",
	"tags": [],
	"description": "How to add calculations?",
	"content": "Calculation is from 4.7.0 replaced by data processing. See here\nCalculation Calculations are run on the server, and are based on input from the user/form data. Calculations does not have to be purely mathematical, they can also transfer values between fields, retrieve results from API calls and so on.\nCalculations are coded in C#, in the file CalculationHandler.cs. This file can be edited the easiest by downloading the source code of the app and editing it on your own computer, e.g. in Visual Studio Code. The data model with form data is available and can be edited/updated when needed.\nCalculations are run every time data is saved. With autosave on (default), calculations are run each time a user makes a change.\nIMPORTANT: When a calculation that has updated the data on the server has been run, the front-end must be notified so that the updated data can be loaded.\rTo do this, the `Calculate`-method must return `true` if any of the data has been updated.\rIf this is not done, the updated data will not be visible for the user until they reload the page.\r\rExample on code that replaces a given value (12345678) with another value (22222222) in a given field is shown below:\npublic bool Calculate(object data) { if (data.GetType() == typeof(Skjema)) { // Cast the data object to model type to access all fields  Skjema model = (Skjema)data; // Get the existing value of a specified field, if it exists  string tlf = model? .OpplysningerOmArbeidstakerengrp8819? .OpplysningerOmArbeidstakerengrp8855? .OppgavegiverTelefonnummerdatadef27335?.value; // Check if the value exists and is equal to \u0026#34;12345678\u0026#34;  if (tlf != null \u0026amp;\u0026amp; tlf == \u0026#34;12345678\u0026#34;)  { // Replace the value in the field with a new value, \u0026#34;22222222\u0026#34;  model .OpplysningerOmArbeidstakerengrp8819 .OpplysningerOmArbeidstakerengrp8855 .OppgavegiverTelefonnummerdatadef27335.value = \u0026#34;22222222\u0026#34;;  // Return true to trigger a re-loading of data  return true; } } // Return false if no changes have been made  return false; } "
},
{
	"uri": "https://docs.altinn.studio/tags/case/",
	"title": "case",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/certificate/",
	"title": "certificate",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/checklist/",
	"title": "checklist",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ci/",
	"title": "ci",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/code-lists/",
	"title": "code lists",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/code-quality/",
	"title": "code-quality",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/cli/commands/",
	"title": "Commands",
	"tags": ["altinn-cli commands"],
	"description": "A description of all default Altinn CLI Commands",
	"content": "The command concept The concept of the CLI application are related to the different parts of a command line command.\nExample: Storage GetData appId=ttd/how-to-name-it processIsComplete=true\n Command: Storage SubCommand: GetData Option: \u0026ldquo;appId=ttd/how-to-name-it\u0026rdquo; \u0026ldquo;processIsComplete=true\u0026rdquo;  Command The name of the command shall give an indication of which system component that shall be accessed.\nSubCommand A sub command defines the operation to be performed on the Command component.\nOption Options are often used as filter criteria that can be a part of the API call.\nApplication command The Application command is used to interact with application instances. Required configurations are top level configurations and maskinporten settings\nCreateInstance TODO.\nGetInstances This command downloads all application instances and stores them in the configured StorageOutputFolder. Note that all instances, regardless of state, are downloaded.\nApplication GetInstances org={org} app={app} Batch command The batch command allows you to interact with an application through providing batches of data.\nSome configurations are required to be in place before running the batch command. Read about the setup of MaskinportenSettings and IntantiationConfig.\nCreateInstancesA2 Batch CreateInstancesA2 instantiates a batch of instances based on the Altinn 2 xml schema.\nStorage command The Storage command is used to fetch and upload instance data.\nRequired configurations are top level configurations and maskinporten settings\nGetData GetData fetches data elements from Storage. Data can be fetched for an application with different filter criteria or data can be fetch for a specific owner and instance.\nExamples:\nBelow is an example for fetching a specific data element\nStorage GetData ownerId={ownerId} instanceId={instanceId} dataId={dataId} Below is an example for fetching all data elements for an application instances where the process is completed\nStorage GetData appId=\u0026lt;applicationId\u0026gt; processIsComplete=true GetInstance GetInstance fetches the metadata of an instance from Platform Storage. An option savetofile is available for storing the instance object to a file, rather than write it in the console. The json-file will be available in the configured StorageOutputFolder.\nExamples:\nBelow is an example for fetching an instance object and writing it to the console\nStorage GetInstance ownerId={ownerId} instanceId={instanceId} The command below will save the instance data to a file. Storage GetInstance ownerId=50042027 instanceId=d1e27067-fcce-461c-88b3-ff0d94631a40 savetofile\nUploadData Upload uploads a data element to storage, for instance a receipt.\nExample:\nStorage UploadData ownerId={ownerId} instanceId={instanceId} elementType={elementType} file={filepath} The command options defines application owner and to which instance the data shall attached and the full path to the file that shall be uploaded.\nHelp command The Help command displays help information that is registered on commands, subcommands and options according command line options.\nExamples:\nHelp Storage displays the available Storage subcommands.\nHelp Storage GetData displays help information registered on the GetData subcommand which shall a command description and a list with description on all options that can be used.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/",
	"title": "Architecture Components",
	"tags": ["architecture"],
	"description": "Architecture Components describes the application, data, platform and infrastructure components that provides the capabilities.",
	"content": "Components relationship The figure below shows the relationship between the different componentes in the technical architecture and the capabilities they provide.\n\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/\u0026quot;\u0026gt;Application Components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Application Components is split in to solution-specific application components, application construction components and non-solution application components.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/data/\u0026quot;\u0026gt;Data Components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Data is the most important part of the solutions in Altinn.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/infrastructure/\u0026quot;\u0026gt;Infrastructure components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn 3 is hosted in public cloud, and all infrastructure components are cloud based.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/platform/\u0026quot;\u0026gt;Platform Components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Platform components are a mix of managed services and standard software/frameworks used to created the needed capabilties.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/ui-designer/components/",
	"title": "Available UI components",
	"tags": ["ui-designer", "ui-components"],
	"description": "Overview of the components that are available for use.",
	"content": "Text components \r\r\rComponent name\rAvailable properties\rProperties editor\rDefault look\r\r\rTitle\n(\"Header\" in json)\r\r\rTitle text(text in json)\rTitle type H2, H3, H4(\"L\" or \"h2\", \"M\" or \"h3\", \"S\" or \"h4\" in json)\r\r\r\r\r\rParagraph\r\r\rParagraph text\r\r\r\r\r\r\rBasic form components \r\r\rComponent name\rAvailable properties\rProperties editor\rDefault look\r\r\rInput\r\r\rLink to data model\rLabel text\rDescription text\r\r\r\r\r\rCheckboxes\r\r\rLink to data model\rLabel text\rDescription text\rMethod to add options (codelist/manual)\rCodelist name\rManual option\r\rLabel\rValue\r\rPre-selected choice\r\r\rManual adding of options \r\rAdding options via codelist \r\r\r\r\rRadio buttons\r\r\rLink to data model\rLabel text\rDescription text\rMethod to add options (codelist/manual)\rCodelist name\rManual option\r\rLabel\rValue\r\rPre-selected choice\r\r\rManual adding of options \r\rAdding options via codelist \r\r\r\r\r\rDropdown\r\r\rLink to data model\rLabel text\rDescription text\rCodelist id\r\r\r\r\r\r\r\r\rText Area\r\r\rLink to data model\rLabel text\rDescription text\rRead only\r\r\r\r\r\r\rDatepicker\r\r\rLink to data model\rLabel text\rDescription text\r \r\r\r\r\rButton\r\r\rAction (not configurable in MVP)\rLabel text\r \rTBA\rTBA\r\r\rFile Upload\r\r\rComponent mode\rLabel text\rDescription text\rAccepted attachment types, see html input accept parameter\rMax number of attachments\rMax file size in mb\r\r\r\r\r\r\r\rNOTE: To make a File Upload component optional, make sure to set the minimum number of attachments to 0. The 'optional' value (used on other components) does not work for file upload. \rAdvanced form components Advanced form components are components that potentially contain multiple fields that each need to be mapped to a field in the data model. They will typically contain fields that are functionally related, ex. fields related to address, see below.\nNOTE: The address component is a proof of concept. The content/design of this component and its configuration is under development. The component is available for use, but might undergo major changes in the future.\r\r\r\r\rComponent name\rAvailable properties\rProperties editor\rDefault look\r\r\rAddress component (simple mode)\r\r\rLink to data model for field:\r\rAddress\rPostal code\rPostal area\r\rLabel text for Address field\r\r\r\r\r\rAddress component (advanced mode)\r\r\rLink to data model for field:\r\rAddress\rPostal code\rPostal area\rC/O\rHousing number\r\rLabel text for Address field\r\r\r\r\r\rGroup\r\r\rGroup id\rRepeating group\rLink to data model\rNumber of repetitions\r\r\r\rNon edit view \r\r\r\r\r\rSee all Github issues for UI-editor.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/infrastructure/computing/",
	"title": "Compute components",
	"tags": ["architecture", "infrastructure"],
	"description": "Compute components gives processor power to applications and software",
	"content": "Azure Kubernetes Services Altinn 3 uses Kubernetes to manage all our containerized applications.\nAzure Kubernetes Services (AKS) is a fully managed Kubernetes used by Altinn 3.\nFor each environment (Production, Application Test, Performance Test, and Integration Test) there is AKS cluster for Altinn Platform and the orgs set up for that specific environment.\nThe Kubernetes masters are managed by Azure. Our DevOps team only manages and maintains the agent nodes. As a managed Kubernetes service, AKS is free - Microsoft only charges for the agent nodes within your clusters, not for the masters.\nWith more than 50 orgs hosting services in Altinn 2 it is expected that Altinn 3 will have several hundreds of AKS clusters managed by the DevOps team.\nNodes Each AKS cluster has one Node Pool\nFor each Node Pool there is a set of nodes.\nThe size of the node pool varies depends on the type of cluster.\nCurrently, we use Dsv3-series\n Standard_D2s_v3 is the current standard for org clusters Standard_D4s_v3 is used on a medium cluster Standard_D8s_v3 is used on the clusters with the highest requirements.  The number of nodes can vary between the different clusters. Microsoft recommends not to have less than three nodes in a single system node pool.\nSupported Kubernetes Versions The Kubernetes community releases minor versions roughly every three months. These releases include new features and improvements. Patch releases are more frequent (sometimes weekly) and are intended for critical bug fixes within a minor version. These patch releases include fixes for security vulnerabilities or major bugs.\nAKS supports the latest versions of Kubernetes.\nSee a list of Supported Kubernetes Versions.\nThe Altinn DevOps team upgrades the different Kubernetes Clusters.\nAzure Functions Apps Azure Functions is a serverless solution that allows you to write less code, maintain less infrastructure, and save on costs. Instead of worrying about deploying and maintaining servers, the cloud infrastructure provides all the up-to-date servers needed to keep your applications running.\nIn Altinn 3 we use Azure Function Apps to the following\n Data Cleanup : A application for cleaning up data CosmosBackup : A application that backup data for cosmos DB in to a blob storage.  Virtual machines Developer machines Our developer machines are hosted as virtual machines in Azure.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/data/conceptual/",
	"title": "Conceptual",
	"tags": ["architecture"],
	"description": "The conceptual data model describes the data entities in the solutions and their relatiohip.",
	"content": "Description Instance Usage Storage "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/apptemplates/asp.net/configuration/",
	"title": "Configuration of Application",
	"tags": ["altinn-apps", "todo"],
	"description": "Description of the different configurations of an app.",
	"content": "Configuring Process The App process is controlled by a BPMN 2.0 process file located in the app repository.\nSee architecture for supported types of steps.\nConfiguration of Authorization Policy The authorization policy is defined as a XACML 3.0 policy file.\nConfiguration of allowed data elements TODO\nConfiguration of Linkerd Every app cluster has linkerd installed as a service mesh. The app can be configured to use linkerd to encrypt the traffic between the ingress controller and the app. Configuration is done through the deployment files in the app repo. Older app templates are missing this configuration, but the deployment files can be copied from a new app template without modification.\nEnabling/disabling linkerd is configured through linkerd.enabled property in the deployment/values.yaml file.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/cli/configuration/",
	"title": "Configuration",
	"tags": ["altinn-cli configuration"],
	"description": "A description of required configurations before using Altinn CLI.",
	"content": "Configuration The configuration of Altinn CLI is contained in appsettings.json in the repository.\nIt contains three sections:\n Top level config Maskinporten settings InstantiationConfig  Top level configurations These configurations cover where to read and store data for the general commands, as well as setting up base addresses for both Platform Storage and the app owner to interact with.\nBelow are the default values, further follows a description of each property.\n{ \u0026#34;StorageBaseAddress\u0026#34;: \u0026#34;https://platform.tt02.altinn.no/storage/api/v1\u0026#34;, \u0026#34;AppBaseAddress\u0026#34;: \u0026#34;https://{org}.apps.tt02.altinn.no\u0026#34;, \u0026#34;StorageOutputFolder\u0026#34;: \u0026#34;c:/storage/Output\u0026#34;, \u0026#34;StorageInputFolder\u0026#34;: \u0026#34;c:/storage/Input\u0026#34;, \u0026#34;CommandDefinitionFile\u0026#34;: \u0026#34;C:/storage/CommandDefs/Commands.json\u0026#34; }    Name Description     StorageBaseAddress Base address for Platform Storage. Use domain tt02.altinn.no or altinn.no   AppBaseAddress Base address for the app owner in Altinn. Use domain tt02.altinn.no or altinn.no   StorageOutputFolder Folder where all output data should be stored. I.e. where to store downloaded instance data.   StorageInputFolder Folder where all input data can be found. I.e. where all instance templates are available,   CommandDefinitionFile Path for custom command definitions. If file exists, default commands will not be available.    Maskinporten settings All clients interacting with an Altinn App and Altinn Platform must be authenticated using an Altinn Token. In Altinn CLI, this is enabled by first authenticating through Maskinporten, and then converting the token.\nMaskinporten settings cover the configuration for the registered client in maskinporten, as well as enabling an automatic exchange into an Altinn Token before sending a request.\nRead more about setting up a maskinporten client with a custom key here.\nA closer description of the config values is available here.\nYour maskinporten setting should look something like the example below. Note that ExchangeToAltinnToken is set to true, and the scopes that are required. for interacting with an app or the platform.\n\u0026#34;MaskinportenSettings\u0026#34;: { \u0026#34;Environment\u0026#34;: \u0026#34;ver2\u0026#34;, \u0026#34;ClientId\u0026#34;: \u0026#34;e15abbbc-36ad-4300-abe9-021c9a245e20\u0026#34;, \u0026#34;Scope\u0026#34;: \u0026#34;altinn:serviceowner altinn:serviceowner/instances.read altinn:serviceowner/instances.write\u0026#34;, \u0026#34;EncodedJwk\u0026#34;: \u0026#34;eyJwIjoiMms2RlZMRW9iVVY0dmpjRjRCVWNLOUhasdfasdfarhgawfN2YXE5eE95a3NyS1Q345435S19oNV45645635423545t45t54wrgsdfgsfdgsfd444aefasdf5NzdFcWhGTGtaSVAzSmhZTlA0MEZOc1EifQ==\u0026#34;, \u0026#34;ExhangeToAltinnToken\u0026#34;: true } Instantiation configuration The instantiation configuration is used by the batch command to identify folders to read/write from and to, as well as to find the mappings for Altinn App entities such as applicationId and dataType.\nBelow is a description of each property in the config, further follows an example of an instantiation configuration.\n   Name Description     InputFolder The folder where all batch files are available to be processed   OutputFolder The folder where all processed batch files are moved to   ErrorFolder The folder where the generated batch of all failed jobs is stored   ApplicationIdLookup A dictionary for mapping ExternalServiceCode to ApplicationId   DataTypeLookup A dictionary for mapping DataFormatId to dataType    \u0026#34;InstantiationConfig\u0026#34;: { \u0026#34;InputFolder\u0026#34;: \u0026#34;C:/altinn-batch/input\u0026#34;, \u0026#34;OutputFolder\u0026#34;: \u0026#34;C:/altinn-batch/output/\u0026#34;, \u0026#34;ErrorFolder\u0026#34;: \u0026#34;C:/altinn-batch/error/\u0026#34;, \u0026#34;ApplicationIdLookup\u0026#34;: { \u0026#34;5681\u0026#34;: \u0026#34;ttd/apps-test\u0026#34;, \u0026#34;1337\u0026#34;: \u0026#34;ttd/apps-test-prod\u0026#34;, }, \u0026#34;DataTypeLookup\u0026#34;: { \u0026#34;6823\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;1337\u0026#34;: \u0026#34;Kursdomene_BliTjenesteeier_M_2020-05-25_5703_34553_SERES\u0026#34; } } "
},
{
	"uri": "https://docs.altinn.studio/tags/confirmation/",
	"title": "confirmation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/development/api/consume/",
	"title": "Consume APIs in an app",
	"tags": [],
	"description": "An application can consume open and closed APIs available through the Internet.",
	"content": "ASP.NET Core has good opportunities to consume different types of API.\nThis can be useful if you want to expose your organization\u0026rsquo;s own APIs via an app or need help from external APIs in the application logic.\nOn this page, an example of using an external open API to enrich form data is presented. The example app is available in Altinn Studio.\nThe API used is RestCountries v3, and it\u0026rsquo;s the endpoint https://restcountries.com/v3.1/name/{country} we will use. The endpoint returns metadata about the provided country.\nYou may test the API in your browser and study the response: https://restcountries.com/v3.1/name/Norway.\nWe would like to enrich the form data with details about the country that the end user fills out.\nCreating models for the API If the API you are consuming is documented with Swagger or OpenAPI, you can easily generate C# classes based on the documentation.\nThis can be done manually, or by using available online tools.\nIn this example, the response object is quite large and contains much more data than we are interested in.\nHere is an abbreviated version of the response object for Norway\n[ { \u0026#34;name\u0026#34;: { \u0026#34;common\u0026#34;: \u0026#34;Norway\u0026#34;, \u0026#34;official\u0026#34;: \u0026#34;Kingdom of Norway\u0026#34;, \u0026#34;nativeName\u0026#34;: {} }, \u0026#34;idd\u0026#34;: {}, \u0026#34;capital\u0026#34;: [ \u0026#34;Oslo\u0026#34; ], \t\u0026#34;altSpellings\u0026#34;: [], \u0026#34;region\u0026#34;: \u0026#34;Europe\u0026#34;, \t\u0026#34;subregion\u0026#34;: \u0026#34;Northern Europe\u0026#34;, \u0026#34;languages\u0026#34;: {}, \u0026#34;translations\u0026#34;: {}, \u0026#34;latlng\u0026#34;: [ 62, 10 ], \u0026#34;landlocked\u0026#34;: false, \u0026#34;borders\u0026#34;: [], \u0026#34;area\u0026#34;: 323802, \u0026#34;demonyms\u0026#34;: {}, \u0026#34;flag\u0026#34;: \u0026#34;🇳🇴\u0026#34;, \u0026#34;maps\u0026#34;: {}, \u0026#34;population\u0026#34;: 5379475, \u0026#34;postalCode\u0026#34;: { \u0026#34;format\u0026#34;: \u0026#34;###\u0026#34;, \u0026#34;regex\u0026#34;: \u0026#34;^(\\\\d{4})$\u0026#34; } } ] In the application we are only interested in the data in the highlighted lines, capital and region. We create a minimal response object that only contains the properties we are interested in.\nIn the folder App/models a new file Country.cs is created.\nusing System.Collections.Generic; namespace Altinn.App.models { public class Country { public List\u0026lt;string\u0026gt; Capital { get; set; } public string Region { get; set; } } } The Country object contains the fields Capital og Region. Capital is a list of strings as a country can contain multiple capital cities.\nIn this example, the API doesn\u0026rsquo;t require a complex request object, so we only need this one model. Should you need a seperate model for the request object, a class can be created the same way.\nSetting up an interface for the client It is reccomended that an interface if defined for the client what will call the API. This enables you to benefit from the strenghts of .NET with dependency injection and efficient handeling of HTTP clients.\nIn the application repository, a new folder App/clients is created. Within this folder, a new file ICountryClient.cs is created.\nThe interface consists of a single method GetCountry, which accepts a string and returns a Country-objekt.\nDefine the interface as shown below.\nusing System.Threading.Tasks; using Altinn.App.models; namespace Altinn.App.client { public interface ICountryClient { /// \u0026lt;summary\u0026gt;  /// Retrieves metadata about the provided country.  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;country\u0026#34;\u0026gt;The name of the country\u0026lt;/param\u0026gt;  /// \u0026lt;returns\u0026gt;A country object\u0026lt;/returns\u0026gt;  public Task\u0026lt;Country\u0026gt; GetCountry(string country); } } The return object is framed by Task\u0026lt;...\u0026gt;, this is added to support the asynchronous running of this method.\nImplement the client The client contains the code that makes the request towards the API and maps the response to the Country-model, which is what the methods using the client expect as an output.\nThe full implementation of CountryClient is shown below.\nusing System; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.Text.Json; using System.Threading.Tasks; using Altinn.App.models; using Microsoft.Extensions.Logging; namespace Altinn.App.client { public class CountryClient : ICountryClient { HttpClient _client; ILogger\u0026lt;ICountryClient\u0026gt; _logger; JsonSerializerOptions _serializerOptions; public CountryClient(HttpClient client, ILogger\u0026lt;ICountryClient\u0026gt; logger) { _logger = logger; _client = client; _client.BaseAddress = new Uri(\u0026#34;https://restcountries.com/v3.1\u0026#34;); _serializerOptions = new() { PropertyNameCaseInsensitive = true }; } public async Task\u0026lt;Country\u0026gt; GetCountry(string country) { string query = $\u0026#34;name/{country}\u0026#34;; HttpResponseMessage res = await _client.GetAsync(query); if (res.IsSuccessStatusCode) { string resString = await res.Content.ReadAsStringAsync(); List\u0026lt;Country\u0026gt; countryResponse = JsonSerializer.Deserialize\u0026lt;List\u0026lt;Country\u0026gt;\u0026gt;(resString, _serializerOptions); return countryResponse.Any() ? countryResponse.First() : null; } else { _logger.LogError(\u0026#34;Retrieving country {country} failed with status code {statusCode}\u0026#34;, country, res.StatusCode); return null; } } } } At the top of the file you find a reference to all the namespaces the class depends on\nusing System; using System.Linq; using System.Net.Http; using System.Text.Json; using System.Threading.Tasks; using Altinn.App.models; using Microsoft.Extensions.Logging; Further, we define the class and which interface it inherrits from\npublic class CountryClient : ICountryClient Further, three private object _client, __logger and _serializerOptions\nprivate readonly HttpClient _client; private readonly ILogger\u0026lt;ICountryClient\u0026gt; _logger; private readonly JsonSerializerOptions _serializerOptions; The underscore before the name is simply a naming convention and does not a functional effect.\n _client will be populated with an HTTP client in the constructor _logger will be populated with a logger, enabling logging error messages and other messages in the client logic _serializerOptions will be instantiated and configured in the contructor to support deserialization of the API response  Further in the class, the constructor is defined\npublic CountryClient(HttpClient client, ILogger\u0026lt;ICountryClient\u0026gt; logger) { _logger = logger; _client = client; _client.BaseAddress = new Uri(\u0026#34;https://restcountries.com/v3.1\u0026#34;); _serializerOptions = new() { PropertyNameCaseInsensitive = true }; } Objects are populated if there is mathcing input in the constructor, and the remaining objects are nstantiated directly in the constructor.\nIf you require additional services in this class, simply add a private object and inject its interface in the constructor ad we have done for _logger and _client.\nFurther, you find the implementation of GetCountry.\npublic async Task\u0026lt;Country\u0026gt; GetCountry(string country) { string query = $\u0026#34;name/{country}\u0026#34;; HttpResponseMessage res = await _client.GetAsync(query); if (res.IsSuccessStatusCode) { string resString = await res.Content.ReadAsStringAsync(); List\u0026lt;Country\u0026gt; countryResponse = JsonSerializer.Deserialize\u0026lt;List\u0026lt;Country\u0026gt;\u0026gt;(resString, _serializerOptions); return countryResponse.Any() ? countryResponse.First() : null; } else { _logger.LogError(\u0026#34;Retrieving country {country} failed with status code {statusCode}\u0026#34;, country, res.StatusCode); return null; } } Here, the status code of the API call is verified before it is deserialized and the country object returned. If the statusCode is not one that indicates success, a log entry is made and null is returned. Her gjøres det en sjekk på at statuskoden på API-kallet er en suksess-kode før vi deserialiseres og returnerer objektet. Dersom det ikke er en suksess-statuskode logger vi en feil og returnerer null.\nRegistering the client in the application Once the interface and client is implemented, it should be registerd in App/Program.cs (.NET 6) or App/Startup.cs (.NET 5), to make it available to use in the application.\nIn the method ConfigureServices, the line below is included\nservices.AddHttpClient\u0026lt;ICountryClient, CountryClient\u0026gt;(); Using the client in the application logic To enrich the form data we need to include the use of our client in the logic in the method ProcessDataWrite in App/logic/DataProcessingHandler.cs.\nFirst the client must me made available by injecting it in the constructor of the class. DataProcessingHandler does not have a constructor by default, so this needs to be created.\npublic DataProcessingHandler() { } Further, a private entry for the client, inject the client into the constructor and assign it to the private client instance. The result should look like this:\nprivate readonly ICountryClient _countryClient; public DataProcessingHandler(ICountryClient countryClient) { _countryClient = countryClient; } _countryClient is now available in DataProcessingHandler, and we\u0026rsquo;re ready to implement the logic in the ProcessDataWrite method.\npublic async Task\u0026lt;bool\u0026gt; ProcessDataWrite(Instance instance, Guid? dataId, object data) { if (data.GetType() == typeof(skjema)) { skjema skjema = (skjema)data; if (!string.IsNullOrEmpty(skjema.land)) { Country country = await _countryClient.GetCountry(skjema.land.Trim()); if (country != null) { skjema.hovedstad = string.Join(\u0026#34;,\u0026#34;, country.Capital); skjema.region = country.Region; } else { skjema.hovedstad = skjema.region = string.Empty; } return true; } else { skjema.hovedstad = string.Empty; skjema.region = string.Empty; } } return await Task.FromResult(false); } If you attempt to build the applicatin at this point, an error will occur. DataProcessingHandler is instansiated in App.cs, so all dependencies must be included in this file and included in the initialization of DataProcessingHandler.\nIn the file App/logic/App.cs, the following changes are made\n  Add a reference to the namespace of the client at the top of the file\nusing Altinn.App.client;   Inject ICountryClient as the last element of the pp.cs-constructor.\nThis is done in line 14\n1public App( 2 IAppResources appResourcesService, 3 ILogger\u0026lt;App\u0026gt; logger, 4 IData dataService, 5 IProcess processService, 6 IPDF pdfService, 7 IProfile profileService, 8 IRegister registerService, 9 IPrefill prefillService, 10 IInstance instanceService, 11 IOptions\u0026lt;GeneralSettings\u0026gt; settings, 12 IText textService, 13 IHttpContextAccessor httpContextAccessor, 14 ICountryClient countryClient) : base( 15 appResourcesService, 16 logger, 17 dataService, 18 processService, 19 pdfService, 20 prefillService, 21 instanceService, 22 registerService, 23 settings, 24 profileService, 25 textService, 26 httpContextAccessor)   Include countryClient in the initialization ofDataProcessingHandler\n_dataProcessingHandler = new DataProcessingHandler(countryClient);   Caching of respons data A drawback of the example as it now stands if that a request will be made to the API each time a piece of the form data i updated.\nIt is a reasonable assumption that a countries capital and region will not change frequiently. If information about Norway is retrieved, we can store this in the application for a period of time, so the cost of the request is saved.\nThe changes to the code are not described in detail, but the complete code is available below. All the modifications are made to the CountryClient.cs-file.\nusing Altinn.App.models; using Microsoft.Extensions.Caching.Memory; using Microsoft.Extensions.Logging; using System; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.Text.Json; using System.Threading.Tasks; namespace Altinn.App.client { public class CountryClient : ICountryClient { private readonly HttpClient _client; private readonly ILogger\u0026lt;ICountryClient\u0026gt; _logger; private readonly JsonSerializerOptions _serializerOptions; private readonly IMemoryCache _memoryCache; private readonly MemoryCacheEntryOptions _cacheOptions; public CountryClient(HttpClient client, ILogger\u0026lt;ICountryClient\u0026gt; logger, IMemoryCache memoryCache) { _logger = logger; _client = client; _client.BaseAddress = new Uri(\u0026#34;https://restcountries.com/v3.1/\u0026#34;); _serializerOptions = new() { PropertyNameCaseInsensitive = true }; _memoryCache = memoryCache; _cacheOptions = new() { AbsoluteExpirationRelativeToNow = TimeSpan.FromHours(24) }; } public async Task\u0026lt;Country\u0026gt; GetCountry(string country) { string uniqueCacheKey = \u0026#34;Country_\u0026#34; + country; // Check if country is present in cache, if so return from cache  if (_memoryCache.TryGetValue(uniqueCacheKey, out Country outputCountry)) { return outputCountry; } string query = $\u0026#34;name/{country}\u0026#34;; HttpResponseMessage res = await _client.GetAsync(query); if (res.IsSuccessStatusCode) { string resString = await res.Content.ReadAsStringAsync(); List\u0026lt;Country\u0026gt; countryResponse = JsonSerializer.Deserialize\u0026lt;List\u0026lt;Country\u0026gt;\u0026gt;(resString, _serializerOptions); if (countryResponse.Any()) { outputCountry = countryResponse.First(); // Add response country to cache  _memoryCache.Set(uniqueCacheKey, outputCountry, _cacheOptions); return outputCountry; } else { return null; } } else { _logger.LogError(\u0026#34;Retrieving country {country} failed with status code {statusCode}\u0026#34;, country, res.StatusCode); return null; } } } } "
},
{
	"uri": "https://docs.altinn.studio/tags/consume-api/",
	"title": "consume API",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/containers/",
	"title": "containers",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authorization/contexthandler/",
	"title": "Context Handler",
	"tags": ["architecture", "security", "authorization", "xacml"],
	"description": "The responsibility to the Context Handler is to enrich a decision request sent from a PEP so it can be evaluated by PDP.",
	"content": "As an example, a decision request could contain only userId and instanceId together with the action requested.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Request xsi:schemaLocation=\u0026#34;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17 http://docs.oasis-open.org/xacml/3.0/xacml-core-v3-schema-wd-17.xsd\u0026#34; ReturnPolicyIdList=\u0026#34;false\u0026#34; CombinedDecision=\u0026#34;false\u0026#34; xmlns=\u0026#34;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:user-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;15468\u0026lt;/AttributeValue\u0026gt;  \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:instance-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;cbdc7b44-9442-4fe0-854b-da278bf0b0e\u0026lt;/AttributeValue\u0026gt;  \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;Read\u0026lt;/AttributeValue\u0026gt;  \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:environment\u0026#34; /\u0026gt; \u0026lt;/Request\u0026gt; The enriched decision request contains all the needed attributes for subject and resource so PDP can identify the correct policy and evauluate the request based on it.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Request xsi:schemaLocation=\u0026#34;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17 http://docs.oasis-open.org/xacml/3.0/xacml-core-v3-schema-wd-17.xsd\u0026#34; ReturnPolicyIdList=\u0026#34;false\u0026#34; CombinedDecision=\u0026#34;false\u0026#34; xmlns=\u0026#34;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34;\u0026gt;  \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:user-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;1\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;DAGL\u0026lt;/AttributeValue\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;REGNA\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34;\u0026gt;  \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:instance-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;cbdc7b44-9442-4fe0-854b-da278bf0b0e\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:org\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;SKD\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:app\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;TaxReport\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:task\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;FormFilling\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:partyid\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;123456\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34;\u0026gt;  \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;Read\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:environment\u0026#34; /\u0026gt; \u0026lt;/Request\u0026gt; Uses Policy Information Point Context handler uses instance data from storage and role data for the subject.\nThe authorization component request this information from PIP for roles and PIP for resources.\nThis is described in the pip section\nImplementation details See construction components for context handler for implementation details for the context handler.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/crds/",
	"title": "crds",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/custom-resources/",
	"title": "custom resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/process/customize/",
	"title": "Customize Views of Step",
	"tags": [],
	"description": "How to customize views in different steps of a process.",
	"content": "An application wil have a process which the user of the application follows. Depending of the type of step the user is in, different views are presented. This page explains the different views and how they can be customized.\nData In this process task a form which the user can fill in data. The form can be edited using the UI editor or by changing FormLayout.json manually.\nConfirmation In this process task some standard texts are presented and the user can choose to confirm to go forward.\nThese texts can be overridden by manually adding each defined text keys in the apps text resources. More information about how this is done can be found here. In the following section we will present an overview of the different texts that can be customized.\nCustomize texts    Text # (see image above) Text key     1 confirm.title   2 confirm.sender   3 confirm.body   4 confirm.answers   5 confirm.attachments   6 confirm.button_text    Example of custom texts in the file resources.nb.json:\n{ \u0026#34;id\u0026#34;: \u0026#34;confirm.title\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Vennligst bekreft at du ønsker å sende inn\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;confirm.body\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Du må kun trykke send inn om du er helt sikker på at du vil sende inn. \u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;I det du trykker send inn kan du ikke gjøre endringer.\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;confirm.attachments\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Dokumenter med opplysninger\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;confirm.button_text\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Lagre og fortsett\u0026#34; } Note that in the example we have used the html-tag \u0026lt;br/\u0026gt; to make a line shift. For links and formatting use markdown.\nThis results in the following view:\nFeedback This is a process step where the application owner can validate the filled data to generate a feedback before the data is archived.\nIn the following section we will present an overview of the different texts that can be customized.\nCustomize texts    Text # (see image above) Text key     1 feedback.title   2 feedback.body    Example of custom texts in the file resources.nb.json:\n{ \u0026#34;id\u0026#34;: \u0026#34;feedback.title\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Vent på at tjenesteeier sjekker data\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;feedback.body\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Når tjenesteier har sjekket at alle data er godkjent vil du bli automatisk sendt videre til siste steg i prosessen.\u0026#34; } "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/apptemplates/asp.net/customizing/",
	"title": "Customzing Application",
	"tags": ["altinn-apps"],
	"description": "Description of you can customize the app based on this template.",
	"content": "Adding custom API\u0026rsquo;s It is possible to add custom API\u0026rsquo;s to the app. The need to be added as web-api controllers in the app project.\nSee development handbook for a step to step guideline for adding custom API\u0026rsquo;s to the application.\nConsuming custom API\u0026rsquo;s A app can consume any REST-API avaiable on the Internet.\nSee development handbook for a step to step guideline for consuming external API\u0026rsquo;s.\nCustom frontend If the standard UI-editor is to limited it is possible to build a custom frontend with the single page application (SPA) framework of your choice. (React, Angular, Vue etc ++). You need to compile the SPA application and add it to the wwroot folder of the app. In addition you would need to modify the index.cshtml file to display your app.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/dashboard/",
	"title": "Dashboard",
	"tags": [],
	"description": "The Dashboard in Altinn Studio gives the developer full overview over their apps.",
	"content": "The dashboard lets the developer search for apps, create new apps, list all orgs and apps that developer have access to.\nSee Getting started for more info on how to use dashboard.\nSee all issues for dashboard on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/data/",
	"title": "Data management Capabilities",
	"tags": ["architecture"],
	"description": "Data management capabilities range from handling data to defining data models for applications in Altinn Studio",
	"content": "Data Processing Capabilities Data Access The technical architecture for the different solutions has the capability to access data from different types of data stores.\nData Validation The platform has the capability to validate data according to the data model or to custom rules defined in code.\nReport generation It is possible to generate reports based on data.\nTODO: Add scenario where relevant\nData Enrichment \u0026amp; Aggregation A application developer can define data enrichment logic that enrich data.\nData Storage Capabilities Data Caching The technical architecture has the capability to support caching.\nData persistency The techincal architecture has serverel differen data persistence capabilities through different storage technologies.\nData partitioning \u0026amp; Segregation The data infrastructure has the capabiltity to partion data.\nReplication \u0026amp; Synchronization The data infrastructure has the capabilitiy to replicate \u0026amp; synchronize data.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/data/",
	"title": "Data Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Data is the most important part of the solutions in Altinn.",
	"content": "Altinn Studio, Altinn Apps and Altinn Platform is created to give the government, the citizens and the businesses of Norway a effective way to share data and retrieve data.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/data/conceptual/\u0026quot;\u0026gt;Conceptual\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The conceptual data model describes the data entities in the solutions and their relatiohip.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/data/logical/\u0026quot;\u0026gt;Logical datamodel\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The logcical datamodel describes the data entities that is stored.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/tags/data/",
	"title": "data",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/platform/datareporting/",
	"title": "Data &amp; Reporting Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Data and Reporting Components hold the functionalities to manage data and create business reports.",
	"content": "Reporting Software Dashboard and reporting server software Application Insights is used for dashboard and reporting services for the platform solutions.\nData visualization software Application Insights is used for visualization.\nData Stores Multi model database service Altinn Platform uses Azure Cosmos as a Multi model database service.\nRead more about Azure Cosmos DB.\nRelational DBMs We use Azure Database for PostgreSQL as a relational database for Gitea.\nRead more about Azure Database for PostgreSQL.\nDirectory Services We use Azure Directory Services.\nFile Share We use Azure File Storage.\nObject Storage We use Azure Blob Storage to store both structured and unstructured data for applications in Altinn Platform.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/data-modeling/",
	"title": "Data modeling",
	"tags": ["data-modeling", "todo"],
	"description": "Defining the data model(s) for an app is important. Altinn Studio will support importing existing data models and creating new data models.",
	"content": "The data model for an app typical defines the format of the data either sent to the app owner or presented in the app for the user. The data model is important for a consistent and formal definition of the data. It will be used for validation both from UI and for external systems.\nAltinn Studio will support both importing existing data model as XSD or creating a data modell. In MVP only import is in scope.\nSome requirements for Altinn Studio is:\n It should be easy to model data. Built in replacment for SERES (current tool). Need to support more formats.  See all issues related to Altinn Studio and data modeling on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/logic/dataprocessing/",
	"title": "Data processing",
	"tags": [],
	"description": "How to add Calculations and other data processing?",
	"content": "Data processing is run on the server and is based on input from the user/form data. Data processing can be purely mathematical calculations, or it could transfer values between fields, retrieve results from API calls, etc.\nData processing is coded in C#, in the file DataProcessingHandler.cs. This file can easily be edited by downloading the source code to the app and editing on your own computer, e.g. in Visual Studio Code. The data model with form data is available and can be edited/updated when needed.\nData processing runs each time data is saved and when data is retrieved from API. With auto-save on (default) data processing will run each time a user has made a change.\nTo ensure optimal experience and control, the application template has two different events where logic can be placed.\n ProcessDataWrite runs when data is saved ProcessDataRead runs when data is read from the database  IMPORTANT: When a data processing that has updated the data on the server has been run, the front-end must be notified so that the updated data can be loaded.\rTo do this, the ProcessdataWrite method must return true if any of the data has been updated.\rIf this is not done, the updated data won't be visible for the user until they refresh the page.\r\rExample on code from app that processes and populates different data while saving.\npublic async Task\u0026lt;bool\u0026gt; ProcessDataWrite( Instance instance, Guid? dataId, object data) { bool edited = false; if (data is SoknadUnntakKaranteneHotellVelferd model) { string org = instance.Org; string app = instance.AppId.Split(\u0026#34;/\u0026#34;)[1]; int partyId = int.Parse(instance.InstanceOwner.PartyId); Guid instanceGuid = Guid.Parse(instance.Id.Split(\u0026#34;/\u0026#34;)[1]); // handling mapping of multiple choice velferdsgrunner  if (!string.IsNullOrEmpty(model.velferdsgrunner?.sammenstilling)) { model.velferdsgrunner.helseproblemer = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;helseproblemer\u0026#34;); model.velferdsgrunner.barnefodsel = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;barnefodsel\u0026#34;); model.velferdsgrunner.begravelse = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;begravelse\u0026#34;); model.velferdsgrunner.naerstaaende = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;naerstaaende\u0026#34;); model.velferdsgrunner.adopsjon = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;adopsjon\u0026#34;); model.velferdsgrunner.sarligeOmsorg = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;sarligeOmsorg\u0026#34;); model.velferdsgrunner.barnAlene = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;barnAlene\u0026#34;); model.velferdsgrunner.hjemmeeksamen = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;hjemmeeksamen\u0026#34;); model.velferdsgrunner.arbeidunntak = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;arbeidunntak\u0026#34;); model.velferdsgrunner.andreVelferdshensyn = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;annet\u0026#34;); model.velferdsgrunner.andreVelferdshensynBeskrivelse = model.velferdsgrunner.sammenstilling.Contains(\u0026#34;annet\u0026#34;) ? model.velferdsgrunner.andreVelferdshensynBeskrivelse : null; edited = true; } else { model.velferdsgrunner = null; } // set data for receipt if not set  if (string.IsNullOrEmpty(model.applogic?.altinnRef)) { model.applogic ??= new Applogic(); Party party = await _registerService.GetParty( int.Parse(instance.InstanceOwner.PartyId)); model.applogic.avsender = $\u0026#34;{instance.InstanceOwner.PersonNumber}-{party.Name}\u0026#34;; model.applogic.altinnRef = instance.Id.Split(\u0026#34;-\u0026#34;)[4]; } } return await Task.FromResult(edited); } "
},
{
	"uri": "https://docs.altinn.studio/tags/data-processing/",
	"title": "data processing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/data-storage/",
	"title": "Data Storage in Altinn Studio",
	"tags": ["altinn-studio", "data"],
	"description": "Description of how the data is stored in Altinn Studio",
	"content": "Designer    Volume-name Type Peristent Volume Claim     altinn-repo-storage azure-file altinn-storage-repo-premium-volume-claim    In designer altinn-repo-storage is used as an intermediate storage of \u0026ldquo;local\u0026rdquo; copies that an app-developer is working on in altinn-studio. These changes can then be pushed to altinn-repositories.\nDesigner also stores some metadata about what releases and deployments have been made to the various app-owner environements in Azure Comos DB - app-release-deployment. When designer either builds a release or deploys to en environment through an azure pipeline this triggers a seperate pipeline which in turn calls designer to update the CosmosDB.\nRepositories    Volume-name Type Peristent Volume Claim     altinn-gitea-storage azure-disk altinn-storage-gitea-volume-claim    altinn-repositories uses an azure-disk as storage volume. One drawback to this is that we only have the possibility for one attached pod at the time, which could set constraints on scalability.\nRepositories also is connected to a PostgreSQL database. The credentials for this database is read through the a secret called gitea-db-secret. There currently exists four of these databases:\n altinnstudio-db-prod-postgres altinnstudio-db-staging-postgres db-gitea-postgres t30-gitea-db  "
},
{
	"uri": "https://docs.altinn.studio/tags/data-modeling/",
	"title": "data-modeling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/datamodel/",
	"title": "datamodel",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/debug/",
	"title": "debug",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/testing/local/debug/",
	"title": "Debugging of app",
	"tags": ["translate-to-english"],
	"description": "When running the apps locally one can debug using various tools.",
	"content": "Følgende beskrivelse forutsetter at du har clonet applikasjonen fra Altinn Studio Repositories og har filene liggende på lokal harddisk.\nDebugging i Visual Studio Code For å debugge applikasjonen lokalt må du åpne applikasjonsprosjektet i Visual Studio Code. Velg åpne folder og bla deg frem til hvor repostoriet er lagret på din maskin.\nVelg debugging knappen til venstre i vertikal meny.\nDet er to måter å starte debugging av en applikasjon lokalt:\nStarte appen fra Visual Studio Code (.NET Core Launch) Denne metoden er den enkleste. Her vil Visual Studio Code starte applikasjonen og koble seg til i en og samme prosess\nVelg .NET Core Launch og trykk på den grønne \u0026ldquo;play\u0026rdquo; knappen.\nApplikasjonen vil da starte og han vil spørre om du skal starte en browser. Velg bare close.\nÅpne et browservindu og gå til http://altinn3local.no (forutsetter at du har startet lokal utviklingsplattform).\nStarte appen fra commando vindu Dette forutsetter at du har startet applikasjonen allerede. Gå til folderen hvor applikasjonen ligger og kjør kommando for å starte dotnet prosessen.\nI Visual Studio Code ha åpnet folderen med applikasjonsprosjektet. Attach deg til prosessen som heter Altinn.App.exe\nLegg til Breakpoints og analysere kode Sett breakpoints i code der du vil at debugger skal stoppe\nDer debugger stopper kan du analysere lokale verdier på objekter for å finne ut hvordan kode fungerer og eventuelt finne feil.\nLes mer om debugging i Visual Studio Code i dokumentasjonen til code.\n"
},
{
	"uri": "https://docs.altinn.studio/community/devops/definition-of-ready/",
	"title": "Definition of Ready",
	"tags": [],
	"description": "What needs to be in place before a team starts on a user story/issue.",
	"content": "Definition of Ready (DoR) Definition of Ready (DoR) is used to determine whether work on a user stories is ready to be started. It means it\u0026rsquo;s sufficiently well described and understood by the team to a level where they can provide an estimate and what needs to be done in order to complete the story.\nStories at the top of the product backlog that the team will be pulling into the sprint backlog, must be Ready to avoid misunderstandings and wasted time further down the development process. It does not mean it will be described in 100% detail, but good enough - think 80/20 rule.\nThe Product Owner is responsible for putting the features and stories in the backlog. However, the Team must work with the Product Owner during Backlog Refinement to help them get the stories into actionable shape.\nWhile the focus is on user stories, most of these also applies to technical tasks as well, just remove the bullets not needed (user story format, UX, WCAG). Another difference is that the PO is not responsible for bringing the issue to the table, that\u0026rsquo;s on the development team.\nThe following defines our Definition of Ready  Short descriptive title Description  Consider starting with the format As a [role] I [need] in order to [goal] Consider the INVEST qualities when writing the story Add more details to the story description as needed and as the discussion progresses   User experience and other pre-analysis work is done (if big consider this as separate issues) Technical considerations evaluated  Performance Scalability Cost (licenses, transactions, resource usage) Data volume Azure resources needed   Monitoring and alarms UX/design sketches is provided Security issues discussed and considered WCAG and ELMER requirements are discussed and considered Acceptance criterias is defined and the story is testable Dependecies to other tasks and user stories is considered Discussed with the team Story points added by the team  "
},
{
	"uri": "https://docs.altinn.studio/api/authentication/delegate-scopes/",
	"title": "Delegate API Access to a Supplier",
	"tags": ["translate-to-english"],
	"description": "Description of how service owner can delegate API accesses (scopes) to a subcontractor.",
	"content": "Enkelte tjenesteeiere ønsker at en underleverandør skal kunne agere på vegne av dem, f.eks. leverandører av fagsystemer. For å få til det, så må disse API-tilgangene delegeres til leverandøren ved bruk av Altinn.\nDet er tjenesteeiers ansvar å selv fjerne delegeringene om behovet for tilgang hos leverandør forsvinner.\nDelegering av API-tilganger til leverandør Som en bruker som er nøkkelrolleinnehaver for tjenesteeier (typisk daglig leder aka DAGL), åpne \u0026ldquo;Andre med rettigheter til virksomheten\u0026rdquo;.\nSå må de nødvendige rettighetene gis.\n Altinn tjenesteeier-API: Appinstanser (full tilgang) - gir tilgang til scopes for både read og write. Altinn tjenesteeier-API: Appinstanser (lesetilgang) - gir kun tilgang til read.  Fjerning av delegering Delegeringer som er gjort kan også fjernes. Om en leverandør ikke lenger har behov for API-tilganger så er det tjenesteeier sitt ansvar å fjerne disse.\nScopes Delegering gir tilgang til disse scopene for leverandør:\naltinn:serviceowner/instances.read altinn:serviceowner/instances.write "
},
{
	"uri": "https://docs.altinn.studio/app/maintainance/dependencies/",
	"title": "Update dependencies in app",
	"tags": [],
	"description": "How to update dependencies in an app.",
	"content": "The app is dependent on multiple external dependencies. This includes larger libraries with common functionality for all apps and reference to the apps frontend.\nThese dependencies are defined in different places in the app, and each dependency is references by a specific version. When fixes and improvements are made to the dependencies a new version will be published. To use the updated dependencies, you need to update the version use in your app.\nNuget Nuget is .NET package manager, this is where we publish code libraries that is used by all the apps.\nApps uses multiple libraries, these are updated regularly with improvements and new functionality. Apps references explicit versions of the different libraries. These references must be updated to get the latest version\nUpgrade to latest version Tip Install Version Lens-extension for Visual Studio Code.\nWith this extension you can view what the latest version of all dependencies when you open App.csproj (the extension also supports npm).\n\r\r Locate the references to the libraries used in your app. The references are located in App/App.csproj.  Example.:\n\u0026lt;ItemGroup\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;3.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;3.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;3.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Microsoft.Extensions.Logging.Debug\u0026#34; Version=\u0026#34;3.1.3\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Microsoft.VisualStudio.Web.CodeGeneration.Design\u0026#34; Version=\u0026#34;3.1.2\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt;  Check if a new version of the libraries are published:  Altinn.App.Api Altinn.App.Common Altinn.App.PlatformServices   Update the reference to the latest version and save the file. Check if there is any breaking changes with the new version, make necessary changes if there are any issues. Build and deploy a new version of your app.  App frontend App frontend is loaded at runtime, through a link to the javascript-file for app frontend. This javascript-file uses Semantic Versioning:\n Given a version number MAJOR.MINOR.PATCH, increment the:\nMAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards compatible manner, and PATCH version when you make backwards compatible bug fixes.\nAdditional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.\n The app references by default to a major version of app frontend, e.g. version 1.x.y With the default setup all minor and patch version will be automatically pulled in. If a new major version is published you need to update your app to pull this new version, watch out for breaking changes)\nIf you want to lock the frontend to a specific version of app frontend (e.g. 1.2.3) you specify this directly in the URL that points to app frontend.\nUpgrade to new version / specific version The reference to app frontend is located in App/views/Home/Index.cshtml.\nYou need to update two references:\n Reference to altinn-app-frontend.js-file which contains the code for app frontend.  \u0026lt;script src=\u0026#34;https://altinncdn.no/toolkits/altinn-app-frontend/\u0026lt;VERSIONNUMBER\u0026gt;/altinn-app-frontend.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;  Reference to altinn-app-frontend.css which contains the styling for app frontend.  \u0026lt;script src=\u0026#34;https://altinncdn.no/toolkits/altinn-app-frontend/\u0026lt;VERSIONNUMBER\u0026gt;/altinn-app-frontend.css\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Search for the filename (àltinn-app-frontend.jsoraltinn-app-frontend.css`) and replace the version number (e.g. 1) with the desired version number (e.g. 2).\nReminder: If you depend on a major version (e.g. 2), every minor and patch version of this major release will be applied automatically. If a specific version is defined (e.g. 2.0.0) the application will fetch this version until the reference is updated and no fixes or improvements will be fetched.\nDeployment Deployments are defined with helm-charts. The standard deployment setup is fetched from altinn-studios helm repository if you leverage the latest deployment strategy (recommended).\nIf you unsure if your app leverages the latest deployment strategy you can follow the migration guide here\nTo find the latest version of the standard helm-chart you can either check for the latest release of the chart deployment here or add the helm repo locally and search for available version with these commands:\n# Add the altinn-studio helm repo helm repo add altinn-studio https://charts.altinn.studio # Search for version of altinn-studio/deployment chart helm search repo -l altinn-studio/deployment If there is a new version of the helm chart check the changelog to see what\u0026rsquo;s new in this release.\nTo update to the new version update the dependency reference in deployment/Chart.yaml\napiVersion: v1 description: A Helm chart for Kubernetes name: deployment version: 1.1.0 dependencies: - name: deployment repository: https://charts.altinn.studio/ version: 1.1.0 \u0026lt;--- Update this "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/deployment/",
	"title": "App Deployment",
	"tags": [],
	"description": "Altinn Studio will let the developer deploy apps to all enviroments without any manuel steps.",
	"content": "An app developer can build and deploy apps to all test and production environments available for that org.\nBuilds is based on the latest source code checked in to master branc for a given app. Each build can have a description. When build is complete the build can be deployed to a given environment.\nSee issues related to app-deployment on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/deploy/",
	"title": "deploy",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/softwareconfiguration/deployment/",
	"title": "Deployment",
	"tags": ["deployment"],
	"description": "Description of the Altinn Studio solution",
	"content": "The Altinn Studio components are deployed as two different solutions.\n Altinn Studio - The complete Development solution. Altinn Apps - Where apps are hosted and accessed by end users.  In this section you will find details about the deployment architecture for these solutions.\nIn addition there is a seperate article on how End Users Apps developed in Altinn Studio are deployed to the runtime solution.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/deployment/",
	"title": "deployment",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-studio/designer/",
	"title": "Application Construction Components Designer",
	"tags": [],
	"description": "Designer is split in two applications. One frontend created in REACT that communicates with the back-end application through rest-API.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-studio/designer/frontend/\u0026quot;\u0026gt;Application construction components - Designer Front-end\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the application construction components for Altinn Studio Designer Front-end\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/altinn-studio/designer/backend/\u0026quot;\u0026gt;Altinn Studio Designer - Back-end\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Application construction components used in Altinn Studio Designer backend.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-studio/designer/",
	"title": "Solution-specific application components Altinn Studio Designer",
	"tags": ["solution", "architecture"],
	"description": "Altinn Studio Designer is the custom appliaction where app developers manage and creates applications.",
	"content": "Altinn Studio Designer contains serveral functional components/modules.\nWelcome Screen The welcome screen gives information to the user.\nDashboard Dashboard let the app developer search and find applications developed in Altinn Studio. It possible to search across all orgs the developer has access to.\nApp Creation App creation functionaliy lets the app developer create applications.\nDuring this process the app developer can select the org that will own the app and the repository name for that app.\nApp Info Application info module lets the user change the name of the app and add descriptions\nUI Editor The UI-editor lets the app developer create a UI interface with WYSIWYG\nDatamodel The datamodel functionality lets the developer upload a XSD for datamodel creation in app.\nWhen datamodel is uploaded a C# classes is generated based on this and metadata about datamodel is created.\nBuild \u0026amp; Deploy Build \u0026amp; Deploy functionality includes functionality to\n Build created app to a docker container Upload docker container to a container registry Register the build in to a database Let the app developer select a previous build and deploy that container to a specific Altinn Apps environment (test, performance test, production ++)  Process Process functionality lets the app developer configure the given process that a user/system acessing the developed app should follow.\nTexts The text module lets the app developer define the texts for a given app.\nLogic Editor The logic editor module lets the app developer create and modify app logic like validation and calculation. This is a very simple browser based editor. The recomendation is to clone the app repository and edit the code in a regular IDE like Visual Studio Code\nPolicy Administration Point As part of the application development process the developer defines the authorization policies for the app.\nRead more about PAP and policies.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/",
	"title": "Altinn Studio Designer",
	"tags": ["altinn-repos"],
	"description": "This is where developers create, modify, build and deploy apps. In the background Designer uses Git to store code and config in Altinn Studio Repos.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/\u0026quot;\u0026gt;Functionality in Designer\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The designer can been seen as a collection of different editors specialized to create and edit different aspects of an application.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/nonsolutionspecific/development/",
	"title": "Development Applications",
	"tags": ["solution", "architecture"],
	"description": "Development Applications are used by the devops team to support the different development capabilities required.",
	"content": "Application Lifecycle Management Applications Requirement \u0026amp; Release Management Use cases are defined in Github. We have defined differen types of template to support creation of user stories.\nReleases are managed on Github.\nSee releases here.\nManual \u0026amp; Automated Test Tools Functional Test  Automated browser testing and WCAG testing using Cypress.  Unit Test  Jest framework used for unit testing front-end. More details here. xunit used for unit testing back-end.  Service \u0026amp; API Test  API testing is done using Postman. More details here. Integration testing of services done using standard Microsoft frameworks.  Performance Testing \u0026amp; Profiling We will use K6 for performance testing.\nTestmanagement  Azure Test Plans in Azure Devops is usted for execution tracking Defects reported as issues in Github, using the Bug template.  DevSecOps Applications UX Design We use Figma for prototypes.\nSee our Figma Guidlines.\nArtefact \u0026amp; Code Repository Github is uses for all Open Source code. See our GitHub repository.\nAzure Repos in Azure DevopsServices is used for other artefacts\nArchitecture Design Application design is created using MarkDown and published on this site. Visio is used for application drawings.\nIDE The project uses Visual Studio Code and Visual Studio as IDE.\nBuild Tools The project uses different build tools based the framework.\n.NET packages \u0026amp; applications We use .Net build to build .Net packages and applications.\nWith help of Nuget packages we can easyly re-use modules accross applicatons in the different solution.\nJavascript Packages \u0026amp; applications Node is the main tool to build our javascript pacakges and applications\nLerna is used to \u0026hellip;\nJava packages \u0026amp; application We use Maven to build our java applications.\nDocker containers All applications is built as Docker Containers using Docker Build\nSe Docker files for Altinn Platform\n Authentication component Authorization component PDF Component Profile Component Receipt Component Register Component Storage Component  See docker files for Altinn Studio\n [Designer])(https://github.com/Altinn/altinn-studio/blob/master/src/AltinnCore/Designer/Dockerfile)  Artefact \u0026amp; Container Registry .NET Packages .NET packages som part of the codes are published as Nuget Packages. This process is manual and performed by developer.\n.Net packes used are also retrived from .Net\nJavascript packages The project uses NPM for javascript packages.\nIn the future we will publish NPM packages for parts of the solutions.\nDocker Containers Dockers containers are published to Azure Container Registry\nThere is a shared Altinn Container Registry for the different Environments for Altinn Studio and Altinn Platform.\nNote as part of the runtime capabilityes we also use Azure Container Registry for apps created in Altinn Studio. See solution components\nDeployment Orchestration We use Azure Pipelenes for deployment orchestration of the different components in the different solutions.\nThe deploy pipelines has typical support for deployment to different environments (Stages).\nHelm is used to set environments variables for the different environments.\nPiplines The following pipelines is defined\n Altinn Studio - Designer Altinn Studio - Repositories Altinn Platform - Authorization Altinn Platform - Authentication Altinn Platform - PDF Altinn Platform - Profile Altinn Platform - Receipt Altinn Platform - Register Altinn Platform - Storage  "
},
{
	"uri": "https://docs.altinn.studio/tags/development/",
	"title": "development",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/community/devops/",
	"title": "DevOps",
	"tags": [],
	"description": "How we do DevOps.",
	"content": "\r\rFullscreen\n\rDefinition of Ready\rWhat needs to be in place before a team starts on a user story/issue.\n\rRoadmap prosess\rHvordan jobber vi med vår roadmap\n\rTeams\rOur DevOps teams\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/devops/",
	"title": "devops",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/tools/docker/",
	"title": "Docker",
	"tags": ["tech", "containers"],
	"description": "Docker is the container technology used in Altinn Studio, Altinn Apps and Altinn Platform.",
	"content": "Docker is used as the container technology for hosting Altinn Studio Designer and Altinn Studio Repos.\nIn Altinn Apps it is used to host the different apps created in Altinn Studio as seperate containers.\nAltinn ❤️ containers.\nLinks  https://www.docker.com https://www.docker.com/products/docker-desktop https://hub.docker.com https://github.com/docker/docker-ce  "
},
{
	"uri": "https://docs.altinn.studio/tags/docs/",
	"title": "docs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/development/logic/dynamic/",
	"title": "Dynamics",
	"tags": ["dynamics"],
	"description": "How to add dynamics?",
	"content": "Introduction Dynamics are events that happen on the client side. These can be separated in two categories:\n Calculations - do calculations on the client side, and update the fields with new value. Show/hide fields - decide if fields should be hidden or displayed based on form values.  There is two ways to add and change dynamics for an Altinn App:\n Directly in Altinn Studio under Lage-tab. Select Rediger dynamikk in the right menu.  All dynamics are written as Javascript function in the RuleHandler file. Functions that are defined in this file can be configured to run for selected fields in the app.\nThe dynamic code to show/hide fields or perform calculations should be set up so that it handles eventual errors in the input gracefully.\rThey should for instance handle empty fields or strings where you expect numbers with out crashing.\rIf the dynamic does not work as expected, take a look at the code that defines the dynamic and verify that is handles errors.\r\rMERK: in order to support dynamics in older browsers the code defined in `RuleHandler.js` must be written in the version of ECMA-script as the given browser supports.\rFor IE11 this is ECMA-script 5.\r\rAdd or edit functions for dynamics In the file RuleHandler.js there exists two javascript objects:\n ruleHandlerObject - functions for calculations conditionalRuleHandlerObject - functions for hiding/showing fields  It is in these objects the functions should be defined. In addition to these there are two help objects (ruleHandlerHelper and conditionalRuleHandlerHelper), where you configure what input the different functions expect. This is done in order to be able to configure up rules in Altinn Studio at a later point. To be able to configure dynamics in studio the functions must be defined in the Javascript objects (ruleHandlerObject or conditionalRuleHandlerObject), and the parameters they expect in the corresponding helper object.\nThe structure of the help object:\nvar ruleHandlerHelper = { \u0026lt;name_of_rule\u0026gt;: () =\u0026gt; { return { \u0026lt;input_param\u0026gt;: \u0026#34;\u0026lt;description\u0026gt;\u0026#34;, \u0026lt;input_param\u0026gt;: \u0026#34;\u0026lt;description\u0026gt;\u0026#34;, \u0026lt;input_param\u0026gt;: \u0026#34;\u0026lt;description\u0026gt;\u0026#34; ... }; } } The structure of objects containing the javascript functions:\nvar ruleHandlerObject = { \u0026lt;name_of_rule\u0026gt;: (\u0026lt;input_variable_name\u0026gt;) =\u0026gt; { // Do something here  // Values from input parameters defined in  // helper can be accessed through the object passed  // into the rule, f.ex.  // \u0026lt;input_variable_name\u0026gt;.\u0026lt;input_param\u0026gt;  } } For instance, to create a rule that calculates the sum of two numbers (calculation) the following code is needed:\nvar ruleHandlerHelper = { sum: () =\u0026gt; { return { field1: \u0026#34;Field 1 in sum\u0026#34;, field2: \u0026#34;Field 2 in sum\u0026#34; }; } } var ruleHandlerObject = { sum: (data) =\u0026gt; { // Check if data is available  if (!data) return; // Check if value from input fields are available  // If not, use value 0 in sum  data.field1 = data.field1 ? data.field1 : 0; data.field2 = data.field2 ? data.field2 : 0; // return the sum  return data.field1 + data.field2; } } Some default methods for calculations, with help objects, are defined as part of the app template.\n   Method name Description Parameters Defined in object/helper     sum Returns the sum of two values value1, value2 ruleHandlerObject/ruleHandlerHelper   fullName Combines two strings (first name and last name) separated with a space. firstName, lastName ruleHandlerObject/ruleHandlerHelper   lengthGreaterThan4 Returns true if the value is longer than 4 chars long. value conditionalRuleHandlerObject/conditionalRuleHandlerHelper    Dynamics are run if a change has occurred in the input fields connected to the rule. The functions have to handle cases where for instance only one of the two parameters have defined values.\nAn example of how this could be done is shown in the sum-function below, where missing values are corrected to the value 0.\nvar ruleHandlerObject = { sum: (obj) =\u0026gt; { obj.value1 = obj.value1 ? +obj.value1 : 0; obj.value2 = obj.value2 ? +obj.value2 : 0; return obj.value1 + obj.value2; }, fullName: (obj) =\u0026gt; { return obj.firstName + \u0026#39; \u0026#39; + obj.lastName; } } var ruleHandlerHelper = { sum: () =\u0026gt; { return { value1: \u0026#34;Value 1\u0026#34;, value2: \u0026#34;Value 2\u0026#34; } }, fullName: () =\u0026gt; { return { firstName: \u0026#34;First name\u0026#34;, lastName: \u0026#34;Last name\u0026#34; }; } } var conditionalRuleHandlerObject = { lengthBiggerThan4: (obj) =\u0026gt; { if (obj.value == null) return false; return obj.value.length \u0026gt;= 4; } } var conditionalRuleHandlerHelper = { lengthBiggerThan4: () =\u0026gt; { return { value: \u0026#34;value\u0026#34; } } } Configure dynamics for UI components  Add the relevant UI components to the layout. In the right menu, select Regler for beregninger or Regler for vis/skjul felt.  Select the wanted rule. Or add a function, as described in the sections above.  Configure which field(s) that should be used as input for the function - this is fields in the data model.  Select which component(s) that should be affected by the rule (recieve value or be shown/hidden) - this is components in the layout.   For rules for hiding/showing elements several fields can be selected for the same rule.  Save the configuration. Test that the rules works as expected..  Existing configured rules is shown inthe right menu, and can be edited/deleted.\nThe configuration can also be seen in the file App/ui/RuleConfiguration.json. This can be manually edited if necessary.\nExample usage of dynamics on an appE Scenario:\nAn app with a UI with several fields for input. One of these fields is a radio button with the options \u0026ldquo;Yes\u0026rdquo; and \u0026ldquo;No\u0026rdquo;. Depending on what the user selects, different content is to be displayed:\n Yes: a new input field is shown, together with information on what is to be filled in. No: a different information text is shown.  This can be solved by adding the following in RuleHandler.js, either through Rediger dynamikk in Altinn Studio, or by manually editing the source code.\nvar conditionalRuleHandlerObject = { sjekkVirksomhetIDrift: (obj) =\u0026gt; { return (obj.value \u0026amp;\u0026amp; obj.value === \u0026#34;Yes\u0026#34;); }, sjekkVirksomhetIkkeIDrift: (obj) =\u0026gt; { return (!obj.value || obj.value != \u0026#34;Yes\u0026#34;); } } var conditionalRuleHandlerHelper = { sjekkVirksomhetIDrift: () =\u0026gt; { return { value: \u0026#34;value\u0026#34; } }, sjekkVirksomhetIkkeIDrift: () =\u0026gt; { return { value: \u0026#34;value\u0026#34; } } } Here two function has been added which checks if the value is \u0026ldquo;Yes\u0026rdquo; or not. After this code is added, the rules can be configured in studio. The results is displayed below:\nDynamics in repeating groups It is also possible to add dynamics within a repeating group. This requires that the rule is configured in Altinn Studio as usual, and then manually doing some extra configuration in the App/ui/RuleConfiguration.json file as described below.\n For each inputParams, one needs to add {0} after the group part of the data binding. For instance model.group{0}.field. The index indicator will be replaced by the index for each relevant field in the repeating group. For each selectedFields (the fields affected by the rule), one needs to add {0} after the field id, for instance layoutComponent{0} A new property must also be added to the rule, repeatingGroup. This object must contain the id of the relevant group in the layout file.  An example of a rule that is configured for a repeating group:\n{ \u0026#34;data\u0026#34;: { \u0026#34;ruleConnection\u0026#34;: {}, \u0026#34;conditionalRendering\u0026#34;: { \u0026#34;9f9f2a50-360b-11ea-b69a-8510e2e248b9\u0026#34;: { \u0026#34;selectedFunction\u0026#34;: \u0026#34;lengthBiggerThan4\u0026#34;, \u0026#34;inputParams\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;model.group{0}.field\u0026#34;  }, \u0026#34;selectedAction\u0026#34;: \u0026#34;Show\u0026#34;, \u0026#34;selectedFields\u0026#34;: { \u0026#34;first\u0026#34;: \u0026#34;some-field{0}\u0026#34;,  \u0026#34;second\u0026#34;: \u0026#34;some-other-field{0}\u0026#34; }, \u0026#34;repeatingGroup\u0026#34;: {  \u0026#34;groupId\u0026#34;: \u0026#34;the-group-id\u0026#34;, } } } } } Nested repeating groups It is also possible to add dynamics for nested repeating groups. The configuration resembles that of repeating group, but a second parameter childGroupId is added in the repeatingGroupobject, as well as an extra index indicator.\nExample:\n{ \u0026#34;data\u0026#34;: { \u0026#34;ruleConnection\u0026#34;: {}, \u0026#34;conditionalRendering\u0026#34;: { \u0026#34;hide-nested-group-field\u0026#34;: { \u0026#34;selectedFunction\u0026#34;: \u0026#34;shouldHide\u0026#34;, \u0026#34;inputParams\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;someGroup{0}.nestedGroup{1}.someField\u0026#34;  }, \u0026#34;selectedAction\u0026#34;: \u0026#34;Hide\u0026#34;, \u0026#34;selectedFields\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;the-component-id{0}{1}\u0026#34;  }, \u0026#34;repeatingGroup\u0026#34;: { \u0026#34;groupId\u0026#34;: \u0026#34;mainGroup\u0026#34;, \u0026#34;childGroupId\u0026#34;: \u0026#34;subGroup\u0026#34;  } } } } } Example with more complex dynamics Scenario: An app has two sets of radiobuttons (yes/no) and a checkbox.\n When the app is loaded, only the fist set of radiobuttons are visible. If the user selects Yes, the second set of radiobuttons are shown.  If the user selects Yes in the second choice, the checkbox is shown. If the user goes back to the first set of radiobuttons and selects No, both the second set of radiobuttons and the checkbox is hidden.    Alternative 1 This can be solved by configuring two different conditions for when the fields should be displayed:\n One condition for the second set of radiobuttons  Is shown if Yes is selected in the first set   One condition for the checkbox  Is shown when Yes is selected in both sets of radiobuttons.    Example code that can solve this case:\nvar conditionalRuleHandlerObject = { showField2: (obj) =\u0026gt; { if (obj \u0026amp;\u0026amp; obj.field1 \u0026amp;\u0026amp; obj.field1=== \u0026#34;yes\u0026#34;) { return true; } return false; }, showField3: (obj) =\u0026gt; { if (obj \u0026amp;\u0026amp; obj.field1 \u0026amp;\u0026amp; obj.field1 === \u0026#34;yes\u0026#34; \u0026amp;\u0026amp; obj.field2 \u0026amp;\u0026amp; obj.field2 === \u0026#34;yes\u0026#34;) { return true; } return false; } } var conditionalRuleHandlerHelper = { showField2: () =\u0026gt; { return { field1: \u0026#34;Field 1\u0026#34; }; }, showField3: () =\u0026gt; { return { field1: \u0026#34;Field 1\u0026#34;, field2: \u0026#34;Field 2\u0026#34; }; } } Alternative 2 This can also be configured by using hte same condition to show both the second set of radiobuttons and the checkbox. In addition a rule that removes the value from the second set of radiobuttons if the user selects No in the first set:\nvar ruleHandlerObject = { clearField: (obj) =\u0026gt; { if (obj \u0026amp;\u0026amp; obj.checkValue === \u0026#34;no\u0026#34;) { return \u0026#34;\u0026#34;; } return obj.currentValue; } } var ruleHandlerHelper = { clearField: () =\u0026gt; { return { checkValue: \u0026#34;check against this value\u0026#34;, currentValue: \u0026#34;the current value\u0026#34; } } } var conditionalRuleHandlerObject = { showField: (obj) =\u0026gt; { if (obj \u0026amp;\u0026amp; obj.checkField \u0026amp;\u0026amp; obj.checkField === \u0026#34;yes\u0026#34;) { return true; } return false; } } var conditionalRuleHandlerHelper = { showField: () =\u0026gt; { return { checkField: \u0026#34;check against this value\u0026#34; }; } } Dynamics in PDF From nuget versions 3.0.0 it is also possible to add dynamics for the PDF. This is done in the PDF Handler. The application must include the layout/ui/Settings.json file defined here.\nConfiguring dynamics in PDF is similar to how validations are added on the server side.\nThe example below hides a field based on if the string some-value exists in a given field. Here the code hides the component with the id 079f205b-c9ea-414d-9983-0d158e833e8a. The id is reflected in the layout files.\npublic async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { if (data is Skjema) { Skjema skjema = (Skjema)data; if (skjema?.Innledninggrp9342?.Kontaktinformasjongrp9344?.KontaktpersonNavndatadef2?.value.Contains(\u0026#34;some-value\u0026#34;) == true) { layoutSettings.Components = new Components(); layoutSettings.Components.ExcludeFromPdf = new System.Collections.Generic.List\u0026lt;string\u0026gt;(); layoutSettings.Components.ExcludeFromPdf.Add(\u0026#34;079f205b-c9ea-414d-9983-0d158e833e8a\u0026#34;); } } return await Task.FromResult(layoutSettings); } ``` "
},
{
	"uri": "https://docs.altinn.studio/tags/dynamics/",
	"title": "dynamics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/security/encryption/",
	"title": "Encryption",
	"tags": ["architecture", "security", "encryption"],
	"description": "Description of the encryption architecture",
	"content": "Apps hosted in Altinn Apps could cover lots of functional scenario. For statefull apps where the App store data in Altinn Platform in the Storage component, the type of data could be data that is 100% public to highly sensitive data.\nThe Org that creates the App, would based on the type of data have spceial requirements for encryption to support their Confidentiality requirement for the data.\nStorage encryption The storage component uses Azure Cosmos DB and Azrue Blob storage to store data for apps. In Cosmos metadata about instance data is stored, while in Azure Blob Storage.\nAzure Cosmos DB encryps all data at rest. This is transparent for Altinn Platform. See documentation about Azure Cosmos DB\nAzure Blob storage encrypts all data at rest. This is transparent for Altinn Platform. Blog storage support customer managed keys.\nSee documentation about Azure Storage Encryption\n"
},
{
	"uri": "https://docs.altinn.studio/tags/encryption/",
	"title": "encryption",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/testing/local/apitests/user/",
	"title": "API use as an end user",
	"tags": ["todo"],
	"description": "When running the application locally one can test the API intended for end user.",
	"content": "TODO\n"
},
{
	"uri": "https://docs.altinn.studio/community/roadmap/studio/enduser/",
	"title": "End user functionality in Altinn 3",
	"tags": [],
	"description": "This is the functionality available for end users in Altinn 3, and some of the larger planned changes.",
	"content": "Launched functionality For information on How to use the functionalities described here, see the app section of the documentation.\n\r\rForm functionality Support for apps where data is sent in. A variety of standard components to build with (ex. text field, radio button, checklist, date picker, attachment, repeating group of components), including putting these in a grid. Support for an app consisting of multiple pages, but the end user can only navigate forward and backward between the pages (controlled navigation). All forms and elements have a standardised look and feel.\nSupport for defining rules, including calculation, validation and dynamics on both element and page level (i.e. control what the user will see depending on what they enter in the form).\nThe elements are linked to texts and data model. Possibility to connect to APIs as data sources, and prefilling with data from Altinn\u0026rsquo;s copies of Folkeregisteret and Enhetsregisteret.\nWe also support stateless apps (#1328) ✔️\nApplication process You can combine different tasks in the order that\u0026rsquo;s relevant for the app:\n Form filling / message (data) - exposing data from app owner and/or collecting data from end user Confirmation (confirm) - the user should confirm that these are the data I want to submit Wait for feedback (feedback) - the process is not complete, but someone other than the user (app owner or third party) is the party that should act  In addidtion we have an end stated for an instance being archived/complete.\nAuthentication and authorisation You can define which role(s) in Altinn that can access different operations on each task in the app process. The roles can either be Altinn specific roles, roles from Enhetsregisteret or that the app owner has access.\nIntegration with the Altinn message box The app instances are shown in the users message box in the same way as in Altinn 2. You can find the instances through search (albeit with a few limitations).\nYou can use presentation fields to discern instances of the same app apart (Q2 2021) (#594) ✔️\nThe app owner can decide what status is relevant for each instance. They can also decided that instances of an app should never be archived.\nIntegration with end user systems The apps have standardised APIs that can be used for submission from third party systems. Every app has its own end points. Authentication is done through ID-porten.\nUpcoming functionality Altinn 3 is in constant development, and functionality is released continuously. The backlog is revised eight times a year, and minor changes may occur between these revisions. In general, the further into the future a functionality is planned, the less certain the time frame is for said functionality.\nChanges described in italic are regarded as ideas, and if they are to be developed has not yet been decided.\nForm functionality It should be possible to define user interfaces that fit the needs of the individual app. Examples of upcoming functionality:\n More freedom in navigating between pages (Q4 2021) (#5893) Editable tables (Q4 2021) (#378) Selecting language in an app (Q1 2022) (#2055). Denne endringen gjør det også mulig å tilby tjenester på andre språk enn bokmål/nynorsk/engelsk. Theming of the user interface (#2115)  Application process We will expand the library of available task types to cover more use cases. Examples of upcoming functionality:\n Functional signing (Q4 2021) (#5540) Technical signing (Q1 2022) Complex signing rules - e.g. based on what is filled in in the for and parallel signing (x out of y persons has to sign) (Q2 2022) (#1324) / (#1325) Payment (Q3 2022) (#1320) More freedom in moving between tasks (Q4 2021) (#2743) Obtaining concent from the user  Authentication and authorisation In Altinn 3 we want to have at least the same level of flexibility for the users when it comes to how to grant and granulate access as we do in Altinn 2. This implies these (and possibly other) changes:\n Support for delegating acces on app level (Q4 2021) (#2731) Support for delegating acces on instance level (Q4 2021) (#2732) Access to app with enterprise user (#3743) Whitelisting of relevant users for an app (#5547)  Event driven apps To build complete service chains without a need for complex orchestration, it\u0026rsquo;s necessary that an app can \u0026ldquo;react\u0026rdquo; to events in another app or to external events. Facilitating this way of build service chains are in the plans for late 2022.\nNotifications (email and sms) Sending out notifications by email and/or sms is an integral part of some services. For now Altinn 3 will use the notification functionality inn Altinn 2.\n It should be possible to connect notifications to various events in the app (Q1 2022) (#4275) The end user should be able to email a copy of the receipt (Q3 2022) (#1902)  Integration with the Altinn message box Finding the right instance of a service in the message box should be simple. To achieve this we will add:\n Support to create a new instance based on an excisting one (Q4 2021) (#1566) Check if the user already has an instance of the app in message box when going to the app, so they can chose if they want a new instance or continue the existing (Q4 2021) (#1811) Possibility to search the content of the apps (#5450)  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/environments/",
	"title": "Environments",
	"tags": ["architecture", "devops"],
	"description": "An important DevOps capability is to have different environments to deploy the different solutions part of the Altinn 3 platform.",
	"content": "Altinn Studio, Altinn Apps and Altinn Platform is deployed in serveral environments for different usage.\nDevelopment Environments Available at staging.altinn.studio for Altinn Studio\nTest environment We have serveral internal test environments used for testing.\nAvailable at at22.altinn.cloud\nAvailable at at23.altinn.cloud\nAvailable at at24.altinn.cloud\nAvailable at dev.altinn.studio for Altinn Studio.\nPre Production Environemnt This environment used by the application/service owners to test applications created in Altinn Studio.\nAvailable at tt02.altinn.no\nProduction Environment Available at www.altinn.no for Altinn 2/ Altinn 3\nAvailable at altinn.studio for Altinn Studio\n"
},
{
	"uri": "https://docs.altinn.studio/tags/error-handling/",
	"title": "error-handling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/integration/events/",
	"title": "Event capabilities",
	"tags": ["architecture", "events"],
	"description": "Description of the event capabilities for Altinn Apps and Altinn Platform.",
	"content": "The new generation of Altinn is moving to an event-driven architecture. In this context, this means that applications (digital services) running in Altinn Apps will publish events that application owners (agencies) and parties(citizens and businesses) can subscribe to and react to.\nThis page is focused on capabilities. If you are interested in more details about the components and construction see Event Solution Components and Event Construction Components.\nOverall Concept In Altinn there will over time be thousands of different digital services deployed to Altinn Apps. Those digital services will be accessed by the citizens and businesses in Norway.\nThey will receive and submit data to/from the entity that is responsible for the digital service and others using the platform. The event architecture would make it possible to get notified when there are events in the platform related to data that the different actors have an interest in. It could be anything from the digital service (app) owner being notified that a citizen has completed a form, to that the citizen is informed that there is a new form he needs to fill out.\nEvents Events would be a combination of standard events defined by the platform and custom events added in an application by application developers.\nThe events will typically only contain information about that an event has happened with a reference to some data that was changed because of that event.\nStandard app events\n An instance is created An instance changes state (from one process task to another, example: data -\u0026gt; signing) An instance is completed  Custom events could be\n A user has asked for a deduction in a form A specific validation of data failed  Event attributes\nEvents would typically have some attributes used for filtering.\n [source] - This is the application that created the event. Currently, there are apps deployed to Altinn Apps [type] - The type of event. Created, completed [subject] - Who is the owner of the data related to the event. ++. Free text not locked to a schema.  An event will contain a limited set of information. To get the full details for an event the consumer would need to get all details using APIs.\nEvent Producers Applications running in Altinn Apps Applications hosted in the Altinn Apps infrastructure would be the most common producer of events in the beginning.\nThe standard App template contains code for publishing standard events to the events component. The following standard events published by an app is\n app.instance.created : When a instance is created. app.instance.process.movedTo.{TaskId} : When a process is moved to a specific task app.instance.process.completed : When a process is complete  The application template will contain API so logic in applications can publish events based on rules defined by the developer.\nThese app events could be anything, and could also be triggered by other external systems through custom APIs in the app.\nSee code example\nOther producers Altinn Events together with Altinn Authorization has the potential to be the national event hub for Norway.\nThe possibility to have Altinn Authorization to authorize access to events gives great possibilities not available from other event platforms.\nIn the future, several other Event producers could be added. Examples could be\n Altinn 2 ServiceEngine: Reducing the need for polling to the current platform Altinn 2 Authorization: Information about changes on rights National Register: Informing- Other agency specific applications Private sector applications about register changes Other national components  Only the imagination limits whats is possible in the future. This is followed up in this issue.\nEvent consumers Orgs (application owners) Orgs will need to know about events happening in their apps in Altinn.\nFor some orgs there is a need for subscribing to events for a specific app, others might want to subscribe to all events, or maybe a specific type of event.\nParties (persons and organizations) Parties submitting and receiving data in Altinn would benefit from knowing about events. This could be feedback has been added to a form, or that a new message has been received.\nIn many cases, parties use professionals to handle their data in Altinn. These professionals typically have many hundred or thousands of clients.\nCurrently we only support persons and consumers. They need to be authenticated through ID-porten to set up a subscription for themself.\nBefore any event is pushed, the consumers access to the source of the event is authorized.\nRequirments The following requirements were identified for the new event architecture in Altinn 3.\n It should be possible to subscribe to a specific type of event. (Example all app.instance.process.completed events for a given app) It should be possible to go at least 3 months back in history when searching for events through API. The consumer will keep track of which events the consumer has processed. The architecture should support more than 10 000 publishers. The architecture should support more than 1 000 000 consumers. The architecture should support more than 500 000 000 events a year. Access to events should be authorized. Accessing an event for a party requires that the consumer has the correct role Before pushing events to a subscriber endpoint the push functionality need to authorize the subscriber for the event  See also Referansearkitektur for datautveksling\nEvent Principles and pattern During the analysis, the following principles and pattern has been applied\nSmall events  The events will only contain a small amount of data. If more information is needed this is available from the resource itself Every event links to the resource affected by the event. We use CloudEvent as the format.  Prefer push of events to consumers The preferred consumption of events is through subscription and subscriber endpoints where Altinn Events pushes the events to a subscriber webhook.\nSupport retry of push The push functionality needs to support retry of pushing events if the subscriber endpoint is unavailable.\nExpose events through REST-API  The use of REST-API ensures low complexity for consuming events REST-API URLs and parameters are uses for filtering  Consumers keep track of their status  Consumers will keep track of their status when using events API for consumption of events.  Events do not change  Events for a resource are never changed. A new event can revert the effect of an earlier event  Events are stored for a limited time  Events will be available for 3 months through API.  Event Architecture As part of the Altinn 3 solutions there is defined a event architecture to support the above requirements and capabilities.\nEvent Schema The Altinn 3 will use the defined CloudEvents specification to describe events in Altinn Apps and Altinn Platform.\nThe reason for choosing cloud events are\n It is a standardized and open format as preferred by our architecture principles It backed by many and The specification is now under the Cloud Native Computing Foundation It is flexible so it would support scenarios in the future  Below you find a offical example. See full JSON Schema\n{ \u0026#34;specversion\u0026#34; : \u0026#34;1.x-wip\u0026#34;, \u0026#34;type\u0026#34; : \u0026#34;com.github.pull.create\u0026#34;, \u0026#34;source\u0026#34; : \u0026#34;https://github.com/cloudevents/spec/pull\u0026#34;, \u0026#34;subject\u0026#34; : \u0026#34;123\u0026#34;, \u0026#34;id\u0026#34; : \u0026#34;A234-1234-1234\u0026#34;, \u0026#34;time\u0026#34; : \u0026#34;2018-04-05T17:31:00Z\u0026#34;, \u0026#34;comexampleextension1\u0026#34; : \u0026#34;value\u0026#34;, \u0026#34;comexampleothervalue\u0026#34; : 5, \u0026#34;datacontenttype\u0026#34; : \u0026#34;text/xml\u0026#34;, \u0026#34;data\u0026#34; : \u0026#34;\u0026lt;much wow=\\\u0026#34;xml\\\u0026#34;/\u0026gt;\u0026#34; }  specversion: The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of 1.x-wip when referring to this version of the specification. type: This is the event type. Examples: instance.created, instance.process.paymentcompleted, instance.process.completed source: Describes what the event is related to. Will be used to filter event types. For an app it would typical be /{org}/{app}/{partyId}/{instanceGuid}. This would be used for consumers to look up a given instance. subject: The party the event is related to. PartyID is used. id: Unique id for a given event. time: The time the event was triggered. Set by the publisher. datacontenttype: Optional. Content type of data value. This attribute enables data to carry any type of content, whereby format and encoding might differ from that of the chosen event format data: Optional. Can contain a structure of data specific for an event type.  In addition to the spec there is added alternativesubject as an extension to the event model. This will be used for socical secuirty number, organization number or other identifier in addition to the partyId found in subject property.\nCurrently this can be\n fnr : social security number (11 digits) org: organization number (9 digits)  The value will be prefixed\nExample 1 A instance has been created for a given party. It is not possible from the event itself to know who did it.\n[{ \u0026#34;source\u0026#34;: \u0026#34;https://skd.apps.altinn.no/skd/skattemelding/instances/1234324/6fb3f738-6800-4f29-9f3e-1c66862656cd\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/1234324\u0026#34;,  \u0026#34;type\u0026#34;: \u0026#34;app.instance.created\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2020-02-20T08:00:06.4014168Z\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/person/01038712345\u0026#34; }] Example 2 A user has completed the confirmation1 task in the process.\n[{ \u0026#34;source\u0026#34;: \u0026#34;https://skd.apps.altinn.no/skd/skattemelding/instances/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/234234422\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;app.instance.process.movedTo.confirmation1\u0026#34;,  \u0026#34;time\u0026#34;: \u0026#34;2020-03-16T10:23:46.6443563Z\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/org/974760673\u0026#34; }] Example 3 A user/system has completed the process for an instance.\n[{ \u0026#34;source\u0026#34;: \u0026#34;https://skd.apps.altinn.no/skd/skattemelding/instances/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/234234422\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;app.instance.process.completed\u0026#34;,  \u0026#34;time\u0026#34;: \u0026#34;2020-02-20T09:06:50.3736712Z\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/org/974760673\u0026#34; }] Event components The below diagram shows the different components in the proposed Event Architecture for Altinn 3.\nMore details can be in solutions components with detailed API info of event component and in construction components you find the technical details how the components are constructed.\nDelegating access to events There are serveral user scenarios when there is a need to delegate access to the events for a given party to another user/organisation.\nDelegating Org access For orgs (application owners) there might be some scenarios where they want to give access to events for a given application. This delegation is done through Maskinporten.\nDelegating party event access In general, access to events for a given party will be authorized based on roles the requesting organization/user have for the subject of the event.\nEvent Analytics With a new event architecture it is possible imagine that we can run analytics on the events to give important insight in to the data in the platform.\nExample\n How many instances is created for the different applications How long time does each task take to complete Is there any relationship between apps.  This is analyzed in the following issue\nAltinn Platform Events as a national event hub The event capabilities in Altinn Platform is possible to use outside Altinn Apps and Altinn Platform similar to how Altinn Authorization is used by external wihout deploying any digital services to the platform.\nHow this should work is not analyzed and specified yet. The issue is found here\nOther event concepts in the platform Events are used in different scenarios in the platform.\n Instance Events - Events that happen on a given instance. It could be created, saved, ++ This is stored to cosmos DB. The number of details in these events is higher than we would put on an event feed. See Instance Events in Storage Application logic events - These are events where app developers could implement logic to get a specific behavior. Calculation, validation ++ This type of event is probably not relevant to push to the event feed.  "
},
{
	"uri": "https://docs.altinn.studio/api/events/",
	"title": "Events API",
	"tags": ["api"],
	"description": "The Platform API to work with events",
	"content": "Overview Events are in this context is information about events created by applications or other sources. The event itself is based on the CloudEvent standard and is a small JSON structure containing the most important information of an event. Details are found here.\nThe events APIs are used to access events created by applications in Altinn Apps and other event sources that use Altinn Platform as av \u0026ldquo;event hub\u0026rdquo;.\nSubscription The highly preferred way to use events is to set up a subscription that enables push of events to a webhook-endpoint. This is done through the subcriptions API. This API supports the following consumers\n Persons, authenticated through ID-porten Orgs, authenticated through Maskinporten  The subscriptions API is described here as Swagger.\nThe webhook endpoint needs to be able to accept cloud event that is posted through HTTPS to the endpoint URL.\nThe push functionality also supports pushing events to Slack. Other platforms might be added at a later point.\nSearch API The search allows searching for events. The storage of events is limited to 90 days.\nThis is available to be used by the following consumers.\n Persons, authenticated through ID-porten Orgs, authenticated through Maskinporten  The API is described in swagger here.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-platform/events/",
	"title": "Application construction components - Altinn Platform Events",
	"tags": ["architecture", "solution"],
	"description": "The Events component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": "The Events components expose REST-APIs for publishing and subscribing to events. The Azure function are responsible for pushing events to subscriber webhooks. The below diagram shows the components\nWhen a publish request is received it will push the event document to the event storage. When a request is received it will query the events stored in the event storage.\nApi controllers The following API controllers are defined\n EventsController : responsible for registrating events and pull of events for consumers. PushController : responsible to validate if there is any subscriptions matching the event and if so authorize the subscriper before it pushes the event to the outbound queue SubscriptionController : responsible for managing subscriptions for consumers.  Eventscontroller The EventsController in the Events component is the one receiving events from Apps and other sources.\nIt verifies if the app is authorized to creates events for the given source and then store in to event storage.\nIt also exposes API to search for events and to get events.\nThe access is controlled by the XACML Policy for the given App that is the source for an given event.\nThe AuthorizationHelper is responsible for creating and performing the request to the Policy Decision Point.\nPushController PushController is called by the EventsInbound function.\nBased on details from the Event it will identify matching subscriptions.\nFor each match it will authorize the consumer using the Policy Authorization Point.\nThe AuthorizationHelper is responsible for creating and performing the request to the Policy Decision Point.\nThe access is controlled by the XACML Policy for the given App that is the source for an given event.\nIf consumer is Authorized the event will be added to the \u0026ldquo;events-outbound\u0026rdquo; queue and picked up by the EventsOutbound function. (see below)\nSubscriptionController The SubscriptionController exposes API to\n Add subscriptions Delete subscriptions Get subscriptions Validate subscriptions  Event storage To be able to get the search capability needed for the Events component we have choosen to use PostgreSQL.\nUsing PostgreSQL makes is possible to sort the events based on a primary key and also makes it possible to search over all events based on subject or source.\nThe table structure\nCREATE TABLE IF NOT EXISTS events.events ( sequenceno BIGSERIAL, id character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, source character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, subject character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, \u0026#34;time\u0026#34; timestamptz NOT NULL, type character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, cloudevent text COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, CONSTRAINT events_pkey PRIMARY KEY (sequenceno) ) CREATE TABLE IF NOT EXISTS events.subscription ( id BIGSERIAL, sourcefilter character varying COLLATE pg_catalog.\u0026#34;default\u0026#34;, subjectfilter character varying COLLATE pg_catalog.\u0026#34;default\u0026#34;, typefilter character varying COLLATE pg_catalog.\u0026#34;default\u0026#34;, consumer character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, endpointurl character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, createdby character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, validated BOOLEAN NOT NULL, \u0026#34;time\u0026#34; timestamptz NOT NULL, CONSTRAINT eventssubscription_pkey PRIMARY KEY (id) ) Stored procedures is used to add, delete and query data from the above tables. See all stored procedures here.\nEvent sequencing Events will be sequnced by sequence number that is the primary key of the Events table.\nIndexing The events table has indexes on the columns subject, time, sourcefilter.\nFunctions As part of the Event Component there is 3 Azure Functions used for pushing events to the consumers. Click on name for code.\n EventsInbound : responsible for pushing new events to the push controller EventsOutbound : responsible for pushing event to consumer webhook ValidateSubscription : responsible for validating the endpoint given in a subscription.  EventsInbound The EventsInbound function is triggered by QueueStorage changes in the \u0026ldquo;events-inbound\u0026rdquo; queue.\nIt just forward the event to the PushController through the pushEventService.\nThe Function uses Platform Access token to authenticate itself for the PushController\nIt uses standard mechanismen for retry, if the call for pushcontroller fails.\nEventsOutbound The EventsOutbound function is triggered byQueueStorage changes in the \u0026ldquo;events-outbound\u0026rdquo; queue.\nIt will try to push the event to given subscription endpoint given in the CloudEventEnvelope that is put on the queue and containing the event.\nThis function is configured with CustomQueueProcessorFactory to handle retry if it is not possible to push event to the endpoint.\nIt will try send the event right away, but if the request to webhook fails (Http status != 200) it will put the cloudevent back on the queue with a defined wait time.\n retries after 10 seconds retries after 30 seconds retries after 1 minute retries after 5 minutes retries after 10 minutes retries after 30 minutes retries after 1 hour retries after 3 hours retries after 6 hours retries after 12 hours retries after 12 hours  If it fails the 12. time it will put the event in the dead letter queue and will not try again.\nSubscriptionValidation The SubscriptionValidation function is triggered byQueueStorage changes in the \u0026ldquo;subscription-validation\u0026rdquo; queue.\nIt will try to validate the endpoing given in the Subscription that is put on the queue.\nThis function is configured with CustomQueueProcessorFactory to handle retry if it is not possible to push event to the endpoint.\nIt will try send the event right away, but if the request to webhook fails (Http status != 200) it will put the cloudevent back on the queue with a defined wait time.\n retries after 10 seconds retries after 30 seconds retries after 1 minute retries after 5 minutes retries after 10 minutes retries after 30 minutes retries after 1 hour retries after 3 hours retries after 6 hours retries after 12 hours retries after 12 hours  If it fails the 12. time it will put the event in the dead letter queue and will not try again.\nIf endpoint responds with 200OK it will then set the subscription status to valid with calling the validate endpoint in the Subscription API.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-platform/events/",
	"title": "Events",
	"tags": ["platform", "events"],
	"description": "The Events component receives and publishes events.",
	"content": "The Events component supports storage of events in Azure Cosmos Db. Both Apps and Platform can create events.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/events/",
	"title": "events",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/development/api/expose/",
	"title": "Exposing APIs from an app",
	"tags": [],
	"description": "One can add more APIs than what is defined as the default API for applications developed in Altinn Studio.",
	"content": "The applications that are developed in Altinn Studio are based on ASP.NET Core for back-end. This provides a highly flexible environment to change and modify the applications.\nAdding an API-controller To expose a new API to the application you have to add one or multiple API-controllers.\nBelow is an example from an API-controller which has been added to an app. This is where the API path listener is set up along with API logic.\nusing System; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; namespace Altinn.App.Api.Controllers { [ApiController] [Route(\u0026#34;{org}/{app}/CustomApi\u0026#34;)]  public class CustomApiController : ControllerBase { [HttpGet(\u0026#34;TimeInfo\u0026#34;)]  public async Task\u0026lt;ActionResult\u0026gt; Get() { return Ok(DateTime.Now); } } } The code can be viewed in This repository.\nYou can read more details about the possibilities for exposing an API in the documentation for ASP.NET.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/features/",
	"title": "Features",
	"tags": ["altinn-apps"],
	"description": "Description of features in App",
	"content": "Prefill The App can prefill data in the datamodels for the app based on standard configuration for profile and register data, but can also prefill data based on data from organisation or prefill based on logic define in the custom app logic defined by the application developer.\nData validation The App can validate the datamodel based on the datamodel itself and based on custom app logic defined by the application developer.\nData Calculation The App can calculate data in the datamodels based on custom applogic defined by the application developer.\nInstansiation Hooks The App can perform instansiations checks based on custom app logic defined by the application developer.\nPolicy Enforcment The App has built in Policy Enforcments Points at the different API endpoints to make sure that the user / system is authorized to perform operation on the app / data. This includes checks on\n Roles Rights Authentication level  Formset In the future the App will support multiple datamodels.\nPDF of data The App will be able to present at PDF of the data.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/apptemplates/asp.net/files/",
	"title": "Template filestructure",
	"tags": ["altinn-apps"],
	"description": "Description of the files in the ASP.NET Core template.",
	"content": "The template contains serveral standard files that is added to the repository when app is created.\nProcess The Process.xml defines the business process of the app and is based om BPMN 2.0. The app supports differen types of processes.\nSee standard BPMN file in template.\nXACML The Polixy.xml defines the authorization policy with rules. Is based on XACML 3.0.\nThe XACML is imported in to authorization component.\nSee standard XACML file in template.\nUI The Formlayout.json defines the rendering of the UI based on Altinn Studio UI designer. For Apps without frontend this is not needed.\nText Resources The App can be breated with multiple langauges at the same time. The different texts are put in language files for each language.\nPrefill Prefill.json defines the prefill for a app.\nDockerfile Defines the docker image.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/flight-rules/",
	"title": "Flight Rules",
	"tags": ["development"],
	"description": "Flight rules for Altinn Studio",
	"content": "What are flight rules?\nFlight rules is originally a compendium of step-by-step manuals, what to do when X occurs and why.\nEssentially, they are extremely detailed, scenario-specific standard operating procedures.\n\rLoadbalancer is responding with HTTP Error 502 - bad gateway This occurs when the loadbalancer could not find any of the services in it\u0026rsquo;s configuration.\nCan be triggerd by these issues:\n Some of the kubernetes services are not existing Some of the kubernetes pods are not existing Kubernetes mapping between deployments and services are incorrect.  Loadbalancer is responding with HTTP Error 504 - timeout This occurs when the loadbalancer is not getting a response from the other services running in kubernetes. Because the loadbalancer is not updated when the deployment of new versions or altinn-designer, altinn-runtime or altinn-repositories. To delete a pod, first find the name of the running pod:\nkubectl get pods Then use the whole name, and run the following command:\nkubectl delete pod [POD_NAME] Sonarqube-code-analysis pipeline fails on pull request This occurs when there exists double line shifts in the code that is being analyzed. This somehow crashes the sonarqube code analysis tool. To solve this issue you need to identify and remove the double line shift is in the code:\n Navigate to the pipeline logs, open \u0026lsquo;Run Code Analysis\u0026rsquo; Scroll to the bottom Look for error message looking like \u0026lsquo;ERROR: 1 is not a valid line offset for pointer\u0026rsquo; The error should contain info at where the double line shift is Remove the double line shift and update PR  Pod is stuck in status ContainerCreating and has warning \u0026ldquo;Unable to mount volumes for pod XXX: timeout expired waiting for volumes to attach or mount for pod XXX\u0026rdquo; The storage we use today don\u0026rsquo;t support two pods accessing it at the same time, so on deploy if the first pod don\u0026rsquo;t release the storage before the other one tries to connect to it the second pod will get stuck in ContainerCreating status. If you then run kubectl get pods and get the name of the pod you can then run\nkubectl describe [POD_NAME] then you see the message \u0026ldquo;Unable to mount volumes for pod XXX: timeout expired waiting for volumes to attach or mount for pod XXX\u0026rdquo;\nTo fix this you need to delete the deployment to that pod and start a new release:\nkubectl delete deployment [DEPLOYMENT_NAME] To start a new release go to release pipeline\nI try to pull master from github and get error \u0026ldquo;Cannot lock ref\u0026rdquo; This happens from time to time, still unsure why. To fix it run the command:\ngit gc --prune=now\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/app-api/eus-rest/",
	"title": "REST-API for End User Systems",
	"tags": ["altinn-apps"],
	"description": "Description of the REST APIs for end user systems.",
	"content": "NOTE: Work in progress. Stuff will change\r\rThe main API-channel for data in the platform is REST for apps created in Altinn Studio.\nThe end user system needs to call different APIS based on the need. The below figure show the different components relevant for an end-user system calling Altinn through REST.\nDownload as Visio.\nAPI to authenticate end user systems For new API\u0026rsquo;s the goal is to use JWT Tokens to authenticate against the API.\nAltinn Apps will expose apis to authenticate end user systems and user of end user systems and return JWT Tokens that can be used against the other API\u0026rsquo;s.\nAPI to create new data instance for an app From end user systems it will be possible to create a instance of an App from a end user system. This is a URL directly to the app and unique.\nSee Application Users API.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/form-layout/",
	"title": "FormLayout.json",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for skjema-layout",
	"content": "Overordnet \u0026lsquo;FormLayout.json\u0026rsquo; describes the structure of a schema.\nFormat \u0026lsquo;FormLayout.json\u0026rsquo; is divided into three objects:\n Components: describes the components in the schema and configurations connected to the specific component. E.g the binding to a data model. Containers: describes the layout containers used in the schema and the configurations connected to them. E.g if the container is a repeating group Order: this object specify the order of the containers and components in the schema.  Eksempel Here is an example on how the form layout file could look like:\n\u0026#34;components\u0026#34;: { \u0026#34;a3569c64-2a54-493c-a2a2-213034ed9207\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;itemType\u0026#34;: \u0026#34;COMPONENT\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;25795.OppgavegiverNavnPreutfylt.Label\u0026#34;, }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;skattyterinfor.info.oppgavegiverNavnPreutfylt.value\u0026#34;, }, }, \u0026#34;74b7ff77-a80b-45d4-8f4a-81d7a52e69c6\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;itemType\u0026#34;: \u0026#34;COMPONENT\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;25796.OppgavegiverAdressePreutfylt.Label\u0026#34;, }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026#34;, }, \u0026#34;hidden\u0026#34;: false, }, \u0026#34;95ddc03a-282a-4ed3-b854-18a3921eec0f\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;itemType\u0026#34;: \u0026#34;COMPONENT\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;2.KontaktpersonNavn.Label\u0026#34;, }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;skattyterinfor.kontakt.kontaktpersonNavn.value\u0026#34;, }, }, }, \u0026#34;containers\u0026#34;: { \u0026#34;6eb99041-1ecc-4e83-9312-596a0802e728\u0026#34;: { \u0026#34;repeating\u0026#34;: false, \u0026#34;dataModelGroup\u0026#34;: null }, \u0026#34;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026#34;: { \u0026#34;repeating\u0026#34;: false, \u0026#34;dataModelGroup\u0026#34;: null, \u0026#34;index\u0026#34;: 0 } }, \u0026#34;order\u0026#34;: { \u0026#34;6eb99041-1ecc-4e83-9312-596a0802e728\u0026#34;: [ \u0026#34;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026#34;, \u0026#34;95ddc03a-282a-4ed3-b854-18a3921eec0f\u0026#34; ], \u0026#34;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026#34;: [ \u0026#34;a3569c64-2a54-493c-a2a2-213034ed9207\u0026#34;, \u0026#34;74b7ff77-a80b-45d4-8f4a-81d7a52e69c6\u0026#34; ] } "
},
{
	"uri": "https://docs.altinn.studio/tags/front-end/",
	"title": "front-end",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/frontend/",
	"title": "Frontend",
	"tags": ["altinn-apps"],
	"description": "Description of the optional app frontend created in Altinn Studio and that is deployed to Altinn Apps.",
	"content": "A App created in Altinn Studio can have a optional frontend to allow end user use API from web browser.\nThis frontend is a React based SPA (Singe Page Application) that uses configuration to render based settings for a given application.\nUI rendering The UI-Render functionality in App Frontend render the UI based on configuration set in Altinn Studio.\nUI-Components The supported UI-components can be seen here\nTheming In the future Altinn Apps will support theming making it possible to have different style on the App.\nSee epic for this issue on Github.\nUI Layout In the future Altinn Apps will support different types of layout. Now the support is limited to one page UI that is mobile friendly.\nSee epic for this issue on Github\nUI logic As part of designing UI, there can be defined UI-logic that do stuff dynamic rendering (hide or show parts of ui based on input or other parameters) or update data.\nCustom Navigation In the future the App will support different types of navigation to See epic for this issue on Github\nTranslation In the future the App will support having multiple languages in a App See issue for this on Github\nPages In the future the App will support having ui over multiple pages See issue for this on Github\nOn Github you can find all issues related to App-Frontend.\nCustom Frontend In the future it is possible that Altinn Studio will support having a frontend that is costum application created by the developer. This could be a frontend based on any javascript based frameworks like Angular,\nSee Github for issue\n"
},
{
	"uri": "https://docs.altinn.studio/tags/frontend/",
	"title": "frontend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/requirements/functional/",
	"title": "Functional Requirements",
	"tags": ["architecture"],
	"description": "Functional requirements can be important to the architecture decisions.",
	"content": "The functional requirements is extensive and is written as user stories. A good starting point is to look at issue 1337 at GitHub to get an overview of the required functionality.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/",
	"title": "Functionality in Designer",
	"tags": [],
	"description": "The designer can been seen as a collection of different editors specialized to create and edit different aspects of an application.",
	"content": "This aspects are controlled by code and configurations that is stored in source control in Altinn Studio Repos.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/build-app/\u0026quot;\u0026gt;Building and configuring apps\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Studio can been seen as a collection of different editors or applications specialized to create and edit different aspects of an Altinn Studio app.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/dashboard/\u0026quot;\u0026gt;Dashboard\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Dashboard in Altinn Studio gives the developer full overview over their apps.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/deployment/\u0026quot;\u0026gt;App Deployment\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Studio will let the developer deploy apps to all enviroments without any manuel steps.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/designer/functional/version-control/\u0026quot;\u0026gt;Version Control\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;In Altinn Studio a developer can perform version control operation on the source code for the app\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/functional/",
	"title": "Functionality in Repos",
	"tags": ["altinn-repos"],
	"description": "Funksjonalitet for lagring og versjonering av tjenester i Git-repositories samt funksjonalitet for application lifecycle management.",
	"content": "\u0026ldquo;Altinn Repositories\u0026rdquo; er en frittstående Git versjonskontroll og Application Lifecycle Management-løsning, som både Designer, kodeeditorer og andre eksterne verktøy vil benytte som back-end og felles sted for å lagre og versjonere tjenestene som utvikles.\nRepositories har et GitHub-lignende brukergrensesnitt og både Git og REST-baserte tekniske grensesnitt.\nDet vil være en omfattende jobb å forsøke å utvikle en Git + ALM løsning på egen hånd, ref. all funksjonaliteten som behøves.\nHeldigvis finnes det flere open source \u0026ldquo;GitHub-kloner\u0026rdquo; som vi kan benytte, og blant dem virker Gitea å være mest lovende (uttales som /ɡɪ’ti:/ - \u0026ldquo;gitty\u0026rdquo;). Bilder fra Gitea benyttes som eksempler videre i denne dokumentasjonen.\nFunksjonalitet i \u0026ldquo;Repositories\u0026rdquo; Repositories inneholder et repository med versjonerte filer for hver 3.0-tjeneste. Eksempel på typer filer som en \u0026ldquo;3.0-tjeneste\u0026rdquo; vil kunne bestå av er kode, tester, web-komponenter, layouts og stiler, oversettinger, arbeidsflyt og konfigurasjon.\nRepositories vil tilby funksjonalitet rundt den enkelte 3.0-tjeneste, og eksponere funksjonaliteten via både brukergrensesnitt og et REST-API som er en klone av GitHub sitt v3 API-format. Dette er positivt da det finnes andre verktøy som også støtter dette API-formatet, og da det kan forenkle det å kunne erstatte Gitea som back-end med andre liknende Git-systemer.\n\n3.0 Tjeneste Repository som representerer en \u0026ldquo;3.0-tjeneste\u0026rdquo;, aka app, og inneholder alle filer som tjenesten består av.\nHver utgave av en tjeneste vil leve i sin egen mappe, slik at ett repository kan inneholde èn eller flere utgaver av den samme tjenesten.\nRepository management Håndtering av repositories er en kjerneaktivitet, da hver tjeneste som utvikles vil lagres i sitt eget repository.\n Create/delete repository Link to repository Rename repository Fork repository  Muliggjør at man kan ha et \u0026ldquo;master\u0026rdquo;-repository med felles tjenester som flere andre kan benytte, slik som dagens \u0026ldquo;master-tjenester\u0026rdquo; bare mye kraftigere Muliggjør også at utviklere kan lage som egen kopi og teste ut nye muligheter og løsninger på sitt eget område uten å påvirke originalen   List repositories Download/upload files Download repo Create files and folders Read/edit files Rename files Delete files View raw file Link to file  Dokumentering Det er viktig å ha god støtte for å dokumentere tjenestene man utvikler, slik at det vil være enkelt for andre personer på teamet å bidra. Det er derfor ønskelig å ha innebygd Wiki-funksjonalitet med støtte for å editere i markdown, slik som i Altinn docs og AltinnPedia.\n Wiki  Add/edit/delete pages Markdown editing Link to specific wiki page Support for other external wikis Emojis   Markdown editing  Preview Fullscreen Side-by-side    Versjonering Hver eneste fil som en 3.0-tjeneste består av skal ha full versjonshistorikk, uavhengig av om man jobber mot filene via Designer eller eksternt og distribuert/lokalt i en kodeeditor på egen maskin. Repositories sitt versjonskontrollsystem, som er basert på Git, er laget nettopp med tanke på dette.\n Version history of all files, artifacts, code and configuration  Link to each change with a unique id Link to each changed file Link to who did the change Highlight the last change done in the repository Time of change Comments/messages   Diff between versions  Release management En svært viktig egenskap når man utvikler programvare (noe som 3.0-tjenester er) er å kunne tagge ulike versjoner, og kunne gå tilbake og teste eller patche en tidligere versjon hvis man ønsker det. Det er også viktig å kunne se alt som har endret seg mellom versjonene.\nSiden Git benyttes for versjonering, så vil en release/tag som opprettes peke på en eksakt versjon av hver eneste fil som en 3.0-tjeneste består av, og man kan enkelt se hva som er endret.\n Create tags for the 3.0 app Link to tags Create/delete releases Link to releases Marking of pre-releases Time of release creation User that triggered the release Download zipped files of release Browse content of a given tag/release  QA En QA-prosess for godkjenning av endringer basert på branching og pull requests, vil for større teams kunne være mulig. Dette er i tråd med hvordan programvare utvikles, inkludert selve Altinn.\nBacklog management Som for all annen programvareutvikling, så vil hver 3.0-tjeneste typisk ha en egen backlog med bugs, forbedringer, fremtidige features, etc. som tjenesteutviklerne vil jobbe mot. Dette er en sentral del av Application Lifecycle Management.\n Create/close issues pr. 3.0 app  Time of creation Who   Filter issues by open/closed Add labels  Filter issues by label   Assign to milestone  Filter issues by milestone   Assign to user  Filter issues by assignee   Markdown editing Discussions Add files to issue Notifications when issues change Issues search List issues  Org management Organisasjoner er tjenesteeiere, men i 3.0 er det ikke noe i veien for at brukere også kan utvikle tjenester. I en organisasjon så kan man gi tilganger til brukere, og man kan opprette teams med tilgang til en eller flere 3.0-tjenester.\nDet å håndtere organisasjonen, som alt annet, skal være 100% selvbetjent.\n Create/delete organisations  Name/shortname URL Logo   List organisations Link to organisation Create repository for organisation ref. repository management Add/remove teams in organisation List teams in organisation Add/remove users in organisation List all users in organisation Add/remove users in teams List users in teams  Brukerstyring Brukerne i denne sammenheng er tjenesteutvklerne. Det å håndtere organisasjonen skal være helt selvbetjent.\n Add/remove users Name Avatar Add/remove users to/from teams \u0026ldquo;Starring\u0026rdquo; of favorite repositories List of user repositories (including forks) Activity log for user Workspace for user (dette er veldig viktig, betyr at tjenesteutviklere kan \u0026ldquo;leke seg\u0026rdquo; på sitt eget område)  I første omgang (MVP) vil tjenesteeier (org-admin) legge til alle sine brukere i gruppen \u0026ldquo;owner\u0026rdquo; slik at de får tilgang til å opprette repositories (tjenester). Gruppen \u0026ldquo;owner\u0026rdquo; gir vide fullmakter på organisasjonsnivå (dvs tjenesteeiernivå), så på sikt vil det implementeres mer granulert tilgangsstyring.\nSøke Søk er viktig for å finne frem, og skal være bygd inn i løsningen.\n Repositories Issues Edits Users Organisations  Tilgangsstyring Det skal være mulig å styre tilgang til repositories, les/skriv/admin, teams, brukere, samt opprette private repos.\n Access to 3.0 apps (read/write) Access to orgs Users access Private/public app-repos Administrator AM/AD-integration API access  Trigge hendelser I dagens hverdag, med bruk av Slack og andre systemer ifbm. utvikling, så er det viktig at \u0026ldquo;Repositories\u0026rdquo; kan trigge hendelser i andre systemer, f.eks. poste til en Slack-kanal når en endring skjer i en 3.0-tjeneste.\n Trigger events at org-level Trigger events at 3.0 app-level  Logge inn Tjenesteutviklere og andre interessenter skal kunne logge inn og få tilgang til organisasjoner og 3.0-tjenester.\n Login page CAPTCHA? Forgot password? 2-factor auth External authentication  Sende varslinger  Send notifications to users based on events or mentions User can control the notifications to receive Users can follow other users and subscripe to issues  "
},
{
	"uri": "https://docs.altinn.studio/technology/tools/git/",
	"title": "Git",
	"tags": ["tech", "git"],
	"description": "Git is a distributed version-control system for tracking changes in source code during software development.",
	"content": "Everything we make is stored in Git repositories in GitHub.\nEvery app you make is stored in Git repositories in Altinn Studio.\nAltinn ❤️ Git.\nLinks  https://git-scm.com https://en.wikipedia.org/wiki/Git https://code.visualstudio.com/docs/editor/versioncontrol#_git-support  "
},
{
	"uri": "https://docs.altinn.studio/tags/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/gitea/",
	"title": "Gitea",
	"tags": ["development", "gitea"],
	"description": "How to customize and configure Gitea.",
	"content": "Gitea is used for version control of the apps developed in Altinn Studio.\nCustomize The documentation on how to customize Gitea can be found here.\nTemplates The user interface of Gitea can be customized to match your application needs. You can copy the templates from Gitea\u0026rsquo;s GitHub.\nFor example the default login page looks like this\nIt\u0026rsquo;s customized to look like this\nFollow these steps to change any user interface of Gitea. Here example is given for login:\n Copy the login template from Gitea\u0026rsquo;s GitHub Paste it in your application in the same folder structure as Gitea. Edit the file. You can change the html tags and introduce new CSS or add new text or image without affecting the logic. Update the Docker image to use these templates.  Now, the new login template will be taken in use.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/gitea/",
	"title": "Gitea",
	"tags": ["tech", "gitea", "git", "repos"],
	"description": "Gitea is a self-hosted Git service similar to GitHub. It is used as the repository solution in Altinn Studio Repos.",
	"content": "Gitea is the product that is powering Altinn Studio Repos.\nLinks  https://gitea.io https://github.com/go-gitea/gitea https://hub.docker.com/r/gitea/gitea  "
},
{
	"uri": "https://docs.altinn.studio/tags/gitea/",
	"title": "gitea",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/tools/go/",
	"title": "Go",
	"tags": ["tech", "programming"],
	"description": "Server side programming language.",
	"content": "Go is the programming language that has been used for developing many of the products we use in Altinn Studio, such as Gitea, Kubernetes, Docker, Traefik, Helm, Grafana, Prometheus, Terraform and Hugo.\nLinks  https://golang.org https://github.com/golang/go https://hub.docker.com/_/golang https://code.visualstudio.com/docs/languages/go  "
},
{
	"uri": "https://docs.altinn.studio/community/about/goals/",
	"title": "Goals",
	"tags": [],
	"description": "This summarizes the high level goals for Altinn 3.",
	"content": "User friendly and responsive apps  User interface that is user friendly, effective and modern. Support for Responsive Design both for forms and the development tool. Built in accessability with support for WCAG 2 Good performance and low response time  Effective and self-serviced development  As a developer you can do everthing yourself (including deployment to production) whenever you want, without need for orders, training ++. Bottlenecks is eliminated. Effective and real testing, where unit test works like in a test environment and produiction. Support for creating automated tests of apps Rules and logic is defined once for all channels (portal/web service / rest), and are more robust than current plattform Built inn data modelling in web based tool (and support for XSD import from external tools like SERES, OR, etc. ) Not nescessery with Citrix for access to Altinn Studio  Simple for non-technical developers, flexible for technical developers  Non-technical app developers have access to needed functionality in browser You can reuse good and testet components/widgets It is easy to do call against API\u0026rsquo;s in other systems (retrieve data, run external logic) Techincally skilled deveopers can configure all aspect of the apps, as an example make a reusable widgets, stylesheets ++ Reuse of text and other resources on the desired level (platform, org, app), all languages supported Git (version control) are used for source control for the apps, both from browser and code editior.  Open Source, cross-platform  Altinn 3 will be based on open source Altinn 3 will be open source Altinn 3 can run on your own computer, own serwers on Windows, macOS or Linux Everything is based on open web-standardes and regulaer development knowledge.  "
},
{
	"uri": "https://docs.altinn.studio/technology/tools/grafana/",
	"title": "Grafana",
	"tags": ["tech", "monitoring"],
	"description": "Grafana is an open platform for analytics and monitoring.",
	"content": "Grafana is an open platform for analytics and monitoring that we use when monitoring Altinn Studio.\nLinks  https://grafana.com https://github.com/grafana/grafana  "
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/fields/grouping/",
	"title": "Grouping of fields",
	"tags": [],
	"description": "How to group fields in a form.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/ux/fields/grouping/setup/\u0026quot;\u0026gt;Setup of field grouping\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;General Setup for grouping fields in form.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/ux/fields/grouping/repeating/\u0026quot;\u0026gt;Repeating groups\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Setup for repeating groups.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/app/development/ux/fields/grouping/alternatives/\u0026quot;\u0026gt;Settings for views\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Settings for views.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/",
	"title": "Development handbook",
	"tags": ["development"],
	"description": "Developer handbook for contributions to the Altinn code base.",
	"content": "This should provide all basic information needed to get started with development on the altinn-studio repo. It should alto contain the information needed to make sure all developers write their code in a consistent way.\nThe guidelines should work as reference material, but it should also be possible to read throught the whole development handbook in a logical order so that new developers quickly get up and running.\nThe development handbook is a dynamic material and everybody should feel free to extend or correct articles when needed.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/azure-devops/\u0026quot;\u0026gt;Azure DevOps\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for working with resources in Azure DevOps\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/back-end/\u0026quot;\u0026gt;Back-end\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Coding guidelines for back-end\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/general/\u0026quot;\u0026gt;Cheat Sheet\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Qucik guide for different commands\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/cosmosdb/\u0026quot;\u0026gt;Cosmos DB\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;General guidelines and best practice for working with Cosmos DB\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/deployment/\u0026quot;\u0026gt;Deployment\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for deploying\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/front-end/\u0026quot;\u0026gt;Front-end\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Coding guidelines for front-end\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/cheatsheet/\u0026quot;\u0026gt;General\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;General coding guidelines\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/getting-started/\u0026quot;\u0026gt;Getting started\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Information about how to get started\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/git/\u0026quot;\u0026gt;Git\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Information about version control with Git\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/naming/\u0026quot;\u0026gt;Naming Conventions\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Naming guidelines for Altinn Studio development\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/loadbalancer/\u0026quot;\u0026gt;Nginx loadbalancing in studio\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Information about routing with nginx\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/postgres/\u0026quot;\u0026gt;PostgreSQL\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Setting up PostgreSQL for local development\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/rest/\u0026quot;\u0026gt;RESTful APIs (Representation State Transfer)\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Guidelines for designing REST apis for microservices in Altinn\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/routing/\u0026quot;\u0026gt;Routing\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Information about routing\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/securecoding/\u0026quot;\u0026gt;Secure DevOps\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Security is an important concern in all the phases of the DevOps cycle for Altinn 3.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/test/\u0026quot;\u0026gt;Test\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Coding guidelines for tests\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/branching/\u0026quot;\u0026gt;Branching\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Branching information for Altinn Studio.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/flight-rules/\u0026quot;\u0026gt;Flight Rules\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Flight rules for Altinn Studio\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/gitea/\u0026quot;\u0026gt;Gitea\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to customize and configure Gitea.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/reusable-resources/\u0026quot;\u0026gt;Reusable resources\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;A important feature with Altinn Studio is that it should promote developers to create reusable resources that can be reused by other developers.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/theming/\u0026quot;\u0026gt;Theming and styling\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Solution for theming and styling conventions.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/contributing/handbook/troubleshooting/\u0026quot;\u0026gt;Troubleshooting\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Troubleshooting of Altinn Studio.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/helm/",
	"title": "Helm",
	"tags": ["tech", "containers"],
	"description": "The Kubernetes Package Manager.",
	"content": "What is helm? Helm is a kubernetes resource templating tool. Where all the defined kubernetes resources are deployed with combinations of templates and values. Therefore it is called the kubernetes package manager.\nA helm-package, or a helm-chart is a folder with a set file-structure.\n+-- altinn-designer | +-- templates | | +-- tests | | | +-- test-connection.yaml | | +-- NOTES.txt | | +-- _helpers.tpl | | +-- deployment.yaml | | +-- service.yaml | | +-- ingress.yaml (deleted in altinn studio, since we don\u0026#39;t use ingress. But an ingress template is included in a default helm-chart) | +-- .helmignore | +-- Chart.yaml | +-- values.yaml The Chart.yaml-file contains information about the chart, like the name, version and maintainers. The values.yaml-file contains different values. These values are accessable in the templates. So different environment variables can be defined in the values. Values can also be overwritten when running a upgrade or install of the chart.\nThe files in the templates-folder becomes populated with the values, and sent to the kubernetes clusters as the name of the files. So deployment.yaml should create a deployment in kubernetes. The same fore service.yaml and ingress.yaml.\n_helpers.tpl can be used to define functions to get release names, concatinated with other info. NOTES.txt is the info printed in the cli after an install or upgrade of an release, usually used to give usefull commands the user can run to access the pods.\nHelm usage in Altinn Studio We use helm to deploy our builds to the kubernetes cluster, both in development-, production- and SBL-cluster. Azure Dev Ops pipelines have support for helm, so this makes deploying to development trigger everytime we merge some code into master.\nLinks  https://helm.sh https://github.com/helm/helm  "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/helptext/",
	"title": "Configure help texts",
	"tags": [],
	"description": "Help developer configure help texts for components",
	"content": "Help texts are small text snippets that provide a brief explaination of what the users are supposed to fill in to the fields that they describe.\nThe language-keys that point to the help text is defined in the form layout json file.\nIn your repo under the folder App/ui there is a FormLayout.json-file. The contents might be:\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;616071dc-90b1-4ce5-8d18-492844828a41\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Header\u0026#34;, \u0026#34;componentType\u0026#34;: 0, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;appName\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;fac3c047-efe1-49da-8189-da7c536a4edd\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;componentType\u0026#34;: 2, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;21771.RapporteringsenhetNavndatadef21771.Label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;21771.RapporteringsenhetNavndatadef21771.Label\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;generellInformasjongrp2581.avgiftspliktiggrp50.rapporteringsenhetNavndatadef21771.value\u0026#34; }, \u0026#34;required\u0026#34;: true, \u0026#34;readOnly\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;08d707a9-2475-4d23-bf76-f209fb434ec2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TextArea\u0026#34;, \u0026#34;componentType\u0026#34;: 7, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026#34;, }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;avgiftspostergrp2577.posteneIOppgavengrp5639.tilleggsopplysningergrp197.omsetningsoppgaverTilleggsopplysningerdatadef19684.value\u0026#34; }, \u0026#34;required\u0026#34;: false, \u0026#34;readOnly\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;bd6589b6-e2ab-49ba-b39a-dd3f8b63e5de\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Button\u0026#34;, \u0026#34;componentType\u0026#34;: 9, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Send inn\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;textResourceId\u0026#34;: \u0026#34;Standard.Button.Button\u0026#34;, \u0026#34;customType\u0026#34;: \u0026#34;Standard\u0026#34; } ] } } If you would like one of these components to have a help text you will need to\n Insert a key into text resources, under the tab \u0026ldquo;Language\u0026rdquo;  Remember to fill out all the fields, it will not let you save if you have fields that are empty.   Open the FormLayout.json-file Insert a new text resource binding with the key \u0026ldquo;help\u0026rdquo; and the value to be the name of the Language resource.  Example of how it looks after adding help text:\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;616071dc-90b1-4ce5-8d18-492844828a41\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Header\u0026#34;, \u0026#34;componentType\u0026#34;: 0, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;appName\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;fac3c047-efe1-49da-8189-da7c536a4edd\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;componentType\u0026#34;: 2, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;21771.RapporteringsenhetNavndatadef21771.Label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;21771.RapporteringsenhetNavndatadef21771.Label\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;generellInformasjongrp2581.avgiftspliktiggrp50.rapporteringsenhetNavndatadef21771.value\u0026#34; }, \u0026#34;required\u0026#34;: true, \u0026#34;readOnly\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;08d707a9-2475-4d23-bf76-f209fb434ec2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TextArea\u0026#34;, \u0026#34;componentType\u0026#34;: 7, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026#34;, \u0026#34;help\u0026#34;: \u0026#34;Skjema.TilleggsOpplysninger.Hjelpetext\u0026#34;  }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;avgiftspostergrp2577.posteneIOppgavengrp5639.tilleggsopplysningergrp197.omsetningsoppgaverTilleggsopplysningerdatadef19684.value\u0026#34; }, \u0026#34;required\u0026#34;: false, \u0026#34;readOnly\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;bd6589b6-e2ab-49ba-b39a-dd3f8b63e5de\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Button\u0026#34;, \u0026#34;componentType\u0026#34;: 9, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Send inn\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;textResourceId\u0026#34;: \u0026#34;Standard.Button.Button\u0026#34;, \u0026#34;customType\u0026#34;: \u0026#34;Standard\u0026#34; } ] } } "
},
{
	"uri": "https://docs.altinn.studio/technology/tools/hugo/",
	"title": "Hugo",
	"tags": ["tech", "docs", "markdown"],
	"description": "Static site generator used for our documentation.",
	"content": "Hugo is a static site generator that we use for generating https://docs.altinn.studio and https://altinn.github.io/docs from markdown.\nAltinn ❤️ Hugo.\nLinks  https://gohugo.io https://github.com/altinn/docs https://github.com/altinn/altinn-studio-docs https://github.com/altinn/hugo-theme-altinn  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/infrastructure/",
	"title": "Infrastructure components",
	"tags": ["architecture", "infrastructure"],
	"description": "Altinn 3 is hosted in public cloud, and all infrastructure components are cloud based.",
	"content": "Altinn 3 consists of three different technical solutions to make a complete application development platform.\nThe diagram below shows an simplified overview over the infrastructure components.\nDownload as Visio\nAltinn 3 is currently deployed to Microsoft Azure. This does not mean that Altinn 3 can\u0026rsquo;t be deployed to other cloud providers.\nBelow you find details about the different cloud components used.\n\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/infrastructure/computing/\u0026quot;\u0026gt;Compute components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Compute components gives processor power to applications and software\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/infrastructure/network/\u0026quot;\u0026gt;Network componentens\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;All networking infrastructure is located in Azure.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/infrastructure/storage/\u0026quot;\u0026gt;Storage componentens\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn 3 uses different types of storage components.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/tags/infrastructure/",
	"title": "infrastructure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/platformoperations/infrastructuremgmt/",
	"title": "Infrastructure management",
	"tags": ["architecture", "infrastructure", "devops"],
	"description": "For a platform like Altinn 3, it is important to have good tools and processes when it comes to configuration and management of infrastructure.",
	"content": "Over time it is expected that the Altinn 3 platform would consist of hundreds of Kubernetes clusters and other cloud resources.\nTo be able to manage and configure all these cloud resources the architecture that is selected has several capabilities enabled with help of various tools and processes.\nInfrastructure Configuration and managment Capabilities Tools \u0026amp; components For all solutions of Altinn 3 (Altinn Apps, Altinn Platform and Altinn Studio) we use some common tools to configure and manage infrastructure.\nCurrently all resources are located in Microsoft Azure.\nWe use Terraform to define the infrastructure as code. Terraform allows to write declarative configuration files defining the infrastructure we use in the different solutions.\nTerraform follow the principle of \u0026ldquo;desired state\u0026rdquo;. Configuration files describe to Terraform the components needed to run the different solutions in Altinn 3.\nTerraform generates an execution plan describing what it will do to reach the desired state, and then executes it to build the described infrastructure.\nAs the configuration changes, Terraform is able to determine what changed and create incremental execution plans which can be applied.\nThis is crucial for the Altinn DevOps team to being able handle an infrastrucre at this scale.\nWe use the Terraform Azure Provider that allows lifecycle management of Microsoft Azure using the Azure Resource Manager APIs. This is a provider maintained by the Azure team at Microsoft and the Terraform team at HashiCorp.\nThe resource ARM Apis are used to verify state of infrastucture and perform changes.\nWe use Azure Devops Repos to store our Terraform scripts for the different solutions. We use Azure Devops Pipelines to run the Terraform scripts.\nProvision of new environemnts Altinn Apps Each org have their own Altinn Apps environment both for test and production. When a org sign up for using Altinn 3 the DevOps team will provision a Altinn Apps environment for that organization.\n K8 Cluster with the defined set of nodes and node size Storage account for org used to store data from apps Container register for apps created in Altinn Studio KeyVault for secrets used by apps Network setup Kubernetes wrapper for monitoring status of the different applications in the apps cluster Traefik loadbalancer  Altinn Platform Each Altinn 3 environment (production, performance test, test, acceptence test) has their own Altinn Platform solution.\nThis is based around a Kubernetes cluster and serveral components running in this.\nThe following cloud components is configured\n Kubernetes Cluster Network API managment Platform storage PostgresSQL server Cosmos DB Traefik loadbalancer  Altinn Studio For altinn studio we currently have 3 environments. Staging, dev and production.\nEach environments is set up with help of Terraform\nUpdating environments Patching environments Kured\nRunning Terrafrom scripts We run all Terraform scripts from Azure DevOps Pipelines\n"
},
{
	"uri": "https://docs.altinn.studio/tags/ingress/",
	"title": "ingress",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ingress-routes/",
	"title": "ingress routes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/installation/",
	"title": "installation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/development/api/instance/",
	"title": "Instance",
	"tags": [],
	"description": "How to make changes to application instances.",
	"content": "This page is currently incomplete and more information will be provided at a later date.\nAn instantiated application will have a corresponding instance object. This object contains metadta about the specific instance. If you want to learn more about the instance and the affiliated API you can read the technical documentation about this under \u0026ldquo;API\u0026rdquo;.\nSubstatus As an app-owner you can set a substatus for the instance, this is to allow the end user further information about which condition the instance is currently in. Substatus is displayed both in the Altinn message box and in the receipt page.\nThe substatus is an object which can be set in the instance object. How this is done is described under API. Substatus is a simple object which contains label and description. These fields can either contain clean text, or a text key that refers to the application texts. It is worth noting that we do not support variables in text for these texts. In the message box, label is limited to 25 symbols and if it contains more than 25 symbols, only the first 22 symbols will be used and \u0026ldquo;\u0026hellip;\u0026rdquo; will be added to the end.\nExample of a status object:\n{ \u0026#34;label\u0026#34;: \u0026#34;some.label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Description in clear text\u0026#34; } Below you see an example of how substatus looks like in the message box and in the receipt where the substatus is set up in the following way:\n{ \u0026#34;label\u0026#34;: \u0026#34;Accepted\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Your application has been accepted by the king.\u0026#34; } Automatic deletion of drafts As an application owner you can imagine some cases where deleting a user\u0026rsquo;s draft after a certain time is necessary. To achieve this three steps are required:\n The application needs to be configured to allow the service owner to delete instances Identify which instances that haven\u0026rsquo;t been completed via requesting storage Delete the instance via an exposed endpoint within the application  Step 1: Configuring the application Service owners are not allowed to delete instances by default. To get the required permissions a rule must be added into policy.xml, placed in App/config/authorization. The rule can be copied from our rule library.\nStep 2: Identify which instances are incomplete by sending a request to storage Storage exposes a set of query parameters which can be used to retrieve a set of instances. The example below retrieves all non-submitted instances of a given application that was instantiated on the 30. of september 2020.\nYou can try query parameters for your service here.\nHTTP GET https://platform.altinn.no/storage/api/v1/instances?appId={org}/{app}\u0026amp;created=lte:2020-09-30\u0026amp;process.currentTask=Task_1\nStep 3: Delete instance via endpoint exposed in the application After identifying the instances that are to be deleted, you can send a call to the application to delete these with the instance id (instanceOwner.partyId/instanceGuid).\nHTTP DELETE https://ttd.apps.altinn.no/ttd/apps-test/instances/{instanceOwner.partyId}/{instanceGuid}\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/instantiationhandler/",
	"title": "InstansiationHandler.cs",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for InstansiationHandler.",
	"content": "Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes\rvidere med i MVP.\r\rOverordnet \u0026lsquo;InstansiationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som hånderer instansiering av en tjeneste.\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom InstansiationHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/logic/instantiation/",
	"title": "Instantiation",
	"tags": [],
	"description": "How to add logic to be run when a new instance is created?",
	"content": "Introduction Application logic connected to instantiation can be defined in InstantiationHandler.cs. For a completely new app, two functions will be implemented in this class:\n RunInstantiationValidation - create your own tests for determining whether a user/submitter is allowed to instantiate. DataCreation - create customized prefill data.  Custom validation rules for instantiation As previously mentioned, tests for instantiation are defined in RunInstantiationValidation Access to Register- and Profile-services are included in the InstantiationHandler.cs-file, which allows test to be run againts these. Validation rules for instantiation can include validating a time to specific user instructions and complex tests that require external API calls.\nExample 1 - Instantiation only allowed before 3 pm on any given day public async Task\u0026lt;InstantiationValidationResult\u0026gt; RunInstantiationValidation(Instance instance) { DateTime now = DateTime.Now; if (now.Hour \u0026lt; 15)  { return new InstantiationValidationResult() { Valid = false, Message = \u0026#34;ERROR: Instantiation not possible before 3PM.\u0026#34; }; } return null; } Example 2 - Instantiation only allowed for application owner The application this example is based on is available here. (requires login in altinn.studio)\nTo limit instantiation to a given entity, in this case the application owner, two files must be changed: App.cs and InstantiationHandler.cs.\nIn App.cs the http-context is made available and user data (claims principals) is retrieved from the context by calling _httpContext.User.\nTo validate the instantiation, you can check one of two claims in the context. Either the organization\u0026rsquo;s three-letter abbreviation or the organization number. The validation is run in InstantiationHandler.cs and the example below uses the organization abbreviation.\nTo validate based on organization number you can follow the example below, and replace AltinnCoreClaimTypes.Org with AltinnCoreClaimTypes.OrgNumber. You can see the changes required in the file below.\npublic async Task\u0026lt;InstantiationValidationResult\u0026gt; RunInstantiationValidation(Instance instance, ClaimsPrincipal user) { var result = new InstantiationValidationResult(); string org = string.Empty; if (user.HasClaim(c =\u0026gt; c.Type == AltinnCoreClaimTypes.Org)) { Claim orgClaim = user.FindFirst(c =\u0026gt; c.Type == AltinnCoreClaimTypes.Org); if (orgClaim != null) { org = orgClaim.Value; } } if (!string.IsNullOrWhiteSpace(org) \u0026amp;\u0026amp; org.Equals(\u0026#34;ttd\u0026#34;)) { result.Valid = true; } else { result.Valid = false; result.Message = \u0026#34;Only ttd is allowed to instantiate this application.\u0026#34;; } return await Task.FromResult(result); } Example 3 - Instantiation only allowed between certain dates To limit instantiation to a certain time frame, in this example January 2021, one file requires changes:InstantiationHandler.cs.\nThe method RunInstantiationValidation will run whenever someone tries to instantiate the application, so logic is placed here to verify that the time is within the allowed frame.\npublic async Task\u0026lt;InstantiationValidationResult\u0026gt; RunInstantiationValidation(Instance instance) { InstantiationValidationResult result = null; DateTime now = TimeZoneInfo.ConvertTime(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(\u0026#34;Central European Standard Time\u0026#34;)); if (now \u0026lt; new DateTime(2021, 01, 01)) { result = new InstantiationValidationResult { Valid = false, Message = \u0026#34;Application cannot be instantiated before 1.1.2021\u0026#34; }; } else if (now \u0026gt; new DateTime(2021, 01, 31)) { result = new InstantiationValidationResult { Valid = false, Message = \u0026#34;Application cannot be instantiated after 25.1.2021\u0026#34; }; } return await Task.FromResult(result); } Logic connected to date handling has been added to ensure the Norwegian time zone is being used in the validation.\nDateTime now = TimeZoneInfo.ConvertTime(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(\u0026#34;Central European Standard Time\u0026#34;)); Furthermore, a simple test is run to see if the current time is within the given time frame\n(now \u0026lt; new DateTime(2021, 01, 01) If the requirements are not met, the return object is populated with an InstantiationValidationResult object that contains two fields: Valid: a boolean that says if the instantiation is valid or not. Message: a string that can contain an error message if it is not valid.\nresult = new InstantiationValidationResult { Valid = false, Message = \u0026#34;Application cannot be instantiated before 1.1.2021\u0026#34; }; In addition you have the opportunity to use property ValidParties: a list of the parties that are allowed to instantiate the application.\nThe result of a failed validation is shown below:\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/integration/",
	"title": "Integration &amp; Data Transport Capabilties",
	"tags": ["architecture"],
	"description": "The most important capability for a platform like Altinn 3 is the integration capabilites.",
	"content": "In many ways you can say that Altinn is a integration hub for communication between the citizens, the businesses and the public entities in Norway.\nData flows between the different actors using Altinns.\n Citizens receives data from the public agencies and sends data to the public agencies Business receives data from the public agencies and sends data to the public agencies Public agencies can share data with other public agencies ++  End-point enablement Applications created in Altinn Studio has build in API for communication with the different actors. In addition application developers can add their custom APIS.\nThe different platform components exposes API to applications and external parties.\nAll this is possible because the backend framework let developers create and expose APIS. This also include app developers that create applications in Altinn Studio.\nIn the same way the different applications and components consumes APIS from other sources both inside the Altinn 3 platform solutions and external sources.\nThe APIS exposed as standard from Apps and platform is described here\nPublish \u0026amp; Subscribe A important change for Altinn moving to the new platform is we change to an event driven architecture.\nAs part of the Altinn 3 platform it is created a Events component that apps and other can publish their events and other can subscribe to.\nThis is in detailed explained under Events capabilities\nTransport \u0026amp; Delivery The different solutions of the platform support transport \u0026amp; delivery of the data.\nBy default the clients are the active parts for transporting data. Agencies needs to push data to Altinn when it need to send data to other actors, and need to pull data when receiving data.\nThe only active push from Altinn is when Altinn Platform Events component send events to subscribers.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/platform/integration/",
	"title": "Integration Components",
	"tags": ["architecture"],
	"description": "Integration components are in charge of enabling communications between systems.",
	"content": "Gateway Software The gateway used is Azure Application Gateway. This is responsible for forwarding traffic to Api management or direct to the different Kubernetes Clusters.\nRead more about Azure Application Gateway.\nApi Management \u0026amp; Gateway Sw Azure API managmenet is used as API management. This is a managed service.\nRead more about Azure API Management.\nData Access Libraries We use various libraries to interact with different data stores.\nIntegration Libraries We use integration libraries to interact with different external and internal components.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/jest/",
	"title": "Jest",
	"tags": ["tech", "frontend", "test"],
	"description": "JavaScript Testing Framework.",
	"content": "\u0026ldquo;Jest is a delightful JavaScript Testing Framework with a focus on simplicity.\u0026rdquo;\nJest testing framework is used for front-end testing. You can read more about how to test with Jest here.\nLinks  https://jestjs.io https://github.com/facebook/jest  "
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/authorization/json/",
	"title": "Regelbibliotek JSON - UNDER ARBEID!",
	"tags": [],
	"description": "Bibliotek av autorisasjonsregler som kan brukes i en app. Husk å bytte ut tags ([ORG], [APP], [RULE_ID]) med din egen data.",
	"content": "[ORG] can instantiate an instance of [ORG]/[APP] [ORG_1] og [ORG_2] kan her være like eller ulike. I tilfellet at de er ulike vil [ORG_1] tilsvare applikasjonseieren og [ORG_2] være en annen organisasjon som får lov til å instansiere.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;[ORG_2] can instantiate an instance of [ORG_1]/[APP]\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG_2]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG_1]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;instantiate\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; { \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/policy/policy.schema.v1.json\u0026#34;, \u0026#34;Policy\u0026#34;: { \u0026#34;Rules\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Permit\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;[ORG_2] can instantiate an instance of [ORG_1]/[APP]\u0026#34;, \u0026#34;Subjects\u0026#34;: [ \u0026#34;org:[ORG_2]\u0026#34;  ], \u0026#34;Resources\u0026#34;: [ \u0026#34;app:[ORG_1]/[APP]\u0026#34;  ], \u0026#34;Actions\u0026#34;: [ \u0026#34;instantiate\u0026#34;  ] } ] } } User with role REGNA can read instances of [ORG]/[APP] when it is in Task_1 Ved å endre på rolle og task i denne regelen vil du kunne gi rettigheter til å lese instansdata på en gitt task i prosessflyten.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;User with role REGNA can read instances of [ORG]/[APP] when it is in Task_1\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;REGNA\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;Task_1\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:task\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;read\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; { \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/policy/policy.schema.v1.json\u0026#34;, \u0026#34;Policy\u0026#34;: { \u0026#34;Rules\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Permit\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;User with role REGNA can read instances of [ORG]/[APP] when it is in Task_1\u0026#34;, \u0026#34;Subjects\u0026#34;: [ \u0026#34;role:REGNA\u0026#34;  ], \u0026#34;Resources\u0026#34;: [ \u0026#34;app:[ORG]/[APP]/Task_1\u0026#34;  ], \u0026#34;Actions\u0026#34;: [ \u0026#34;read\u0026#34;  ] } ] } } [ORG] can write to an instance of [ORG]/[APP] in any task or event Denne regelen kan brukes dersom applikasjonseier skal kunne oppdatere instanser uavhengig av hvor de er i prosessflyten sin.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;[ORG] can write to instances of [ORG]/[APP] in any task or event\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;write\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; { \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/policy/policy.schema.v1.json\u0026#34;, \u0026#34;Policy\u0026#34;: { \u0026#34;Rules\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Permit\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;[ORG] can write to instances of [ORG]/[APP] in any task or event\u0026#34;, \u0026#34;Subjects\u0026#34;: [ \u0026#34;org:[ORG]\u0026#34;  ], \u0026#34;Resources\u0026#34;: [ \u0026#34;app:[ORG]/[APP]\u0026#34;  ], \u0026#34;Actions\u0026#34;: [ \u0026#34;write\u0026#34;  ] } ] } } User with role REGNA or DAGL can confirm instances of [ORG]/[APP] when it is in Task_2 Denne reglen begrenser rettigheten til å bekrefte en instans i en bestemt task til kun to roller. Ved å enten modifisere task eller roller vil du her kunne sette regler for hvem som får bekrefte instansen i ulike faser av prosessen.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;User with role REGNA or DAGL can confirm instances of [ORG]/[APP] when it is in Task_2\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;REGNA\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;DAGL\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;Task_2\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:task\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;confirm\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; { \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/policy/policy.schema.v1.json\u0026#34;, \u0026#34;Policy\u0026#34;: { \u0026#34;Rules\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Permit\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;User with role REGNA or DAGL can confirm instances of [ORG]/[APP] when it is in Task_2\u0026#34;, \u0026#34;Subjects\u0026#34;: [ \u0026#34;role:REGNA\u0026#34;, \u0026#34;role:DAGL\u0026#34;  ], \u0026#34;Resources\u0026#34;: [ \u0026#34;app:[ORG]/[APP]/Task_2\u0026#34;  ], \u0026#34;Actions\u0026#34;: [ \u0026#34;confirm\u0026#34;  ] } ] } } User with role REGNA can read instanes of [ORG]/[APP] when it is in EndEvent_1 Denne regler tillatter en bruker med den gitte rollen å lese instansdata etter at prosessen er avsluttet. Dette vil bl.a. inkludere å laste ned vedlegg og kvitteringer knyttet til instansen.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;User with role REGNA can read instanes of [ORG]/[APP] when it is in EndEvent_1\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;REGNA\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;EndEvent_1\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:end-event\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;read\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; { \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/policy/policy.schema.v1.json\u0026#34;, \u0026#34;Policy\u0026#34;: { \u0026#34;Rules\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Permit\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;User with role REGNA can read instanes of [ORG]/[APP] when it is in EndEvent_1\u0026#34;, \u0026#34;Subjects\u0026#34;: [ \u0026#34;role:REGNA\u0026#34;  ], \u0026#34;Resources\u0026#34;: [ \u0026#34;app:[ORG]/[APP]/EndEvent_1\u0026#34;  ], \u0026#34;Actions\u0026#34;: [ \u0026#34;read\u0026#34;  ] } ] } } Rule that defines that [ORG] can complete an instance of [ORG]/[APP] which state is at the end event. Denne regelen tillatter applikasjonseier å utføre en kvittering på at de er ferdig med en instans. Instansen må ha en fullført process.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:5\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;Rule that defines that [ORG] can complete an instance of [ORG]/[APP] which state is at the end event.\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;EndEvent_1\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:end-event\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;complete\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; { \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/policy/policy.schema.v1.json\u0026#34;, \u0026#34;Policy\u0026#34;: { \u0026#34;Rules\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Permit\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;Rule that defines that [ORG] can complete an instance of [ORG]/[APP] which state is at the end event.\u0026#34;, \u0026#34;Subjects\u0026#34;: [ \u0026#34;org:[ORG]\u0026#34;  ], \u0026#34;Resources\u0026#34;: [ \u0026#34;app:[ORG]/[APP]/EndEvent_1\u0026#34;  ], \u0026#34;Actions\u0026#34;: [ \u0026#34;complete\u0026#34;  ] } ] } } "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/security/jwtcookie/",
	"title": "JWTCookieAuthentication",
	"tags": ["architecture", "security"],
	"description": "This is the description of JWTCookieAuthentication.",
	"content": "JWTCookieAuthentication is a ASP.NET Core authentication service created for supporting Json Web Tokens (JWT) as bearer tokens and JWT in Cookies. It is based on JWTBearer\nThis is created for scenarios where you have need for APIs that will be accessed from system using bearer tokens and from Single Page Applications (SPA) where you want to protect the JWT from this SPA. (XSS attacks). When JWT is put in a http only cookie it is not accessible from the SPA and can\u0026rsquo;t be stolen by malicous javascript running in the browser.\nThis is created as a seperate C# Project and published as a Nuget Package here.\nFeatures Consumer  Support Verification of JWT Tokens as bearer tokens Support Verification of JWT Tokens from cookie Configureble name of cookie used Automatic detection if request contains Authorization bearer token or JWT in cookie Uses Microsoft.IdentityModel.Tokens for verification and generation. Uses OpenID connect well known endpoint to retrieve the JSON Web Key (JWK) used to sign JWT from the JSON Web Key Set Support rotating of JWK (TODO)  Features ID Provider  Support Generation of JWT Tokens as bearer tokens Support Generation of JWT Tokens inside Cookies Configureble name of cookie used Configurable Signing Certitcate Uses standard JWT Library for verification and generation. Uses OpenID connect well known endpoint to retrieve the JSON Web Key (JWK) used to sign JWT from the JSON Web Key Set Support rotating of JWK (TODO)  How To Configure JWTCookieAuthentication Configuration for consumers // Configure Authentication // Use [Authorize] to require login on MVC Controller Actions services.AddAuthentication(JwtCookieDefaults.AuthenticationScheme) .AddJwtCookie(options =\u0026gt; { options.TokenValidationParameters = new TokenValidationParameters { ValidateIssuerSigningKey = true, ValidateIssuer = false, ValidateAudience = false, RequireExpirationTime = true, ValidateLifetime = true }; options.Cookie.Domain = Configuration[\u0026#34;GeneralSettings:HostName\u0026#34;]; options.Cookie.Name = Services.Constants.General.RuntimeCookieName; options.MetadataAddress = Configuration[\u0026#34;AppSettings:OpenIdWellKnownEndpoint\u0026#34;]; if (_env.IsDevelopment()) { options.RequireHttpsMetadata = false; } }); Configuration for the identity provider The below configuration is relevant for the Identity Provider application.\n// Use [Authorize] to require login on MVC Controller Actions services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme) .AddJwtCookie(JwtCookieDefaults.AuthenticationScheme, options =\u0026gt; { options.ExpireTimeSpan = new TimeSpan(0, 30, 0); options.Cookie.Name = Common.Constants.General.RuntimeCookieName; }) How to get access to user information When a application is configured with JWTCookie authentication the information is available in httpContext about the user.\npublic static int GetUserId(HttpContext context) { int userId = 0; if (context.User != null) { foreach (Claim claim in context.User.Claims) { if (claim.Type.Equals(AltinnCoreClaimTypes.UserId)) { userId = Convert.ToInt32(claim.Value); } } } return userId; } "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/security/authentication/jwt-format/",
	"title": "JWT Format",
	"tags": ["architecture", "security"],
	"description": "Description of the JWT Format used in Altinn Studio, Altinn Platform and Altinn Apps.",
	"content": "JSON Web Token are an open, industry standard RFC 7519 method for representing claims securely between two parties and are choosen as the bearer of information about users and systems.\nThe format that is choosen for JWT tokens is RSA256. This is a asymetric algorithm where the Authentication component in Altinn Platform generates tokens based on a private key in a certificate, and everyone can validate the token with the public key.\nAltinn Platform and Altinn Apps support JWT tokens as bearer tokens in Authorization header and as JWT Tokens inside cookie.\nThe cookie will be used when users access application with a frontend in Altinn Apps (typical React application). The bearer token will be used when the user access throug mobile apps or external systems.\nThe below screenshot shows how a JWT Token can be verified at jwt.io\nClaims in token    Claim Description     UserId The internal Altinn userId for the authenticated user.   ssn The social security number.   PartyId    AuthenticationLevel The authentication level used when user logged in.   AuthenticationMethod The authentication method used when user logged in.   end user system Id The internal ID for end user system.   SystemOwnerPartyId The internal PartyID for system owner.    "
},
{
	"uri": "https://docs.altinn.studio/technology/tools/react/architecture/",
	"title": "Kodearkitektur",
	"tags": ["tech", "frontend", "react"],
	"description": "Kodearkitektur for React og tilhørende teknologi",
	"content": "Bruk av Redux Store i Containere og Components. Kort oppsummert (TL;DR) Send \u0026ldquo;ID\u0026rdquo; eller andre identifikatorer via Props til komponenten og la komponenten hente data fra Redux Store.\nUtfordring (Why?) Hvis en del av Redux Store sendes som Props så vil komponenten re-rendres ved endringer av denne Prop/Store. Det er ønskelig at komponenter ikke rendrer unødvendig.\nRe-rendring trigges av…  Endring av Props. Endring av State som endrer Props.  Kilder  Redux best practices Common pitfalls  Filtrering av Redux Store i mapStateToProps() ved help av Selector Kort oppsummert (TL;DR) Bruk Memoized Selector for å filtrere Redux Store til Props når Redux Store er stor.\nUtfordring (Why?) Hver gang (en del av) Redux Store endrer seg vil funksjoner som filtrerer ut deler av Redux Store kjøres. Hvis Redux Store (state tree) er stor (mange endringer) eller funksjonen er krevende kan det føre til ytelsesproblemer.\nLøsningen En Selector funksjon, med bruk av \u0026ldquo;reduxjs/reselect\u0026rdquo; vil kun kjøres når en definert del av Redux Store endres (eks \u0026ldquo;state.del.underdel\u0026rdquo;).\nKilder  Reselect Comparing shouldComponentUpdate() and Reselect  Eksempel Selector Dette er en enkel Selector uten mye logikk og filtrering. Jo større logikk i \u0026ldquo;filtreringen\u0026rdquo; jo mer \u0026ldquo;sparer\u0026rdquo; man i ytelse.\nimport { createSelector } from \u0026#39;reselect\u0026#39;; /** * Reselect version */ const formDataSelector = (state: any, providedProps: any) =\u0026gt; { console.log(\u0026#39;formdata selector\u0026#39;, providedProps.id); return state.formFiller.formData; }; const dataModelBindingSelector = (state: any, providedProps: any) =\u0026gt; { console.log(\u0026#39;datamodelBindingSelector\u0026#39;); return state.formDesigner.layout.components[providedProps.id].dataModelBinding; }; const getFormData = () =\u0026gt; { console.log(\u0026#39;getFormData() is trigggered, selector is created\u0026#39;); return createSelector( [formDataSelector, dataModelBindingSelector], (formData: any, dataModelBinding: any) =\u0026gt; { console.log(\u0026#39;ouput selector running\u0026#39;, formData); if (!formData) return \u0026#39;\u0026#39;; if (!formData[dataModelBinding]) return \u0026#39;\u0026#39;; return formData[dataModelBinding]; }, ); }; export const makeGetFormDataSelector = getFormData; // Alternativt en enda enklere variant, som er implementert p.t.  import { createSelector } from \u0026#39;reselect\u0026#39;; const formDataSelector = (state: any, providedProps: any) =\u0026gt; { return state.formFiller.formData[state.formDesigner.layout.components[providedProps.id].dataModelBinding]; }; const getFormData = () =\u0026gt; { return createSelector( [formDataSelector], (formData: any) =\u0026gt; { if (!formData) return \u0026#39;\u0026#39;; return formData; }, ); }; export const makeGetFormDataSelector = getFormData; Implementasjon i mapStateToProps const makeMapStateToProps = () =\u0026gt; { const GetFormDataSelector = makeGetFormDataSelector(); const mapStateToProps = (state: IAppState, props: IProvidedProps): IFormElementProps =\u0026gt; ({ id: props.id, formData: GetFormDataSelector(state, props), }); return mapStateToProps; }; export const FormComponentWrapper = connect(makeMapStateToProps)(FormComponent); makeMapStateToProps implementeres slik at Selectoren kan gjenbrukes på tvers av flere komponenter.\nHigher-Order Components Higher-Order component er en funksjon som tar imot en component og returnerer et nytt komponent med ekstra funksjoner, eller ekstra data. Et eksempel på dette er connect-funksjonen fra \u0026ldquo;redux\u0026rdquo;, som tar imot en funksjon som velger redux-state data, og en komponent som disse dataene skal sendes til.\nHvorfor? Ved å wrappe induviduelle komponenter i en higher-order component, vil vi få enklere kode mtp. at en funksjon håndterer endringer i skjemaet på kun en komponent, i motsetning til å ha en funksjon som håndterer alle endringer i skjemaet. Dette vil også gi tredjeparts-utviklere en enklere måte å skrive egne funksjoner for håndtering av endringer i deres komponenter.\nEksempel på bruk i Altinn Studio Når bruker lager en tjeneste med 3. parts komponenter vil vi wrappe disse komponentene i en Higher Order Component som gir den en callback funksjon som tar imot data som komponenten har, og kjøre en redux-action som oppdaterer data i redux-state. Uten at utvikleren av 3. parts komponenten må sette seg inn i hvilke actions som skal kjøres. Dette gir også bedre mulighet for å gjennbruke 3. parts komponenter.\nEksempel på Higher Order Component const FormComponentWrapper = (WrappedComponent, ...) =\u0026gt; { // Feel free to do anything that will enhance the components properties  // Return a react component \treturn class extends React.Component { // Add functions for handling changing of data \thandleDataChange = (dataModelBinding, data) =\u0026gt; { // fire off an action for adding the changed data to redux state \t} render() { return( \u0026lt;WrappedComponent onFormDataChange={this.handleDataChange} {...props}/\u0026gt; ); } } } Kilder  Higher-Order component  Normalized Redux Store Kort oppsummert (TL;DR)  Hver datatype får sin egen \u0026ldquo;tabell\u0026rdquo; i State. Hver \u0026ldquo;tabell\u0026rdquo; skal lagre individuelle \u0026ldquo;data\u0026rdquo; som objekter, med IDer som nøkler og \u0026ldquo;dataen\u0026rdquo; som verdi. Referansene til de individuelle \u0026ldquo;dataene\u0026rdquo; lagres ved å lagre IDene. Array med IDene brukes for å indikere sortering.  Utfordring (Why?)  Kompliserte reducers for å oppdatere nøstet state struktur. Unødvendig re-rendering grunnet oppdatering av nøstede objekter.  Eksempel { posts : { byId : { \u0026#34;post1\u0026#34; : { id : \u0026#34;post1\u0026#34;, author : \u0026#34;user1\u0026#34;, body : \u0026#34;......\u0026#34;, comments : [\u0026#34;comment1\u0026#34;, \u0026#34;comment2\u0026#34;] }, \u0026#34;post2\u0026#34; : { id : \u0026#34;post2\u0026#34;, author : \u0026#34;user2\u0026#34;, body : \u0026#34;......\u0026#34;, comments : [\u0026#34;comment3\u0026#34;, \u0026#34;comment4\u0026#34;, \u0026#34;comment5\u0026#34;] } }, allIds : [\u0026#34;post1\u0026#34;, \u0026#34;post2\u0026#34;] }, comments : { byId : { \u0026#34;comment1\u0026#34; : { id : \u0026#34;comment1\u0026#34;, author : \u0026#34;user2\u0026#34;, comment : \u0026#34;.....\u0026#34;, }, \u0026#34;comment2\u0026#34; : { id : \u0026#34;comment2\u0026#34;, author : \u0026#34;user3\u0026#34;, comment : \u0026#34;.....\u0026#34;, }, \u0026#34;comment3\u0026#34; : { id : \u0026#34;comment3\u0026#34;, author : \u0026#34;user3\u0026#34;, comment : \u0026#34;.....\u0026#34;, }, \u0026#34;comment4\u0026#34; : { id : \u0026#34;comment4\u0026#34;, author : \u0026#34;user1\u0026#34;, comment : \u0026#34;.....\u0026#34;, }, \u0026#34;comment5\u0026#34; : { id : \u0026#34;comment5\u0026#34;, author : \u0026#34;user3\u0026#34;, comment : \u0026#34;.....\u0026#34;, }, }, allIds : [\u0026#34;comment1\u0026#34;, \u0026#34;comment2\u0026#34;, \u0026#34;comment3\u0026#34;, \u0026#34;commment4\u0026#34;, \u0026#34;comment5\u0026#34;] }, users : { byId : { \u0026#34;user1\u0026#34; : { username : \u0026#34;user1\u0026#34;, name : \u0026#34;User 1\u0026#34;, }, \u0026#34;user2\u0026#34; : { username : \u0026#34;user2\u0026#34;, name : \u0026#34;User 2\u0026#34;, }, \u0026#34;user3\u0026#34; : { username : \u0026#34;user3\u0026#34;, name : \u0026#34;User 3\u0026#34;, } }, allIds : [\u0026#34;user1\u0026#34;, \u0026#34;user2\u0026#34;, \u0026#34;user3\u0026#34;] } } Kilder  Normalizing State Shape  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/platform/oscloudplatform/kubernetes/",
	"title": "Kubernetes",
	"tags": ["architecture"],
	"description": "Kubernetes is a central part of the infrastructure in Altinn 3.",
	"content": "Kubernetes is choosen to orchestrate the containers in the different solutions. There are serveral Kubernetes Clusters involved.\nThe solution uses managed Kubernetes Clusters, Azure Kubernetes Services.\nSetup We use Azure CLI to setup the different Kubernetes Clusters. (Altinn Studio, Altinn Apps and Altinn Platform).\nThis include networking and node setup.\nManagement \u0026amp; monitoring From the Azure Portal we can manage and montitor the Kubernetes Clusters.\nNodes We can scale up and down Nodes.\nContainers We get monitor the number of containers and state of containers.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/kubernetes/",
	"title": "Kubernetes",
	"tags": ["tech", "containers"],
	"description": "Kubernetes is used to manage the docker containers.",
	"content": "Kubernetes is described as container orchitrastion. That means how containers are run, exposed and all other operations that might be done on a container.\nBoth Altinn Studio and Altinn Studio Apps consists of many different applications running in docker containers. For the Altinn Studio Apps solution this could possible over time be many thousands containers running different end user apps.\nKubernetes is used to manage the containers.\nLinks  https://kubernetes.io https://github.com/kubernetes/kubernetes https://azure.microsoft.com/services/kubernetes-service/  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/kuberneteswrapper/",
	"title": "Application Architecture Kubernetes Wrapper",
	"tags": [],
	"description": "Description of the application architecture for Kubernetes Wrapper",
	"content": "The Kubernetes Wrapper is a application that exposes information about the Altinn Apps Kubernetes Cluster it is deployed to.\nThis is used by Altinn Studio for information about the apps deployed to a given Altinn Apps cluster.\nThe Kubernetes Wrapper is a ASP.NET Core MVC application exposing REST\u0026rsquo;API\u0026rsquo;s\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-studio/loadbalancer/",
	"title": "Application construction components Loadbalancer",
	"tags": [],
	"description": "The loadbalancer for Altinn Studio is based on standard open source software.",
	"content": "To redirect traffic to Designer and Repositories we use NGINX as a reverse proxy.\nNGINX is a open source Reverse Proxy/ Loadbalancer.\nSee Github repository.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/load-balancer/",
	"title": "load-balancer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/local-dev/",
	"title": "Solution-specific application components local deveolopment",
	"tags": [],
	"description": "As part of the platform it is created a solution to develop and test applications.",
	"content": "Localtest loadbalancer We use NGINX as loadbalancer for local development. Based on rules it redirect traffic between localtest platform and the app.\nCall between apps and localtest goes directly.\nApp The app is of course same as it is in Altinn Apps. The difference is that it does not run as a container.\nSee Altinn Apps for details about the construction components on a App.\nLocaltest platform Localtest platform is a application that have the same webApis that are available to apps from Altinn.Platform in test and production environments\n\n"
},
{
	"uri": "https://docs.altinn.studio/tags/localtest/",
	"title": "localtest",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/logging/",
	"title": "logging",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/platform/logicexecution/",
	"title": "Logic Executions Components",
	"tags": ["architecture"],
	"description": "Logic execution components are in charge of modeling the application behavior, in terms of data processing and flow control, according to the application specifications.",
	"content": "Code Execution Server Software Application Servers For Altinn Studio, Altinn Apps and Altinn Platform we use Kestrel as the web server/ application server for .NET applications. Read more about Kestrel.\nFor Java Applications we use Tomcat.\nLanguage Virtual Machines \u0026amp; Code Containers Applicatons in Altinn Studio, Altinn Apps and Altinn Platform that is based on .NET Core uses Common Language Runetime as a virual machine.\nApplications in Altinn Apps and Altinn Platform that is based on Java runs on Java Virtual Machine.\nRun-time Frameworks \u0026amp; Libraries E2E Run-time Frameworks Most of the applications created in Altinn Studio, Altinn Apps and Altinn Platform is based on ASP.NET Core / .NET Core programmed with C# programming language\nThis is open source, cross-platform and popular.\nFor PDF component we use Spring Boot / Java Open JDK. This is because the lack of open source PDF frameworks on .NET.\nUtility \u0026amp; Security Libraries We use serveral utility libraries in Altinn Studio, Altinn Platform and Altinn Apps.\nTypical this is configured in each of the application projects. For .NET applications we use NUGET to manage the libraries we use and you find a list over them in each project configuration files.\nExamples are:\n Newtonsoft.Json StyleCop.Analyzers Microsoft.Azure.DocumentDB.Core  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/data/logical/",
	"title": "Logical datamodel",
	"tags": ["architecture"],
	"description": "The logcical datamodel describes the data entities that is stored.",
	"content": "The following diagram shows the different entities stored. Click on the entity for the physical model used.\nData is stored in Cosmos DB as JSON documents. In addition we use object database to store the raw objects of business data that org has defined for the application.\nEntities    Entity Storage Created by     Instance Cosmos DB user/app owner   InstanceEvent Cosmos DB user/app owner   InstanceData Cosmos DB user/app owner   Data Blob storage user/app owner   Events PostgreSQL App   Applications Cosmos DB app owner    See below for details\nInstance Usage: The instance is the central metadatadocument for a given \u0026ldquo;data instance\u0026rdquo; created by a specific application. It contains information about the reportee for the specific instance, which app the instance belongs to, information about when it was created, and current process status.\nCreated by: The instance document is created when someone with the needed rights create a new instance for a given app. It could be a user with roles or the org.\nStorage: This document is stored in Cosmos DB in a shared collection. This to make it possible to search for instances accross reportees/apps.\nInstanceEvents Usage: The instanceEvents contains information about events that users or other have performed on the instance. This include times for for it. Used to present information to users and org.\nCreated by: The application creates the events when events happen\nStorage: This document is stored in a Cosmos DB in a shared collection. Storage components\nStorage: This document is stored in a shared Cosmos DB collection through the Storage component.\nDataElements Usage: Contains the metadata about data for an instance. Refer to the physical data file\nCreated by: Created by storage component when data is added to an instance\nStorage: This document is stored in Cosmos DB in a shared collection.\nData Usage: The data is any structured or unstructured data that the org receives or send through the app. Size can vary from few bytes to Gigabytes.\nCreated by: Data can be created by both an end user and the application owner.\nStorage: Store in Azure blob storage in a isolated storage for each org\nEvents Usage: Contains information about app events. Structured as cloud event. Created to support external consumptions\nCreated by: Applications creates events based on logic or standard events.\nStorage: Stored in Postgree SQL for 90 days.\nApplications Texts Usage: Used for texts in application. Connected to a given app\nCreated by Application developer\nStorage: Cosmos DB in a shared collection\nData Entities - Altinn Platform Instances Example document from instance.\nappId is the reference to the app.\n{ \u0026#34;id\u0026#34;: \u0026#34;3cc58033-128e-414d-86c2-d652af251b39\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;partyId\u0026#34;: \u0026#34;50002123\u0026#34;, \u0026#34;personNumber\u0026#34;: \u0026#34;01054210007\u0026#34; }, \u0026#34;appId\u0026#34;: \u0026#34;ttd/rip-livsgnist\u0026#34;,  \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;rip-livsgnist\u0026#34; }, \u0026#34;process\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2020-01-16T10:54:04.7691165Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;ended\u0026#34;: \u0026#34;2020-01-16T11:11:16.6358823Z\u0026#34;, \u0026#34;endEvent\u0026#34;: \u0026#34;EndEvent_1\u0026#34; }, \u0026#34;status\u0026#34;: { \u0026#34;archived\u0026#34;: \u0026#34;2020-01-16T11:11:16.6358823Z\u0026#34; }, \u0026#34;created\u0026#34;: \u0026#34;2020-01-16T10:54:05.0591613Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;20000015\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-01-16T11:11:21.4678343Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;20000015\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;Mx4uAJesYy0BAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/Mx4uAA==/colls/Mx4uAJesYy0=/docs/Mx4uAJesYy0BAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;00004300-0000-3c00-0000-5e2044d90000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1579173081 } DataItem Example document from data items.\n instanceGuid references to instance blobstoragePath references to the storage location for the given data  { \u0026#34;instanceGuid\u0026#34;: \u0026#34;7eae6eec-f686-40b6-bc57-6fafc8c94f13\u0026#34;,  \u0026#34;id\u0026#34;: \u0026#34;94f277a5-7d37-48e1-973c-92fb1f84f83a\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;ServiceModel-test\u0026#34;, \u0026#34;contentType\u0026#34;: \u0026#34;application/xml\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;ttd/endring-av-navn-v2/7eae6eec-f686-40b6-bc57-6fafc8c94f13/data/94f277a5-7d37-48e1-973c-92fb1f84f83a\u0026#34;,  \u0026#34;size\u0026#34;: 1515, \u0026#34;locked\u0026#34;: false, \u0026#34;refs\u0026#34;: [], \u0026#34;created\u0026#34;: \u0026#34;2020-01-20T09:07:59.5480429Z\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-01-20T09:08:48.3218863Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;20013900\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;Mx4uAOy+834VAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/Mx4uAA==/colls/Mx4uAOy+834=/docs/Mx4uAOy+834VAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;00004c00-0000-3c00-0000-5e256e210000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1579511329 } InstanceEvent Example on instance event.\ninstanceId references to the instance.\n{ \u0026#34;user\u0026#34;: { \u0026#34;userId\u0026#34;: 20000015, \u0026#34;orgId\u0026#34;: null, \u0026#34;authenticationLevel\u0026#34;: 1, \u0026#34;endUserSystemId\u0026#34;: null }, \u0026#34;instanceId\u0026#34;: \u0026#34;50002123/3cc58033-128e-414d-86c2-d652af251b39\u0026#34;,  \u0026#34;created\u0026#34;: \u0026#34;2020-01-16T10:54:05.1706031Z\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;Created\u0026#34;, \u0026#34;instanceOwnerPartyId\u0026#34;: \u0026#34;50002123\u0026#34;, \u0026#34;processInfo\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2020-01-16T10:54:04.7691165Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;flow\u0026#34;: 2, \u0026#34;started\u0026#34;: \u0026#34;2020-01-16T10:54:04.7871455Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Utfylling\u0026#34;, \u0026#34;altinnTaskType\u0026#34;: \u0026#34;data\u0026#34; } }, \u0026#34;id\u0026#34;: \u0026#34;5c57d85b-18e4-4215-9976-065290ef086f\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;Mx4uAImMTtoBAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/Mx4uAA==/colls/Mx4uAImMTto=/docs/Mx4uAImMTtoBAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;0900c6e2-0000-3c00-0000-5e2040cd0000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1579172045 } Application Example document on application:\n{ \u0026#34;id\u0026#34;: \u0026#34;ttd-testavpdf-2020\u0026#34;, \u0026#34;versionId\u0026#34;: \u0026#34;7cfd1c857a8535c74690aa7d6c22258c94eabf6f\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;testavpdf-2020\u0026#34; }, \u0026#34;validFrom\u0026#34;: \u0026#34;2020-01-14T11:39:00.3281424Z\u0026#34;, \u0026#34;dataTypes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;ServiceModel\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/xml\u0026#34; ], \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: null, \u0026#34;classRef\u0026#34;: null, \u0026#34;schemaRef\u0026#34;: null }, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxCount\u0026#34;: 1, \u0026#34;minCount\u0026#34;: 1 }, { \u0026#34;id\u0026#34;: \u0026#34;ref-data-as-pdf\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/pdf\u0026#34; ], \u0026#34;maxCount\u0026#34;: 0, \u0026#34;minCount\u0026#34;: 0 } ], \u0026#34;partyTypesAllowed\u0026#34;: { \u0026#34;bankruptcyEstate\u0026#34;: false, \u0026#34;organisation\u0026#34;: false, \u0026#34;person\u0026#34;: false, \u0026#34;subUnit\u0026#34;: false }, \u0026#34;created\u0026#34;: \u0026#34;2020-01-14T11:39:00.3281424Z\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-01-14T11:39:00.3281424Z\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;Mx4uAL3TuwQBAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/Mx4uAA==/colls/Mx4uAL3TuwQ=/docs/Mx4uAL3TuwQBAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;00008644-0000-3c00-0000-5e1da8540000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1579001940 } EVents [{ \u0026#34;source\u0026#34;: \u0026#34;https://skd.apps.altinn.no/skd/skattemelding/instances/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/234234422\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;app.instance.process.completed\u0026#34;,  \u0026#34;time\u0026#34;: \u0026#34;2020-02-20T09:06:50.3736712Z\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/org/974760673\u0026#34; }] Data entities - Altinn Studio Releases Example document for releases:\n{ \u0026#34;tagName\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;ver 1\u0026#34;, \u0026#34;targetCommitish\u0026#34;: \u0026#34;304e64a5b768a1a438f5682f05c81f1e3f4806e8\u0026#34;, \u0026#34;build\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;25639\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;result\u0026#34;: \u0026#34;failed\u0026#34;, \u0026#34;started\u0026#34;: \u0026#34;2020-01-28T14:26:38.776664Z\u0026#34;, \u0026#34;finished\u0026#34;: \u0026#34;2020-01-28T14:27:50.8388306Z\u0026#34; }, \u0026#34;id\u0026#34;: \u0026#34;a361d1c8-11a1-49fb-8775-59f231aadcd5\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2020-01-28T14:26:22.167018+00:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;jeeva\u0026#34;, \u0026#34;app\u0026#34;: \u0026#34;apps-test\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;9g8wAPi8x1cLAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/9g8wAA==/colls/9g8wAPi8x1c=/docs/9g8wAPi8x1cLAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;10008d1b-0000-0c00-0000-5e3044f90000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1580221689 } Deployments Example document for deployments:\n{ \u0026#34;tagName\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;envName\u0026#34;: \u0026#34;at22\u0026#34;, \u0026#34;build\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;25637\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;result\u0026#34;: \u0026#34;succeeded\u0026#34;, \u0026#34;started\u0026#34;: \u0026#34;2020-01-28T14:17:53.0563266Z\u0026#34;, \u0026#34;finished\u0026#34;: \u0026#34;2020-01-28T14:18:39.2312059Z\u0026#34; }, \u0026#34;id\u0026#34;: \u0026#34;682e31ee-3aeb-4f28-b457-98db2f34ece6\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2020-01-28T14:17:37.2229801+00:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;steph\u0026#34;, \u0026#34;app\u0026#34;: \u0026#34;process-history-app\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;9g8wAKEPFmYBAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/9g8wAA==/colls/9g8wAKEPFmY=/docs/9g8wAKEPFmYBAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;04007c5a-0000-0c00-0000-5e3042ca0000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1580221130 } Altinn Studio Repositories Altinn Studio Repositories uses Gitea, that uses a PostgreSQL database.\nSee Gitea project and models/models.go.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/losningsforslag/",
	"title": "losningsforslag",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/tools/markdown/",
	"title": "Markdown",
	"tags": ["tech", "programming"],
	"description": "Markdown is a text-to-HTML conversion tool for web writers, created in 2004 by John Gruber.",
	"content": "We\u0026rsquo;re writing all our documentation using markdown, and we use Hugo for converting the markdown to HTML.\nMarkdown is also used to format text in apps developed in Altinn Studio.\nAltinn ❤️ Markdown.\nLinks  https://daringfireball.net/projects/markdown/ https://en.wikipedia.org/wiki/Markdown https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet https://code.visualstudio.com/docs/languages/markdown https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one  "
},
{
	"uri": "https://docs.altinn.studio/tags/markdown/",
	"title": "markdown",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/tools/material-ui/",
	"title": "Material UI",
	"tags": ["tech", "ui", "react"],
	"description": "A popular React UI library used in Altinn Studio.",
	"content": "Material UI is used in Altinn Studio as the React UI library. Material UI was chosen because\n It is based on the Google\u0026rsquo;s material design. It focuses exclusively on the React components Can use responsive components provided by the library Can override the style to customize the component to match the application requirements Can save time by using the components in the library instead of creating it from scratch (for example, the navigation drawers, application bar) It uses JSS as a styling solution that exposes a low-level API which helps in advanced overriding and theming mechanism  React router is a third party routing library used in Altinn Studio to trigger navigation within the application.\nLinks  https://material-ui.com https://github.com/mui-org/material-ui https://reacttraining.com/react-router https://github.com/ReactTraining/react-router/tree/master/packages/react-router-dom  "
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/process/message/",
	"title": "Message",
	"tags": [],
	"description": "How to set up a message in Altinn Studio.",
	"content": "A message in Altinn 3 is really just a data step, in the same way as for example filling out a form. It is set up through a data model for the message, and a layout describing what the message should look like in the GUI. Because of this, message is not its own task type. This enables greater flexibility for Messages in Altinn 3 and allows them to be used as either the only task in a process, or as a part of a larger process.\nWe have made some tools to simplify the process of getting started with setting up a message in an app.\nData model We have made a standard data model for messages, to make getting started easier. This data model can be found here. It can be used as is, as a starting point, or exchanged for your own data model.\nLayout The layout can be defined by yourself in the same way as a form. We have also created a message widget, to make it easier to get started. This widget contains all the necessary components to recreate the example below. It also contains texts which are added to the resource files automatically, and contains variables with references to Title and Body in a standard data model. If you should wish for different texts, or to use a different data model, just edit either the components or the texts according to your wishes after they have been added to the page.\nNote that if one wishes to use the _attachment list_, which is a standard message widget, one must manually add the _data types_ of the attachments to the layout file. A placeholder has been added to this component when it is added to the widget. Functionality to set it in Altinn Studio will be added at a later date. Accessible data types are located in the `applicationMetadata.json` file in the app. If the data types are missing in `applicationMetadata.json` generation of PDFs will not work.\r\r"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/deployment/migration/",
	"title": "Migration to versioned charts",
	"tags": [],
	"description": "Migrating from helm template files to versioned helm dependency.",
	"content": "To ease the upgrade process of deployment charts we have moved the files that earlier where located under the folder deployment/templates to a centraly managed helm chart and pull those files in at deploy time using helm dependencies.\nThis give us the ailiti to publish updates to the helm chart in one place and version them. Service owners then only need to update the version of their helm dependency.\nDetermine if your app is using the old deployment strategy Open your app in gitea or pull the latest version to your computer using git.\nIf the deployment folder of your app is similar to this:\ndeployment\r├── .helmignore\r├── Chart.yaml\r├── templates\r│ ├── NOTES.txt\r│ ├── _helpers.tpl\r│ ├── deployment.yaml\r│ ├── horizontalPodAutoscaler.yaml\r│ ├── ingressRoute.yaml\r│ ├── middleware.yaml\r│ └── service.yaml\r└── values.yaml\rand the content of your deployment/Chart.yaml is similar to this:\napiVersion: v1 description: A Helm chart for Kubernetes # name can only be lowercase. It is used in the templats. name: deployment version: 1.1.0 Your app is using the old deployment strategy and you should follow the steps below to upgrade to the new deployment strategy, as described here.\nIf the deployment folder in your app is similar to this:\ndeployment\r├── .helmignore\r├── Chart.yaml\r└── values.yaml\rAnd your deployment/Chart.yaml is similar to this:\napiVersion: v1 description: A Helm chart for Kubernetes # name can only be lowercase. It is used in the templats. name: deployment version: 1.1.0 dependencies: - name: deployment repository: https://charts.altinn.studio/ version: 1.1.0 You are using the latest deployment strategy.\nHow to configure your deployment is documented here\nNewer version are available. If the new version is a major version please note that there could be breaking changes.\r\rMigrating to new deployment strategy The migration is fairly simple and involves three changes in your deployment folder:\n Delete the folder templates in the deployment folder. Append the dependency of altinns deployment chart to your Chart.yaml dependencies: - name: deployment repository: https://charts.altinn.studio/ version: 1.1.0 Your Chart.yaml should now look like this:\napiVersion: v1 description: A Helm chart for Kubernetes # name can only be lowercase. It is used in the templats. name: deployment version: 1.1.0 dependencies: - name: deployment repository: https://charts.altinn.studio/ version: 1.1.0  Add a new line at the top of your values.yaml containing the string deployment: and indent all the old lines with two spaces (yaml treats spaces and tab diffrently so check that you add spaces) Given that your values.yaml looked like this: replicaCount: 3 image: # Set \u0026#34;repository\u0026#34; name of your image for manual Helm install and upgrade. repository: tag: latest pullPolicy: Always pullSecrets: # Change this to the name of your pull secret - name: acr-secret service: name: deployment type: ClusterIP externalPort: 80 # If your application is running on another port, change only the internal port. internalPort: 5005 linkerd: enabled: true ingressRoute: name: Will be inserted during deploy entryPoints: - http - https routes: - match: Will be inserted during deploy kind: Rule services: - name: Will be inserted during deploy port: 80 middlewares: - name: hsts-header tls: options: name: tls-options secretName: ssl-cert volumeMounts: - name: datakeys mountPath: /mnt/keys - name: accesstoken mountPath: \u0026#34;/accesstoken\u0026#34; volumes: - name : datakeys persistentVolumeClaim: claimName: keys - name: accesstoken secret: secretName: accesstoken After you have made your changes it should look like this:\ndeployment: replicaCount: 3 image: # Set \u0026#34;repository\u0026#34; name of your image for manual Helm install and upgrade. repository: tag: latest pullPolicy: Always pullSecrets: # Change this to the name of your pull secret - name: acr-secret service: name: deployment type: ClusterIP externalPort: 80 # If your application is running on another port, change only the internal port. internalPort: 5005 linkerd: enabled: true ingressRoute: name: Will be inserted during deploy entryPoints: - http - https routes: - match: Will be inserted during deploy kind: Rule services: - name: Will be inserted during deploy port: 80 middlewares: - name: hsts-header tls: options: name: tls-options secretName: ssl-cert volumeMounts: - name: datakeys mountPath: /mnt/keys - name: accesstoken mountPath: \u0026#34;/accesstoken\u0026#34; volumes: - name : datakeys persistentVolumeClaim: claimName: keys - name: accesstoken secret: secretName: accesstoken   Commit and push your changes to gitea and your next deploy will use the new deployment strategy\n"
},
{
	"uri": "https://docs.altinn.studio/api/models/",
	"title": "Models",
	"tags": [],
	"description": "This is an overview over most models exposed by the different API. It does not explain every single property of all models, but will try to give a solid introduction to the important parts.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/models/app-metadata/\u0026quot;\u0026gt;App metadata\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The application metadata document holds technical information about the app and the data type requirements.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/models/instance/\u0026quot;\u0026gt;Instance\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;An instance is a metadata container that is used to track the status and progress of one interaction between an app user and owner.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/models/data-element/\u0026quot;\u0026gt;DataElement\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;A data element is a metadata container that is used to track the status of actual data blobs.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/platformoperations/monitoring/",
	"title": "System and platform monitoring",
	"tags": ["architecture"],
	"description": "As part of the architecture Altinn 3 has capability to monitoring different aspects of the platform",
	"content": "Altinn 3 uses serveral features of Azure Monitor.\nMonitoring Application Insights is used to monitor different aspects of the platform.\nThe above screenshot shows statistics for different requests.\nThis screenshots shows how Application Insights presents how traffic flows between the different applications in the solutions.\nThis screenshots show how a request flows through the different applications\nThis screenshots show how a request flows through the different applications\nThis screenshots show how a request flows through the different applications\nAlerts Azure Alerts is used to define rules to notify the DevOps team about issues in the platform.\nAlerts are posted to a specific Alerts channel on Slack.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/monitoring/",
	"title": "monitoring",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/needstranslation/",
	"title": "needstranslation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/infrastructure/network/",
	"title": "Network componentens",
	"tags": ["architecture", "infrastructure", "todo"],
	"description": "All networking infrastructure is located in Azure.",
	"content": "Altinn 3 is based on different network components in Azure.\nVirtual Network As part of the Altinn 3 platform there is serveral Virtual Networks. Each Kubernetes Cluster have their own Virtual Network.\nThis increases security and isolates the different org cluster from eacother.\nRead more about Azure Virtual Networks.\nAzure Loadbalancer In front of every AKS cluster there is a Azure Loadbalancer that load traffic between the different nodes in the AKS cluster.\nRead more about Azure Load Balancer\nApplication Gateway Azure Application Gateway is a web traffic load balancer that enables you to manage traffic to your web applications. Traditional load balancers operate at the transport layer (OSI layer 4 - TCP and UDP) and route traffic based on source IP address and port, to a destination IP address and port.\nIn Altinn 3 we use Application gateways in front of Azure Loadbalancers.\nRead more about Azure Application Gateway\nIngress controller We use Traefik as ingress controller in the different Kubernetes Clusters.\nExpressRoute We use Express route for high performence networking between our Altinn 3 platform and the on-premise Altinn 2 platform.\nRead more about ExpressRoute\n"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/nginx/",
	"title": "Nginx",
	"tags": ["tech", "load-balancer"],
	"description": "Load balancer currently used for routing traffic between Repos and Designer.",
	"content": "Nginx is used as the load balancer in the Altinn Studio solution. It routes traffic between Repos and Designer, itself running in a docker container.\nLinks  https://www.nginx.org https://github.com/nginx/nginx https://hub.docker.com/_/nginx  "
},
{
	"uri": "https://docs.altinn.studio/tags/nginx/",
	"title": "nginx",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/tools/node-js/",
	"title": "Node.js",
	"tags": ["tech"],
	"description": "Node.js is a JavaScript runtime built on Chrome&#39;s V8 JavaScript engine.",
	"content": "Our front-end is built on top of open source javascript/typescript packages from the Node.js ecosystem.\nWe\u0026rsquo;ve also published our design system on npm.\nLinks  https://nodejs.org https://github.com/nodejs/node/ https://hub.docker.com/_/node https://code.visualstudio.com/docs/nodejs/nodejs-tutorial  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/requirements/non_functional/",
	"title": "Non-Functional Requirements",
	"tags": ["architecture"],
	"description": "Non functional requirements contains requirements that typically is important for deciding the architecture.",
	"content": "Architectural Concerns Architecture Concerns are categories of Non-Functional Requirements (NFRs) of a system that has been important defining this architecture. These are sometimes referred to as cross-cutting concerns or \u0026ldquo;the -ilities\u0026rdquo; because most of the words end with \u0026ldquo;-ility.\u0026rdquo;\nPerformance Scalability The platform need to be highly scalable. The traffic in this types of solutions involves a large part of the countries citizens and the traffic is often concentrated around a few dates.\nThe traffic also grows every year and the architecture should be able to\nRequirement: The platform should be able to scale up and down to support this type of usage patterns.\nResponse Time The solution need to have a performance to support a user friendly experience.\nRequirement: Page load should be less than 1 second\nCapacity The different solutions have different capacity requirements.\nThe Altinn Platform would need to support the combined traffic from all applications running in Altinn Apps.\nThe usage of Altinn is growing each year.\nReliability Reliablity requirements says something about how often users will experience system errors.\nAltinn have users in every age group and for most age groups more than 90% of the citizens use Altinn every year.\nThe requirement is that less than 1% of the users will experience errors.\nAvailability The solutions need to be available 24/7.\nRequirement: The architecture itself needs to be able to support high availability. It can\u0026rsquo;t require reqular downtime or other maintainence that makes it not available.\nRecoverability Based on the important of the solution the plattform needs to be recovorable also disaster events.\nRequirement: It should be possible to setup the solutions from scratch in xx hours (will be specificed)\nSecurity Building a platform to host applications for different governmental agencies will involve sensitive data for citizens and businesses in the country.\nThis makes security one of the most important architecture concern in the solutions.\nAuthentication Only authenticated users or systems can access data in the platform.\nRequirements\n Use a standardized  Authorization Single sign on Isolation Personel security Maintainability The solutions will be open source and involve a large amount of developers. It is important that the different components are highly maintainable to support effective development\nOperability The solutions will de operated by a small devops team and need to be highly operable. It needs to support automatic monitoring.\nUsability Accessibility Both Altinn Studio and Application created in Altinn Studio and deployed to Altinn Apps need to follow WCAG 2.1 requirements by law.\nSee details about the WCAG 2.1 requirements that applies here.\nLocalisation The data needs to be stored inside the Norwegian boarder.\nPortability The technology architecture should not make it impossible to move to different cloud providers.\nOther Non-Functional requirements System location The Altinn solution needs to be located inside Norwegian borders. This requires that we only can choose amongst the cloud providers providing cloud services inside Norway.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/nuget/",
	"title": "nuget",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/security/authentication/oidcproviders/",
	"title": "OIDC Providers",
	"tags": ["architecture", "security"],
	"description": "Altinn Authentication support configuration of multiple OIDC Providers",
	"content": "Each App in Altinn Apps can configure to use one of the pre-configured and approved OIDC providers.\nWhen redirecting the user to Altinn Authentication, by default ID-porten will be presented through Altinn 2 configuration.\nIf authentication component has configured a specific OIDC provider and the app is configured to use this, the user will be redirected to login. Currently, the only approved OIDC providers in Altinn are FEIDE and UIDP have been approved OIDC providers in Altinn. (School sector)\nOIDC Configuration Under general setting for the AuthenticationComponent there are two settings.\n   Value Datatype Decription     EnableOidc true/false If true, an app can request a specific OIDC provider when login in   EnforceOidc true/false If true, OIDC is the default login method. In the future, this will always be true   DefaultOidcProvider string id for the provider should be used as default if non is set. Only relevant when enforceOidc is true    Altinn Platform Authentication can support endless numbers of ID providers. However, in an Altinn context, each provider needs to be approved.\nCurrently, FEIDE and UIDP are the only approved providers. UDIR applications use these.\nEach provider needs a separate setup.\n   Value Description     Issuer The issuer\u0026rsquo;s identification   AuthorizationEndpoint Authorization endpoint for issuer   TokenEndpoint Endpoint where ID-provider generates tokens   WellKnownConfigEndpoint Id-provider well known endpoint   LogoutEndpoint Where to redirect user during logout   ClientId Registrated ID   ClientSecret Registrated secret   Scope Scopes that will be used when requesting authentication   ExternalIdentityClaim This claim will be used to match the existing user or create a new one. If this ID is the only claim and is not a common identifier like social security number or email address, the user will be anonymous for Altinn. If not set, the expectation is that there will be a PID claim containing ssn.   UserNamePrefix When generating a new user, this will be the prefix   IncludeIssInRedirectUri Identifies if authorization request should cointain ISS in return URL. Needed when IDprovider does not include this   ProviderClaims Claims that should be copied to Altinn token during exchange process. This could be identifying users or other properties available in the app code.    \u0026#34;OidcProviders\u0026#34;: { \u0026#34;altinn\u0026#34;: { \u0026#34;Issuer\u0026#34;: \u0026#34;https://idprovider.azurewebsites.net/\u0026#34;, \u0026#34;AuthorizationEndpoint\u0026#34;: \u0026#34;https://idprovider.azurewebsites.net/authorize\u0026#34;, \u0026#34;TokenEndpoint\u0026#34;: \u0026#34;https://idprovider.azurewebsites.net/api/token\u0026#34;, \u0026#34;WellKnownConfigEndpoint\u0026#34;: \u0026#34;https://idporten.azurewebsites.net/api/v1/openid/.well-known/openid-configuration\u0026#34;, \u0026#34;LogoutEndpoint\u0026#34;: \u0026#34;https://idporten.azurewebsites.net/api/v1/logout\u0026#34;, \u0026#34;ClientId\u0026#34;: \u0026#34;asdf34argf\u0026#34;, \u0026#34;ExternalIdentityClaim\u0026#34;: \u0026#34;sub\u0026#34;, \u0026#34;UserNamePrefix\u0026#34;: \u0026#34;UIDP_\u0026#34;, \u0026#34;IncludeIssInRedirectUri\u0026#34;: true, \u0026#34;ProviderClaims\u0026#34;: [ \u0026#34;locale\u0026#34;, \u0026#34;urn:feide:role\u0026#34;, \u0026#34;sub\u0026#34; ] } "
},
{
	"uri": "https://docs.altinn.studio/community/about/open-source/",
	"title": "Altinn and open source",
	"tags": [],
	"description": "Altinn 3 is open source with an open backlog, open documentation and open dialogue and discussions.",
	"content": "There are many who have noticed that Altinn has chosen a new and very open direction in recent years.\nWe\u0026rsquo;ve received questions about why, and thought it would be interesting that we share our thoughts on open source, as as central national common component in Norway.\nSharing and reuse There are many good reasons to share your code as open source.\nNAV, one of the trailblazers of open source in Norway, is also repeating several of the same arguments (Norwegian Only), and especially the importance of transparency and trust related to solutions financed by the public.\nWe applaud, when NAV writes this:\n Solutions funded by the public should be publicly available.\nThe motivation is then not mainly reuse, although it is obviously a nice side effect.\nThe motivation is primarily openness and transparency in the digital solutions.\n But to be clear, reuse is something we in Altinn consider a central motivation. And we\u0026rsquo;re not alone thinking like this:\n the UK government action plan Open Source, Open Standards and Re­Use (PDF) describes reuse as both a policy and a principle. EU has has had a clear open source strategy (PDF) for a long time.  We facilitate reuse and sharing at all levels of the Altinn architecture, from our principles to the entire platform and infrastructure, down to design and UI-widgets, code and configuration.\nThis is also one of several reasons why Altinn is now a Digital Public Good (DPG), where the goal is to be able to reuse everything we develop not only at national level, but also globally to accelerate the attainment of the sustainable development goals.\nWe also encourage the developers building apps using Altinn Studio to also share their apps. In fact, you have to do an active decision not to share, since sharing and reuse is central to the concept of Altinn 3.\nCooperation The best way to get a good collaboration across organizations and projects is openness and transparency, that everyone can contribute, provide input, be heard, follow what\u0026rsquo;s happening.\nThis has been a central point in the open source \u0026ldquo;revolution\u0026rdquo;, that has become the new norm for large parts of software development in the world. There are now 40 million developers and over 28 million open repositories on GitHub.\nSince all the tools and dependencies we use are open source on Github, we in Altinn can also follow what\u0026rsquo;s happening, and collaborate and contribute back to the software we\u0026rsquo;re using.\nExamples of such open source software is .NET, Kubernetes, React, Linkerd and Gitea. And our issue #5992 is a good example on how we can track and easily link to issues across software.\nAnd since Altinn is open source at Github, it is as easy for everyone else to do the same thing to us. Both creating new issues, contribute in discussions or contribute code, something the label external-contribution-❤️ illustrates well.\nVendor bindings Altinn as a national common component has previously experienced major challenges by building on closed proprietary software. Software from Adobe in Altinn 1 and from Microsoft in Altinn 2.\nEnd-of-life for proprietary software is actually the main reason for why we had to create Altinn 3.\nWhen building a solution on top of proprietary software, then you\u0026rsquo;ve lost control over your own future, for example if the vendor chooses to phase out the product.\nIf your solution is built on top of open source products then you, or anybode else, can make a fork in such a situation.\nAltinn 3 is therefore based on software and libraries which is open source.\nWe think this naturally is also very important for those who consider whether to adopt Altinn or not.\nWhich bindings do we introduce to Altinn as a technical solution and to Digdir as a \u0026ldquo;supplier\u0026rdquo;? Even though Altinn is a cooperation, this will be an important question.\nAltinn 3 is therefore completely open source with a permissive license, and everything runs as regular containers.\nThe best tools To develop good software, it is important to have access to good tools.\nOne thing that many may not think about is that when you share what you develop as open source, many of the very best tools out there are available - for free.\n\u0026ldquo;Share, and thou will be shared with\u0026hellip;\u0026quot;\nHere are some of the wonderful SaaS-tools that we use:\n GitHub - Handling of source code, backlogs, boards, automation, CI/CD, etc. ZenHub - Epics, estimates, agile reports. Cypress - Dashboards and automated UI-testing. SonarCloud - Static analysis of source code. LGTM - Security analysis of source code.  And this is just a small selection\u0026hellip;\nAlso, all tools and framework that we build Altinn 3 on top of, is open software that is also very popular.\nThe best people It is a common theme that people like to work with new technology and the best tools. The best developers also prefer to work with open source, feeling that one contributes to something bigger, that one leaves a mark on the world.\nIn the time that has passed since we launched Altinn 3 (Norwegian only) in the summer of 2020, we\u0026rsquo;ve hired some very skilled people, and a repeating pattern in interviews and discussions is that the best candidates are clearly expressing that they think open source is important, and that this is something they want to participate in.\nWe want to build a big community, where everyone can contribute, and then it is important that we have skilled and happy developers who can help make that happen.\n"
},
{
	"uri": "https://docs.altinn.studio/api/apps/spec/",
	"title": "OpenAPI (swagger) for Apps",
	"tags": ["swagger", "openapi"],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/api/authentication/spec/",
	"title": "OpenAPI (swagger) for Authentication",
	"tags": ["swagger", "openapi"],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/api/events/spec/",
	"title": "OpenAPI (swagger) for Events",
	"tags": ["swagger", "openapi"],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/api/storage/spec/",
	"title": "OpenAPI (swagger) for Storage",
	"tags": ["swagger", "openapi"],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/openapi/",
	"title": "openapi",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/nonsolutionspecific/operations/",
	"title": "Operations Application",
	"tags": ["solution", "architecture"],
	"description": "Operations Applications are used by the devops team for supporting the different operation and management capabilities required",
	"content": "Application Performance Monitoring Some monitoring is done from Azure Portal with help of Azure Monitor Appliation Insight and other tools avaiable.\nPasS and \u0026amp; IaaS configuration There are serveral ways PasS and \u0026amp; IaaS resources are configured \u0026amp; managed\n Azure Portal Azure CLI Azure mobile app   \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/nonsolutionspecific/operations/backupandrecovery/\u0026quot;\u0026gt;Backup and recovery\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;All data created in the different solutions are backed up so it is possible to restore it in case of data loss.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/app/launched-apps/digdir/oed/",
	"title": "Oppgjør etter dødsfall",
	"tags": ["translate-to-english"],
	"description": "Dokumentasjon av arkitektur, design, funksjonalitet og apper relatert til oppgjør etter dødsfall.",
	"content": "Innledning Figuren under viser de viktigste komponentene i løsningen. OED er realisert som en serie Tjenester 3.0 app\u0026rsquo;er med en overordnet app med skreddersydd GUI og øvrige Tjenester 3.0 apper for spesifikke formål.\nApp\u0026rsquo;ene kan ikke instansieres fra tjenestekatalogen. Hovedapp\u0026rsquo;en instansieres utelukkende fra Domstol grensesnittet, og «Altinn avgiver» (process instance owner) er avdøde. Arvinger og evt andre som skal benytte løsningen får tilgang til instansen via tildelte roller i Altinn autorisasjon. Brukeren (arvingen) finner app\u0026rsquo;en fra en melding «Altinn correspondence» i meldingsboksen i Altinn. Meldingen inneholder en direktelenke til riktig instans i Tjenester 3.0. Se for øvrig 3 Grensesnitt mot Domstolene.\nLøsningens hovedapp har følgende adresse i Altinn Studio: designer og kode.\nOppdeling i Tjenester 3.0 apper Hovedapp\u0026rsquo;en har et skreddersydd brukergrensesnitt fordi Tjenester 3.0 p.t. ikke støtter å lage vilkårlige applikasjoner. Løsningen er derfor splittet opp i flere app\u0026rsquo;er slik at mest mulig realiseres som standard tjeneste 3.0 apper. I første omgang gjelder dette skjemautfylling. På sikt kan det også være aktuelt å flytte «innsynsfunksjonalitet» ut i Tjenester 3.0 app\u0026rsquo;er, men p.t. er støtten for GUI design i Tjenester 3.0 såvidt begrenset at det er vanskelig å implementere ønsket brukeropplevelse.\nSkjema app\u0026rsquo;ene blir instansiert og preutfylt fra hovedapp\u0026rsquo;en når brukeren tar initiativ til å starte skjemautfylling. Skjemaet blir instansiert med avdøde som «Altinn avgiver» (process instance owner), og fødselsnummer til den arvingen som startet skjemautfylling blir lagt som en nøkkel på instansdataene med Tjenester 3.0 mekanismen «data value» med nøkkel «ssn».\nDet er lagt opp til at alle arvingene aksesserer de samme skjemainstansene bortsett fra skjemaet «oed-signature». I sistnevnte skjema blir det en unik instans per arving.\nAll innsending av data fra arvingene gjøres via skjema app\u0026rsquo;er. Signering ved innsending benytter derfor standard Tjenester 3.0 funksjonalitet. Hvis gjeldene funksjonalitet for signering ikke tilfredsstiller formelle krav til løsningen (f.eks. om man ønsker nivå 4 signering), må dette være utvidelser/forbedringer i Tjenester 3.0 plattformen \u0026ndash; ikke spesifikt i OED løsningen.\nFølgende app\u0026rsquo;er finnes p.t.:\n oed (hoved app) oed-register-agri-property oed-register-heirs oed-register-marriage-pact oed-register-testament oed-signature  Mer dokumentasjon knyttet mot applikasjoner vedrørende Tjenester 3.0 finnes her:\nOED: https://github.com/Altinn/oed/issues/442\nT3.0: https://github.com/Altinn/altinn-studio/issues/6880\nGrensesnitt mot Domstolene Grensesnittet for å motta data fra Domstolene er definert av Domstolene og ligger på GitHub - Altinn/oed-da. Dette er et hendelsesbasert grensesnitt med samme oppbygning som eksiterende Altinn grensesnitt mot Folkeregisteret. P.t. er det bare spesifisert overføringer av nye avdøde og arvinger, men det er forventet at grensesnittet kan utvides til endringer på avdøde og arvinger samt testamentinformasjon.\nProsjektet har besluttet å implementere grensesnittet som en Altinn II batch. Bakgrunnen for at grensesnittet ikke ble implementert i Tjenester 3.0 er:\n Tjenester 3.0 støttet ikke batch jobber da beslutningen ble tat Tjenester 3.0 har ikke et regime for driftsoppfølging av batcher Tjenester 3.0 tilbyr ikke databaser for app\u0026rsquo;er utover lagring av skjemadata og instansdata. Domstol grensesnittet krever at man lagrer en tilstand mellom hver kjøring. Altinn II har ikke eksponert eksterne tjenester for å laste inn roller/rettigheter. Altinn II batch jobber kan benytte interne tjenester.  Batchen kjøres automatisk ved regelmessige intervaller og gjør følgende:\n Henter nye arvinger fra Domstolene Tildeler roller mellom arving og avdøde i Altinn Autorisasjon Gjør oppslag mot KRR (Altinn kopi) angående reservasjon mot elektronisk behandling. Det er p.t. ikke avgjort om Altinn skal ha ansvar for dette og hva som eventuelt skal være konsekvensen hvis det foreligger en reservasjon. Hente utfyllende informasjon om arving og avdøde fra Folkeregisteret (Altinn kopi). Sjekke om det finnes en instans av boet. Opprette instans hvis den ikke finnes Legge arving inn blant instansdata Sende melding til arving (Altinn II Correspondence). Meldingen blir liggende i Altinn meldingsboks dyplenke inn til avdødes instans Sende varsling til arving på epost/SMS basert på informasjon fra KRR. (Gjøres som en integrert del av forrige punkt.)  Batchen ligger i Altinn II repo for batcher og heter Altinn.SBL.Batch.DA.\nGrensesnitt data fra eksterne aktører Autorisasjon Nedenfor beskrives hva som ligger til grunn for autorisasjonen.\nImplisitt fullmakt fra DA (1-2)\nAltinn mottar en implisitt fullmakt fra DA (dvs at en person er en arving) ved hjelp av DA grensesnittet (1). Fullmakten lagres i Altinn (2). Fullmakten lagres logisk to steder:\n  I boets instans i OED appen\nDet lagres hvem som er avdød og hvilke arvinger som har fullmakt. Se for øvrig åpne punkter nederst i dokumentet.\n  Som autorisasjonsregler i Altinn sin standard autorisasjonsløsning\nDet lages en eller flere autorisasjonsregler per arving.\n  Aksess til eksterne ressurser fra OED basert på fullmakt (3-7)\nBasert på fullmakt fra DA kan OED hente data fra eksterne kilder på vegne av arvinger med fullmakt. OED gjør system-til-system oppslag mot eksterne kilder. Oppslagene autoriseres ved hjelp av egnet autorisasjonsinfrastruktur \u0026ndash; primært Maskinporten (3-4). Maskinporten returnerer et token (4) som sendes med til eksternt system (5). Tokenet er bevis overfor eksterne parter at forespørselen kommer fra OED. Oppslagene har nesten alltid avdødes fødselsnummer som forespørselsnøkkel (5). Eksterne systemer må stole på at OED kun gjøre forespørsel når det foreligger en fullmakt samt at OED ikke viser dataene til arvinger uten fullmakt. Avdødes fødselsnummer er nøkkel til fullmakten i OED (2).\nBeskrivelsen i dette dokumentet gjelder uavhengig av om man teknisk gjør oppslag mot eksterne kilder basert på en arvings aktivitet i portalen eller om det gjøres asynkront \u0026ndash; uavhengig av brukerinteraksjon. I figuren over er det antydet at dataene lagres i OED (7), men hvis man velger å ikke lagre dataene, påvirker ikke dette den øvrige beskrivelsen.\nVise data fra eksterne aktører til arvinger (8-12)\nDet defineres i OED hvilket krav man har til autentisering (8) av arvingene. Det er naturlig at man definerer et nivå som ID-Porten eller høyere. Alle innlogginger logges i Altinn (samt i ID-Porten eller annen ekstern infrastruktur for autentisering) (8-10). OED vet derfor alltid hvem brukeren er. OED definerer også autorisasjonsregler som gjør at det ikke er mulig for noen andre enn de som har fått autorisasjonsregler fra fullmakten å aksessere et gitt dødsbo (11). Når brukeren får tilgang til eksterne data, er disse hentet ut basert på fullmakten som foreligger fra DA, og de vises til brukeren (12) basert på autorisasjonsreglene fra fullmakten.\nRevisjonsspor\nAt de ikke blir utlevert opplysninger fra ekstern kilde uten fullmakt kan dokumenteres ved følgende revisjonsspor:\n  Fullmakten ligger lagret i Altinn (2). Fullmakten inkluderes saks-id fra DA. Fullmakten peker tilbake til kilden hos DA (1).\n  Altinn gjør oppslag mot eksterne kilder ved hjelp av autorisasjonsinfrastruktur (primært Maskinporten) som beviser at oppslaget ble gjort fra OED (3-4). Oppslaget blir gjort med avdødes fødselsnummer som nøkkel (5-6), og samme fødselsnummer er nøkkel til fullmakten (2).\n  Arvingene må autentisere seg før aksess til OED (8). Alle autentiseringsforsøk blir logget i Altinn sin TTP (trusted third party) database (9-10).\n  All aksess til OED autoriseres. Alle autorisasjoner logges i altinn sin TTP (trusted third party) database (11). Autorisasjonsloggen inkluderer aktuell bruker, tidspunkt, hvilken ressurs som ble forsøkt aksessert (i dette tilfellet referanse til avdødes instans med tilhørende fullmakt i OED) og utfall av autorisasjonen.\n  Åpne punkter\nSkal alle arvinger med tilgang til OED ha fullmakt? I motsatt fall må det gjøres intern autorisasjon i OED som differensierer hva slags informasjon som skal vises avhengig av hvilken arving som har logget inn.\nEr fullmakt implisitt dekket av eksisterende DA grensesnitt (ny arving foreligger i boet) eller trenger man en ny hendelse \u0026ndash; fullmakt \u0026ndash; i DA grensesnittet? Er for øvrig relatert til forrige punkt. Hvorvidt fullmakt blir en ny hendelse eller ikke påvirker ikke beskrivelsen over annet enn at DA grensesnittet eventuelt må oppdateres.\nLagring av innhentede data Det er gjort konfigurerbart (via felles kode \u0026ndash; se 4.3 Intern implementasjon) hvorvidt man skal lagre data fra aktørene blant instansdataene etter at de er framvist for arvingen. P.t. prøver man først å hente friske data når arvingen åpner app\u0026rsquo;en. Dataene lagres samtidig. Hvis man ikke får tak i data og det ligger data på instansen fra før, vises disse.\nIntern implementasjon De fleste grensesnittene har Swagger spesifikasjoner. Der dette ikke finnes lager vi Swagger manuelt. Det benyttes standard mekanismer i Visual Studio for å importere Swagger definisjonene og generere klientkode \u0026ndash; «Connected Services».\nMotparten til den genererte koden ligger i klasser i katalogen ExternalApi. I disse klassene kalles Api, og og det blir gjort en mapping til intern domenemodell.\nHver grensesnitt er tilgjengelig fra GUI via ExternalAPIController. Kontrolleren har felles kode for alle grensesnittene for å:\n Kalle grensesnitt Hente instans Lagre respons i instans Benytte lagret respons hvis gjeldende oppslag ikke returnerer data Gjøre evt mapping av fødselsnummer \u0026ndash; se 4.3 Testdata Returnere data til GUI  De genererte klientene konfigureres i startup.cs. Her hentes vertsnavn fra miljøspesifikke konfigurasjonsfiler.\nListe over grensesnitt P.t. benyttes følgende grensesnitt\n   Aktør Eks*) Swagger     Skatt  Skatt avregning   Skatt  Skatt 2020   Skatt  Skatt tilgjengelige data   Kartverket x API docs   SVV x Kjøretøy søk   Norsk Pensjon x API docs   Bank KAR x DSOP KFR API   Bank konto x DSOP Konto API   Geo Norge x Kommune API   Geo Norge x Adresse API   Landbruk  API docs   Ektepakt x n/a SOAP grensesnitt    *) Betyr at swagger kommer fra aktør og ikke er konstruert av OED\nTestdata Det mest optimale hadde vært om man kunne definere felles testdata på tvers av alle aktører i OED. Dette er imidlertid ikke realistisk på kort sikt. Det er definert en modul for mappe avdødes fødselsnummer, som benyttes som nøkkel i nesten alle eksterne grensesnitt, til et passende fødselsnummer hos aktuell aktør.\nMappingen utføres bare når man kjører løsningen i et testmiljø. Mappingen ligger som kode i metoden MapSsn i ExternalAPIController.\nKode for å autorisere mot Maskinporten og eventuell utveksling av token fra Maskinporten til Altinn JWT ligger i Util/MaskinportenUtil.\nGrensesnitt for å hente ut data Eksterne aktører \u0026ndash; i første omgang primært Domstolene \u0026ndash; kan hente ut data via standardiserte Api fra Tjenester 3.0. Dette er beskrevet i Storage API \u0026ndash; Altinn.\nDet anbefales å benytte en hendelsesbasert innfallsvinkel til å hente ut data. Dette er beskrevet i Integration \u0026amp; Data Transport Capabilties \u0026ndash;Altinn.\nDet finnes tilgjengelige data fra hver app. Det antas at Domstolene i første omgang vil hente data fra skjema app\u0026rsquo;ene. Avdøde vil være «instance owner». Fødselsnummeret til den arvingen som fylte ut skjemaet, vil ligge som «data value» med nøkkel «ssn».\nCustom GUI for hoved app Tjenester 3.0 tilbyr p.t. ingen støtte for skreddersydde brukergrensesnitt, som man trenger i hovedapp. Det er derfor tatt utgangspunkt i en kopi av Tjenester 3.0 sin fulle klient for skjemautfylling. I denne klienten er det i noen grad fjernet komponenter som ikke er relevante for en skreddersydd klient, men det gjenstående er likevel stort og komplekst.\nKlienten - altinn-app-frontend.js - lenkes inn i fila App\\views\\Home\\Index.cshtml. I utviklingsmiljøet benyttes lokal node modul mens i prod- og testmiljøer refereres den ferdig kompilerte .js-fila fra bygg prosessen.\nOED spesifikk kode for klienten ligger hovedsakelig under mappen features/custom, der mapper og filer oppdeles logisk basert på visningstype og fagområde. Det har blitt tatt i bruk eksisterende biblioteker, basert på kopien av Tjenester 3.0 sin fulle klient og ikke lagt til nye utenom React testing library og Cypress. Disse bibliotekene blir brukt for enhetstesting, ende-til-ende testing og universell utforming tester.\nDet har blitt utviklet en del komponenter, både spesifikt tilknyttet OED design men også tilknyttet Altinn 3 Figma Designsystem ettersom Tjenester 3.0 per nå har ingen felles bibliotek som brukes av andre klienter. Det har vært mye samarbeid mellom OED og Tjenester 3.0 for å løse slik problematikk og OED har utviklet, tildelsvis med Tjenester 3.0 en rekke enkle komponenter med tilhørende design basert på Altinn 3 Designsystem. Disse ligger innunder mappen features/custom/common/inputs. Tanken har vært at disse enkle komponentene kan tas rett ut fra prosjektet og legges ut på npm for felles bruk av alle klienter. Dette har stoppet opp da det ikke har vært relevant for OED lenger å utvikle egne skjema komponenter, som nevnt innunder kapittel 2.\nRedux og React Context brukes av OED for intern state håndtering da Redux var allerede vesentlig brukt av Tjenester 3.0. I Redux ligger det mye data som kommer fra kopien av Tjenester 3.0 sin klient og Redux Store har blitt utvidet til å inneha data fra eksterne aktører, eksempelvis data fra banker, Statens Vegvesen, Norsk Pensjon og andre.\nDrift og overvåkning Før man kan gå i produksjon må det avklares hvordan løsningen kan driftes og overvåkes. Viktige momenter vil være:\n Monitorere at Tjenester 3.0 app\u0026rsquo;ene er oppe og fungerer Monitorere at batch for DA grensesnitt kjører og fungerer. Det må avklares om Altinn Forvaltning skal benyttes i denne sammenheng. Analyse av feillogger Sanering av data  "
},
{
	"uri": "https://docs.altinn.studio/tags/options/",
	"title": "options",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/testing/local/apitests/org/",
	"title": "API test org",
	"tags": ["translate-to-english"],
	"description": "When running the applications locally along with the local test platform one can test the APIs the application exposes.",
	"content": "Appen har en rekke API som kan benyttes av applikasjonseier/tjenesteeier. Beskrivelsen du finner her er laget for Postman hvor det er benyttet testapplikasjonen MVA testapp.\nPostman-prosjektet kan lastes ned fra her (høyreklikk og velg \u0026ldquo;save as\u0026rdquo;).\nAutentisering av tjenesteier org I testmiljø og produksjon brukes maskinporten for å autentisere organisasjoner som eier apper.\nTestplattformen for lokal testing tilbyr et enkelt api for å autentisere organisjonen som er ansvarlig.\nMan trenger bare å oppgi tjenesteeier kode (som f.eks brg, skd osv)\nUrl: http://altinn3local.no/Home/GetTestOrgToken/ttd (ttd needs to be replaced with the org you want to authenticate)\nThe response is a JWT token that should be uses as a Authorization header.\nMultipart instansiering Applikasjonene støtter at man instansierer instanser til aktører. Personer eller organsiasjoner.\nUrl: http://altinn3local.no/ttd/mva/instances\nMetode: POST\nHeaders:\n Authorization: Bearer + jwttoken Content-Type: multipart/form-data; boundary=\u0026ldquo;abcdefg\u0026rdquo;  Eksempel Body:\n--abcdefg Content-Type: application/json; charset=utf-8 Content-Disposition: form-data; name=\u0026#34;instance\u0026#34;  { \u0026#34;instanceOwner\u0026#34;: { \u0026#34;organisationNumber\u0026#34; : \u0026#34;897069650\u0026#34; } } --abcdefg Content-Type: application/xml Content-Disposition: form-data; name=\u0026#34;RF0002\u0026#34;  \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;Skjema xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; skjemanummer=\u0026#34;212\u0026#34; spesifikasjonsnummer=\u0026#34;10420\u0026#34; blankettnummer=\u0026#34;RF-0002\u0026#34; tittel=\u0026#34;Alminnelig omsetningsoppgave\u0026#34; gruppeid=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;GenerellInformasjon-grp-2581 gruppeid=\u0026#34;2581\u0026#34;\u0026gt; \u0026lt;Avgiftspliktig-grp-50 gruppeid=\u0026#34;50\u0026#34;\u0026gt; \u0026lt;RapporteringsenhetNavn-datadef-21771 orid=\u0026#34;21771\u0026#34;\u0026gt;DDG Fitness\u0026lt;/RapporteringsenhetNavn-datadef-21771\u0026gt; \u0026lt;RapporteringsenhetAdresse-datadef-21773 orid=\u0026#34;21773\u0026#34;\u0026gt;Sofies Gate 1\u0026lt;/RapporteringsenhetAdresse-datadef-21773\u0026gt; \u0026lt;RapporteringsenhetPostnummer-datadef-21774 orid=\u0026#34;21774\u0026#34;\u0026gt;0170\u0026lt;/RapporteringsenhetPostnummer-datadef-21774\u0026gt; \u0026lt;RapporteringsenhetPoststed-datadef-21775 orid=\u0026#34;21775\u0026#34;\u0026gt;By\u0026lt;/RapporteringsenhetPoststed-datadef-21775\u0026gt; \u0026lt;RapporteringsenhetOrganisasjonsnummer-datadef-21772 orid=\u0026#34;21772\u0026#34;\u0026gt;897069650\u0026lt;/RapporteringsenhetOrganisasjonsnummer-datadef-21772\u0026gt; \u0026lt;/Avgiftspliktig-grp-50\u0026gt; \u0026lt;/GenerellInformasjon-grp-2581\u0026gt; \u0026lt;/Skjema\u0026gt; --abcdefg-- Example Response The below response show how an instance was created for a given organization.\n1{ 2 \u0026#34;id\u0026#34;: \u0026#34;500000/b4a42747-882f-47fa-bcd3-94029fdbc918\u0026#34;, 3 \u0026#34;instanceOwner\u0026#34;: { 4 \u0026#34;partyId\u0026#34;: \u0026#34;500000\u0026#34;, 5 \u0026#34;personNumber\u0026#34;: null, 6 \u0026#34;organisationNumber\u0026#34;: \u0026#34;897069650\u0026#34; 7 }, 8 \u0026#34;appId\u0026#34;: \u0026#34;ttd/mva\u0026#34;, 9 \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, 10 \u0026#34;selfLinks\u0026#34;: { 11 \u0026#34;apps\u0026#34;: \u0026#34;https://altinn3local.no/ttd/mva/instances/500000/b4a42747-882f-47fa-bcd3-94029fdbc918\u0026#34;, 12 \u0026#34;platform\u0026#34;: \u0026#34;https://localhost:5101/storage/api/v1/instances/500000/b4a42747-882f-47fa-bcd3-94029fdbc918\u0026#34; 13 }, 14 \u0026#34;dueBefore\u0026#34;: null, 15 \u0026#34;visibleAfter\u0026#34;: null, 16 \u0026#34;title\u0026#34;: { 17 \u0026#34;nb\u0026#34;: \u0026#34;RF-0002\u0026#34; 18 }, 19 \u0026#34;process\u0026#34;: { 20 \u0026#34;started\u0026#34;: \u0026#34;2020-01-24T06:37:48.6026647Z\u0026#34;, 21 \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, 22 \u0026#34;currentTask\u0026#34;: { 23 \u0026#34;flow\u0026#34;: 2, 24 \u0026#34;started\u0026#34;: \u0026#34;2020-01-24T06:37:48.6027116Z\u0026#34;, 25 \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, 26 \u0026#34;name\u0026#34;: \u0026#34;Utfylling\u0026#34;, 27 \u0026#34;altinnTaskType\u0026#34;: \u0026#34;data\u0026#34;, 28 \u0026#34;ended\u0026#34;: null, 29 \u0026#34;validated\u0026#34;: null 30 }, 31 \u0026#34;ended\u0026#34;: null, 32 \u0026#34;endEvent\u0026#34;: null 33 }, 34 \u0026#34;status\u0026#34;: null, 35 \u0026#34;appOwner\u0026#34;: { 36 \u0026#34;labels\u0026#34;: null, 37 \u0026#34;messages\u0026#34;: null, 38 \u0026#34;canBeDeletedAfter\u0026#34;: null 39 }, 40 \u0026#34;data\u0026#34;: [ 41 { 42 \u0026#34;id\u0026#34;: \u0026#34;54d868aa-5bc9-47fb-9525-67ba4c2e595c\u0026#34;, 43 \u0026#34;instanceGuid\u0026#34;: \u0026#34;b4a42747-882f-47fa-bcd3-94029fdbc918\u0026#34;, 44 \u0026#34;dataType\u0026#34;: \u0026#34;RF0002\u0026#34;, 45 \u0026#34;filename\u0026#34;: null, 46 \u0026#34;contentType\u0026#34;: \u0026#34;application/xml\u0026#34;, 47 \u0026#34;blobStoragePath\u0026#34;: \u0026#34;ttd/mva/b4a42747-882f-47fa-bcd3-94029fdbc918/data/54d868aa-5bc9-47fb-9525-67ba4c2e595c\u0026#34;, 48 \u0026#34;selfLinks\u0026#34;: { 49 \u0026#34;apps\u0026#34;: \u0026#34;https://altinn3local.no/ttd/mva/instances/500000/b4a42747-882f-47fa-bcd3-94029fdbc918/data/54d868aa-5bc9-47fb-9525-67ba4c2e595c\u0026#34;, 50 \u0026#34;platform\u0026#34;: \u0026#34;https://localhost:5101/storage/api/v1/instances/500000/b4a42747-882f-47fa-bcd3-94029fdbc918/data/54d868aa-5bc9-47fb-9525-67ba4c2e595c\u0026#34; 51 }, 52 \u0026#34;size\u0026#34;: 1009, 53 \u0026#34;locked\u0026#34;: false, 54 \u0026#34;refs\u0026#34;: [], 55 \u0026#34;created\u0026#34;: \u0026#34;2020-01-24T06:37:48.641997Z\u0026#34;, 56 \u0026#34;createdBy\u0026#34;: null, 57 \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-01-24T06:37:48.641997Z\u0026#34;, 58 \u0026#34;lastChangedBy\u0026#34;: null 59 } 60 ], 61 \u0026#34;created\u0026#34;: \u0026#34;2020-01-24T06:37:48.6068671Z\u0026#34;, 62 \u0026#34;createdBy\u0026#34;: null, 63 \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-01-24T06:37:48.6068671Z\u0026#34;, 64 \u0026#34;lastChangedBy\u0026#34;: null 65} "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/platform/oscloudplatform/",
	"title": "Operating Systems &amp; Cloud Platform",
	"tags": ["architecture"],
	"description": "Operating Systems &amp; Cloud Platform defines the operating systems for containers and how the container are deployed to the cloud.",
	"content": "Operating systems Container Operation Systems All containers are running on Alpine Linux, which includes apps created in Altinn Studio and the Altinn Platform components.\nCloud Platform Orchestrating \u0026amp; Sceduling We use Kubernetes to manage the application containers for the different solutions.\nWe use Azure Kubernetes Services that is a managed Kubernetes administration in Azure.\nRead more about our Kubernetes Clusters.\nService Mesh \u0026amp; Proxy We use Traefik as proxy in Kubernetes and Linkerd as service mesh.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/owasp/",
	"title": "OWASP",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authorization/pap/",
	"title": "Policy Administration Point",
	"tags": ["architecture", "security", "authorization", "xacml"],
	"description": "The Policy Administration Point is responsible for creating and modifying the different authorization policies used by the PDP",
	"content": "In Altinn Platform there is currently no Policy Administration Point functionality, but Altinn Platform provides functionality used by the other Policy Administration Points in Altinn 3. The PRP provides API for storing policies and retrieving them.\nPolicy Administration Point for applications The authorization policy for apps is defined in Altinn Studio when developing the app.\nSee Policy Administration Point in Altinn Studio for details.\nDelegation Policies Delegation of rights will be performed in Altinn II platform through the delegation functionality.\nWhen delegation is done through creation of new policies that gives user or organisation new rights.\nThis will be supported in Altinn 3. See Github issue 1258\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-studio/designer/pap/",
	"title": "Policy Administration Point",
	"tags": ["architecture", "security"],
	"description": "The Policy Administration Point in Altinn Studio lets the application developer define the authorization policy for the application created.",
	"content": "The rules for this is defined as XACML 3.0 Policy documents.\nCurrently the PAP is using an editor to manual edit the XACML Policy Template\nSee application development guidelines for details how to do that.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/solution/altinn-studio/designer/pap/xacmlpolicy/\u0026quot;\u0026gt;Authorization - Altinn Apps - Policy\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the XACML Policy defined for a app.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-platform/pdf/",
	"title": "Application architecture pdf component - Altinn Platform",
	"tags": ["architecture", "solution", "pdf"],
	"description": "The PDF component is created as an Spring Boot (Java) web application hosted in Kubernetes as a Docker container.",
	"content": "The PDF component is an Spring Boot java application exposing an api for triggering PDF-generation.\nThe pdf api is exposed at http://platform.altinn.cloud/pdf/api/v1.\nThe available endpoints can be seen in the swagger definition..\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-platform/pdf/",
	"title": "PDF",
	"tags": ["platform", "pdf"],
	"description": "The PDF component is responsible for generating PDF printouts for submitted instances of an app.",
	"content": "The endpoints available in the pdf component is documented here.\nSee all open issues for pdf on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/pdf/",
	"title": "pdf",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authorization/pdp/",
	"title": "Policy Decision Point",
	"tags": ["architecture", "security", "authorization", "xacml"],
	"description": "The Policy Decision Point is responsible to evaluate if users and systems is authorized to perform the requested operation on a resource.",
	"content": "The Policy Decision Point is implemented in the authorization component that is deployed Altinn Platform.\nThe Policy Decision Point follow eXtensible Access Control Markup Language (XACML) Version 3.0.\nThis mean that the rules are defined in XACML Policies files and PDP evalutes request based on the rules.\nThe PDP evaluates the Context Request based on standard XACML 3.0 behaviour. There is no specific Altinn behaviour.\nPolicy Decision Point exposes a method that authorize the decision request.\nPDP uses the configured Context Handler to enrich the decision request with attributes about the subject, resource and environment.\nIf instanceID or dataID is used as Resource ID PDP will use the Context Handler to identifiy the correct appId, the instance workflow state and the reporteId for the existing resource.\nFor request for non existing instances the appId will be used and the reportee is a required input.\nPDP flow The diagram below show the detailed flow.\nFlow explained\n Decision Request is sent to context handler for enriching Context handler call PIP for resource attributes Context handler call PIP for subject attributes PRP Identifies the correct policy based on resource attributes in enriched decision request PDP identifyes matching rules PDP checks if there is any matching rules and returnes interderminate if not Matches the rules with subject attributes Verify match and return indeterminate if not Evaluate any conditions in policy If condiation does not match return indterminate Add any obligations to the result Return the decsion result  XACML 3.0 Conformance The PDP tries to follow XACML 3.0 standard and have implemented some conformance tests. The goal is to fully implement all conformance test.\nThere exist no official XACML 3.0 conformance test but AT\u0026amp;T research made som available for OASIS in this thread.\nSee our tests here.\nTestdata for conformance tests is found here, and official description of tests here.\nSee Github 2818 for status on conformance test coverage\nImplementation and construction details Details about the implementation of PDP is found under construction components for PDP.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/security/pep/",
	"title": "Policy Enforcement Point",
	"tags": ["architecture", "security"],
	"description": "There are different types of Policy Enforcement Points in the Altinn 3 platform.",
	"content": "These are constructed in different ways.\nStandard PEP One important principle we follow is that security should be configured when possible. This means that we have developed some standard policy enforcement points that can be configured on the different API endpoints.\nAttribute-based authorization is best solved with Policy-Based Authorization in ASP.NET Core\nThe different standard PEP\u0026rsquo;s in the ASP.Net Web application template is created as Authorization Handlers.\nSee AppAccessHandler for PEP for checking app policy for an API.\nSee ScopeAccessHandler for PEP validating scope requirements\nIn the App there is defined a set of AuthorizationRequirements and for each operation of the different API endpoints needs to be configured with the correct requirement.\nExample on requirements are:\n InstanceRead (User/system needs to be authorized to perform read action on the instance in current state) InstanceWrite (User/system needs to be authorized to perform write action on the instance and its data in current state) InstanceInstantiate (user/system needs to be authorized to Instantiate an instance for an app)  The PEP will based on route data (like instanceId) and the authenticated Identity create a decision request and call PDP. Based on the response the PEP will deny or approve the user. (Deny = http 403)\nThe PEP validates any obligation from the PDP like minimum authentication level. If this is not valid, the request will be denied (HTTP 403).\nConfiguration The application needs to have a startup configuration to enable the different standard PEPs\nservices.AddAuthorization(options =\u0026gt; { options.AddPolicy(AuthzConstants.POLICY_INSTANCE_READ, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;read\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_INSTANCE_WRITE, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;write\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_INSTANCE_DELETE, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;delete\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_INSTANCE_COMPLETE, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;complete\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_SCOPE_APPDEPLOY, policy =\u0026gt; policy.Requirements.Add(new ScopeAccessRequirement(\u0026#34;altinn:appdeploy\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_SCOPE_INSTANCE_READ, policy =\u0026gt; policy.Requirements.Add(new ScopeAccessRequirement(\u0026#34;altinn:instances.read\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_STUDIO_DESIGNER, policy =\u0026gt; policy.Requirements.Add(new ClaimAccessRequirement(\u0026#34;urn:altinn:app\u0026#34;, \u0026#34;studio.designer\u0026#34;))); }); Example from Storage Startup\nThe API needs to have enabled PEP for a given API operation\n[Authorize(Policy = AuthzConstants.POLICY_INSTANCE_WRITE)] [HttpDelete(\u0026#34;data/{dataGuid:guid}\u0026#34;)] [ProducesResponseType(StatusCodes.Status200OK)] [ProducesResponseType(StatusCodes.Status400BadRequest)] [ProducesResponseType(StatusCodes.Status404NotFound)] [Produces(\u0026#34;application/json\u0026#34;)] public async Task\u0026lt;ActionResult\u0026lt;DataElement\u0026gt;\u0026gt; Delete(int instanceOwnerPartyId, Guid instanceGuid, Guid dataGuid) { Example from DataController\nCustom PEP For some scenarious it is not possible to authorize the request based on API parameters.\nThis cases requires a custom PEP that is implemented as part of API logic.\nIn the example below a list of elements is retreived from database and we need to filter elements before they are returned based on what user is authorized for.\n[Authorize] [HttpGet(\u0026#34;{instanceOwnerPartyId:int}/{instanceGuid:guid}\u0026#34;)] public async Task\u0026lt;ActionResult\u0026gt; GetMessageBoxInstance( int instanceOwnerPartyId, Guid instanceGuid, [FromQuery] string language) { string[] acceptedLanguages = { \u0026#34;en\u0026#34;, \u0026#34;nb\u0026#34;, \u0026#34;nn\u0026#34; }; string languageId = \u0026#34;nb\u0026#34;; if (language != null \u0026amp;\u0026amp; acceptedLanguages.Contains(language.ToLower())) { languageId = language; } string instanceId = $\u0026#34;{instanceOwnerPartyId}/{instanceGuid}\u0026#34;; Instance instance = await _instanceRepository.GetOne(instanceId, instanceOwnerPartyId); if (instance == null) { return NotFound($\u0026#34;Could not find instance {instanceId}\u0026#34;); } List\u0026lt;MessageBoxInstance\u0026gt; authorizedInstanceList = await _authorizationHelper.AuthorizeMesseageBoxInstances( HttpContext.User, new List\u0026lt;Instance\u0026gt; { instance }); if (authorizedInstanceList.Count \u0026lt;= 0) { return Forbid(); } MessageBoxInstance authorizedInstance = authorizedInstanceList.First(); // get app texts and exchange all text keys.  List\u0026lt;TextResource\u0026gt; texts = await _textRepository.Get(new List\u0026lt;string\u0026gt; { instance.AppId }, languageId); InstanceHelper.ReplaceTextKeys(new List\u0026lt;MessageBoxInstance\u0026gt; { authorizedInstance }, texts, languageId); return Ok(authorizedInstance); } Example from MessageboxInstancesController\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authorization/pep/",
	"title": "Policy Enforcement Point",
	"tags": ["architecture", "security"],
	"description": "In Altinn Platform there are PEP&#39;s that enforce access to different types of API",
	"content": "The PEP is responsible for making sure that user/system is authorized befor a API operation is performed.\nThe PEP will identify call the PDP to get a decision on a reuest.\nSee construction components on details how the PEP are created.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authorization/pip/",
	"title": "Policy Information Point",
	"tags": ["architecture", "security"],
	"description": "The Policy Information Point(s) are responsible for providing needed information to the context handler so it can enrich the context request.",
	"content": "Without this information it would be impossible for the PDP to evaluate the context request in many scenarios.\nFor the Altinn Platform there are serveral Policy Information Points:\n Altinn II Authorization - Get information about roles a user or system has for a given party Storage PIP - Get attributes about the resource in the decision request. (what kind of app, who is the reportee of the data, what is the current process state)  The number of PIP are expected to grow in the future.\nImplementation details See implementation details in the construction components for PIP.\n"
},
{
	"uri": "https://docs.altinn.studio/community/devops/teams/platform/",
	"title": "Platform",
	"tags": [],
	"description": "The Platform DevOps team primarily work on and is responsible for the operations of the Altinn 3 platform applications.",
	"content": "Responsibilities The Platform team is respobsible for most of the common services used in Altinn 3. This includes development of new features, fixing issues, maintaining infrastructure and securing availablility.\nRepository\nEvents The Events application and related functions in Azure give Altinn 3 a mechanism for publishing and subscribing of events.\nRepository\nPdf The Pdf application kan be used to generate a PDF document based on a Altinn 3 form.\nRepository\nProfile The Profile application give Altinn 3 access to profile information of users in Altinn.\nRepository\nReceipt The Receipt application is a system to display receipts for forms that have been submitted.\nRepository\nRegister The Register application provides Altinn 3 access to registry data on people and organisations in Norway.\nRepository\nStorage The Storage application gives Altinn 3 apps a place to store data that are being collected, and to store metadata about the state of an active form in the process of being completed.\nSBLBridge The SblBridge application is a proxy that provides Altinn 3 access to Altinn 2 systems.\nAdditional infrastructure The team is also responsible for all application owner specific Kubernetes clusters, and the Dev-Test-Lab environment ai-dev where most of the development machines are hosted.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/platform/",
	"title": "Platform Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Platform components are a mix of managed services and standard software/frameworks used to created the needed capabilties.",
	"content": "The platform components can be structured in to different areas. The diagram below show the different areas and the platform components involved in Altinn Studio, Altinn Apps and Altinn Platform solutions.\nDownload as Visio\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/platform/datareporting/\u0026quot;\u0026gt;Data \u0026amp;amp; Reporting Components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Data and Reporting Components hold the functionalities to manage data and create business reports.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/platform/integration/\u0026quot;\u0026gt;Integration Components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Integration components are in charge of enabling communications between systems.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/platform/logicexecution/\u0026quot;\u0026gt;Logic Executions Components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Logic execution components are in charge of modeling the application behavior, in terms of data processing and flow control, according to the application specifications.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/platform/oscloudplatform/\u0026quot;\u0026gt;Operating Systems \u0026amp;amp; Cloud Platform\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Operating Systems \u0026amp;amp; Cloud Platform defines the operating systems for containers and how the container are deployed to the cloud.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/platform/presentation/\u0026quot;\u0026gt;Presentation Components\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Presentation Components are in charge of processing information and making it accessible to users.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/tags/platform/",
	"title": "platform",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/platformoperations/",
	"title": "Platform Operations Management Capabilities",
	"tags": ["architecture", "devops"],
	"description": "Platform Operations Management Capabilities describes the capabilities needed to operate the platform.",
	"content": "PaaS \u0026amp; IaaS Management Capabilities Automation \u0026amp; Scheduling (batch, scripts) This include running scripts for infrastructure and jobs both manual and scheduled.\nSee operations application components for details about tools and applications used.\nInfrastructure Configuration \u0026amp; Management The Altinn 3 platform is a large platform with serveral 100 cloud resources. The architecture provides serveral capabilityes to configure and manage all of this resource.\nSee details here.\nBackup \u0026amp; Recovery The Altinn 3 platform has the capability to backup and restore data created by applications hosted in Altinn Apps.\nSee details here.\nPerformance \u0026amp; Availability Management Capabilities Performance Profiling See operations application components for details about tools and applications used.\nPerformance Tuning The performance tuning capability for includes tuning of code and architecture to increase performance and capacity. This is typical done based on metrix that indicates slow performance.\nAvailability and Performance Monitoring This capability include automatic and manuel monitoring of the availability, healt and performance of the different components deployed to the cloud.\nSee operations application components for details about tools and applications used.\nCloud Capacity Management The devops team uses differen tools to manage capacity in cloud.\nSee operations application components for details about tools and applications used.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-studio/designer/pap/xacmlpolicy/",
	"title": "Authorization - Altinn Apps - Policy",
	"tags": ["architecture", "security"],
	"description": "Description of the XACML Policy defined for a app.",
	"content": "An app needs to have defined a Authoriation Policy that will be imported in to Policy Retrieval Point when a app is deloyed to a Altinn Apps/Platform environment.\nThe policy format follows XACML 3.0 and for every rule in the policy, there is attributes defining which resource, subject and which action it targets.\nResource Attributes    Attribute Description     Org The org part of the resource attribute defines which org that owns the app.   App The app part that identifies the app itself.   Task / Event The task/event part of the resource makes it possible to have seperate rules for the different tasks.    Example The below example show a part of XACML 3.0 Policy where a resource is identified.\n\u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;skd\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;taxreport\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;instansiate\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:event\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; Subject Attributes The subject part of the target for the rule defines who the rule target.\n   Attribute Description     Role Code The role code is used for rule that target end users and systems.   Org The org code is used for rule that target orgs.    Examples Example with role code:\n\u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;regna\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; Example with org:\n\u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;skd\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; Action Attributes Example with read action:\n\u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;read\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; Obligation The obligation part is used to define information that should be used by PEP.\n\u0026lt;xacml:ObligationExpressions\u0026gt; \u0026lt;xacml:ObligationExpression FulfillOn=\u0026#34;Permit\u0026#34; ObligationId=\u0026#34;urn:altinn:obligation:authenticationLevel1\u0026#34;\u0026gt; \u0026lt;xacml:AttributeAssignmentExpression AttributeId=\u0026#34;urn:altinn:obligation1-assignment1\u0026#34; Category=\u0026#34;urn:altinn:minimum-authenticationlevel\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;2\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;/xacml:AttributeAssignmentExpression\u0026gt; \u0026lt;/xacml:ObligationExpression\u0026gt; \u0026lt;/xacml:ObligationExpressions\u0026gt; Full examples On Github you can look at some full policy examples\n"
},
{
	"uri": "https://docs.altinn.studio/tags/policy/",
	"title": "policy",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/prefill/",
	"title": "Configure Prefill",
	"tags": [],
	"description": "Altinn Studio will let the developer define prefill for datamodel from register and profile.",
	"content": "The prefill configuration is handled by a json file where source values are linked to fields in the app data model.\nIn order to add prefill to your application this file needs to be added to the repository alongside the datamodel under the models folder, with the same name as the data model it is connected to, and a prefill extension.\nSo, if you have a data model named ServiceModel.xsd, the file should be named ServiceModel.prefill.json\nThe prefill comes with a json-schema and which gives auto complete on the source fields. In order to use this auto-complete feature you need to use an IDE or text editor that supports json-schema (such as Visual Studio, Visual Studio Code, IntelliJ etc). As of now there is no auto complete on the target fields.\nThe target fields are case insensitve, so writing Skattyterinforgrp5801.Infogrp5802.OppgavegiverNavnPreutfyltdatadef25795.value is the same as skattyterinforgrp5801.infogrp5802.oppgavegiverNavnPreutfyltdatadef25795.value.\nTo get started using prefill you can copy the following template into your repository:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/prefill/prefill.schema.v1.json\u0026#34;, \u0026#34;allowOverwrite\u0026#34;: false, \u0026#34;ER\u0026#34;: { }, \u0026#34;DSF\u0026#34;: { }, \u0026#34;UserProfile\u0026#34;: { } } The easiest way to work on the configuration file is to clone your repository locally, and edit the file in your preferred editor. To do this open a terminal and run\n git clone https://altinn.studio/repos/[ORG]/[APP].git  Then you can create the prefill config file under the models folder.\nThere are three sources you can prefill from as of now\n ER (enhetsregisteret) DSF (det sentrale folkeregisteret) UserProfile  All availiable source fields can bee seen here.\nThe allowOverwrite  field is a flag to determine if existing values in the app data model can be overwritten by prefill data.\nBelow is an example of a prefill where two fields are connected to the name from DFS and user name from the user profile, and we have allowed prefill values to overwrite values in the data model:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/prefill/prefill.schema.v1.json\u0026#34;, \u0026#34;allowOverwrite\u0026#34;: true, \u0026#34;ER\u0026#34;: { }, \u0026#34;DSF\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;Skattyterinforgrp5801.infogrp5802.OppgavegiverNavnPreutfyltdatadef25795.value\u0026#34; \t}, \u0026#34;UserProfile\u0026#34;: { \u0026#34;UserName\u0026#34;: \u0026#34;Skattyterinforgrp5801.infogrp5802.OppgavegiverAdressePreutfyltdatadef25796.value\u0026#34; \t} } See issues related to prefill on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/prefill/",
	"title": "prefill",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/presentation/",
	"title": "Presentation (User Interface) Capabilities",
	"tags": ["architecture", "todo"],
	"description": "Presentation Capabilities enable an application to manage the human-computer interface.",
	"content": "This includes capturing user actions and generating resulting events, presenting data to the user, and assisting in the management of the dialog flow of processing.\nThese capabilities is both targeting App developers creating applications in Altinn Studio and the application created in Altinn Studio and Deployed to Altinn Apps for end users.\nRendering \u0026amp; Interaction Capabilities Composition The app developer may create the layout of the App UI using Altinn Studio. Standard UI components are available, in addition the app developer may create custom components and/or layouts.\nRendering  The UI in Altinn Studio being presented to app developers, and The UI designed in Altinn Studio being presented in an app to end users,  use client-side rendering, and may be rendered by a web browser.\nTODO: Link to relevant archiecture component(s) providing this capability.\nSession \u0026amp; State Management Cookies are used for client-side session management, both in Altinn Studio and Altinn Apps.\nInput Validation  The UI in Altinn Studio being presented to app developers, and The UI designed in Altinn Studio being presented in an App to end users,  support input validation of data inputed by App Developers or end users using Apps developed in Altinn Studio.\nTODO: Link to relevant archiecture component(s) providing this capability.\nPDF Generation Apps created in Altinn Studio have the possibility to have created a PDF of the UI designed in Altinn Studio.\nTODO: Link to relevant archiecture component(s) providing this capability.\nHelp TODO: Link to relevant archiecture component(s) providing this capability.\nNotification Management TODO: Link to relevant archiecture component(s) providing this capability.\nPresentation Adaptation Capabilities TODO: Link to relevant archiecture component(s) providing this capability.\nMulti-channel Presentation App developers may use Altinn Studio in a web browser, or local development tools to create an app. TODO: Link to relevant archiecture component(s) providing this capability.\nResponsive Presentation  The UI in Altinn Studio being presented to app developers, and The UI designed in Altinn Studio being presented in an App to end users,  support support responsive presentation. TODO: Link to relevant archiecture component(s) providing this capability.\nLocalization The UI designed in Altinn Studio, being presented in an App to end users support localization, as defined by app developers. TODO: Link to relevant archiecture component(s) providing this capability.\nAccessibility The presentation both in Altinn Studio for the App Developer and the presentation created in Altinn Studio and presented in the App is created to fullfill WCAG 2.0\nTODO: Link to relevant archiecture component(s) providing this capability.\nUI Design This is typical a part of the development capabilities, but since the Altinn Studio Solutions lets App developers design the UI we need this as a runtime capabilitiy also. App developers can customize the UI design in the App presented to end users.\nUI Component Library App developers have a UI component library available in Altinn Studio to select UI components from.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/platform/presentation/",
	"title": "Presentation Components",
	"tags": ["architecture"],
	"description": "Presentation Components are in charge of processing information and making it accessible to users.",
	"content": "Proxy Servers In Altinn Studio we use NGINX as a proxy server. In Altinn Apps and Platform, Traefik is used.\nCDN For Altinn apps we have create a CDN for storing common files used by browsers. A example is App Frontend.\nRead all about Altinn CDN.\nWeb server For Altinn Studio, Altinn Apps and Altinn Platform we use Kestrel as the web server/ application server for dot.net applications. Read more about Kestrel.\nFor Java Applications we use Tomcat.\nSPA Frameworks Altinn Studio, Altinn Apps and Altinn Platform uses React as Single Page Application framework.\nRead more about coding in our development handbook.\nDynamic webpage frameworks A few views in Altinnn Studio are still ASP.NET pages coded with Razor syntax.\n"
},
{
	"uri": "https://docs.altinn.studio/community/presentations/",
	"title": "Presentations and Altinn Coffee",
	"tags": [],
	"description": "The Altinn-kaffe meeting series is a low threshold meeting series, where app owners (and potential app owners) can learn more about what we&#39;re doing in Altinn 3. It&#39;s also designed to gather information on how Altinn can help app owners realise their Altinn 3 potential. Slides mainly in Norwegian.",
	"content": "Introduction presentation and strategy input meeting The first meeting was an introduction to the platform, including goals.\n Altinn 3 - hva og hvorfor?  We held a meeting for giving input on the Altinn 3 desimination strategy January 28 2021. These slides were shown.\n Overordnet Strategi og tiltak Kort status fra Team Tjenestestøtte  We have also made a more generic presentation of what Altinn Studio / Altinn 3 is, and how to get started\n Generell Presentasjon og Kom i Gang  Status and plans Every other week, we present what we have done and what we\u0026rsquo;re planning to do for the next fortnight.\n Status og planer - 30. september 2020 Status og planer - 14. oktober 2020 Status og planer - 28. oktober 2020 Status og planer - 11. november 2020 Status og planer - 25. november 2020 Status og planer - 9. desember 2020 Status og planer - 6. januar 2021 Status og planer - 20. januar 2021 Status og planer - 3. februar 2021 Status og planer - 17. februar 2021 Status og planer - 3. mars 2021 Status og planer - 17. mars 2021 Status og planer - 14. april 2021 Status og planer - 28. april 2021 Status og planer - 12. mai 2021 Status og planer - 26. mai 2021 Status og planer - 9. juni 2021 Status og planer - 23. juni 2021 Status og planer - 26. august 2021 Status og planer - 9. september 2021 Status og planer - 23. september 2021 Status og planer - 7. oktober 2021 Status og planer - 21. oktober 2021 Status og planer - 3. november 2021 Status og planer - 18. november 2021 Status og planer - 2. desember 2021 More to come\u0026hellip;  Themed meetings The weeks where we don\u0026rsquo;t presesent status, we hold themed meetings. If no presentation is available, we probably did a live demo or documentation walkthrough.\n Hvordan komme i gang med Altinn 3? (7. oktober 2020) Altinns presentasjon | SSBs presentasjon Integrasjon med mottakssystem (21. oktober 2020) Hvordan bidra til et bedre Altinn 3? (4. november 2020) Signering i Altinn 3 (18. november 2020) Kalkulering i Altinn 3 (16. desember 2020) Hvordan bruke første halvtimen i Altinn Studio (27. januar 2021) Datamodellering i Altinn Studio (24. februar 2021) Lanserte tjenester (10. mars 2021) Arbeidstilsynets presentasjon | Presentasjon for Kartverket Planer for utvikling i Q2 2021 (7. april 2021) Tilgang til logger og hemmeligheter (21. april 2021) Altinn Events - inkludert mulighet for push (5. mai 2021) Datamodellering: Håndtering av utfasing av Seres (19. mai 2021) Case: Karantenehotellunntak (2. juni 2021) Standardisering vs. fleksibilitet (30. juni 2021) Kopiering av app (2. september 2021) Framtida for meldingstjenester (29. november 2021) More to come\u0026hellip;  NDC 2020 talk This is a talk held by 3 of our developers, June 11th 2020 at NDC Oslo, describing Altinn 3 just after going to production.\n   Slides used while presenting (pptx) Behind the scenes  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/processing/process/",
	"title": "Business Process Processing Capabilities",
	"tags": ["app-backend", "BPMN"],
	"description": "Description of the business process processing capabilities",
	"content": "A application deployed to Altinn Apps will typical have a business process that users and systems need to follow.\nApps created in Altinn Studio uses BPMN 2.0 standard to describe the business process and the app will have functionality to support different types of tasks in the process.\nThe process is defined by the application developer in Altinn Studio. When a new app is created it a basic process is created.\nSupported Tasks Applications will support different processes with different types of task as part of the process. The current types of tasks is implemented and planned to be implemented. This list is not final.\nData This is the task where the user or system create and updates data for one more datamodelles defined for the App.\nConfirmation (backlog) This is a task where user can look at the data filled and then confirm it.\nConfirmationAndSigning (backlog) This is a task where user can look at the data filled and then confirm and sign data.\nPayment (backlog) This is a task where user is redirected to a external payment provider to pay related to the process. The payment can be related to data filled out in earliers task, or can be a fixed value connected to the app.\nSee Github issue for details.\nSigning (backlog) Signing is a task where one or more users sign the data submitted. In most uses cases this is a strictly functional operation but depending on the authentication level it can be a digital signature involved. The different types of signing relevant for this platform is.\nThere is a epic for signing on GitHub.\nRegular signing Regular signing is when one user with a specific role is required to functional sign the data before submitting it.\nParalell signing This is a task where serverel users need/can sign the data in paralell. The task is completed when the needed amount of signatures has been added\nSee Github issue for details.\nUser controlled signing User controlled signing is a task where the data inputed in earliers task in process defines which users that needs to sign.\nSee GitHub issue for details.\nDigital Signing with BankId Digital signing with BankID creates a digital signature of the data for the instance.\nSee Github issue for details.\nLookup (backlog) This is a task in a process where user/system can lookup external data with help of inputs from UI or API.\nState change The application is responsible to make sure that.\nExample process There is some freedom of the order of task in the process, but not all combinations is functional valid.\nEach type of task will have som requirement to be fullfilled to be allowed to be completed.\nThe below diagram show some example processes that a App possible will support in the future. Even it is possible to technical order the different types of task.\nProcess: Data This is the a common process. In this scenario a user will typical fill out formdata and when formfilling task is completed the data will be marked as locked and the final data can be read from the org.\nThe org will be able to read data before the formfilling task is completed, but then the end user can still update the data.\nProcess: Data - Signing This is the a common process. In this scenario a user will typical fill out formdata and when formfilling task is completed, the process is moved to a signing task where the user can verify the data and then confirm it with a signing of data.\nDepending on the required security level for the application the signing will use PKI systems to digital sign the data or just be a more functional confirmation from the user.\nThe org will be able to read data before the formfilling task is completed, but then the end user can still update the data. The data will not be allowed to be changed while the instance is in signing task.\nProcess: Data - Confirmation - Payment In this scenario a user will typical fill out formdata and when formfilling task is completed, the process is moved to a confirm task where the user can verify the data and then confirm, when the data is confirmed the process is moved to a payment task where the user needs to pay before the process is completed.\nThe payment functionality will be handled by external payment providers. The app will integrate with API\u0026rsquo;s for the payment provider. Altinn runtime will support different payment providers.\nProcess: Data - Confirmation - External validation In this scenario a user or system will typical fill out formdata and when formfilling task is completed, the process is moved to a confirm task where the user can verify the data and then confirm it.\nThe process is the moved to a external validation task where the org is doing validation. The org can chose to complete the task or send the instance back to a earlier task for correction of the data.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/app/app-backend/process/",
	"title": "App Process",
	"tags": ["process", "BMPN"],
	"description": "Description of the process handling of App Backend",
	"content": "Process API Apps created in Altinn Studio have a seperate Process API that exposes functionality to clients to controll the process.\nSee github for source code.\nInstance API Process Service The process service is where the business logic for BPMN processing is located. It is responsible for verifying state, and changes of state\nSee github for source code.\nBPMN Reader BPMN reader is the component that parses BPMN process in apps.\nSee github for source code.\nApp Logic When app process changes state app logic is run making it possible for app developers to implements specific app logic.\nSee AppBase.cs and IAltinnApp.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/define-process/",
	"title": "Define app process",
	"tags": ["process"],
	"description": "As part of the development one must define a process for the app that end user needs to follow.",
	"content": "A app will typical have a process that a end user / or system needs to follow. It could be anything from a single task process where the app is used to retrieve data from some external api, to long living processes with many tasks involving.\nIn Altinn Studio the developer will need to define the process for the app.\nIn current version of Altinn Studio the only support for process definition is to upload a BPMN process file and the only task type we support are FormFilling\nSee Process Architecture for more details how process is defined\nSee all issues related to Altinn Studio and workflow on Github.\nInstansiations hooks Instansiation is the event that triggers a new instance of a App and starts the process for that instance.\nRelated to this event a developer can set instansiations hooks that are triggered when a new process is started.\nSee Github for issues related to instansiation.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/process/",
	"title": "process",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/processhandling/",
	"title": "Process handling",
	"tags": ["altinn-apps", "todo"],
	"description": "Description of the process handling capability of Apps created in Altinn Studio.",
	"content": "A app have a defined business process. The business process can consist of serveral type of task in different orders.\nIf you want details about the business process architechture see Business Process Architecture\nTasks Formfilling Signing Payment Events "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/processing/",
	"title": "Processing &amp; Execution Capabilities",
	"tags": ["architecture"],
	"description": "Processing &amp; Execution Capabilities includes everything from processing a defined business processes to load balancing and failover.",
	"content": "Processing Capabilities BPMN Process Execution As part of the Application design and build in Altinn Studio the application developer will define a BPMN Process for the given App.\nThe application framework used in the app template support reading and processing the process file.\nRead the details about BPMN processing capabilities.\nExecution Control \u0026amp; Failure Mgmt Capabilities Auditing, Logging \u0026amp; Tracing Altinn Studio, The applications created in Altinn Studio and Altinn Platform perform auditing, logging and tracing of events that happens.\nException Management Altinn Studio, applications created in Altinn Studio and deployed to Altinn Apps and Altinn Platform has exception management.\nExecution Profiling With help of tools the platform support execution profiling.\nProcess Timing Capabilities Synchronous Processing MOST API\u0026rsquo;s in the platform is synchronous.\nScheduled Processing (incl. Batch) The solutions has the capabilitiy for scheduled processing.\nTODO: Describe user scenario.\nQueued \u0026amp; Asynchronous Processing The solutions do support asynchronous processing.\nExecution Partitioning Capabilities Clustering The solutions has clustering capabilities.\nLoad-balancing The technical architecture has load balancing capabiltiies\nFail over The technical architecture has fail over capabilties.\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/processing/process/\u0026quot;\u0026gt;Business Process Processing Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the business process processing capabilities\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-platform/profile/",
	"title": "Application construction components - Altinn Platform Profile",
	"tags": ["architecture", "solution", "todo"],
	"description": "The profile component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": "TODO\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-platform/profile/",
	"title": "Profile",
	"tags": ["platform", "profile"],
	"description": "The Profile component gives profile information for users in Altinn.",
	"content": "Apps uses it to present information about logged in user or other user information.\nSee all open issues for Profile on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/profile/",
	"title": "profile",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/programming/",
	"title": "programming",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/projectmanagement/",
	"title": "Project Management Capabilities",
	"tags": ["architecture", "devops"],
	"description": "Project Management Capabilities covers the different capabilities to mange the project.",
	"content": "Most of the project capabilties is not listed. The once that is listed is the ones where we use technolgies and teqniques that can be shared/reused.\nAgile Project Management Capabilties Backlog managmenent and prioritazion The project has capability to manage the backlog and prioritize it.\nThis is done in Github and Zenhub.\nBurn-down / Tracking The project has capability to manage see the burn-down and track issues in backlog\nThis is done in Github and Zenhub.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/prometheus/",
	"title": "Prometheus",
	"tags": ["tech", "monitoring"],
	"description": "Prometheus is an open-source systems monitoring and alerting toolkit.",
	"content": "Prometheus is an open-source systems monitoring and alerting toolkit that we use for monitoring.\nLinks  https://prometheus.io https://github.com/prometheus/prometheus  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authorization/prp/",
	"title": "Policy Retrieval Point",
	"tags": ["architecture", "security", "authorization", "xacml"],
	"description": "The Policy Retrieval Point is the functionality where Policy Decision Point (PDP) can retrieve the policy defined for an app resource.",
	"content": "During deployment of an app the rules for the app is added to the Altinn Storage.\nThe rules are defined as a XACML 3.0 Policy document.\nFor delegated rights Altinn II will provide the delegated policy.\nSee Policy Adminstration Point for details about how the policies are created.\nSee construction components how PRP is built.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/quality/",
	"title": "Quality Management Capabilities",
	"tags": ["architecture", "devops"],
	"description": "Quality Management Capabilities covers the different capabilities to mange the project.",
	"content": "Quality Assurance \u0026amp; Reviews All pull request in GitHub requires approved reviews of the changes before it can be merged in to the master branch.\nSee current and earlier pull request.\nFor infrastructure changes the pull request is done in Azure Devops with the same type of reviews.\nDefect Tracking \u0026amp; Management Defects are tracked in Gitub as bugs. See active and closed bugs.\nStatic SW Analysis Enablement Every pull requsts needs to adhere to code quality standard verifyed with static code analysis.\nThe build pipline in Azure Devops runs LGTM for static code analysis with focus on security and SonarCloud for general static code analysis.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/react/",
	"title": "React",
	"tags": ["tech", "frontend", "react"],
	"description": "Modulært rammeverk for å utvikle UI komponenter og SPA applikasjoner.",
	"content": " Modulært rammeverk for å utvikle UI komponenter som kan gjenbrukes flere steder i løsningen. Hvert React komponent har en tilstand som gir den data i henhold til hvor i applikasjonen brukeren er og hvilke handlinger som foretas. Vedlikeholdt av Facebook, under MIT lisens.  Slik React blir brukt Uten redux  Ved bruk av higher order components kan tilstand sendes fra rot-komponenten nedover i komponent-hierarkiet. Rot-komponenten håndterer alt av state, og sender callbacks ned i komponentene, slik at det er mulig og legge til, fjerne og endre komponeter.  Med redux  Ved bruk av redux vil vi ikke være like avhengig av higher order components, da alle komponenenter kan kobles til redux-state av appen, og kunne håndtere det å legge til, fjerne eller endre komponenter selv. Håndtering av state skjer igjennom Actions og Reducers, som Redux arkitektur anbefaler.  Links  https://reactjs.org https://github.com/facebook/react  "
},
{
	"uri": "https://docs.altinn.studio/tags/react/",
	"title": "react",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/reactapp/",
	"title": "react-app.js",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av React-App.js",
	"content": "Overordnet \u0026lsquo;React-App.js\u0026rsquo; er selve React applikasjonen som blir generert av Altinn Studio som del av tjenestutviklingen. Den inneholder all logikk for å rendre GUI samt å gjøre nødvendige kall mot API i Altinn Tjenester 3.0\nFor øyeblikket er den statisk og lik for alle tjenester. Målet er at den blir tilpasset de komponentene som er i bruk. Dette slik at javascript koden ikke i inneholder referanser til komponenter ikke brukt i tjenesten.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-platform/receipt/",
	"title": "Application architecture receipt component - Altinn Platform",
	"tags": ["architecture", "solution", "receipt"],
	"description": "The receipt component is an application exposing a React receipt application, and internal APIs.",
	"content": "The receipt frontend view is available at https://platform.at22.altinn.cloud/receipt/{instanceOwnerId}/{instanceId}.\nThe receipt component also exposes apis that are intended for use by the receipt frontend. If you need information about the user, instance or party you should use their respective platform components.\nReceipt backend exposes two enitities through API endpoints prefixed with https://platform.at22.altinn.cloud/receipt/api/v1/; user and extendedInstance\n/users A user is the entity which is logged in in Altinn and performs actions for on behalf of an instance owner.\nOperations Get information about the currently logged in user\n/users/current /extendedinstance The extended instance object holds metadata about and instance and party data related to the instance owner.\n{ \u0026#34;instance\u0026#34;: {}, \u0026#34;party\u0026#34;: {} } Operations Get instance and party data for a given instance id. It is optional to include the party data, and this can be regulated using the query parameter includeParty.\n/instances/{instanceOwnerPartyId}/{instanceGuid}?includeParty={true/false} "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-platform/receipt/",
	"title": "Receipt",
	"tags": ["platform", "register"],
	"description": "The Receipt component in Altinn Platform presents a receipt for apps.",
	"content": "The Receipt component is built to present receipt for all apps. Since apps over time will be removed from Altinn Apps, but the data will live forever, the Receipt component is responsible for presenting a generic receipt view.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/receipt/",
	"title": "receipt",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/tools/react/redux/",
	"title": "Redux",
	"tags": ["tech", "frontend", "react"],
	"description": "Redux is used for handling state in React applications.",
	"content": " Applikasjonstilstandshåndtering En felles tilstand for hele applikasjonen Tilstanden styres av Actions som håndteres av Reducere som igjen populerer tilstanden.  En Action kan f.eks. være \u0026ldquo;FETCH_POSTNUMMER\u0026rdquo; Når en slik actions kjøres, så vil en Reducer ta imot og oppdatere tilstanden slik at det er i tilstanden at applikasjonen nå henter postnummer. Når er hentingen er fullført, vil man f.eks. sende en action \u0026ldquo;FETCH_POSTNUMMER_FULFILLED\u0026rdquo; som har postnummer-data med som parameter. Reducer håndterer denne handlingen og setter postnummer-data i applikasjonens tilstand.   Vedlikeholdt av Facebook, under MIT lisens.  Fordeler ved å bruke redux  En felles state for alle komponenter Komponenter kan kobles direkte mot state og kan oppdatere denne uavhengig av andre komponenter Gir en stor frihet til valg av struktur på state. Enkelt å eksportere til json og importere fra json (hvis strukturen er lik)  Links  https://redux.js.org https://github.com/reactjs/redux  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-platform/register/",
	"title": "Application construction components - Altinn Platform Register",
	"tags": ["architecture", "solution", "todo"],
	"description": "The register component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": "TODO\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-platform/register/",
	"title": "Register",
	"tags": ["platform", "register"],
	"description": "The Register micro service gives register information to Apps.",
	"content": " ER - Enhetsregisteret - Information about organisations in Norway DSF - Det Sentrale Folkeregisteret - Information about citizens in Norway.  ER - Enhetsregisteret ER registeret can be used to prefill information, retrieve information based on user input or for validation of input of users.\nAltinn Platform does not have a own copy of ER. It currently uses Altinn II plaform as source for register.\nSee Application architecture for details.\nSee all open issues for Register on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/register/",
	"title": "register",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/repeating-groups/",
	"title": "repeating groups",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/",
	"title": "Altinn Studio Repos",
	"tags": ["altinn-repos"],
	"description": "The Git repository solution for storing and versioning apps developed with Altinn Studio.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/functional/\u0026quot;\u0026gt;Functionality in Repos\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Funksjonalitet for lagring og versjonering av tjenester i Git-repositories samt funksjonalitet for application lifecycle management.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/\u0026quot;\u0026gt;Data Structure for Repos\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Struktur for repositories og filer i Gitea.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/tags/repos/",
	"title": "repos",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-studio/repositories/",
	"title": "Application construction components Repositories",
	"tags": [],
	"description": "The application construction components for Repositories is based on standard open source software.",
	"content": "Each application created in Altinn Studio Designer gets a GIT repository where all code and configuration for that app is stored.\nWe use Gitea as a Git-based code hostet solution in Altinn Studio. Gitea is a Open Source product.\nGitea host code on Github. See repository here.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-studio/repositories/",
	"title": "Solution components Altinn Studio Repositories",
	"tags": ["solution", "architecture"],
	"description": "In Altinn Studio Repos you find the functional components related to source control and access management of the application developer.",
	"content": "Application Repositories In Altinn Studio Repositories the developer find all repostiries for different organization and in every reporistory the source code for all apps are located.\nGit-based source control The app developer can use the source control to clone, comitt, pull and other GIT related functionality.\nThe app developer can view the application repository.\nAuthentication The login functionality for Altinn Studio is located in repositories\nUser Profile User profile in Altinn Studio Repostories lets the app developer manage its user profile.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authorization/resourceregistry/",
	"title": "Resource Registry",
	"tags": ["architecture", "security", "authorization", "xacml"],
	"description": "The Resource Registry",
	"content": "WORK IN PROGRESS - NOT FINALIZED\nThe service registry will contain information about the service resources\nSee Github #24\nType of resources There are different types of resources that can be registrated\n Altinn 3 apps - Refered with org/app id Altinn 2 Services - Refered with externalServiceCode and EditionCode Service Resources  Altinn 3 Apps Apps hosted in Altinn 3 Apps will be registred in the Altinn Service Registry.\nThe referenced id would be org/app\nThe registration is required to be able to list apps that is included in the rights for a group\nAltinn 2 Services Apps hosted in Altinn 2 platform will be registrated in Altinn Service Registry\nThe reference id would be externalServiceCode/serviceeditionCode\nAltinn Service Resource The service resource would be any type of service provided by public or private organiazations\n API\u0026rsquo;s exposing data Example3 Portal functionality in Altinn Example 1 Portal functionality in external portal Example 2  Resource Regis "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-apps/app/app-api/org-rest/",
	"title": "REST-API for orgs",
	"tags": ["altinn-apps"],
	"description": "Description of the  API for organisations (orgs).",
	"content": "NOTE: Work in progress. Stuff will change.\r\rFor apps created in Altinn Studio and hosted in Altinn Apps, REST-API are the main channel to interact with the App / Altinn Platform.\nAPI to authenticate end agency systems In the current Altinn Platform SOAP is used for most of the agencies API\u0026rsquo;s. Altinn support both username/password for agencies.\nAPI to instansiate a new instance of an app with prefill See Application Users API.\n"
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/reusable-resources/",
	"title": "Reusable resources",
	"tags": [],
	"description": "A important feature with Altinn Studio is that it should promote developers to create reusable resources that can be reused by other developers.",
	"content": "Reusable resource is typical created by technical developers using code editors.\nWeb component When building UI, you will use and configure premade web components. The components will be based on React, and vil vary in size and complexity. Web components are developed in code editors.\nSome basic requirements:\n The component should be flexible and configurable The component should be able to be connected to the data model, and use the metadata from the data model. The component should be able to connect to text resources The component should support responsive design and WCAG 2 AA It should be simple for service owners to add more components  Overall layout When building UI it will be possible to select a overall layout (aka \u0026ldquo;look\u0026amp;feel\u0026rdquo;). This could bee neded because of the complexity of the service or a wish for branding of the service.\n  Create reuasable artifacts\n Look\u0026amp;feel Texts and translations Code lists Logic (C#? TypeScript? WebAssembly?) Data models (Seres?) API calls    Reuse these artifacts\n  F.eks. det å lage nye web componenter og layouts vil typisk være noe som tekniske utviklere gjør i kode-editorer.\nDet å sette disse sammen og konfigurere dem, er noe alle skal kunne gjøre.\n"
},
{
	"uri": "https://docs.altinn.studio/community/devops/roadmapprocess/",
	"title": "Roadmap prosess",
	"tags": ["needstranslation"],
	"description": "Hvordan jobber vi med vår roadmap",
	"content": "Dette dokumentet beskriver hvordan vi jobber med features for Altinn 3 plattformen.\nArtifakter Arbeidet med Altinn 3 krever en del artifakter.\nFullscreen\nFeature request En feature request er en forespørsel om ønsket funksjonalitet i Altinn 3 plattformen. Den opprettes enten av eksterne som bruker plattformen, eller av andre som har identifsert et behov.\nFeature request opprettes i de forsjellige produkt eller team backloggene.\n Altinn Studio App Template Dotnet App Frontend React Altinn Platform Altinn Authorization Altinn Authentication Altinn Notifications Altinn Storage Altinn Profile Altinn PDF Altinn Events  En del av disse vil ha bakgrunn fra Altinn Apps backloggen hvor man finner backlog for apper som utvikles.\nEksempler\n Removing data from the stored receipt Behov for alternativ visning av repeterende gruppe  Product epic Kilden til denne er typisk en feature request. Denne vil inneholde detaljert beskrivelse av feature samt referer til underoppgaver som f.eks\n Funksjonelle beskrivelser og tekniske analyser User Experience og Interaction design hensyn Juridiske vurderinger Sikkerhets vurderinger Kostnad/finansierings betraktninger (Oversikt over hvilke apper som har dette behovet?)  Det er produkteierne som i utgangspunktet eier denne, men får hjelp av teamarkitekter, utviklere, jurister og andre som trengs for å spesifisere disse Denne featuren epic vil ligge i produktbackloggen hvor den mest naturlig hører hjemme. Det vil være naturlig at man itererer over denne mange ganger i product planing, før den er klar til product refinement.\nEksempel 1 - funksjonel signering\n Ansvarlig: Produkteiere  Analyse issues Analyse issue er github issues som typisk er lenket til product epic. Dette vil være premissgiveres vurderinger til videre realisering av epicen.\nDette kan altså f.eks være\n User Experience og Interaction design hensyn Juridiske vurderinger Sikkerhets vurderinger Kostnad/finansierings betraktninger  Aktører\n Ansvarlig: Produkteiere Utførende: Diverse premissgivere  Eksempel\n UX Analyse tabell  Development issue Dette er detaljerte oppgaver som er knyttet til epic og kan være analyse oppgaver eller rene implementasjonsoppgave. Issue tilknyttet en produkt feature epic trenger ikke å ligge i samme backlog som epic. Disse tas inn i sprinter som del av sprint planning\n Ansvarlig: Devops team Utførende: Devops team  Roadmap feature Denne beskriver overordnet hvilken funksjonalitet feature dekker og egenskapene ved funksjonaliteten. Formålet er at eksterne interessenter skal kunne lese denne uten å lese noe annet for å få en god forståelse hvilken funksjonalitet en slik feature dekker og når den kommer.\nDenne opprettes av produkteierene. Vanligvis basert på product epics, etter at den er nødvendig analysert og kan tas inn i roadmap. Roadmap features finnes i Roadmap repository. Vi ønsker å legge oss på detaljnivået til Github Roadmap for roadmap features\n Ansvarlig: Produkteier Utførene: Produkteier  Prosess Følgende prosess følges med artifakten\nFullscreen\nProduct planing Dette er arbeidet som produkteierne utfører, sammen med andre ressurser, for å skape og jobbe med epics i produkt backloggen og tilhørende analyse issues. En oppsummering av et slikt element vil kunne ende opp som et road map feature.\n Ansvarlig: Produkteier Støtte: Forretningsutviklere, Arkitekter, UX, Jurister, Sikkerhet, Forretning, Leverandørstyrere, samt andre produkteiere.  Product refinement Dette er en behandling med utgangspunkt i produkt epics med hensikt om å definere underliggende development issues. Altså gjøre klart for sprintplaning, eventuelt sende det tilbake til produkt planing.\nMålet med feature refinement er å detaljere issue til et nivå at team kan ta oppgavene inn i sprinter.\n Viktige teknologi valg må være analysert Bør være mulig å identifisere oppgaver å dele opp i egne issues Være detaljert nok til at man kan si noe om omfang.  Sprint planing DevOps teamet tar inn development issues i en (eller flere) sprinter basert på kapasitet.\n\r"
},
{
	"uri": "https://docs.altinn.studio/tags/routines/",
	"title": "routines",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-apps/routing/",
	"title": "Application Architecture Routing",
	"tags": [],
	"description": "Descripton of the Application Architecture for the Routing Application",
	"content": "Routing in Altinn Apps are done by Traefik. See Traefik documentation for detailed architecture information\n"
},
{
	"uri": "https://docs.altinn.studio/tags/routing/",
	"title": "routing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/development/configuration/authorization/rules/",
	"title": "Rule library",
	"tags": [],
	"description": "Library of authorization rules that can be used in an app. Remember to replace tags ([ORG], [APP], [RULE_ID]) with your own data.",
	"content": "[ORG] can instantiate an instance of [ORG]/[APP] [OORG_1] and [ORG_2] can here be the same or different. In the case that they are different [ORG_1] will correspond to the application owner and [ORG_2] be another organization that is allowed to instanciate.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;[ORG_2] can instantiate an instance of [ORG_1]/[APP]\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG_2]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG_1]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;instantiate\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; User with role REGNA can read instances of [ORG]/[APP] when it is in Task_1 By changing the role and task in this rule you will be able to give rights to read instance data on a given task in the process flow.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;User with role REGNA can read instances of [ORG]/[APP] when it is in Task_1\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;REGNA\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;Task_1\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:task\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;read\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; [ORG] can write to an instance of [ORG]/[APP] in any task or event This rule can be used if application owner should be able to update instances regardless of where they are in their process flow.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;[ORG] can write to instances of [ORG]/[APP] in any task or event\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;write\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; User with role REGNA or DAGL can confirm instances of [ORG]/[APP] when it is in Task_2 This rules limits the right to confirm an instance in a particular task to only two roles. By either modifying task or roles, you will here be able to set rules for who will confirm the instance in various phases of the process.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;User with role REGNA or DAGL can confirm instances of [ORG]/[APP] when it is in Task_2\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;REGNA\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;DAGL\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;Task_2\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:task\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;confirm\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; User with role REGNA can read instanes of [ORG]/[APP] when it is in EndEvent_1 This rules permits a user with the given role to read instance data after the process has ended. This will, among other things, include downloading attachments and receipts associated with the instance.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;User with role REGNA can read instanes of [ORG]/[APP] when it is in EndEvent_1\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;REGNA\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;EndEvent_1\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:end-event\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;read\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; Rule that defines that [ORG] can complete an instance of [ORG]/[APP] which state is at the end event. This rule allows application owner to complete an instance. The instance must have a completed process.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;Rule that defines that [ORG] can complete an instance of [ORG]/[APP] which state is at the end event.\u0026lt;/xacml:Description\u0026gt;  \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;EndEvent_1\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:end-event\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;complete\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; [ORG] can delete an instance of [ORG]/[APP] in any task or event. This rule allows application owner to delete an instance. This can be done regardless of where in the process the instance is.\n\u0026lt;xacml:Rule RuleId=\u0026#34;urn:altinn:example:ruleid:[RULE_ID]\u0026#34; Effect=\u0026#34;Permit\u0026#34;\u0026gt; \u0026lt;xacml:Description\u0026gt;[ORG] can delete an instance of [ORG]/[APP] in any task or event.\u0026lt;/xacml:Description\u0026gt; \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;delete\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt; [ORG] can access with authentication level 3 \u0026lt;xacml:ObligationExpressions\u0026gt; \u0026lt;xacml:ObligationExpression FulfillOn=\u0026#34;Permit\u0026#34; ObligationId=\u0026#34;urn:altinn:obligation:authenticationLevel1\u0026#34;\u0026gt; \u0026lt;xacml:AttributeAssignmentExpression AttributeId=\u0026#34;urn:altinn:obligation1-assignment1\u0026#34; Category=\u0026#34;urn:altinn:minimum-authenticationlevel\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;4\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;/xacml:AttributeAssignmentExpression\u0026gt; \u0026lt;/xacml:ObligationExpression\u0026gt; \u0026lt;xacml:ObligationExpression FulfillOn=\u0026#34;Permit\u0026#34; ObligationId=\u0026#34;urn:altinn:obligation:authenticationLevel2\u0026#34;\u0026gt; \u0026lt;xacml:AttributeAssignmentExpression AttributeId=\u0026#34;urn:altinn:obligation2-assignment2\u0026#34; Category=\u0026#34;urn:altinn:minimum-authenticationlevel-org\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;3\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;/xacml:AttributeAssignmentExpression\u0026gt; \u0026lt;/xacml:ObligationExpression\u0026gt; \u0026lt;/xacml:ObligationExpressions\u0026gt; "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/rule-handler/",
	"title": "RuleHandler.js",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for rule handler js filen.",
	"content": "Overordnet Filen RuleHandler.js brukes til å lage metoder som skal benyttes for til kalkuleringer/regler på felter i datamodellen eller for å skape dynamikk i et skjema.\nFormat Filen består av 4 objekter, 2 av de benyttes for til kalkuleringer/regler i skjema og de 2 andre benyttes til dynamikk i skjema. ruleHandlerObject og conditionalRuleHandlerObject skal benyttes til å definere metoder som kan brukes til kalkuleringer/regler i skjema. Alle metodene har et objekt som input parameter og en output verdi, strukturen på input objektet er beskrevet i ruleHandlerHelper og conditionalRuleHandlerHelper. Filen har følgende struktur:\nvar ruleHandlerObject = { ruleFunctionName: (obj) =\u0026gt; { return obj.inputParam1 + \u0026#34; \u0026#34; + obj.inputParam2; }, } var ruleHandlerHelper = { ruleFunctionName: () =\u0026gt; { return { inputParam1: \u0026#34;inputParam1\u0026#34;, inputParam2: \u0026#34;inputParam2\u0026#34; }; }, } var conditionalRuleHandlerObject = { conditionalFunctionName: (obj) =\u0026gt; { return obj.input1 \u0026gt; 10; }, } var conditionalRuleHandlerHelper = { conditionalFunctionName: () =\u0026gt; { return { input1: \u0026#34;input1\u0026#34; }; }, } Ved innlasting i skjemadesigneren vil filen lastes inn i window elementet og kalles ved hjelp av window.conditionalRuleHandlerObject.conditionalFunctionName. Kalkuleringer/regler kjøres når skjema fylles ut. Så regler kan testes både i desinger, preview og i runtime. Kalkuleringer/regler input objekt sine parameter og output parameteret kobles til felter i datamodellen.\nDynamikk regler manipulerer skjema ved å skjule eller vise felter. Input objektet kobles til datamodelfelter. Deretter må brukeren spesifisere hva som skal skje hvis metoden returnerer true. Per nå er det kun mulig å velge å skjule eller vise felter. Deretter knytter man \u0026lsquo;action\u0026rsquo; til felter som er lagt inn i skjema. Man kan knytte så mange felter man vil til en dynamisk regler.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/runtime-capabilities/",
	"title": "runtime capabilities",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/infrastructure/computing/scaling/",
	"title": "Scaling compute resources",
	"tags": ["architecture", "infrastructure"],
	"description": "Traffic to Altinn varies widely during a year and scaling the compute resources correctly is important for stability and cost",
	"content": "The below diagram shows how the number of unique users logged in to Altinn 2 varied through 2019.\nAltinn 2 is a monolith where all digital services run on the same servers. This means that days like the tax day when there is this enormous spike in traffic will require that all servers are scaled up. It is also an on-prem solution where scaling needs to be planned weeks ahead.\nFor Altinn 3 the story is completely different. Every organization has its separate Kubernetes cluster. Each of these clusters can be scaled independently.\nCluster Autoscaler Azure Kubernetes Services does support autoscaling of nodes and pods. Read more about cluster autoscaling.\nThis is currently not been enabled.\nResource Reservations in Azure Kubernetes Services Node resources are utilized by AKS to make the node function as part of your cluster. This usage creates a discrepancy between the node\u0026rsquo;s total resources and the resources allocatable when used in AKS. This information is important to note when setting requests and limits for user deployed pods.\nFor Altinn 3 this means the following\n Standard_D2s_v3: 100 millicores reserved per node, 1900 millicores to use Standard_D4s_v3: 140 millicores reserved per node, 3860 millicores to use Standard_D8s_v3: 180 millicores reserved per node, 7820 millicores to use  Read more about resource reservations\nResource limitations In Kubernetes, it is possible to set resource limitations for each pod deployed to a Kubernetes cluster. In addition, we can define the number of minimum resources required for the pod.\n. Below there is a general example where the minimum CPU is set to 100milliCPU and maximum to 250milliCPU.\nkind: Pod apiVersion: v1 metadata: name: mypod spec: containers: - name: mypod image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine resources: requests: cpu: 100m memory: 128Mi limits: cpu: 250m memory: 256Mi Read about best practice for managing resources in Azure Kubernetes Services\nScaling org clusters There are currently more than 50 orgs hosting digital services in the Altinn 2 platform.\nThey range from Tax Department, Police, the Civil Aviation Authority, and many more. Some have digital services used by millions of citizens every year, while others have digital services used only by 1 person during a year. Some have many digital services while others just 1.\nThis means that the compute requirements for the different cluster vary a lot between the different orgs.\nTo exemplify this we shown the transaction statistics from three different orgs for 2019 in Altinn 2.\nAt the current time, we don\u0026rsquo;t know what kind of CPU usage an average transaction requires.\nIn this example, we assume that 1000 transactions require 1 CPU. (1000 milliCPU)\nThis is probably not correct.\nOrg 1 SKD is the largest org in Altinn 2. Daily transactions vary between 2500 and 365.000.\nThat would mean that SKD would need up to 192 nodes of Standard_D2s_v3\nOrg 2 BRG is one of the larger orgs in Altinn. Daily transactions vary between 300 and 14.000.\nThat would mean that BRG would need up to 8 nodes of Standard_D2s_v3\nOrg 3 HDIR is a medium org in Altinn. Daily transactions vary between 300 and 950.\nThat would mean that HDIR would never need more than 3 nodes of Standard_D2s_v3\nWe have not yet decided how we will be doing scaling of org clusters. We have identified some approaches.\nScaling option 1 The first option is manually scale both pods and nodes.\nThis means that the Altinn Devops team would manually need to increase or decrease the number of nodes based on obeserved/expected usage.\nThe number of pods for a specific application would also be manually set.\nCons  Unknown of LoadBalancer is able to distribute traffic correctly  Scaling option 2 "
},
{
	"uri": "https://docs.altinn.studio/api/scenarios/",
	"title": "Scenarios",
	"tags": [],
	"description": "Different API usage scenarios.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/scenarios/authentication/\u0026quot;\u0026gt;Authentication\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;How to authenticate using the APIs.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/integration/events/scenarios/",
	"title": "Event Scenarios",
	"tags": ["architecture", "events"],
	"description": "Description of the event-driven architecture for Altinn Apps and Altinn Platform.",
	"content": "Below you find some functional scenarios for use of events functionality in Altinn 3\nOrg waiting on ProcessComplete for a given app In this scenario, an org is waiting on end-users to complete one given app.\n  System (consumer) authenticates using Maskinporten and requests scope for org\n  System exchanges Maskinporten token to an Altinn token. Scopes is included in new token.\n  System calls\nGET {platformurl}/events/api/v1/app/{org}/{app}?from={lastchanged}\u0026amp;eventType=instance.process.completed   Event component verifies that scope matches request\n  Event components searches database for events that matches search criteria\n  Event component returns the filtered and possible capped response ordered by sequence\n  Consumer process the received events and call other API to download related data (instances, files, etc)\n  User needing to know if there is anything new for a party In this scenario, a user wants to see if there are any changes for a client or the user itself.\n  System authenticates end user with ID-porten\n  System exchanges token with Altinn\n  System calls event API\nPOST {platformurl}/events/api/v1/party/   Event component query events in database.\n  Event components authorized the event and filter away events where user is not authorized\n  Events are returned\n  Consumer process events\n  Consumer gets relevant data\n  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/runtime/security/",
	"title": "Security Enforcement Capabilities",
	"tags": ["architecture"],
	"description": "Security Enforcement Capabilities are capabilities typical provided by common architecture components.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/security/authentication/\u0026quot;\u0026gt;Authentication Capabilities\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The different solutions need different types of Authentication capabilties to support the different users and systems.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/security/authorization/\u0026quot;\u0026gt;Authorization\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Altinn 3 platform has very powerful and flexible authorization capabilities.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/capabilities/runtime/security/encryption/\u0026quot;\u0026gt;Encryption\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of the encryption architecture\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/security/",
	"title": "Security Enforcement Capabilities",
	"tags": ["architecture", "security", "runtime capabilities"],
	"description": "Description of the Altinn Studio, Altinn Apps, Altinn Platform security architecture providing runtime capabilities for the solutions.",
	"content": "For a solutions like Altinn Studio, Altinn Apps and Altinn Platform security is a important aspect.\nThe security architecture is based on the following reference model\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/security/jwtcookie/\u0026quot;\u0026gt;JWTCookieAuthentication\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;This is the description of JWTCookieAuthentication.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/architecture/components/application/construction/security/pep/\u0026quot;\u0026gt;Policy Enforcement Point\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;There are different types of Policy Enforcement Points in the Altinn 3 platform.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/tags/security/",
	"title": "security",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/service-configurations/",
	"title": "ServiceConfigurations.json",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for tjeneste konfigurasjons filen.",
	"content": "Overordnet ServiceConfiguration.json filen spesifiserer ulike konfigurasjoner lagt til i design prosessen. Nå består den av api koblinger, kalkuleringer og dynamikk regler.\nFormat API connections Strukturen under beskriver api koblinger til et skjema. Objektet inneholder koblingene og informajson knyttet til api\u0026rsquo;ene som er i bruk. ClientParams og apiResponseMapping viser mapping til datamodellen. externalApiId viser kobling til api\u0026rsquo;er som kan brukes.\n\u0026#34;data\u0026#34;: { \u0026#34;externalApi\u0026#34;: { \u0026#34;APIs\u0026#34;: { \u0026#34;connections\u0026#34;: { \u0026#34;c5dadba0-9707-11e8-9c4d-6f48d2b86ea7\u0026#34;: { \u0026#34;externalApiId\u0026#34;: \u0026#34;id1\u0026#34;, \u0026#34;clientParams\u0026#34;: { \u0026#34;pnr\u0026#34;: \u0026#34;skattyterinfor.kontakt.kontaktpersonPostnummer.value\u0026#34; }, \u0026#34;metaParams\u0026#34;: { \u0026#34;clientUrl\u0026#34;: \u0026#34;fgdb\u0026#34; }, \u0026#34;apiResponseMapping\u0026#34;: { \u0026#34;skattyterinfor.kontakt.kontaktpersonPoststed.value\u0026#34;: \u0026#34;result\u0026#34; } } }, \u0026#34;externalApisById\u0026#34;: { \u0026#34;id1\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;id1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Bring postnummer API\u0026#34;, \u0026#34;shortname\u0026#34;: \u0026#34;Postnummer\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;https://api.bring.com/shippingguide/api/postalCode.json?\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Api for å hente poststed basert på postnummer\u0026#34;, \u0026#34;clientParams\u0026#34;: { \u0026#34;pnr\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;queryString\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;pnr\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;required\u0026#34;: true, \u0026#34;example\u0026#34;: \u0026#34;Example: 2050\u0026#34; } }, \u0026#34;metaParams\u0026#34;: { \u0026#34;clientUrl\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;queryString\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;clientUrl\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;required\u0026#34;: true, \u0026#34;example\u0026#34;: \u0026#34;Example: http://www.sitename.com\u0026#34;, \u0026#34;urlEncode\u0026#34;: true } } } }, \u0026#34;externalApisIds\u0026#34;: [ \u0026#34;id1\u0026#34; ] } } Rule connections Strukturen under beskriver regler lagt til i et skjema. Objektet inneholder koblingene til regler som finnes på et skjema. I objektet er det spesifisert hvilken metode som skal brukes, hvilke felter i datamodellen som skal knyttes til input objektet til metoden og hvilke felt i datamodellen som skal knyttes til funsjonens output verdi.\n\u0026#34;ruleConnection\u0026#34;: { \u0026#34;d180e210-9707-11e8-9c4d-6f48d2b86ea7\u0026#34;: { \u0026#34;selectedFunction\u0026#34;: \u0026#34;ruleFunctionName\u0026#34;, \u0026#34;inputParams\u0026#34;: { \u0026#34;inputParam1\u0026#34;: \u0026#34;skattyterinfor.info.enhetOrganisasjonsnummer.value\u0026#34;, \u0026#34;inputParam2\u0026#34;: \u0026#34;skattyterinfor.kontakt.kontaktpersonEPost.value\u0026#34; }, \u0026#34;outParams\u0026#34;: { \u0026#34;outParam0\u0026#34;: \u0026#34;klage.spesifisering.klageSpesifisering.value\u0026#34; } } } Conditional rendering connections Strukturen under beskriver dynamikk lagt til i et skjema. Objektet inneholder koblingene mellom skjema og dynamiske regler som finnes på et skjema. I objektet er det spesifisert hvilken metode som skal brukes, hvilke felter i datamodellen som skal knyttes til input objektet til metoden og mapping mellom regelen og elementer i skjemaet.\n\u0026#34;conditionalRendering\u0026#34;: { \u0026#34;d841b430-9707-11e8-9c4d-6f48d2b86ea7\u0026#34;: { \u0026#34;selectedFunction\u0026#34;: \u0026#34;conditionalFunctionName\u0026#34;, \u0026#34;inputParams\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026#34; }, \u0026#34;selectedAction\u0026#34;: \u0026#34;Hide\u0026#34;, \u0026#34;selectedFields\u0026#34;: { \u0026#34;d8416610-9707-11e8-9c4d-6f48d2b86ea7\u0026#34;: \u0026#34;94bb4f87-3428-4f2e-9b6a-6ff358ebd173\u0026#34; } } } "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/serviceimplementation/",
	"title": "ServiceImplementation.cs",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for tjenesteimplementasjonen.",
	"content": "Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes\rvidere med i MVP.\r\rOverordnet \u0026lsquo;ServiceImplementation.cs\u0026rsquo; er hovedgrensesnittet mellom Altinn Core runtime og foretningslogikken i tjenesten som kjører på server.\nFormat \u0026lsquo;ServiceImplementation.cs\u0026rsquo; implementerer grensesnittet IServiceImplementation som har følgende metoder definert.\nobject CreateNewServiceModel(); Metode som oppretter nytt datamodell objekt basert på den datamodellen som tjenesten definerer\nvoid SetServiceModel(object model); Metode som gjør at plattformen kan tilgjengeliggjøre en populert datamodell til tjenesteimplementasjonen\nvoid SetContext(RequestContext requestContext, dynamic viewBag); Metode som setter context informasjon til tjenesteimplementasjon\nvoid SetContext(RequestContext requestContext, dynamic viewBag, ServiceContext serviceContext, StartServiceModel startServiceModel, ModelStateDictionary modelState); Metode som setter context informasjon til tjenesteimplementasjon\nTask RunServiceEvent(ServiceEventType serviceEvent); Metode som trigger en tjeneste hendelse. Dette gjør plattformen ved spesielle tidspunkt og tjenesteutvikler kan da velge å kjøre forretningslogikk under dise hendelsene.\nHendelsene som er definert til nå er.\n BeforeRender Calculation Instantiation ValidateInstantiation Validation DataRetrieval  void SetPlatformServices(IPlatformServices platformServices); Tilgjengeligjør plattformtjenester.\nViewMetadata GetView(string viewID, UserActionType userAction); Henter view. TODO: Vurder å fjerne dette når man har konkludert om MVC Razor views skal støttes av plattformen.\nUtvikling Under opprettelse av en tjeneste vil en tom ServiceImplementasjonsklasse opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\nForretningslogikk Foretningslogikk implementeres i denne klassen eller andre relatert klasser som denne referer til. Det vil være opp til utvikler å eventuelt skille kode ut i flere andre klasser.\nTjenester 3.0 oppretter egne klasser for forretningslogikk tilknyttet kalkuleringer, valideringer og instansiering.\nEksempel på forretningslogikk\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/servicemetadata/",
	"title": "ServiceMetadata.json",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for ServiceMetadata.",
	"content": "Overordnet \u0026lsquo;ServiceMetadata.json\u0026rsquo; beskriver datamodellen til et skjema. Den autogenereres fra XSD.\nFormat \u0026lsquo;ServiceMetadata.json\u0026rsquo; inneholder informasjon om alle felter i en datamodell. ServiceModell vil genereres fra denne. Hvis man ønsker å overstyre egenskaper fra XSD så kan det gjøres her.\nTODO: Det er en rekke ting som er uavklart om hva man vil kunne gjøre av endringer på denne.\nEksempel Under er et eksempel på hvordan ServiceMetadata kan se ut\n{ \u0026#34;Org\u0026#34;:\u0026#34;BR\u0026#34;, \u0026#34;Service\u0026#34;:\u0026#34;Tjeneste1\u0026#34;, \u0026#34;Edition\u0026#34;:\u0026#34;2019\u0026#34;, \u0026#34;Elements\u0026#34;:{ \u0026#34;Skjema.skjemanummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.skjemanummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;skjemanummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/skjemanummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;Integer\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;skjemanummer\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;1243\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.spesifikasjonsnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.spesifikasjonsnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;spesifikasjonsnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/spesifikasjonsnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;Integer\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;spesifikasjonsnummer\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;10702\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.blankettnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.blankettnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;blankettnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/blankettnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;blankettnummer\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;RF-1117\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.tittel\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.tittel\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;tittel\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/tittel\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;tittel\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;Klage p� likningen\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5800\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.etatid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.etatid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;etatid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/etatid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;etatid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5801\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5802\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25795\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverNavnPreutfylt.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;175\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25795.OppgavegiverNavnPreutfylt.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25795.OppgavegiverNavnPreutfylt.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;OppgavegiverNavnPreutfylt-datadef-25795\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25796\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;500\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25796.OppgavegiverAdressePreutfylt.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25796.OppgavegiverAdressePreutfylt.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;OppgavegiverAdressePreutfylt-datadef-25796\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25797\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverPostnummerPreutfylt.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;length\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;4\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;pattern\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;[0-9]{4}\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25797.OppgavegiverPostnummerPreutfylt.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25797.OppgavegiverPostnummerPreutfylt.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;OppgavegiverPostnummerPreutfylt-datadef-25797\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25798\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverPoststedPreutfylt.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;35\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25798.OppgavegiverPoststedPreutfylt.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25798.OppgavegiverPoststedPreutfylt.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;OppgavegiverPoststedPreutfylt-datadef-25798\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;26\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverFodselsnummer.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;length\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;11\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;26.OppgavegiverFodselsnummer.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;26.OppgavegiverFodselsnummer.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;OppgavegiverFodselsnummer\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;OppgavegiverFodselsnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverFodselsnummer\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;OppgavegiverFodselsnummer-datadef-26\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;18\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.enhetOrganisasjonsnummer.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;length\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;9\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;18.EnhetOrganisasjonsnummer.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;18.EnhetOrganisasjonsnummer.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.enhetOrganisasjonsnummer\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;EnhetOrganisasjonsnummer-datadef-18\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetKommunenummer/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;17\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.enhetKommunenummer.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetKommunenummer/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;length\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;4\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;pattern\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;[0-9]{4}\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;17.EnhetKommunenummer.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;17.EnhetKommunenummer.Label\u0026#34;, \u0026#34;PlaceHolder\u0026#34;:\u0026#34;17.EnhetKommunenummer.PlaceHolder\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;EnhetKommunenummer\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;EnhetKommunenummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.enhetKommunenummer\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetKommunenummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;EnhetKommunenummer-datadef-17\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;info\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;info\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:3, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;info-grp-5802\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5803\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;2\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonNavn.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;150\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Label\u0026#34;:\u0026#34;2.KontaktpersonNavn.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonNavn\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonNavn\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonNavn\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonNavn-datadef-2\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;2751\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonAdresse.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;105\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;2751.KontaktpersonAdresse.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;2751.KontaktpersonAdresse.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonAdresse\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonAdresse\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonAdresse\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonAdresse-datadef-2751\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;10441\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonPostnummer.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;length\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;4\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;pattern\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;[0-9]{4}\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;10441.KontaktpersonPostnummer.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;10441.KontaktpersonPostnummer.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonPostnummer\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonPostnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonPostnummer\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonPostnummer-datadef-10441\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;10442\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonPoststed.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;35\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;10442.KontaktpersonPoststed.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;10442.KontaktpersonPoststed.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonPoststed\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonPoststed\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonPoststed\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonPoststed-datadef-10442\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;27688\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonEPost.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;45\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;27688.KontaktpersonEPost.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;27688.KontaktpersonEPost.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonEPost\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonEPost\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonEPost\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonEPost-datadef-27688\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;3\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonTelefonnummer.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;13\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;3.KontaktpersonTelefonnummer.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;3.KontaktpersonTelefonnummer.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonTelefonnummer\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonTelefonnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonTelefonnummer\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonTelefonnummer-datadef-3\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;Kontakt\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;Kontakt\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ \u0026#34;Label\u0026#34;:\u0026#34;5803.Kontakt.Label\u0026#34;, \u0026#34;Help\u0026#34;:\u0026#34;5803.Kontakt.Help\u0026#34;, \u0026#34;PlaceHolder\u0026#34;:\u0026#34;5803.Kontakt.PlaceHolder\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;Kontakt-grp-5803\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5804\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25455\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klageGjeldendeInntektsar.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;GYear\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25455.KlageGjeldendeInntektsar.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25455.KlageGjeldendeInntektsar.Label\u0026#34;, \u0026#34;PlaceHolder\u0026#34;:\u0026#34;25455.KlageGjeldendeInntektsar.PlaceHolder\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KlageGjeldendeInntektsar\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KlageGjeldendeInntektsar\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klageGjeldendeInntektsar\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KlageGjeldendeInntektsar-datadef-25455\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25454\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klagemeldingSendtInnenKlagefrist.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;3\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;enumeration\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;Ja;Nei;\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25454.KlagemeldingSendtInnenKlagefrist.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25454.KlagemeldingSendtInnenKlagefrist.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KlagemeldingSendtInnenKlagefrist-datadef-25454\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25456\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klageUtloptKlagefristBegrunnelse.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1000\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25456.KlageUtloptKlagefristBegrunnelse.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25456.KlageUtloptKlagefristBegrunnelse.Label\u0026#34;, \u0026#34;PlaceHolder\u0026#34;:\u0026#34;25456.KlageUtloptKlagefristBegrunnelse.PlaceHolder\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KlageUtloptKlagefristBegrunnelse-datadef-25456\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;klagefrist\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;klagefrist\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ \u0026#34;Label\u0026#34;:\u0026#34;5804.klagefrist.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;klagefrist-grp-5804\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;Skattyterinfor\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;Skattyterinfor\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ \u0026#34;Label\u0026#34;:\u0026#34;5801.Skattyterinfor.Label\u0026#34;, \u0026#34;Help\u0026#34;:\u0026#34;5801.Skattyterinfor.Help\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;Skattyterinfor-grp-5801\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5805\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.spesifisering.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.spesifisering.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage.spesifisering\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/spesifisering/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5836\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.spesifisering.KlageSpesifisering.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.spesifisering.KlageSpesifisering.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage.spesifisering.KlageSpesifisering\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/spesifisering/KlageSpesifisering/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25457\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.spesifisering.KlageSpesifisering.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.spesifisering.KlageSpesifisering.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage.spesifisering.KlageSpesifisering\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;klage.spesifisering.klageSpesifisering.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/spesifisering/KlageSpesifisering/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1000\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25457.KlageSpesifisering.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25457.KlageSpesifisering.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.spesifisering.KlageSpesifisering\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.spesifisering.KlageSpesifisering\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage.spesifisering\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KlageSpesifisering\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KlageSpesifisering\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;klage.spesifisering.klageSpesifisering\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/spesifisering/KlageSpesifisering\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KlageSpesifisering-datadef-25457\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.spesifisering\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.spesifisering\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;spesifisering\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;spesifisering\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;klage.spesifisering\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/spesifisering\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;spesifisering-grp-5836\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;klage\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;klage\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;klage\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ \u0026#34;Label\u0026#34;:\u0026#34;5805.klage.Label\u0026#34;, \u0026#34;Help\u0026#34;:\u0026#34;5805.klage.Help\u0026#34;, \u0026#34;PlaceHolder\u0026#34;:\u0026#34;5805.klage.PlaceHolder\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;klage-grp-5805\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;ParentElement\u0026#34;:null, \u0026#34;TypeName\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false } } } "
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/servicemodel/",
	"title": "ServiceModel.cs",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av ServiceModel.cs.",
	"content": "Overordnet \u0026lsquo;ServiceModel.cs\u0026rsquo; er tjenestemodellen som automatisk genereres fra datamodellen som er valgt på tjenesten. Denne kommer i utgangspunktet fra XSD, men tjenester 3.0 vil mest sannsynlig få støtte for å definere datamodell selv.\nRuntime vil populere datamodellen med data fra GUI og forretningsregler vil kunne jobbe mot denne modellen.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/servicemodelxsd/",
	"title": "ServiceModel.xsd",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av ServiceModel.xsd.",
	"content": "Overordnet \u0026lsquo;ServiceModel.xsd\u0026rsquo; er definasjonen på datamodellen på tjenesten. Dette er en XSD som typisk er definert i Seres eller OR i dagens Altinn løsning.\nFor tjenester 3.0 vil jobbes med å kunne definere XSD som en del av løsningen. (f.eks å definere skjema i GUI og få XSD basert på det). Dette vil avklares fremover.\n"
},
{
	"uri": "https://docs.altinn.studio/app/development/logic/services/",
	"title": "Services",
	"tags": [],
	"description": "How to use a few different services hidden away in the app template library.",
	"content": "Person lookup The person lookup service can be use to verify a national identity number and to retrieve person information about the identified person. The user will need to provide the national identity number and the last name of the person. The service will then verify the input by comparing it with stored data. Both input are required and the last name is used to prevent cleaning of random identity numbers. If the user inputs invalid data too many times the service will block the user for some time.\nThe returned person data can be used to populate additional fields in the model.\nPerson lookup example The service can be used in any of the handlers in the logic namespace. Below we\u0026rsquo;ve created an example using the ProcessDataWrite method in DataProcessingHandler.\npublic async Task\u0026lt;bool\u0026gt; ProcessDataWrite( Instance instance, Guid? dataId, object data) { if (data is MessageV1 message) { Person person = await _personLookup.GetPerson( message.Personnummer, message.Etternavn, CancellationToken.None); message.Fornavn = person.FirstName; return true; } return false; } For this to work we\u0026rsquo;ll need to do a few other changes in DataProcessingHandler.\nAdd a private field for the lookup service and change the constructor to take an instance of the service. Initialize the field in the body of the constructor.\nprivate readonly IPersonLookup _personLookup; public DataProcessingHandler(IPersonLookup personLookup) { _personLookup = personLookup; } The changes to the DataProcessingHandler constructor also force us to update the constructor call from the App class constructor. Add IPersonLookup as an input parameter and use the parameter value as input to the constructor of DataProcessingHandler.\npublic App( ... IText textService, IPersonLookup personLookup,  IHttpContextAccessor httpContextAccessor) : base(...) { _logger = logger; _validationHandler = new ValidationHandler(httpContextAccessor); _dataProcessingHandler = new DataProcessingHandler(personLookup);  _instantiationHandler = new InstantiationHandler(profileService, registerService); _pdfHandler = new PdfHandler(); } A note on exception handling With no other changes than those above, the app backend will return response code 429 - TooManyRequests if the user has been typing in invalid data too many times. This response code is currently not handled by the frontend react application which results in an \u0026ldquo;unknown error\u0026rdquo;. This can be avoided with exception handling that singles out any PlatformHttpException with a response with status code 429, but there are currently no built in mechanism to convey to the user why a request failed. A workaround for this limitation is to use a property on the data model.\ntry { ... return true; } catch (PlatformHttpException phex) { switch (phex.Response.StatusCode) { case HttpStatusCode.TooManyRequests: // Add corrective messures  break; case HttpStatusCode.NotFound: // Add corrective messures  break; } throw; } "
},
{
	"uri": "https://docs.altinn.studio/app/development/ux/fields/settings/",
	"title": "Field settings",
	"tags": [],
	"description": "Texts attached to a field.",
	"content": "This functionality must be set up manually directly in form layout for now.\rNOTE: This functionality requires app-frontend v3 or newer. See this link for more information.\n\rMark a field as optional It is possible to mark a field as optional. The default is that required fields are marked as required (with *), while optional fields have no marking.\nDefault behaviour can be overwritten by changing the settings of the field. This is done in the labelSettings property of a component in the form layout.\n{ { \u0026#34;id\u0026#34;: \u0026#34;input-felt-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, ... \u0026#34;labelSettings\u0026#34;: { \u0026#34;optionalIndicator\u0026#34;: true } } } By setting optionalIndicator to true, the text (Optional) will be shown after the field label.\nNOTE: It is not possible to force the Optional marking on a field that is required. Changing the optionalIndicator property does not alter or overrule the other properties of the field.\nConfiguring automatic save while typing Input components, TextArea components and AddressComponent automatically save changes while the user is typing. By default, this happens 400 milliseconds after the user last stopped typing. At this point validation and triggers will execute as well. In cases where validations and triggers are resource intensive, it might be neccesary to increase the delay before saving automatically - or disable it altogether.\nThis functionality can be controlled using the saveWhileTyping property of a component in the form layout. In the example below, data is saved 2 seconds after the user stopped typing.\n{ { \u0026#34;id\u0026#34;: \u0026#34;input-field-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, ... \u0026#34;saveWhileTyping\u0026#34;: 2000  } } If this property is set to false, typing is the field does not trigger auto-saving or validation at all, and these processes will only run when the user changes focus out of the field.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/capabilities/devops/softwareconfiguration/",
	"title": "Software Configuration &amp; Release Management Capabilities",
	"tags": ["architecture", "todo", "devops"],
	"description": "Software Configuration &amp; Release Management Capabilities process of tracking changes and handle new releases for a application",
	"content": "Version, Release \u0026amp; Artefact Management Capabilities Version Management Artefact Management Software Configuration Management Release Management Continuous Del. Pipeline Management The goal is to deliver continously.\nDeployment Capabilities Deployment Orchestration Capabilites The devopsteam has the capability to orhecstrate deployes. Both autmatic and manual deploy is supported.\nSee development application components to get a overview over tools and application we use.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/cli/software-implementation/",
	"title": "Software implementation",
	"tags": ["altinn-cli implementation"],
	"description": "A run-through of the implementation of the Altinn CLI",
	"content": "The main goal for how the software is build is that adding new commands, subcommands and options shall be simple. This is solved by implementing a generic command interpreter that does not require changes when new commands,subcommands and options are added.\nThe generic implementation is based on software Interfaces. This requires that new software classes implements the appropriate interfaces so they can be found when matching command line values against commands, subcommands and options.\nThe second important implementation detail is that the commands with definitions is defined in a json file, CommandDefs.json. The file is part of the project as an embedded resource but can be modified and saved at the location defined in the Application setting parameters CommandDefinitionFile.\nThe CLI Application searches for the file at startup, the CommandDefinitionFile is search first.\nApplication settings Setting which is required for the CLI Application is defined in the appsettings.json file. Initial content of this file is:\n{ \u0026#34;APIBaseAddress\u0026#34;: \u0026#34;https://platform.at21.altinn.cloud/storage/api/v1\u0026#34;, \u0026#34;AppAPIBaseAddress\u0026#34;: \u0026#34;https://{org}.apps.at21.altinn.cloud\u0026#34;, \u0026#34;UseLiveClient\u0026#34;: \u0026#34;True\u0026#34;, \u0026#34;StorageOutputFolder\u0026#34;: \u0026#34;c:/storage/Output\u0026#34;, \u0026#34;StorageInputFolder\u0026#34;: \u0026#34;c:/storage/Input\u0026#34;, \u0026#34;CommandDefinitionFile\u0026#34;: \u0026#34;C:/storage/CommandDefs/Commands.json\u0026#34;, \u0026#34;MaskinportenBaseAddress\u0026#34;: \u0026#34;https://oidc-ver2.difi.no/idporten-oidc-provider\u0026#34;, \u0026#34;AuthBaseAddress\u0026#34;: \u0026#34;https://platform.at21.altinn.cloud/authentication/api/v1\u0026#34;, \u0026#34;tokenSettings\u0026#34;: { } }    Setting Description     Addresse Defines the base part of API' Url. The specific address to be used is selected by dedicated ClinetWrapper which forwards it to the HttpClientWrapper which computes a complete URL.   StorageInputFolder Defines folder for storing fetched files   StorageOutputFolder Defines folder for where files to send shall be fetched   CommandDefinitionFile Defines in which folder the command definition file CommandDefs.json is located.    Kommando Definisjon The command definition file, CommandDefs.json defines all commands with subcommands and options which can be \u0026ldquo;executed\u0026rdquo; i the CLI application. The file is initially a resource is the development project. New commands can be added following this format:\n{ \u0026#34;Name\u0026#34;: \u0026#34;Login\u0026#34;, \u0026#34;SubCommands\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Maskinporten\u0026#34;, \u0026#34;Options\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;clientId\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Guid\u0026#34;, \u0026#34;valuerange\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;client guid id\u0026#34;, \u0026#34;apiname\u0026#34;: \u0026#34;clientid\u0026#34; }, ] } ] } First element Name: defines the command name, next Name defines the subcommand name. No other parameters can be defined on this level. Options is an array with following elements:\n   Element name Description     Name name of the option, the same must be used on the command line, not case sensitive   type option datatype. See list below for valid types, type is case sensitive   valuerange valid range   description description of the parameter to be used in Help   apiname name of the option in the API that is accessed, name is case sensitive    Valid Data typers    Option Type System Type Opsjons klasse     bool System.Boolean NumberOption   byte System.Byte NumberOption   sbyte System.Decimal NumberOption   double System.Double NumberOption   float System.Single NumberOption   int System.Int32 NumberOption   uint System.UInt32 NumberOption   long System.Int64 NumberOption   ulong System.UInt64 NumberOption   object System.Object NumberOption   short System.Int16 NumberOption   ushort System.UInt16 NumberOption   string System.String NumberOption   datetime System.DateTime NumberOption   guid System.Guid NumberOption   file System.IO.FileStream FileOption   thumbprint System.String ThumbPrintOption    Class Overview Program Program is the startup \u0026ldquo;class\u0026rdquo; in the CLI Application. It’s main purpose it to implement CLI functionality and register classes that handles commands and subcommands. Register means in this context to scan the application for classes that implements interfaces that shall be searchable in the generic code.\nICommand Must be implemented by all command classes ISubCommandHandler Must be implemented by all subcommand classes IHelp Implemented on all classes that have info to be display by the help command\nThe actual CLI implementation consist in reading the keyboard and forward it to the ApplicationManager\nLogging Logger is injected to the registered command and is configured as a part of the service registration. Logging is default configured to output on console and file for all log levels.\nLog.Logger = new LoggerConfiguration() .MinimumLevel.Debug() .WriteTo.File(\u0026#34;log.txt\u0026#34;, LogEventLevel.Information) .WriteTo.Console(restrictedToMinimumLevel: LogEventLevel.Information) .CreateLogger(); ApplicationManager The ApplicationManager instantiates command and eventually subcommand from the two first console input parameters. The parameters are used as search criteria’s for finding relevant command/subcommand classes. If a match is found command line input option parameters will be matched and validated against selectable options.\nNot found or illegal value will terminate the command and a proper log message will be displayed in the consol.\nCommand A command class must implement the ICommand interface to be registered in Program. That makes the command available for the generic code which is selecting a command based on the command line input.\nThe selection is based on the implementation of the ICommand interface and the Name property which must match the command name on the command line. The command itself is executed by calling any of the the command class Run methods.\nThere exist two Run commands, one with the SubCommand as parameter and one with a list of command line input parameters that is called if no subcommand is specified.\npublic interface ICommand { /// \u0026lt;summary\u0026gt;  /// Run the supported command handler  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;commandHandler\u0026#34;\u0026gt;the command handler to execute\u0026lt;/param\u0026gt;  void Run(ISubCommandHandler commandHandler = null); /// \u0026lt;summary\u0026gt;  /// Parses the dictionary and run command. Used mainly by Help  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;input\u0026#34;\u0026gt;Dictionary with the cli input paramters\u0026lt;/param\u0026gt;  void Run(Dictionary\u0026lt;string, string\u0026gt; input); /// \u0026lt;summary\u0026gt;  /// Gets the name of the service  /// \u0026lt;/summary\u0026gt;  string Name { get; } } SubCommand public interface ISubCommandHandler : IValidate { /// \u0026lt;summary\u0026gt;  ///  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt;  bool Run(); /// \u0026lt;summary\u0026gt;  /// Name of the command handler  /// \u0026lt;/summary\u0026gt;  string Name { get; } /// \u0026lt;summary\u0026gt;  /// Name of the command for which the command is implemented  /// \u0026lt;/summary\u0026gt;  string CommandProvider { get; } /// \u0026lt;summary\u0026gt;  /// Dictionary with cli input options  /// \u0026lt;/summary\u0026gt;  Dictionary\u0026lt;string,string\u0026gt; DictOptions { get; set; } /// \u0026lt;summary\u0026gt;  ///  /// \u0026lt;/summary\u0026gt;  public List\u0026lt;IOption\u0026gt; SelectableCliOptions { get; set; } /// \u0026lt;summary\u0026gt;  /// Dictionary with cli input options  /// \u0026lt;/summary\u0026gt;  List\u0026lt;IOption\u0026gt; CliOptions { get; set; } /// \u0026lt;summary\u0026gt;  /// Dictionary with cli input options  /// \u0026lt;/summary\u0026gt;  IFileWrapper CliFileWrapper { get; set; } /// \u0026lt;summary\u0026gt;  /// Builds the options that can control the command.  /// \u0026lt;/summary\u0026gt;  void BuildSelectableCommands(); } Option An Option binds the definitions specified at the command line to a definition defined in the CommandDefinition file. The handling of the option is as described in the ApplicationManager description partly done by generic code. Partly means here creation of correct option type based on the option\u0026rsquo;s type definition property and the activation of validation.\nThe actual validation is implemented in the option class itself. An Option base class is implemented with basic functionality like the TryParse method that is used as a part of the validation of the NumberOption type.\n/// \u0026lt;summary\u0026gt; /// Interface that defines the propertioes and methods that /// shall be implemented by an Option class /// \u0026lt;/summary\u0026gt; public interface IOption : IValidate { /// \u0026lt;summary\u0026gt;  /// The Name og the oprtion that must match the Name  /// of the otion in the CommandDefinition file  /// \u0026lt;/summary\u0026gt;  public string Name { get; set; } /// \u0026lt;summary\u0026gt;  /// The name of the opsjon in ther API.  /// \u0026lt;/summary\u0026gt;  public string ApiName { get; set; } /// \u0026lt;summary\u0026gt;  /// The value of the option as a string  /// \u0026lt;/summary\u0026gt;  string Value { get; set; } /// \u0026lt;summary\u0026gt;  /// Defines if the option is defined with a vlue in  /// the command line  /// \u0026lt;/summary\u0026gt;  bool IsAssigned { get; set; } /// \u0026lt;summary\u0026gt;  /// The description of the option that will be used by help  /// \u0026lt;/summary\u0026gt;  string Description { get; set; } /// \u0026lt;summary\u0026gt;  /// Valid range for the paramtere.  /// \u0026lt;/summary\u0026gt;  string Range { get; set; } /// \u0026lt;summary\u0026gt;  /// Gets the typed value of the option as defined  /// in the option definition  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt;  object GetValue(); } A set of Option classes is implemented to cover the most used system types. Mapping from the type set in the definition file to a C# class is shown in the table in the subchapter Valid Data Types. The main reasons for implementing dedicated classes is the possibility to implement generic handling of them together with the advantage of implementing separate code in them like validation.\nNumberOption - represent all simple System Data Types FileOption - represent a file, the value of the option shall contain full path to the file. The validation verifies that the file exists. ThumbPrintOption - This option is used as to represent the *thumbprint\u0026quot; value in the ceritificat that is used in Login.\nOptionBuilder Much of the handling of Options is done by the Singleton class OptionBuilder. Main reason for making it as a Singleton is to avoid reading the CommandDefs file for each command. The file is read initially and save in the class member CfgCommands.\nThere are two public methods in the OptionBuilder, BuildAvailableOptions andAssignValueToCliOptions.\nBuildAvailableOptions BuildAvailableOptions finds command/subcommand in the list of available commands defined in the CommandDefs.json and according to defined type instantiates classes with options of correct type.\nAssignValueToCliOptions AssignValueToCliOptions is responsible for validation and assignment of input options. Not valid options/option values are logged, and command is terminated.\nValidation NumberOption\nValidation is done by the generic method TryParse which is call in the Validate method.\nFileOption\nThe FileOption class overrides the Base class defined Validate method. The actual validation consist in a check for the existence of the specified file.\nThumbPrintOption\nThe ThumbPrintOption class overrides the Base class defined Validate method. The actual validation consist is a check for the existence of a certificate in the \u0026ldquo;LocalStore\u0026rdquo; with same thumbprint as the specified thumbprint.\nClientWrapper The construction of the URL is done in dedicated ClientWrapper classes. A dedicated wrapper shall be made for each command. An Interface that defines all public methods in the wrapper shall be made. The interface shall be implemented in a test wrapper that shall be used in unit testing.\nTest Wrapper The test wrapper shall be coded and configures to make verification of command execution possible without connecting to the actual API. The class will mainly be used in unit testing but can also be used to test with real data. That is best done by catching \u0026ldquo;responses\u0026rdquo;, saving the respons and use it in the test that can load the response file(s).\nHttpClientWrapper The HttpClientWrapper make the HHP(s) requests. The wrapper builds the URL based on input parameter. In addition header with required parameters and tokens is build and attached to the requests that is required for authorization on the server side.\nExtensions Command Adding a new command requires following addtions:\n Command definition on the CommandDefs.json, must include subcommand and options. Command name must be unique. Folder in the development project named with the command name. C# class with name on the command. The class must implement ICommand and IHelp interface Interface which define the methods in the ClientWrapper that will be used by the SubCommandHandler. C# ClientWrapper and a ClientFileWrapper class which implements the ClientWrapper interface. Folder SubCommandHandlers as a subfolder to the new Command folder. C# class for the subcommand which inherits SubCommandHandlerBase and implements ISubCommandHandler and IHelp interface.  SubKommando  Extend command definition with new subcommand definition in CommandDefs.json, include Option definitions Eventually extend ClientWrapper interface with new method(s) which will be used by the new SubCommandHandler Eventually extend C# ClientWrapper and ClientFileWrapper with new methods defined in the interface C# class for the new subcommand which inherits SubCommandHandlerBase and implements ISubCommandHandler and IHelp interface.  Option  Extend subcommand with new option definition in CommandDefs.json Eventuelt utvide ClientWrapper Interface med ny(e) method(s) which will be used by the SubCommandoHandle for å få med nye opsjoner Eventually extend ClientWrapper interface with new methode(s) which will be used by the new SubCommandHandler Eventually extend C# ClientWrapper and ClientFileWrapper with new methods defined in the interface Add handling of the new options, if required, to the SubCommandHandler  None of the extensions shall require changes in the HttpClientWrapp\u0026rsquo;s. New methods shall be added if changes is required to avoid breaking existing code\n"
},
{
	"uri": "https://docs.altinn.studio/tags/solution/",
	"title": "solution",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/",
	"title": "Solutions",
	"tags": [],
	"description": "The latest generation Altinn platform consist of serveral solutions.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-restorage/\u0026quot;\u0026gt;Altinn ReStorage\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn ReStorage is a comand line application that can be used by operators to recover and restore data from Altinn Platform Storage.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-apps/\u0026quot;\u0026gt;Altinn Apps\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Apps is a flexible, scalable and isolated hosting solution where apps created in Altinn Studio is deployed.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/cli/\u0026quot;\u0026gt;Altinn CLI\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn CLI is a command line application that can be used by app owners to access Altinn APIs.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-platform/\u0026quot;\u0026gt;Altinn Platform\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Platform contains components with central functionality that can be used by apps. Currently, this is storage, authentication, authorization, profile, register, receipt, pdf and events.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/\u0026quot;\u0026gt;Altinn Studio\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Altinn Studio is the design-time solution for developing, maintaining, building and deploying applications. Applications created can target both simple and complex user scenarios and have a modern web native architecture.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/tags/sporvalg/",
	"title": "sporvalg",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ssl/",
	"title": "ssl",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/api/storage/",
	"title": "Storage API",
	"tags": [],
	"description": "Description of the Altinn 3 APIs supported by the storage component in the Altinn 3 Platform.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/storage/instances/\u0026quot;\u0026gt;Instances\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Platform API to work with instances\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/storage/instance-events/\u0026quot;\u0026gt;Instance events\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;The Platform API for working with instance events.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/api/storage/spec/\u0026quot;\u0026gt;OpenAPI (swagger) for Storage\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/construction/altinn-platform/storage/",
	"title": "Application Construction components - Storage",
	"tags": ["architecture", "solution"],
	"description": "The storage component is an application hosted in Kubernetes as a Docker container.",
	"content": "API Controllers Storage exposes functionality throug API controllers.\nThe following controllers exist:\n Applications Data InstanceEvents Instances MessageboxInstances Process  Dependencie Storage components\nSee complete list of dependencies in Altinn.Platform.Storage.csproj file for storage.\nDocker configuration Storage listen on port 5010.\nSee DockerFile for details.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/infrastructure/storage/",
	"title": "Storage componentens",
	"tags": ["architecture", "infrastructure"],
	"description": "Altinn 3 uses different types of storage components.",
	"content": "Cosmos DB Azure Cosmos DB is a fully managed NoSQL database for modern app development. Single-digit millisecond response times, and automatic and instant scalability, guarantee speed at any scale. Business continuity is assured with SLA-backed availability and enterprise-grade security.\nAltinn 3 uses Cosmos DB to store metadata about data in Altinn.\n applications: applications dataElements: data elements instanceEvents: instance events instances: instance information leases: used by Azure Functions texts: Applications texts  Azure CosmosDB is configured with one Write Region and one read region. This for redundancy.\nAzure CosmosDB provides automatic backup of the database. This is in additon to our custom backup.\nWe use autoscale to adjust the number of assigned RU.\nRead more about Azure Cosmos DB\nPostgreSQL PostgreSQL is used at a relational database for Altinn Platform Events and for Altinn Repository.\nAzure Blob storage All data stored in Altinn Platform Storage for Apps are stored in a Azure Blob storage. This include formdata and all binary attachments.\nThe data is georeplicated between Norway East and Norway West\nAzure Disks The Kubernetes Cluster uses disks for volumes\nWe use Azure Disk for storage in Kubernetes Cluster\nAzure Container Registries Azure Container Registry is a managed, private Docker registry service based on the open-source Docker Registry 2.0. Create and maintain Azure container registries to store and manage your private Docker container images and related artifacts.\nIn Altinn 3 each org has their own Azure Container Registry where the images build of their applications are stored.\nIn addition the platform itself has their own container registry\nRead more about Azure Container Registry\nAzure Key Vaults Azure Key Vault is a cloud service for securely storing and accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, or cryptographic keys. Key Vault service supports two types of containers: vaults and managed HSM pools. Vaults support storing software and HSM-backed keys, secrets, and certificates.\nEvery organization cluster has two keyvaults. One is target for secrets for applications. Secrets are added by the app developers as self services.\nThe other is targetet for secrets needed to be shared with Altinn Platform. Access token to storage accounts is one example\n"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-platform/storage/",
	"title": "Storage",
	"tags": ["platform", "storage"],
	"description": "The Storage component gives storage capabilities to the apps.",
	"content": "Storage support storage of structured and unstructured data for apps. Apps that need the cabability to store data uses the storage service in the Altinn platform to store both metadata and actual data.\nMetadata Stored in Azure Cosmos Db.\nFormdata and attachments Stored in Azure Blob Storage. One storage account for each application owner.\nAdditional details See Application Architecture for details about the solutions components in Storage.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/storage/",
	"title": "storage",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/community/changelog/storage-interfaces/",
	"title": "Storage Interface changelog",
	"tags": [],
	"description": "Overview of changes introduced to the Altinn.Platform.Storage.Interface NuGet package.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/storage-interfaces/v3/\u0026quot;\u0026gt;v3\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v3 of the Altinn.Platform.Storage.Interface package.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/storage-interfaces/v2/\u0026quot;\u0026gt;v2\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v2 of the Altinn.Platform.Storage.Interface package.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/",
	"title": "Data Structure for Repos",
	"tags": ["altinn-repos", "arkitektur", "todo"],
	"description": "Struktur for repositories og filer i Gitea.",
	"content": "Under arbeid... Her må det gjøres en større opprydding i filstrukturen.\r\rOverordnet struktur Gitea\n├── \raltinn\n│ ├── \rcommon\n│ │ ├── \rtext \u0026hellip;\n│ │ └── \rwidgets \u0026hellip;\n│ │ └── README.md\n│ ├── \rcodelists\n│ │ ├── \rcountries.json\n│ │ └── \r\u0026hellip;\n│ │ └── README.md\n│ └── \r\u0026hellip;\n│\n├── \rorg-x\n│ ├── \rorg-x\n│ │ ├── \rsettings.json\n│ │ ├── \rtext \u0026hellip;\n│ │ ├── \rmodels \u0026hellip;\n│ │ └── \rwidgets \u0026hellip;\n│ │\n│ ├── \rcodelists\n│ │ ├── \rkodeliste1.json\n│ │ └── \r\u0026hellip;\n│ │\n│ ├── \rtjeneste-1\n│ │ ├── \rDeployment (helm)\n│ │ │ ├── \rtemplates\n│ │ │ │ ├── \r_helpers.tpl\n│ │ │ │ ├── \rdeployment.yaml\n│ │ │ │ ├── \ringress.yaml\n│ │ │ │ ├── \rNOTES\n│ │ │ │ └── \rservice.yaml\n│ │ │ ├── \r.helmignore\n│ │ │ ├── \rChart.yaml\n│ │ │ └── \rvalues.yaml\n│ │ ├── \rImplementation\n│ │ │ ├── \rCalculation\n│ │ │ │ └── \rCalculationHandler.cs\n│ │ │ ├── \rInstantiationHandler.cs\n│ │ │ ├── \rServiceImplementation.cs\n│ │ │ └── \rValidationHandler.cs\n│ │ ├── \rMetadata │ │ │ ├── \rapplicationmetadata.json\n│ │ │ ├── \rServiceMetadata.json\n│ │ │ └── \rworkflow.json\n│ │ ├── \rModel\n│ │ │ ├── \rServiceModel.xsd\n│ │ │ └── \rServiceModel.cs\n│ │ ├── \rResources\n│ │ │ ├── \rDynamics\n│ │ │ │ └── \rRuleHandler.js\n│ │ │ ├── \rStyles.json\n│ │ │ ├── \rreact-app.css\n│ │ │ ├── \rreact-app.js │ │ │ ├── \rFormLayout.json\n│ │ │ ├── \rServiceConfigurations.json\n│ │ │ ├── \rresource.nb-NO.json\n│ │ │ └── \rresource.nn-NO.json\n│ │ ├── \rTest (used for runtime)\n│ │ ├── \rTestdataforparty (used for runtime) │ │ │ ├──\r\ruser1 │ │ │ │ ├──\r\rinstance1 │ │ │ │ │ ├──\r\rinstance1.json │ │ │ │ │ ├──\r\rinstance1.state.json │ │ │ │ │ ├──\r\rdata\n│ │ │ │ │ │ ├──\r\rdata-id1 │ │ │ │ │ │ │ ├──\r\rdata-id1.xml\n│ │ │ │ │ │ ├──\r\rdata-id\u0026hellip;\n│ │ ├── \rWorkflow\n│ │ │ └── \rworkflow.bpmn (BPMN)\n│ │ ├── \rApp.csproj │ │ ├── \rconfig.json │ │ ├── .gitignore\n│ │ ├── LICENSE\n│ │ └── README.md\n│ │\n│ └── \rtjeneste-2 \u0026hellip;\n│\n├── \rorg-y\n│ ├── \rorg-y \u0026hellip;\n│ └── \r\u0026hellip;\n│\n├── \rbruker-a\n│ └── \rtjeneste-1 (fork av org-x/tjeneste-1)\n├── \rbruker-b \u0026hellip;\n│\n├── \rAlle organisasjoner\n├── \rAlle repos\n└── \rAlle brukere\n \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/app-csproj/\u0026quot;\u0026gt;App.csproj\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description for App.csproj file.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/application-metadata/\u0026quot;\u0026gt;applicationmetadata.json\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Description of format for application metadata.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/calculationhandler/\u0026quot;\u0026gt;CalculationHandler.cs\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av format for calculation handler.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/form-layout/\u0026quot;\u0026gt;FormLayout.json\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av format for skjema-layout\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/instantiationhandler/\u0026quot;\u0026gt;InstansiationHandler.cs\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av format for InstansiationHandler.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/reactapp/\u0026quot;\u0026gt;react-app.js\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av React-App.js\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/rule-handler/\u0026quot;\u0026gt;RuleHandler.js\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av format for rule handler js filen.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/service-configurations/\u0026quot;\u0026gt;ServiceConfigurations.json\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av format for tjeneste konfigurasjons filen.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/serviceimplementation/\u0026quot;\u0026gt;ServiceImplementation.cs\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av format for tjenesteimplementasjonen.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/servicemetadata/\u0026quot;\u0026gt;ServiceMetadata.json\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av format for ServiceMetadata.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/servicemodel/\u0026quot;\u0026gt;ServiceModel.cs\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av ServiceModel.cs.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/servicemodelxsd/\u0026quot;\u0026gt;ServiceModel.xsd\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av ServiceModel.xsd.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/technology/solutions/altinn-studio/repos/structure/validationhandler/\u0026quot;\u0026gt;ValidationHandler.cs\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Beskrivelse av format for ValidationHandler.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/api/studio/",
	"title": "Altinn Studio Repository API",
	"tags": [],
	"description": "The OpenAPI (swagger) specification for the App source control API.",
	"content": "See https://altinn.studio/repos/api/swagger\n"
},
{
	"uri": "https://docs.altinn.studio/community/devops/teams/studio/",
	"title": "Studio",
	"tags": [],
	"description": "Team Studio works mainly on products related to building and developing Altinn 3 applications.",
	"content": "Responsibilities The Studio team is responsible for the following Altinn 3 products:\n Studio Designer Altinn App  Frontend AppTemplate (backend for Frontend)    This includes building new features, bugfixing, documentation, build and release pipelines, infrastructure and availability and of course making sure it runs in production.\nAltinn Studio Altinn Studio\nKubernetes Wrapper]\nAltinn App Frontend\nAppTemplate\n\r"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/stylecop/",
	"title": "StyleCop",
	"tags": ["tech", "code-quality"],
	"description": "Stylecop analyzer is a code analysis tool for C#.",
	"content": "StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.\nIn Altinn Studio, we have turned set this \u0026ldquo;warning\u0026rdquo; action to \u0026ldquo;Error\u0026rdquo; to enforce the use of rules.\nNuget Package Instructions to install the stylecop analyzer in your project can be found here.\nRuleset A solution wide stylecop ruleset and configuration(stylecop.json) is set for altinn studio application. This can be linked to the projects by linking these files like below in the project. It is set to only work when building in Debug mode.\n\u0026lt;ItemGroup Condition=\u0026#34;\u0026#39;$(Configuration)\u0026#39;==\u0026#39;Debug\u0026#39;\u0026#34;\u0026gt; \u0026lt;PackageReference Include=\u0026#34;StyleCop.Analyzers.Unstable\u0026#34; Version=\u0026#34;1.1.1.61\u0026#34; /\u0026gt; \u0026lt;AdditionalFiles Include=\u0026#34;$(SolutionDir)stylecop.json\u0026#34;\u0026gt; \u0026lt;Link\u0026gt;stylecop.json\u0026lt;/Link\u0026gt; \u0026lt;/AdditionalFiles\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;PropertyGroup Condition=\u0026#34;\u0026#39;$(Configuration)\u0026#39;==\u0026#39;Debug\u0026#39;\u0026#34;\u0026gt; \u0026lt;CodeAnalysisRuleSet\u0026gt;$(SolutionDir)Altinn3.ruleset\u0026lt;/CodeAnalysisRuleSet\u0026gt; \u0026lt;/PropertyGroup\u0026gt; We have turn on the rules that will improve the code quality and maintainability.\nTurn off/Turn on a rule To turn on/off a rule from the ruleset,\n Click on Altinn3.ruleset file in the solution explorer Expand the Stylecop.Analyzers Check/uncheck the rule you want to turn on/off If you are turning on a rule, select the action to be \u0026ldquo;Error\u0026rdquo;  Implemented rules in Altinn Studio The list of rules that are implemented (and not implemented) in altinn studio can be found here.\nLinks  Rule Documentation Configuring Stylecop Analyzer Github  "
},
{
	"uri": "https://docs.altinn.studio/tags/styling/",
	"title": "styling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/swagger/",
	"title": "swagger",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/community/devops/teams/",
	"title": "Teams",
	"tags": [],
	"description": "Our DevOps teams",
	"content": "\rApps\rTeam Apps\n\rPlatform\rThe Platform DevOps team primarily work on and is responsible for the operations of the Altinn 3 platform applications.\n\rStudio\rTeam Studio works mainly on products related to building and developing Altinn 3 applications.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/tech/",
	"title": "tech",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/terms/",
	"title": "Terms",
	"tags": [],
	"description": "Description of the most common terms used in the documentation for Altinn Studio.",
	"content": "Actor A actor is organisation or person that a user/system is acting on behalf of. As an example User A can fill out a form on behalf of Organisation B.\ndeprecated term: Reportee\nActor List The Actor list is a list over person and organisation that a user can act on behalf of. This right is given through roles or rights delegations.\ndeprecated term: ReporteeList\nActor Type The type a Actor can be. Typical a person or organisation but also sub types of organisations.\ndeprecated term: Reportee Type\nActor Type Requirement The requirent a app has for the Actor. Typical checked when a app is instantiated\ndeprecated term: Reportee Type Requirement\nAltinn Norways E-Governement plattform. Launched december 4. 2003. Read more on altinn.no\nAltinn Apps Altinn Apps is the infrastructures for running apps developed in Altinn Studio. Each organisation that is using Altinn Studio will have their own Altinn Apps Kubernetes cluster, isolated from other organisations.\nSee Altinn Apps application architecture or deployment architecture.\nAltinn CLI The command-line interface for the new APIs in Altinn.\nIs used by service owners for retrieving data submitted by users, for instantiating and for updating status.\nhttps://github.com/altinn/altinn-cli/\nAltinn Platform Altinn Platform contains reusable microservices with functionality that can be used by apps. Platform can also be used directly by service owner systems using Altinn CLI and Maskinporten.\nCurrently these microservices are part of Platform: Authorization, Authentication, PDF, Profile, Register, and Storage.\nAltinn Platform is running in its own Kubernetes cluster.\nSee Altinn Platform solution architecture, application architecture and [deployment architecture]\nAltinn environment An Altinn environment is a isolated group of several Altinn solutions functioning together.\n AT - Acceptance testing of Altinn Studio, Altinn Apps, Altinn Platform and SBL. TT02 - App/service test environment used by the app and service owners. Production - The production environment.  Altinn Studio Altinn Studio are our tools for app development.\nConsists of Altinn Studio Designer, Altinn Studio Repos and a local code editor / development tool (e.g. Visual Studio Code).\nLets the developers create, edit, test and deploy applications. The apps are deployed as containers to a seperate infrastructure called Altinn Apps.\nhttps://altinn.studio\nAltinn Studio Designer Altinn Studio Designer is a web-based tool for creating, editing and deploying apps.\nIn Designer, it should be easy to create apps by re-using and configuring pre-made components.\nAltinn Studio Repos Altinn Studio Repos is the solution where each app is stored and versioned as a Git repository.\nNo matter which tool is used for development (Designer, Code, or something else), the app is stored in Repos.\nApi Application Programmers Interface.\nApp Short for Application. App is the name that is given for an app. It is used as repository name and as part of AppId and in different metadata. Inside an org the app needs to be a unique name. See also Application.\nDeprecated terms: AppName Service\nAppId A AppId identifies a given application. It is has the following pattern [org]/[app-name]. The app-name is the same as the name of the name of the app repo.\nApplication An applications created in Altinn Studio is called an app, short for application. Apps are deployed to a Altinn Apps environment. The app provides two things:\n an interactive user interface for users wishing to submit data to an organisation, e.g. to fill out a form manually, to read information or to sign an agreement; an api that client applications can interact with.  The application also has a metadata representation in the application repository (platform storage), which defines the various element types that an instance of an application can have.\ndeprecated term: Service\nApps Short for Altinn Apps. See Altinn Apps\nApplication Developer A user developing application in Altinn Studio.\nOrg Short for organisation. Organisation is the entity responsible for an app. Typically identified by an unique acronym, e.g. SKD, NAV, OSLK.\nDeprecated terms: Application Owner Service Owner\nData A representation of a data element which is stored in the Altinn Platform.\ndeprecated term: FormElement?\nEvent A record of activites on a specific instance.\nInstance An instance of an application for a specific instance owner is represented as an object. Is created by organisation or instance owner. It contains information of the formdata and attachments stored associated with the instance.\ndeprecated term: ReporteeElement\nInstance Owner The person or entity that is responsible for submitting an instance of an application to an organisation.\ndeprecated term: Reportee\nUser The user which is logged in in Altinn and performs actions for on behalf of an instance owner. A user and an instance owner can be the same entity.\nKubernetes A system for managing docker containers. See also: Relevant definitions within Kubernetes\nReact Teh framework used for developing UI components.\nPAP Policy Administration Point.\nPDP Policy Administration Point.\nPEP Policy Administration Point.\nPIP Policy Information Point.\nPRP Policy Retrieval Point.\nSBL The Altinn 2 end user solution (SluttBrukerLøsning).\nSBL Bridge Applicaton that exposes SBL components as REST interface to Altinn Platform components. See all issues on GitHub related to SBL Bridge.\nStatefull App A statefull app uses Altinn Platform to store data\nStateless App A stateless app is a application where no data is store in in the platform. This could be a app acting like a proxy to some external APIS. State could potensial be stored in the external API, so term statless is limited to how the App not use any state in Altinn Platform.\nProcess The set of tasks a certain app is made of, i.e. data, signing, payment etc. In Altinn Studio we use a *.bpmn file for the process.\ndeprecated term: Workflow\nXACML XACML stands for \u0026ldquo;eXtensible Access Control Markup Language\u0026rdquo;. The standard defines a declarative fine-grained, attribute-based access control policy language,[2] an architecture, and a processing model describing how to evaluate access requests according to the rules defined in policies.\nAltinn Studio Apps uses the XACML standard for defining Policies for apps, the authorization architecture, and the request and response between PEP and PDP.\n\r"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/terraform/",
	"title": "Terraform",
	"tags": ["tech", "programming"],
	"description": "Infrastructure as Code to provision and manage any cloud, infrastructure, or service.",
	"content": "We\u0026rsquo;re using Terraform to provision all Kubernetes clusters and other infrastructure.\nLinks  https://www.terraform.io https://github.com/hashicorp/terraform https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform  "
},
{
	"uri": "https://docs.altinn.studio/tags/test/",
	"title": "test",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/app/testing/local/testusers/",
	"title": "Test-user for local testing",
	"tags": ["translate-to-english"],
	"description": "We have defined a small set of test users available for local test.",
	"content": "Disse kan man velge når man logger inn i lokal test.\nSophie Salt Sophie er en svært driftig dame som bor i Oslo. Hun har startet en kjede med treningsententer som heter DDG Fitness og til nå er det startet 3 underenheter i Oslo, Bergen og Trondheim. Sophie har rollen DAGL og dens underroller for DDG Fitness AS og dens underhenheter.\nI tilegg er hun ekspert på helse og har startet eget konsulentfirma for helsetjenester. Sophie har rollen LEDE + knyttede roller for EAS Health Consulting.\nHun er også styremedlem i borettslaget der hun bor. \u0026ldquo;Oslos Vakreste Borettslag\u0026rdquo;. Sophie har rollen MEDL + knyttede roller for \u0026ldquo;Oslos Vakreste Borettslag\u0026rdquo;.\nAvgivere    Avgiver Roller     01039012345 Sophie Salt Privatperson   897069650 DDG Fitness AS Daglig leder + knytninger   897069651 DDG Fitness Bergen Daglig leder + knytninger   897069652 DDG Fitness Oslo Daglig leder + knytninger   897069653 DDG Fitness Trondheim Daglig leder + knytninger   897069631 EAS Health Consulting Styreleder + knytninger   950474084 Oslos Vakreste Borettslag Styremedlem + knytninger    Ola Nordmann. Ola Nordmann er en privatperson som kun kan representere seg selv. Er bosatt på Stokmarknes.\nAvgivere  01017512345 Ola Nordmann  "
},
{
	"uri": "https://docs.altinn.studio/tags/testing/",
	"title": "testing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/text/",
	"title": "Text and translations",
	"tags": ["todo"],
	"description": "Using texts when designing UI, defining workflow, other settings, deploy, and more.",
	"content": "Text editing and translations Easy and efficient text processing and translation are important in an app development solution. The possibility to reuse texts across multiple apps are especially important.\nTexts in the editor are written in a ini-file that is converted to a simple JSON-file and presented as an API. In that way the user could work directly in the code editor or convert the text into other formats supported by external translation tools. Meaning that Altinn Studio supports any language that is added, not just languages supported by the Altinn portal.\n Definition of texts using hierarchical and readable keys Reusable texts, internal across different pages and on the levels above the solution Possibility to add other languages  Using lanuage keys in the solution Lanuage keys are references in the react-code with the help of a the language method getLanguageFromKey found in src/react-apps/applications/shared/src/utils/lanauge.ts. This method is called in the following way:\ngetLanguageFromKey(\u0026#39;universal_key.lanuage_key\u0026#39;, this.props.language) Where the first param is the language key and the second is the language element. If you call this.props.language.universal_key.lanuage_key you should get the key value\nHow to add a new language  Make a new ini-file and place it in AltinnCore \u0026gt; Common \u0026gt; Languages \u0026gt; ini Change the parameter \u0026ldquo;languageCode\u0026rdquo; in the API call to whatever name your ini file is called.  Example for Norweigan bokmål (nb):  http://altinn3.no/designer/y/types/Language/getLanguageAsJSON?languageCode=nb  Guides for language files  Keys are sorted by which app they belong to Universal keys ([general]) are placed at the top of the file Keys are sorted alphabetically Keys are written in lowercase with underscores (example_key)  Language best practice Summary  Name should describe the content of the value. Section should describe the context (might be page, container or component). If your name also describes the page, container or component, you might want to create a new section.  Keys (properties) Every key, or property, has a name and a value.\n Names should be short and not context based (context should be in section) Names should not describe presentational functionality like modal or popover.  Example:\n[good_example_1] ready_to_deploy_title_false = Text... [bad_example_1] app_is_ready_to_deploy_title_false = Text... [good_example_2] repo_changes_is_invisible = Text... [bad_example_2] changes_made_by_others_in_your_organisation_is_not_visible_in_altinn_studio = Text... Text parts If your text has several parts, suffix with \u0026ldquo;part1\u0026rdquo;, \u0026ldquo;part2\u0026rdquo;, \u0026ldquo;partN\u0026rdquo;.\nExample:\n[deploy_to_test] error_environment_failure_part1 = Det er noe galt med ditt error_environment_failture_part2 = -miljø. Vennligst kontakt support. Titles, subtitles and bodies If your title has associated text you should use suffixes like: \u0026ldquo;heading/title\u0026rdquo;, \u0026ldquo;subheading/subtitle\u0026rdquo;, and \u0026ldquo;body\u0026rdquo;.\nExample:\n[great_component] welcome_body = Welcome to this great component welcome_heading = Hello world welcome_subheading = Small text below the title Sorting Naming should be used so that related keys/properties are grouped when sorted alphabetically.\nTrue / false If your text has positive or negative text related to logic, suffix with true/false. This will group keys when sorting.\nExample:\n[section] ;Grouping category_repo_read_true = Andre tjenester category_repo_read_false = Du har ikke rettigheter til... ready_to_deploy_title_false = Tjenesten er IKKE klar til å legges ut i testmiljø ready_to_deploy_title_true = Tjenesten er klar til å legges ut i testmiljø [section] ;No grouping category_repo_read = Andre apps category_repo_write = Du har rettigheter til å endre disse appene main_header = Tjenesteoversikt no_category_repo_read = Du har ikke rettigheter til... no_category_repo_write = Du har ikke skriverettigheter til... Errors If there is an error, you should prefix or suffix the key with \u0026ldquo;error\u0026rdquo;. If grouping when alphabetizing is important, use suffix.\nExample:\n[no_grouping] error_a_problem_has_occured = Det har oppstått et problem [grouping] file_uploader_validation_error_delete = Noe gikk galt under slettingen av filen, prøv igjen senere. file_uploader_validation_error_file_ending = er ikke blant de tillatte filtypene. file_uploader_validation_error_file_size = overskrider tillatt filstørrelse. Sections [sections] Sections are used to categorize keys (properties) that belong together. It may be a page, container or component.\nExamples [general] [dashboard] [sync_header] [general] [dashboard] [sync_header] Try to not use application wide sections that might need container or component reference in the key name.\nSee all issues related to text and language on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/texts/",
	"title": "texts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/theming/",
	"title": "Theming and styling",
	"tags": [],
	"description": "Solution for theming and styling conventions.",
	"content": "Altinn Studio is based on Material-UI, a UI components library that focus exclusively on the React library. At this point the SBL-forms are based on Bootstrap. This might change in the future in order to support more sophisticated forms and the possibilty to write forms in other languages than React + Bootstrap.\nBoth the forms that are produced and the editor will have the possibilty to change theme. By default Altinn Studio will use the Altinn theme. The theme will at this point only change colors and fonts in Altinn Studio. The colors are base on the altinn color palette.\nCSS Components are devided into two groups. Shared components that is used several times and should be accessible for several apps. And components that are specific for one app or view. CSS for a component is set in its representative tsx-file with paramethers linking to the theme.\nHow to change theme Changing the theme without having to do alot of changes to the code is post-MVP.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/third-party-tools/",
	"title": "third party tools",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/tls/",
	"title": "tls",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/todo/",
	"title": "todo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/tools/",
	"title": "Tools and frameworks",
	"tags": ["tech"],
	"description": "The open source tech used in Altinn Studio, Altinn Apps and Altinn Platform.",
	"content": "\r.NET Core\rServer side development framework.\n\rAlpine Linux\rAlpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.\n\rBPMN\rBusiness Process Model and Notation.\n\rC#\rServer side programming language.\n\rDocker\rDocker is the container technology used in Altinn Studio, Altinn Apps and Altinn Platform.\n\rGit\rGit is a distributed version-control system for tracking changes in source code during software development.\n\rGitea\rGitea is a self-hosted Git service similar to GitHub. It is used as the repository solution in Altinn Studio Repos.\n\rGo\rServer side programming language.\n\rGrafana\rGrafana is an open platform for analytics and monitoring.\n\rHelm\rThe Kubernetes Package Manager.\n\rHugo\rStatic site generator used for our documentation.\n\rJest\rJavaScript Testing Framework.\n\rKubernetes\rKubernetes is used to manage the docker containers.\n\rMarkdown\rMarkdown is a text-to-HTML conversion tool for web writers, created in 2004 by John Gruber.\n\rMaterial UI\rA popular React UI library used in Altinn Studio.\n\rNginx\rLoad balancer currently used for routing traffic between Repos and Designer.\n\rNode.js\rNode.js is a JavaScript runtime built on Chrome\u0026#39;s V8 JavaScript engine.\n\rPrometheus\rPrometheus is an open-source systems monitoring and alerting toolkit.\n\rReact\rModulært rammeverk for å utvikle UI komponenter og SPA applikasjoner.\n\rStyleCop\rStylecop analyzer is a code analysis tool for C#.\n\rTerraform\rInfrastructure as Code to provision and manage any cloud, infrastructure, or service.\n\rTraefik\rContainer load balancer.\n\rTypeScript\rTypeScript is a superset of JavaScript that compiles to clean JavaScript output.\n\rVisual Studio Code\rVisual Studio Code is a lightweight source code editor which runs on your desktop.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/technology/tools/traefik/",
	"title": "Traefik",
	"tags": ["tech", "containers", "load-balancer"],
	"description": "Container load balancer.",
	"content": "Traefik is used for load balancing in Altinn Apps and Altinn Platform. It routes traffic based on tags on the app containers.\nLinks  https://traefik.io https://github.com/containous/traefik https://hub.docker.com/_/traefik  "
},
{
	"uri": "https://docs.altinn.studio/tags/traefik/",
	"title": "traefik",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/training/",
	"title": "training",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/translate-to-english/",
	"title": "translate-to-english",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/translate-to-norwegian/",
	"title": "translate-to-norwegian",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/community/contributing/handbook/troubleshooting/",
	"title": "Troubleshooting",
	"tags": ["development"],
	"description": "Troubleshooting of Altinn Studio.",
	"content": "Altinn.studio is under heavy development and errors are most likely to come with it. \rIf the error is not covered here, please submit a bug report.\n Check out Flight Rules. Check out known issues:  Altinn Studio Front-end App libraries    "
},
{
	"uri": "https://docs.altinn.studio/technology/tools/typescript/",
	"title": "TypeScript",
	"tags": ["tech", "programming"],
	"description": "TypeScript is a superset of JavaScript that compiles to clean JavaScript output.",
	"content": "Med javascript er følgende en lovlig handling:\nvar foo = false; foo = \u0026#34;bar\u0026#34;; Dette ville gitt en TypeError i TypeScript, og koden ville ikke blitt kompilert til JavaScript.\nTypescript kompileres til JavaScript, så klienten kjører aldri TypeScript koden. Typescript er til for at utvikleren ikke skal lage bugs ved å endre typer på variabler.\nLinks  http://www.typescriptlang.org https://github.com/Microsoft/TypeScript  "
},
{
	"uri": "https://docs.altinn.studio/tags/ui/",
	"title": "ui",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/build-app/ui-designer/",
	"title": "UI Design",
	"tags": [],
	"description": "The UI-designer is the part of Altinn Studio where the developer can create UI for the app.",
	"content": "The possibility to effectly build a user friendly user interface for an app, is an essential feature for Altinn Studio. This is one of the more complex functionalities developed as part of Altinn Studio.\nThe UI-designer has the following functionality:\n Define a detailed layout (responsive design)  Add reusable form components  Configure form components  Connection to data model Connection to texts/translations       Define/configure connections to external API Define/configure rules for validation, calculation and dynamics  Form components The form components are reusable components that are used to build the user interface of the app. Examples include input fields and title components. See a list of all available form components here.\nIt is also possible to define custom components and use this in the app.\nMultiple form layouts In the future Altinn Studio will support creating different UI for seperate datamodels for sub forms or forms in seperate form filling task in a process.\nSee all Github issues for UI-editor.\n"
},
{
	"uri": "https://docs.altinn.studio/app/getting-started/navigation/designer/ui-editor/",
	"title": "UI editor",
	"tags": ["translate-to-english"],
	"description": "How to build a form with UI Editor in Altinn Studio.",
	"content": "Bygge et skjema ved bruk av UI editor UI Editor er tilgjengelig i fanen Lage når man er inne i en app i Altinn Studio.\nBruke skjemakomponenter Skjemakomponentene kan trekkes inn i arbeidsområdet (i midten) fra menyen til venstre. Man kan deretter endre rekkefølgen på dem ved hjelp av drag and drop i arbeidsområdet.\nNår du holder muspekeren over en komponent, eller når du velger den ved å klikke på den, blir to ikoner synlig - et søppelbøtte-ikon for å slette komponenten, og et blyant-ikon for å endre på egenskapene til komponenten.\nSe oversikten over skjemakomponenter for mer detaljer om komponentene som er tilgjengelig.\nRedigere egenskapene til komponentene Hver komponent har et sett med egenskaper som kan redigeres, for eksempel kobling til tekster og kobling til datamodell osv. For å endre på egenskapene, klikk blyant-ikonet som vises når du holder musepekeren over komponenten du vil endre på.\nGjør deretter endringene du ønsker, og lagre dem ved å klikke på hake-ikonet til høyre for egenskapsredigeringen. Du kan forkaste endringene ved å klikke på kryss-ikonet.\nMERK: UI-editoren og kompoentene er under utvikling. Det vil derfor være perioder der ikke alle egenskaper kan settes i UI-editor.\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/ui-components/",
	"title": "ui-components",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ui-designer/",
	"title": "ui-designer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/community/changelog/deployment/v1/",
	"title": "v1",
	"tags": [],
	"description": "Overview of changes introduced in v1 of deployment.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/deployment/v1/breaking-changes/\u0026quot;\u0026gt;Breaking changes\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of breaking changes introduced into deployment in v1.0.0\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/deployment/v1/whats-new/\u0026quot;\u0026gt;What\u0026amp;#39;s new\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v1 of deployment.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/deployment/v2/",
	"title": "v2",
	"tags": [],
	"description": "Overview of changes introduced in v2 of deployment.",
	"content": " \u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/deployment/v2/breaking-changes/\u0026quot;\u0026gt;Breaking changes\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of breaking changes introduced into deployment in v2.0.0\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\u0026lt;li\u0026gt;\r\u0026lt;a href=\u0026quot;/community/changelog/deployment/v2/whats-new/\u0026quot;\u0026gt;What\u0026amp;#39;s new\u0026lt;/a\u0026gt;\r\u0026lt;p\u0026gt;Overview of changes introduced in v2 of deployment.\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r \r"
},
{
	"uri": "https://docs.altinn.studio/app/development/logic/validation/",
	"title": "Validation",
	"tags": [],
	"description": "How to add logic to validate form data?",
	"content": "Introduction Validations ensures that the user\u0026rsquo;s input is valid with regard to the data model, in addition to all custom rules that are set up for the application. Validations can be run either on the client- (the browser) or the server-side.\nClient-side validation This is validation that is run in the browser, before data is sent to server for saving. This makes it possible to give quick feedback to the user during the fillout process.\nClient-side validation is based on the data model of the form, and uses this to determine what is valid input in a field. Specifically, the JSON schema version of the data model is used for validation. This is automatically generated when uploading an XSD. It is possible to make changes in the JSON schema file directly to adapt the validation when needed.\nNote that if you make changes in the JSON schema manually, and then update the XSD and reupload it, a new JSON schema will also be generated and all manual adaptations will have to be remade. It is therefore recommended to make changes in the XSD and/or the data modeling tool for these changes to be reflected in the JSON schema.\nAn example of how a field can be defined in the JSON schema data model is:\n\u0026#34;someField\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;maxLength\u0026#34;: \u0026#34;4\u0026#34; } Input in this field will be validated towards the limits that are set, and an error message will appear if these are not met - in this case, if input is a text longer than four characters.\nDefault error messages Default error messages has been set up for all validations done on the client-side. See the overview below.\n   Rule Error message bokmål Error message nynorsk Error message english     min \u0026lsquo;Minste gyldig verdi er {0}\u0026rsquo; \u0026lsquo;Minste gyldig verdi er {0}\u0026rsquo; \u0026lsquo;Minimum valid value is {0}\u0026rsquo;   max \u0026lsquo;Største gyldig verdi er {0}\u0026rsquo; \u0026lsquo;Største gyldig verdi er {0}\u0026rsquo; \u0026lsquo;Maximum valid value is {0}\u0026rsquo;   minLength \u0026lsquo;Bruk {0} eller flere tegn\u0026rsquo; \u0026lsquo;Bruk {0} eller flere tegn\u0026rsquo; \u0026lsquo;Use {0} or more characters\u0026rsquo;   maxLength \u0026lsquo;Bruk {0} eller færre tegn\u0026rsquo; \u0026lsquo;Bruk {0} eller færre tegn\u0026rsquo; \u0026lsquo;Use {0} or fewer characters\u0026rsquo;   length \u0026lsquo;Antall tillatte tegn er {0}\u0026rsquo; \u0026lsquo;Antall tillatte tegn er {0}\u0026rsquo; \u0026lsquo;Number of characters allowed is {0}\u0026rsquo;   pattern \u0026lsquo;Feil format eller verdi\u0026rsquo; \u0026lsquo;Feil format eller verdi\u0026rsquo; \u0026lsquo;Wrong format or value\u0026rsquo;   required \u0026lsquo;Du må fylle ut {0}\u0026rsquo; \u0026lsquo;Du må fylle ut {0}\u0026rsquo; \u0026lsquo;You have to fill out {0}\u0026rsquo;   enum \u0026lsquo;Kun verdiene {0} er tillatt\u0026rsquo; \u0026lsquo;Kun verdiene {0} er tillatt\u0026rsquo; \u0026lsquo;Only the values {0} are permitted\u0026rsquo;    More about error messages for required fields The error message for required fields is as defined above, \u0026ldquo;You have to fill out {0}\u0026quot;. The {0} symbol is replaced with the field that the error message is shown for. This is done in the following way:\n If shortName text is defined for the component, this is used. This is a new text that is currently used only for this specific error message. If the shortName text is not defined, the title text for the component is used - this is the components label text. In some special cases (Address component) where there are multiple fields within the component, the default labels for the fields is used.  Example: Component with only title { \u0026#34;id\u0026#34;: \u0026#34;firstName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;text-firstName\u0026#34; }, ... //etc } With resource texts:\n... { \u0026#34;id\u0026#34;: \u0026#34;text-firstName\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;First name\u0026#34; } The error message would then be \u0026quot;You have to fill out First name\u0026quot;.\nExample: Component with shortName If the field\u0026rsquo;s prompt is long or not suitable for use in the validation message, you can add a shortName text that can be used instead. Note that this only applies to this specific validation message - the shortName text is not used otherwise in the solution as of now.\n{ \u0026#34;id\u0026#34;: \u0026#34;firstName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;text-firstName\u0026#34;, \u0026#34;shortName\u0026#34;: \u0026#34;firstName-short\u0026#34;, }, ... //etc } With resource texts:\n... { \u0026#34;id\u0026#34;: \u0026#34;text-firstName\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Please type your first name in the field below:\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;firstName-short\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;your first name\u0026#34; } The error message would then be \u0026quot;You have to fill out your first name\u0026quot;.\nCustom error messages It is possible to define custom error messages that will be displayed when a field doesn\u0026rsquo;t pass the validation check. This is done by including a parameter errorMessage where the field is defined in the JSON schema. The JSON schema file is in the folder App/models and has a naming patterns as follows; *.schema.json,\nAn example of how to extend the example previously presented with a custom error message:\n\u0026#34;someField\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;maxLength\u0026#34;: \u0026#34;4\u0026#34;, \u0026#34;errorMessage\u0026#34;: \u0026#34;myCustomError\u0026#34; } The error text can be included directly. To enable language support, add a text key for a text defined in the resource files.\nNotice that if you have a reference to a definition the error message must be added to the property-field and not the reference/definition. Example:\n{ \u0026#34;properties\u0026#34;: { \u0026#34;person\u0026#34;: { \u0026#34;$ref\u0026#34; : \u0026#34;#/definitions/personDefinition\u0026#34;, \u0026#34;errorMessage\u0026#34;: \u0026#34;myCustomError\u0026#34;,  } }, \u0026#34;definitions\u0026#34;: { \u0026#34;personDefinition\u0026#34; : { \u0026#34;age\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;number\u0026#34; }, ... } } Note that when the XSD is changed, the custom error messages will de removed from the JSON schema.\rIn the future, there will be support for setting custom error messages in the data modelling tool in Altinn Studio. But for now, this is a manual job.\r\rServer-side validation Server-side validation can be split into two categories:\n Validations against data model - These run automatically whenever the user attempts to submit form data. Custom validations - these are written by the application developer, and run when the user attempts to submit form data or move the process to a new step.  How to add custom validation Custom validation can also be split into two categories; task-validation and data-validation.\n Task-validation will run each time validation is triggered either manually from the application or when you attempt to move forward in the process. Data-validation will run if you\u0026rsquo;re on a step that has defined data elements associated with it.  Validations are written in C#, in the ValidationHandler.cs-file in the application template. The file can be accessed and edited in Altinn Studio through the logic menu, by selecting Rediger valideringer, or directly in the application repo where the file is under the logic/Validation-folder.\nChanges are made in the ValidateData and ValidateTask-methods (these are empty when the app is made). The former takes in a data object and the latter takes in the instance and taskId. To add a validation error, the AddModelError-method of the validationResult-object, which is a parameter in both methods, is used.\nAn example of a simple data validation that tests that the field FirstName does not contain the value 1337, when the root element of the model is Skjema is shown below:\npublic void ValidateData(object data, ModelStateDictionary validationResults) { if (data.GetType() == typeof(Skjema)) { // Cast instance data to model type  Skjema model = (Skjema)data; // Get value to test - FirstName  string firstName = Skjema?.Person?.FirstName; // Check if FirstName exists, and contains the value \u0026#34;1337\u0026#34;  if (firstName != null \u0026amp;\u0026amp; firstName.Contains(\u0026#34;1337\u0026#34;))  { // Add validation error, with error message and list  // of affected fields (in this case Person.FirstName)  validationResults.AddModelError( \u0026#34;Person.FirstName\u0026#34;, \u0026#34;Error: First name cannot contain the value \u0026#39;1337\u0026#39;.\u0026#34; ); } } } See comments in code above for an expnation of what the different parts do.\nIn the other parameter of the method AddModelError, where it says \u0026ldquo;Error: First name cannot contain the value \u0026lsquo;1337\u0026rsquo;\u0026rdquo;, you can use a text key for a text defined in the resource files for multilingual support.\nAn example of a simple task validation that checks how long the user spent on Task_1 and returns an error if there has gone more than three days:\npublic async Task ValidateTask(Instance instance, string taskId, ModelStateDictionary validationResults) { if (taskId.Equals(\u0026#34;Task_1\u0026#34;)) { DateTime deadline = ((DateTime)instance.Created).AddDays(3); if (DateTime.UtcNow \u0026lt; deadline)  { validationResults.AddModelError(\u0026#34;Task_1\u0026#34;, $\u0026#34;Completion of Task_1 has taken too long. Please start over.\u0026#34;); } } } Single field validation If there is a need for immediate validation of a field that can not be covered in the client side validation, you can set up a trigger for validation on single fields in formLayout.json\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;3611fb2a-c06b-4fa7-a400-3f6c1ece64e1\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;25795.OppgavegiverNavnPreutfyltdatadef25795.Label\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;etatid\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;triggers\u0026#34;: [\u0026#34;validation\u0026#34;] , // \u0026lt;--- Add this field  }, { \u0026#34;id\u0026#34;: \u0026#34;9ec368da-d6a9-4fbd-94d0-b4dfa8891981\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Button\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Button\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;textResourceId\u0026#34;: \u0026#34;Standard.Button.Button\u0026#34;, \u0026#34;customType\u0026#34;: \u0026#34;Standard\u0026#34; } ] } } Note that if you define a field to trigger validation server-side, only the result of this validation will be displayed. Meaning,\rif there is another client-side validation defined, a possible server-side validation of the field will overwrite these. Therefore, you should make sure\rto implement all necessary validations on the server-side as well. It is possible to attach multiple error messages to the same field if needed.\r\rThe configuration above will result in your own custom validation in ValidationHandler.cs being triggered each time the field is updated. If you need to know which field triggered the validation, this is available in the http-context as a header of the request named ValidationTriggerField.\nAn example of a custom validation where the header value is retrieved is shown below.\npublic async Task ValidateData(object data, ModelStateDictionary validationResults) { _httpContextAccessor.HttpContext.Request.Headers.TryGetValue(\u0026#34;ValidationTriggerField\u0026#34;, out StringValues value); if (value.Count \u0026gt; 0 \u0026amp;\u0026amp; value[0].Equals(\u0026#34;kommune\u0026#34;)) { // Cast instance data to model type  flyttemelding model = (flyttemelding)data; // Get value to test - Kommune  string kommune = model.kommune; if (!kommune.Equals(\u0026#34;Oslo\u0026#34;)) { validationResults.AddModelError(value[0], \u0026#34;This is not a valid municipality.\u0026#34;); } } await Task.CompletedTask; } NOTE validation of single fields should be implemented in a way where it is both run on triggers and during general validation. The example that revolves multiple complex validations show how this can be implemented.\nSeveral things has been done to get this code to run\n In ValidationHandler.cs using Microsoft.Extensions.Primitives; is included at the top of the file to be able to use StringValues. In App.cs using Microsoft.AspNetCore.Http; is included at the top of the file to be able to use IHttpContextAccessor. In App.cs IHttpContextAccessor is dependency injected in the constructor and passed along to ValidationHandler.  public App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService, IHttpContextAccessor httpContextAccessor // \u0026lt;--- Add this line  ) : base(appResourcesService, logger, dataService, processService, pdfService, prefillService) { _logger = logger; _validationHandler = new ValidationHandler(httpContextAccessor); // \u0026lt;--- Include the new property here  _calculationHandler = new CalculationHandler(); _instantiationHandler = new InstantiationHandler(profileService, registerService); } If there are multiple complex validations that are time consuming, it is recommended to implement several private methods to validate these and use ValidationTriggerField to determine which private method is to be run. You can e.g. use a switch statement to accomplish this.\npublic async Task ValidateData(object data, ModelStateDictionary validationResults) { if (data is flyttemelding model) { _httpContextAccessor.HttpContext.Request.Headers .TryGetValue(\u0026#34;ValidationTriggerField\u0026#34;, out StringValues value); string dataField = value.Any() ? value[0] : string.Empty; switch (dataField) { case \u0026#34;kommune\u0026#34;: ValidateKommune(model, validationResults); break; case \u0026#34;boaddresse\u0026#34;: ValidateBoAdresse(model, validationResults); break; default: ValidateKommune(model, validationResults); ValidateBoAdresse(model, validationResults); break; } } } private void ValidateKommune(flyttemelding model, ModelStateDictionary validationResults) { if (model.kommune != null \u0026amp;\u0026amp; !model.kommune.Equals(\u0026#34;Oslo\u0026#34;)) { validationResults.AddModelError( nameof(model.kommune), \u0026#34;This is not a valid municipality.\u0026#34;); } } private void ValidateBoAdresse(flyttemelding model, ModelStateDictionary validationResults) { if (model.boaddresse != null \u0026amp;\u0026amp; model.boaddresse.Length \u0026gt; 150) { validationResults.AddModelError( nameof(model.boaddresse), \u0026#34;Address can not be longer than 150 characters.\u0026#34;); } } Specify that validation errors are fixed When validation is triggered by a single field, all former validations on this field will be removed pending a response from the last validation. If a field triggers validation that updates/adds an error message to multiple fields at once, these will not be removed even when there no longer are any errors in these fields. This is because there is no way to know which fields may have been validated through a single field validation.\nFor example, if you have two fields; first name and last name. Both fields trigger single field validation, and if both fields have a value, you can validate that the full name can not be longer than 50 characters. An error message is then set on both fields. If you correct this by changing the first name, the error message from first name will disappear, but the error message on the last name field will still be displayed even though the validation does not set any error messages on the fields.\nprivate void ValidateFullName(Datamodell model, ModelStateDictionary validationResults) { if (!string.isNullOrEmpty(model.fornavn) \u0026amp;\u0026amp; !string.isNullOrEmpty(model.etternavn) \u0026amp;\u0026amp; model.fornavn.Length + model.etternavn.Length \u0026gt; 50) { validationResults.addModelError(nameof(model.fornavn), \u0026#34;Full name can not be longer than 50 characters.\u0026#34;); validationResults.addModelError(nameof(model.etternavn), \u0026#34;Full name can not be longer than 50 characters.\u0026#34;); } } To be able to remove old error messages in a case like this, there has been added support to be able to specify that a validation error has been fixed. Then, the field in question will be able to be notified that a specific error message that it is displaying has been fixed and can now be hidden.\nThis is done by adding a validation error in the code in the case where there are no errors in the validation, and set *FIXED* in front of the error message itself. This corresponds to the setup for soft validation. This prefix causes the error message that is set to be removed from the field in question, or ignored (if there is no error message on the field already).\nYou can now expand the example above to support this:\nprivate void ValidateFullName(Datamodell model, ModelStateDictionary validationResults) { if (!string.isNullOrEmpty(model.fornavn) \u0026amp;\u0026amp; !string.isNullOrEmpty(model.etternavn) \u0026amp;\u0026amp; model.fornavn.Length + model.etternavn.Length \u0026gt; 50) { validationResults.addModelError(nameof(model.fornavn), \u0026#34;Full name can not be longer than 50 characters.\u0026#34;); validationResults.addModelError(nameof(model.etternavn), \u0026#34;Full name can not be longer than 50 characters.\u0026#34;); } else { validationResults.addModelError(nameof(model.fornavn), \u0026#34;*FIXED*Full name can not be longer than 50 characters.\u0026#34;);  validationResults.addModelError(nameof(model.etternavn), \u0026#34;*FIXED*Full name can not be longer than 50 characters.\u0026#34;);  } } Soft validations Soft validations are validation messages that does not stop the user from submitting or move onto the next step of the process, but that are used to give the user different forms of information. These types of validations can for example be used to ask the user to verify input that seems wrong or strange, but which strictly speaking is not invalid, or give useful information for further filling out the form.\nMessages based on soft validation will be displayed once, but the user can choose to move on without making any changes.\nSoft validations are added from the server-side the application logic, in the same way as regular validation errors. The difference is that the validation message must be prefixed with the type of validation you want to give, e.g. *WARNING*. This will be interpreted as a soft validation. The prefix *WARNING* will not be displayed for the user.\nThe different types of soft validations are WARNING, INFO and SUCCESS.\nCode example\npublic async Task ValidateData(object data, ModelStateDictionary modelState) { if (data is TestModel testModel) { string firstName = testModel?.Person?.FirstName; if (firstName != null \u0026amp;\u0026amp; firstName.Contains(\u0026#34;1337\u0026#34;)) { validationResults.AddModelError( \u0026#34;Person.FirstName\u0026#34;, \u0026#34;*WARNING*Are you sure your first name contains 1337?\u0026#34;); } if (firstName != null \u0026amp;\u0026amp; firstname.Contains(\u0026#34;Altinn\u0026#34;)) { validationResults.AddModelError( \u0026#34;Person.FirstName\u0026#34;, \u0026#34;*SUCCESS*Altinn is a great name!\u0026#34;); } } await Task.CompletedTask; } Examples on display of different validations below:\nIt is also possible to overrule the title you see on the messages by adding the keys soft_validation.info_title, soft_validation.warning_title, and soft_validation.success_title in the text resources if you want to set a custom title.\nGroup validation It is possible to apply validations to a repeating group when the user saves a row in the group. This can be done by adding a trigger on the group component in the layout file (e.g. FormLayout.json). Example:\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;demo-gruppe\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Group\u0026#34;, \u0026#34;children\u0026#34;: [ \u0026#34;...\u0026#34; ], \u0026#34;maxCount\u0026#34;: 3, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;group\u0026#34;: \u0026#34;Endringsmelding-grp-9786.OversiktOverEndringene-grp-9788\u0026#34; }, \u0026#34;triggers\u0026#34;: [\u0026#34;validation\u0026#34;] // \u0026lt;--- Add this  }, ... ] } } This will ensure that validation is run on the components that are a part of the group on the index you\u0026rsquo;re working on. If there are validation errors you will be stopped from saving the group until this has been corrected.\nIf you add validation on the group component, a call will be made towards the validation back-end with a header specifying which component triggered the validation: ComponentId. Validations are written in C# in the ValidationHandler.cs-file in the application template. In the validation, you can then retrieve this id and tailor possible validations that should run back-end, example:\npublic async Task ValidateData(object data, ModelStateDictionary validationResults) { if (data is flyttemelding model)) { _httpContextAccessor.HttpContext.Request.Headers .TryGetValue(\u0026#34;ComponentId\u0026#34;, out StringValues value); string component = value.Any() ? value[0] : string.Empty; switch (component) { case \u0026#34;demo-group\u0026#34;: // run validations specific to the group  break; default: // run the validations in their entirety  break; } } } For tips on how you solve complex validations, see the examples under single field validation.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/validation/",
	"title": "validation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/repos/structure/validationhandler/",
	"title": "ValidationHandler.cs",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for ValidationHandler.",
	"content": "Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes\rvidere med i MVP.\r\rOverordnet \u0026lsquo;ValidationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som gjør valideringer\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom ValidationnHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/tags/validering/",
	"title": "validering",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/solutions/altinn-studio/designer/functional/version-control/",
	"title": "Version Control",
	"tags": ["todo"],
	"description": "In Altinn Studio a developer can perform version control operation on the source code for the app",
	"content": "Clone Push \u0026amp; Commit Pull Handle Merge conflict See all issues on Github for Version Control\n"
},
{
	"uri": "https://docs.altinn.studio/tags/versioning/",
	"title": "versioning",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/tools/vs-code/",
	"title": "Visual Studio Code",
	"tags": ["tech", "git", "programming"],
	"description": "Visual Studio Code is a lightweight source code editor which runs on your desktop.",
	"content": "Visual Studio Code is a lightweight and extendable code editor which runs on your desktop and is available for Windows, macOS and Linux.\nWe use it when developing Altinn 3, and it can be used for editing files from Altinn Studio Repos locally using the built-in Git support.\nAltinn ❤️ vscode.\nLanguages and tech VS Code comes with support for hundreds of languages and technologies, including all the ones that are relevant in Altinn 3:\n C# CSS Docker GitHub Go HTML Java JavaScript JSON Kubernetes Markdown .NET Core Node.js React and JSX Terraform TypeScript  Links  https://code.visualstudio.com https://github.com/Microsoft/vscode Marketplace  "
},
{
	"uri": "https://docs.altinn.studio/tags/web/",
	"title": "web",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-frontend/v3/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in v3 of app frontend.",
	"content": "Changelog for app-frontend can now be found on Github Releases.\nFor a high-level overview of upcoming changes, you can check out the roadmap.\n3.37.2 (2022-05-20) - Dependency patching Patching of external dependencies for week 20 of 2022.\n3.37.1 (2022-05-15) - Fix for prefills when using preselectedOptionIndex When using preselectedOptionIndex on a field which is used to determine later dynamic prefills (or when clicking really fast), the wrong prefills could end up being used. Issue #8255.\n3.37.0 (2022-05-15) - Support for tracks in stateless apps Stateless apps can now utilize tracks. Requires version 5.1.0 or later of nuget packages. Issue #8347.\n3.36.4 (2022-05-10) - Fix in validation of required field in hidden groups (again) After the last fix, released in version 3.35.2, the problem would persist if the fields were hidden individually instead of hiding the entire group. This additional vector has now been fixed. Issue #6398.\n3.36.3 (2022-05-10) - Only reference description if the field exists Fixes a bug where components had defined aria-describedby to a element that did not exist. Issue #23.\n3.36.2 (2022-05-06) - Fixed a potential crash after failing validation from server Fixes a recently introduced bug where some failing validations passed from the server could crash the app instance. Issue #8481.\nPatching of external dependencies for week 18 of 2022.\n3.36.1 (2022-05-06) - Fix in validation of required fields in repeating multi-page groups Fixes a bug where required fields inside multi-page repeating groups were being marked with errors even when no instances of the repeating group had been added. Issue #7478.\n3.36.0 (2022-05-03) - Added support for dynamics in nested repeating groups. Added support for dynamics in nested repeating groups. Issue #55.\n3.35.2 (2022-05-02) - Fix in validation of required field in hidden groups Fixes a bug where hiding a non-repeating group with required fields could display a message asking the user to fill the invisible required fields. Issue #6398.\n3.35.1 (2022-04-28) - Dependency patching Patching of external dependencies for week 17 of 2022.\n3.35.0 (2022-04-28) - Marking required fields Changed default behaviour of marking optional fields to now mark required fields with * as default. Optional fields have no marking as default behaviour, but this can be configured using the labelSettings property of the field, see here.\n3.34.4 (2022-04-28) - Removed out-of-place heading in receipt when there are no attachments When PDF generation has been disabled and there are no attachments, the heading indicating there should follow a list of attachments has also been hidden. Issue #8296.\n3.34.3 (2022-04-28) - Bugfixes for caching of lasted visited view Fixes a bug where stateless app would use a shared key for persisting the last visited view. Also fixes an issue where an empty page would be displayed if the persisted layout id was no longer present. Issues #7897 and #6975.\n3.34.2 (2022-04-25) - Fixed colors in radio and checkbox The colors for radio and checkbox borders were not adhering to accessibility requirements from WCAG 2.1. These colors have been adjusted slightly to follow standard theme colors. Issue #11.\n3.34.1 (2022-04-22) - Fixed invalid HTML attribute in ImageComponent The width attributte on img element can only be a number that represents px. We have support for other units, f.ex %. The width declaration was moved to inline styling instead to resolve this issue. Issue #14.\n3.34.0 (2022-04-11) - Options from Redux Added possibility to setup options from repeating groupes in Redux. Read more on docs. Issue #7626.\n3.33.5 (2022-04-11) - External dependency patching Patched external dependency to fix security issue. Pull request #8371.\n3.33.4 (2022-03-31) - Webpack 5 + dependency patching App frontend is now bundled with webpack 5. Also patched some external dependencies. Issue #5073.\n3.33.3 (2022-03-25) - Support for defining row or columns for checkbox and radio Added support for defining row or columns layout for radio and checkbox. Issue #5730.\n3.33.2 (2022-03-24) - Adjusted height of inputfields and date picker The height of these fields was incorrect. They are now set to 36px height. Issue #7377.\n3.33.1 (2022-03-23) - Bugfix for dynamic options Fixed bug where only fist options fetched when two components reference same optionId but with different mapping. Issue #8292.\n3.33.0 (2022-03-18) - New text in Confirm view + possible to customize New text for confirm.sender in confirm view. Now also possible to override this text. Issue #8243.\n3.32.10 (2022-03-18) - Bugfix for Datepicker Fixed a bug where malformed dates would not display any validation message. Issue #8121.\n3.32.9 (2022-03-10) - Bugfix for attachments in LocalTest Attachments are now possible to download in LocalTest. Pull request #7925.\n3.32.8 (2022-03-04) - Bugfix for Dropdown-component in repeating groups Fixed bug where a dropdown component in a repeating group would result in an unknown error. Issue #8169.\n3.32.7 (2022-03-04) - Dependency patching Patching of external dependencies for week 9 of 2022. Issue #8137.\n3.32.6 (2022-03-02) - Fixes validation on multiple tracks Fixed page validation on apps with multiple tracks. Issue #8145.\n3.32.5 (2022-03-02) - Fixes for text elements Multiple fixes for texts and support for markdown in header component. Issue #7874. Issue #7571.\n3.32.4 (2022-03-01) - UX fixes for mobile view Fixed modal header padding in mobile view. Issue #8143.\n3.32.3 (2022-03-01) - Run frontend rules on backend calculations Fixed a bug where frontend rules did not get triggered when a backend calculation has updated a connected field. Issue #8054.\n3.32.2 (2022-02-28) - Bugfix for address component Fixed a bug where address component could get in a bad state and not fetch post place based on zip code. Issue #8130.\n3.32.1 (2022-02-25) - Bugfix for handling layout name Fixed app loading with layout name as data. Issue #8125.\n3.32.0 (2022-02-23) - Secure options Now possible to setup secure options. Issue #7893.\n3.31.4 (2022-02-23) - Bugfixes for confirm Fixed bug where spinner for confirm button would not last the whole request. Also now displays the generated PDF in the confirm view. Issue #7824.\n3.31.3 (2022-02-17) - Fix alignment of label grid Fix alignment of label grid so that padding match normal grid. Pull request #8059.\n3.31.2 (2022-02-17) - Dependency patching Patching of external dependencies for week 7 of 2022. Issue #8048.\n3.31.1 (2022-02-16) - New styling button New styling for button component to match figma skcetches. Pull request #8057.\n3.31.0 (2022-02-16) - Added possibility to override texts in archive receipt Texts in archive receipt can now be overidden by the application, and also supports markdown and variables.\nIssue #7902.\n3.30.0 (2022-02-16) - Added refetching of options. Added functionality for refetching dynamic options when a mapping field changes.\nIssue #7888.\n3.29.1 (2022-02-14) - Fixed issue with variables in texts being ignored on calculation This fixes an issue that was introduced in 3.29.0\nPull request #8045.\n3.29.0 (2022-02-11) - Added Navigationbar component Added Navigationbar component\nIssue #5893.\n3.28.2 (2022-02-10) - Moved testfiles No code changes\nPull request #7999.\n3.28.1 (2022-02-09) - Fixed an issue in checkbox component This fixed an issue introduced in 3.27.5, where changes to checkbox items could cause the simplebinding value to be set to ,.\nPull request #7996.\n3.28.0 (2022-02-09) - Added FileUploadWithTag component Added fileupload component with option to tag files\nIssue #6479.\n3.27.5 (2022-02-09) - Fixed an issue in the checkbox component Fixed an issue in the checkbox component\nRelated to issue #7464.\n3.27.4 (2022-02-08) - Fixed an issue in the confirm container Fixed an issue in the confirm container\nRelated to issue #7464.\n3.27.3 (2022-02-07) - Fixed an issue in the radiobutton component Fixed an issue in the radiobutton component\nRelated to issue #7464.\n3.27.2 (2022-02-07) - Fixed an issue in the receipt container Fixed an issue in the receipt container\nRelated to issue #7464.\n3.27.1 (2022-02-07) - Fixed an issue in the datepicker component Fixed an issue in the datepicker component\nRelated to issue #7464.\n3.27.0 (2022-02-01) - Show app owner in header App owner will now be displayed in the app header to improve visibility to who owns the app.\nIssue #7227.\n3.26.3 (2022-02-01) - Fixed an issue in the address component Fixed an issue in the address component\nRelated to issue #7464.\n3.26.2 (2022-02-01) - Fixed an issue in the dropdown component Fixed an issue in the dropdown component\nRelated to issue #7464.\n3.26.1 (2022-01-31) - Fixed an issue in the instantiation container Fixed an issue in the instantiation container\nRelated to issue #7464.\n3.26.0 (2022-01-30) - Design updates for repeating groups  \u0026ldquo;Save\u0026rdquo;-button will get a different style than the \u0026ldquo;Next\u0026rdquo;-button. \u0026ldquo;Edit\u0026rdquo;-button gets the same focus style as the editable box, so its easier to see which row is being edited. Icon is left adjusted for the text in all icon buttons. The margin in the group is changed so that the text uses the entire width, and flows on the same vertical line as the rest of the content of the form.  Related to issue #7577.\n3.25.1 (2022-01-24) - Dependency patching Patching of external dependencies for week 4 av 2022.\nIssue #7842.\n3.25.0 (2022-01-24) - Added more data sources for dynamic texts The feature that adds support for variables in texts have recieved two new data sources. The new sources are the current Instance and ApplicationSettings. ApplicationSettings requires version 4.25.0 or newer of the backend NuGet packages.\nRelated to issue #7520.\n3.24.0 (2022-01-24) - Neutral design Added a more neutral design. Issue #7234.\n3.23.1 (2022-01-24) - Dependency patching Patching of external dependencies for week 3 of 2022. Issue #7842.\n3.23.0 (2022-01-21) - Dynamic options Added support for first version of dynamic options. Issue #5247.\n3.22.9 (2022-01-20) - Stable FormData + Typescript improvements Make FormData type stable and various improvements to typings. Pull request #7718.\n3.22.8 (2022-01-17) - Fix for various eslint rules Fixes several eslint issues, adds some more test coverage. Minor refactors to some components that were very outdated. Pull request #7786.\n3.22.7 (2022-01-13) - Dependency patching Patching of external dependencies for week 2 of 2022. Issue #7753.\n3.22.6 (2022-01-11) - Bugfix repeating groups Fixed a bug where repeating group state would not be cleared when loading a new formlayout. Issue #7773.\n3.22.5 (2022-01-10) - Optimization for SummaryGroupComponent Added missing keys for improved performance. Pull request #7720.\n3.22.4 (2022-01-07) - Display error when rendering unknown component App frontend now shows an error when trying to render an unknown component. Pull request #7724.\n3.22.3 (2022-01-07) - Dependency patching Patching of external dependencies for week 1 of 2022. Issue #7753.\n3.22.2 (2021-12-23) - Bugfix variables in text Fixed a bug where variables in text not would get updated after a backend calculation. Issue #7308.\n3.22.1 (2021-12-23) - Bugfix missing rights for stateless view Fixed a bug where missing rights would display generic error message and not the missing rights error. Issue #6514.\n3.22.0 (2021-12-22) - More options for customization of repeating groups Added more possible texts to override possibility to hide \u0026ldquo;add new\u0026rdquo; button for a repeating group. Issue #7164.\n3.21.1 (2021-12-17) - Bugfix for task validation Fixed a bug where validations set in ValidateTask in ValidationHandler.cs would not get presented to the user. Issue #7333.\n3.21.0 (2021-12-17) - Possibility to use h2, h3 and h4 as size values for the header component in FormLayout It is now possible to use h2, h3 and h4, instead of S, M and L as size values in the header component. Issue #7611.\n3.20.1 (2021-12-16) - Bugfix for address component Fixed a bug where the address component would crash unexpectedly for empty values. Issue #7658.\n3.20.0 (2021-12-14) - Support for custom OIDC provider Added support in frontend so that Altinn.Apps can have a custom OIDC provider. Issue #7173.\n3.19.2 (2021-12-09) - Dependency patching Patching of external dependencies for week 49. Issue #7590.\n3.19.1 (2021-12-09) - Fixes for image component Several fixes for image component. Issue #7484.\n3.19.0 (2021-12-06) - Create instance from stateless view Support for starting a stateful app instance from a stateless view. Issue #6196.\n3.18.4 (2021-12-03) - Optimization for mobile view - bug fix Rollback maxWidth changes from version 3.18.3. Issue #7588.\n3.18.3 (2021-12-01) - Optimization for mobile view - spacing Fixed maxWidth for input and spacing for address component. Issue #6697.\n3.18.2 (2021-11-30) - Optimization for mobile view - spacing Fixed spacing for header and paragraph. Issue #6697.\n3.18.1 (2021-11-30) - Optimization for mobile view - maxWidth Changed max-width of validation error from auto to none. Issue #6697.\n3.18.0 (2021-11-29) - Support for labelgrid Support for labelgrid in grid enabling long lists of short questions and answers to be presented in a table like way Issue #7027.\n3.17.1 (2021-11-24) - Bugfix DataProcessWrite Fixed bug where numeric fields that gets changed in DataProcessWrite are not updated if their value happened to be 0. Issue #7393.\n3.17.0 (2021-11-24) - Mobile optimization layout Added some optimized layout for our mobile view. Issue #6697.\n3.16.0 (2021-11-24) - Changed icon for help text Changed help text icon from plus to question mark. Issue #5722.\n3.15.1 (2021-11-18) - Invalid types for reselect Fixed invalid types in reselect. Pull request #7502.\n3.15.0 (2021-11-15) - Support for returnUrl Added support for returnUrl in app-frontend. Issue #7183.\n3.14.2 (2021-11-11) - Patching of jsonpointer Patching of external dependency jsonpointer. Issue #7317.\n3.14.1 (2021-11-11) - Dependency patching Patching of external dependencies for week 45. Issue #7317.\n3.14.0 (2021-11-08) - Today-flag for datepicker min/max dates Added a flag to dynamicly control min/max dates based on the current date. Issue #7228.\n3.13.6 (2021-11-04) - Dependency patching Patching of external dependencies for week 44. Issue #7317.\n3.13.5 (2021-10-28) - Dependency patching Patching of external dependencies for week 43. Issue #7303.\n3.13.4 (2021-10-22) - Dependency patching Patching of external dependencies for week 42. Issue #7303.\n3.13.3 (2021-10-15) - Right align text in input fields Added functionality to right align text in input fields. Pull request #7034.\n3.13.2 (2021-10-14) - Dependency patching Patching of external dependencies for week 41. Issue #7051.\n3.13.1 (2021-10-13) - Fix for custom validation of attachment Fixed appfrontend crash on custom validation of an attachment. Issue #7107.\n3.13.0 (2021-10-11) - Start from active instance Added functionality to start an application from an active instance. Issue #6766.\n3.12.4 (2021-10-11) - Repeating group open configuration Added functionality to configure that a repeating group should be opened in edit mode when the app starts. Solves parts of Issue #4870.\n3.12.3 (2021-10-07) - Dependency patching Patching of external dependencies for week 40. Issue #7051.\n3.12.2 (2021-10-04) - Fixed design of readonly datepicker component Readonly datepicker component now follows design of other readonly components. Issue #6253.\n3.12.1 (2021-09-30) - Dependency patching Patching of external dependencies for w39. Issue #6873..\n3.12.0 (2021-09-29) - Image component Added image component for easier adding of images to our apps. Issue #379.\n3.11.9 (2021-09-29) - Support for JSON Schema 2020-12 in app frontend Fixed bug where JSON Schema 2020-12 not was supported in app frontend. Connected issues: #6703 #6812.\n3.11.8 (2021-09-27) - Added white space between optional label and title text Added white space between optional label and title text in radiobutton, checkbox and address component. Issue #6893.\n3.11.7 (2021-09-24) - Dependency patching Patching of external dependencies for w38. Issue #6873.\n3.11.6 (20201-09-21) - Focus indicator input field Fixed bug for missing focus indicator on input field. Issue #6801.\n3.11.5 (2021-09-21) - Content loader overflow Fixed bug where content loader would overflow for small screens. Issue #6876.\n3.11.4 (2021-09-20) - Fix parsing error in confirm page Fix for text parsing error in confirm page. Issue #6775.\n3.11.3 (2021-09-17) - Preselect dropdown Support for preselectedOptionIndex in dropdown component. Issue #5255.\n3.11.2 (2021-09-16) - Dependency patching Patching of external dependencies for w37. Issue #6794.\n3.11.1 (2021-09-09) - Dependency patching Patching of external dependencies for w36. Issue #6794.\n3.11.0 (2021-09-08) - Party selection in stateless view Added functionality for party selection in stateless view. Issue #6443.\n3.10.3 (2021-08-23) - Added some IDs used by automated tests Non functional change. Not connected to an issue.\n3.10.2 (2021-08-19) - Dependency patching Patching of external dependencies for w33. Issue #6600.\n3.10.1 (2021-08-16) - App frontend includes partyID for stateless apps App frontend includes partyID in calls for fetching stateless data. Issue #6609.\n3.10.0 (2021-08-13) - Log out functionality Added functionality for log out from app frontend. Issue #6620.\n3.9.9 (2021-08-12) - Dependency patching Patching of external dependencies for w32. Issue #6600.\n3.9.8 (2021-08-05) - Dependency patching Patching of external dependenecies for w31. Issue #6571.\n3.9.7 (2021-08-03) - Bugfix print view Fixed a bug where the print view for Altinn Apps would display an empty container. Issue #6578.\n3.9.6 (2021-08-02) - Dependency patching Patching of external dependenecies for w30. Issue #6571.\n3.9.5 (2021-07-28) - Bugfix for mobile view during app startup Fixed a bug where the app modal would behave inconsistent during app startup on mobile devices. Issue #6558.\n3.9.4 (2021-07-23) - Bugfix validation trigger for groups. Fix a bug where validations would not be triggered when closing a repeating group by clicking Edit button when trigger was present. Issue #6427.\n3.9.3 (2021-07-23) - Dependency patching Patching of external dependencies for w29.\n3.9.2 (2021-07-02) - Dependency patching Patching of external dependencies for w26. Issue #6385.\n3.9.1 (2021-07-01) - Support for redirect to require higher authentication level for stateless app Fix for bug that didn\u0026rsquo;t redirect user to login page with allowed authentication levels if logged in with a too low level. Issue #6506.\n3.8.0 (2021-06-29) - Several updates to validation functionality  Support for adding custom error messages to client side validations (JSON schema). Support for specifying single field validation (server) as FIXED to make sure resolved validation error messages are removed. Fixes bug where single field validation that returned empty (no errors/warnings) did not remove existing validation messages. Issue #5747.  3.7.0 (2021-06-29) - Support for posting data from stateless app Issue #6194.\n3.6.14 (2021-06-22) - Bug fix for duplicated validation messages Fixed a bug that caused validation messages on a FileUpload component to be displayed twice. Issue #6400.\n3.6.13 (2021-06-18) - Bugfix for replaceAll with variables in text Fix for bug introduced in 3.6.9, where only the last variable in texts with multiple variables was replaced. The change in 3.6.9 also caused summary page to fail in some cases. Issue #6455.\n3.6.12 (2021-06-18) - Dependency patching Patching of external dependencies. Issue #6385.\n3.6.11 (2021-06-16) - Bugfix for disappearing validation messages Fixed bug for disappearing validation messages. Single field validation response would overwrite all existing validations, causing earlier triggered validation messages to disappear. Issue #5857.\n3.6.10 (2021-06-15) - Bugfix for navigation buttons with multiple triggers Fixed bug for navigation buttons configured with multiple triggers, where only the first one was actually triggered. Issue #6387.\n3.6.9 (2021-06-14) - Bugfix variables in text Fixed bug where only first occurance of a variable in a given text was replaced. Issue #6091\n3.6.8 (2021-06-11) - New endpoints for statless app New endpoints for stateless app. Issue #6227\n3.6.7 (2021-06-10) - Dependency patching Patching of external dependencies. Issue #6385\n3.6.6 (2021-06-09) - Dependency patching Updated to latest major version of react v17. Issue #5072\n3.6.5 (2021-06-02) Bugfix for stateless app Fixed bug where stateless app with onEntry.show set to new-instance would crash. Issue #6321.\n3.6.4 (2021-06-02) Bugfix for simple receipt Fixed bug where simple receipt did not parse markdown if the app overrides defult texts. Issue #6232.\n3.6.3 (2021-06-02) Bufix for content loader Fixed bug where content loader did not scale for whole view. Issue #4888.\n3.6.2 (2021-06-01) Bugfix for summary view of group with multiple pages Fixed bug that caused app frontend to crash when rendering summary component for group when the group was defined with multiple pages in edit mode. Issue #6233.\n3.6.1 (2021-05-28) Dependency patching Patching of external dependencies. Issue #6324.\n3.6.0 (2021-05-28) Support for hiding back button in apps Issue #6193.\n3.5.0 (2021-05-27) Support for number formatting Added support for formatting numbers for Input-components. Issue #5972.\n3.4.2 (2021-05-26) Improve look of summary for checkboxes component Issue #6329.\n3.4.1 (2021-05-20) Dependency patching Patching of external dependencies. Issue #6221.\n3.4.0 (2021-05-18) Support for stateless apps Issue #6124.\n3.3.5 (2021-05-14) - Dependency patching Patching of external dependencies. Issue #6221.\n3.3.4 (2021-05-11) Bugfix for calculation in groups Issue #6235.\n3.3.3 (2021-05-11) Run data validation on page switch, and fix group component mobile view Issue #6236. Issue #5977.\n3.3.2 (2021-05-06) - Dependency patching Patching of external dependencies. Issue #6011.\n3.3.1 (2021-05-06) Support for markdown in validation messages Issue #5137.\n3.3.0 (2021-05-03) Support for multiple views in repeating group edit mode Issue #5869.\n3.2.2 (2021-04-23) - Dependency patching Patching of external dependencies. Issue #6011.\n3.2.1 (2021-04-23) - Bugfix for group validations Fixed a bug where groups with validation trigger would call the instance validation api. Now calls data validation. Issue #6089.\n3.2.0 (2021-04-21) - Validation on group save Added support for running validations on a group when the user tries to save an entry. Issue #5281.\n3.1.6 (2021-04-19) - Bugfix for checkbox values in summary component Fixed bug where summary would display an empty string for checkboxes with multiple selected values. Issue #5993.\n3.1.5 (2021-04-19) - Bugfix for repeating group state on calculation Fixed bug where repeating group state would not be updated if a backend calculation had altered a repeating group. Issue #6006.\n3.1.4 (2021-04-19) - Bugfix for validations on group delete Fixed bug where validations for a given group index would not be removed on delete. Issue #5960.\n3.1.3 (2021-04-16) - Bugfix for validation Fixed bug where single field validation would validate the whole instance and not data. Issue #5885.\n3.1.2 (2021-04-12) - Dependency patching. Patching of external dependencies. Issue #5957.\n3.1.1 (2021-04-09) - Bugfix for slow calculate Fixed bug where a slow backend calculation can overwrite later entered data. Issue #5754.\n3.1.0 (2021-04-07)- Help text for paragraph and header components App now supports help text for paragraph and header components. Issue #5862.\n3.0.16 (2021-04-06) - Dependency patching Patching of external dependencies. Issue #5877.\n3.0.15 (2021-03-22) - Bugix for group component with checkboxes Fixed bug where group component summary would display an empty value for checkboxes that had several selected values. Issue #5907.\n3.0.14 (2021-03-19) - Dependency patching Patching of external dependencies. Issue #5877.\n3.0.13 (2021-03-18) - Internal typings App frontend internal typings updated to fix failing tests. No issue connected.\n3.0.12 (2021-03-17) - Bugfix for markdown support in summary and group titles Fixed bug where app frontend would not render markdown in summary and group titles. Issue #5781.\n3.0.11 (2021-03-17) - Bugfix for page order calculation Fixed bug where app frontend would trigger call to calculate page order even when no calculation trigger was present. Issue #5863.\n3.0.10 (2021-03-12) - Bugfix for page order calculation Fixed bug where app frontend would trigger call to calculate page order for single page applications. Issue #5859.\n3.0.9 (2021-03-12) - Dependency patching Patching of external dependencies. Issue #5771.\n3.0.8 (2021-03-12) - Support for dynamicly getting page order App frontend now supports dynamicly fetching the page order on next page (\u0026ldquo;sporvalg\u0026rdquo;). See docs for more information. Issue #5640.\n3.0.7 (2021-03-09) - Bugfix for page caching Fixed issue where the app would cache the first page in alphabetical order and not respect the order in Settings.json. Issue #5819.\n3.0.6 (2021-03-08) - Caching of last viewed page Introduced caching of the last viewed form page, so user is returned to this page when refreshing or coming back at a later time. Issue #5278.\n3.0.5 (2021-03-05) - Dependency patching Patching of external dependencies. Issue #5770.\n3.0.4 (2021-03-05) - Bugfix for text styling in titles/descriptions Fix issue where label and description texts would get cut off mid word. Issue #5810.\n3.0.3 (2021-03-02) - Bugfix for metadata with layoutsets Fix issue where app-frontend feched wrong metadata when using layoutsets. Issue #5624.\n3.0.2 (2021-02-26) - Dependency patching Patching of external dependencies. Issue #5676.\n3.0.1 (2021-02-25) - Horizontally aligned components \u0026amp; Bugfix for loading options App-frontend now supports horizontally aligned components. See docs for more information. Issue #1515.\nFix issue that only loaded options related to form layout in first data task - for subsequent data tasks options were not loaded. Issue #5619.\n3.0.0 (2021-02-23) - New font for App Frontend This version changes the font for the app frontend from Roboto to Altinn-DIN. For the apps to show fonts as expected, some changes need to be made. See breaking changes for the details.\n"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/older/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in v1.0.62-alpha -- 2.0.1",
	"content": "2.0.0 (2020-11-18) - Autodelete on process end For some apps, the fact that there\u0026rsquo;s traces of it in the user archive (and the data is stored) is a problem (e.g. for security reasons). The Altinn.App.* packages has been updated to support autodelete when process ends. This is introduced with version 2.0.0-alpha of the packages.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.3.1 (2020-11-06) New layout structure in Designer In order to support multiple pages in an app we have done some restructuring of the app-template. When you are doing changes in Altinn Designer for your app the updated FormLayout.json will be put under the new structure. For apps that have nuget references to Altinn.App.Api, Altinn.App.Common, and Altinn.App.PlatformServices with versions below version 1.2.0 this will make the app unable to find the FormLayout.json on the network call against the app.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.1.11-alpha (2020-10-02) - Registration of events The Altinn.App.* packages has been updated to work with the new Events component in Altinn. This is introduced with version 1.1.11-alpha of the packages.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.1.0-alpha (2020-10-01) - Deleting instances from endpoint in app #4871 was fixed with in release of 1.1.10-alpha of the app nugets. This change only affects users and app owners that try to delete an instance.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.1.8-alpha (2020-09-23) - Update path of Data Protection Keys for Apps #4483 changed the way we use data protection keys in order to improve the support for running locally. These keys are used in XSRF-protection. When you are running apps locally, we are using the default behaviour (directory under current user) for .Net Core. The path is passed with an environment variable when running in an apps cluster. This change requires the deployment.yaml file to be updated with the correct variable.\nThe change affects all application created in Altinn Studio before 30.09.2020 using Altinn.App.PlatformServices 1.1.8-alpha and above Updating to this version will require changes in multiple files. See the entry in breaking changes\n1.1.2-alpha (2020-07-15) - Namespace renamed A namespace was renamed in Altinn.App.PlatformServices Version=\u0026ldquo;1.1.2-alpha causing the build of the application to fail if references to this namespace isn\u0026rsquo;t changed. This affects all applications created before June 2020 that reference nuget versions \u0026gt;= 1.1.2-alpha.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.1.0-alpha (2020-07-01) - Multiple changes Property type changed for UserProfile.ProfileSettingPreference Introduced with issue: #4466 and release v2020.28.\nThe change affects all applications in TT02 and PR with nuget version 1.0.98 and lower.\nNew endpoint for application text resources Introduced with issue: #4451 and nuget 1.1.0.-alpha.\nThe change affects all application created in Altinn Studio before 8.07.2020 using nuget versions 1.1.0-alpha\nUpdating to this version will require changes in multiple files. See the entries in breaking changes here and here\n1.0.86-alpha (2020-05-29) - Platform authorization for Register and Profile Introduced with issue: #4162 and Release: v2020.23.\nThe change affects all application created in Altinn Studio before 03.06.2020.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.0.82-alpha (2020-05-15) - Updated client-side validation Introduced with issue: #3944, and applies to existing apps that upgrade to the new major version of app frontend (v2).\nThe client-side validation of the app frontend has been replaced with a JSON-schema validation in order to provide a more complete client-side validation. As of v2 of app frontend, client-side validation has support for type-checking basic types, including enums. When upgrading the frontend version to v2, the app must use nuget versions 1.0.82-alpha or newer.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.0.80-alpha Removed GET operations with body Introduced with issue: #3738.\nThe Register API had a few GET operations that took an input parameter through the body of an http request. Requests against these operations would work in AT environments, but would be broken by API Management in production like environments. The operations in question has now been removed and replaced with operations that require POST requests.\nErrors The methods that have been removed were used by an app when an instantiation were done by the Application owner. More specifically if the instanceOwnerPartyId were unknown. The instantiation request would then have the Person number or organization number instead, and the Register operation would be used to identify the correct party id.\nPOST https://{org}.apps.tt02.altinn.no/{app-id}/instances/ { \u0026#34;appId\u0026#34; : \u0026#34;org/app\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;personNumber\u0026#34;: \u0026#34;12247918309\u0026#34;, \u0026#34;organisationNumber\u0026#34;: null, \u0026#34;instanceOwnerPartyId\u0026#34;: null }, ... } How to fix Any issues related to this change can be fixed by upgrading to the latest version of Altinn.App.PlatformServices. This means the App must be updated and a the new version deployed to all environments. Existing instances are not affected.\n1.0.78-alpha Send-in / Validation fails with \u0026lsquo;Ukjent feil\u0026rsquo; Introduced with issue: #3927.\nThere was a vulnerability in the solution allowing to update a whole instance object using an endpoint in app backend or storage. This has been solved by refactoring app backend and removing the endpoints.\nAny issues related to validation failing with \u0026lsquo;Ukjent feil\u0026rsquo; for apps with nuget packages older than 1.0.78-alpha can be solved by upgrading to 1.0.78-alpha or newer.\n1.0.62-alpha (2020-03-13) Data and task validation Introduced with issue: #3820.\nThe base class that every application inherits has been altered to allow for both data and task validation.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v3/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in version 3.",
	"content": "3.5.1 (2021-03-11) - Possible to get ruleconfiguration for apps with layout sets There was a bug resulting in av 404 response whenever it is attepmpted to retrieve the ruleconfiguration for an application while specifying the layout set id in the request. This has now been fixed.\n3.5.0 (2021-03-10) - Added funcionality for pdf generation for application owner Up until now a pdf copy has not been generated for the tasks that are completed by the application owner. This has now been implemented and pdf should be generated after a task regardless if it is an end user of the app owner that completes the task.\n3.4.0 (2021-03-10) - Endpoint and functionality for get page order made available All apps now expose an endpoint for getting the current page order based on the current state of an instance. Default behavior is to return the page order as defined in Settings.json to override, add the function below in Logic/App.cs and include your own logic.\npublic override async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { return await _pdfHandler.FormatPdf(layoutSettings, data); } 3.3.0 (2021-03-04) - Retrieving certificate from Key Vault now uses name The ISecret service now requires certificate name as input for retrieving a certificate from key vault. Previously this has been the certificate id, but this identificator contains more information that an app developer might have available, so the service has been simplified.\n3.2.3 (2021-02-17) - Fixed duplicate key exception on options When using the same option key in an option result a duplicate key exception was thrown that crashed the app. This is now fixed, and keys that already exist in the option result will not be added.\n3.2.1 (2021-02-10) - Correctly set unread status when instantiated by end user The instance now appears as read in the messagebox if it is instantiated by an end user through api, regardless if they have opened the instance in GUI or downloaded the form data they just posted.\n3.2.0 (2021-02-02) - Options displayed with label in PDF Before this release the selected option was shown with it\u0026rsquo;s value rather than the label that the end user was presented with during form filling. This has now been fixed so the label is diplayed in the pdf.\n3.1.6 (2021-01-29) 3.1.5 (2021-01-27) 3.1.4 (2021-01-26) 3.0.4 (2021-01-26) - Swagger support for Apps We have added Swashbuckle to the App. It is a library that brings Swagger support and this is especially handy when developing an HTTP based API. It creates a form of interactive documentation based on the OpenAPI Specification. To describe the Api\u0026rsquo;s better, we use the xml documentation file.\nThis documentation will be generated automatically when the application is build. Existing api\u0026rsquo;s and new api\u0026rsquo;s created in the app will be documented.\nThe documentation will appear at https://[org].apps.altinn.no/[org]/[app]/swagger/index.html in the app.\nTo enable this, there\u0026rsquo;s some changes.\n  Updated package dependencies, generate xml documentation file and copy xml documentation for Altinn.App.Api Navigate to you application repository and find App.csproj in the App folder.\nUpdate nuget dependencies in App.csproj to version 3.0.4, add new property for Altinn.App.Api.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;3.0.4\u0026#34;\u0026gt; \u0026lt;CopyToOutputDirectory\u0026gt;lib\\$(TargetFramework)\\*.xml \u0026lt;/CopyToOutputDirectory\u0026gt; \u0026lt;/PackageReference\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;3.0.4\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;3.0.4\u0026#34; /\u0026gt; This is new in App.csproj\n\u0026lt;PackageReference Include=\u0026#34;Swashbuckle.AspNetCore\u0026#34; Version=\u0026#34;5.6.3\u0026#34; /\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;GenerateDocumentationFile\u0026gt;true\u0026lt;/GenerateDocumentationFile\u0026gt; \u0026lt;NoWarn\u0026gt;$(NoWarn);1591\u0026lt;/NoWarn\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;Target Name=\u0026#34;CopyXMLFromPackagesForBuild\u0026#34; AfterTargets=\u0026#34;Build\u0026#34;\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;PackageReferenceFiles Condition=\u0026#34;%(PackageReference.CopyToOutputDirectory) != \u0026#39;\u0026#39;\u0026#34; Include=\u0026#34;$(NugetPackageRoot)$([MSBuild]::Escape(\u0026#39;%(PackageReference.Identity)\u0026#39;).ToLower())/%(PackageReference.Version)/%(PackageReference.CopyToOutputDirectory)\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;Copy SourceFiles=\u0026#34;@(PackageReferenceFiles)\u0026#34; DestinationFolder=\u0026#34;$(OutDir)\u0026#34; /\u0026gt; \u0026lt;/Target\u0026gt;   Changes to the Startup.cs file. If you don\u0026rsquo;t have any custom code in this, copy file from here.\nAdd this to the end of the ConfigureServices method\n// Add Swagger support (Swashbuckle)  services.AddSwaggerGen(c =\u0026gt; { c.SwaggerDoc(\u0026#34;v1\u0026#34;, new OpenApiInfo { Title = \u0026#34;Altinn App Api\u0026#34;, Version = \u0026#34;v1\u0026#34; }); IncludeXmlComments(c); }); Add this before app.UseRouting() in the Configure method\nstring applicationId = GetApplicationId(); if (!string.IsNullOrEmpty(applicationId)) { app.UseSwagger(o =\u0026gt; o.RouteTemplate = applicationId + \u0026#34;/swagger/{documentName}/swagger.json\u0026#34;); app.UseSwaggerUI(c =\u0026gt; { c.SwaggerEndpoint($\u0026#34;/{applicationId}/swagger/v1/swagger.json\u0026#34;, \u0026#34;Altinn App API\u0026#34;); c.RoutePrefix = applicationId + \u0026#34;/swagger\u0026#34;; }); } Add two methods\nprivate void IncludeXmlComments(SwaggerGenOptions options) { try { string fileName = $\u0026#34;{Assembly.GetExecutingAssembly().GetName().Name}.xml\u0026#34;; string fullFilePath = Path.Combine(AppContext.BaseDirectory, fileName); options.IncludeXmlComments(fullFilePath); string fullFilePathApi = Path.Combine(AppContext.BaseDirectory, \u0026#34;Altinn.App.Api.xml\u0026#34;); options.IncludeXmlComments(fullFilePathApi); } catch { // Swagger will not have the xml-documentation to describe the api\u0026#39;s.  } } private string GetApplicationId() { string appMetaDataString = File.ReadAllText(\u0026#34;config/applicationmetadata.json\u0026#34;); JObject appMetadataJObject = JObject.Parse(appMetaDataString); return appMetadataJObject.SelectToken(\u0026#34;id\u0026#34;).Value\u0026lt;string\u0026gt;(); }   3.0.1 (2021-01-19) 3.0.0 (2021-01-05) - Support for dynamics in PDF We have added a new PDF handler to make it possible to hide pages and components in PDF. See breaking changes for how to update you app to be compatible with this version.\n"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v4/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in version 4.",
	"content": "4.34.1 (06.04.2022) - Support for specifying shipment type for eFormidling shipment This release makes it possible to specify the shipment type for an eFormidling shipment.\nExtend the eFormidling section i applicationmetadata.json with the new property dpfShipmentType as shown below.\n\u0026#34;eFormidling\u0026#34;: { ... \u0026#34;dpfShipmentType\u0026#34;: \u0026#34;altinn3.skjema\u0026#34; } 4.33.0 (15.03.2022) - Support for turning off PDF generation This release makes it possible to turn of PDF generation for a given form\nThis is defined in ApplicationMetaData for the given DataType. Default is true\nExample\n{ \u0026#34;id\u0026#34;: \u0026#34;melding\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/xml\u0026#34; ], \u0026#34;maxCount\u0026#34;: 1, \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: false, \u0026#34;ClassRef\u0026#34;: \u0026#34;App.IntegrationTestsRef.Data.apps.dibk.nabovarsel.Melding\u0026#34; }, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;enablePdfCreation\u0026#34; : false } 4.32.0 (14.03.2022) - Person lookup service client The platform application Register has been given a new endpoint that can be used to verify correct national identity number. This version of the app template packages have a new person lookup client that can be used to perform lookups with the new endpoint in Register.\n4.31.1 (10.03.2022) - Fixed bug related to prefill and enriched instance events with person identification number  This release fixes a bug where prefilling the same value to more than one field throws a duplicate key exception. This has been solved by flipping the prefill dictionary. Person identification number has been included to the platformUser data of an instance event.  4.30.0 (07.03.2022) - Support for readiness og liveness probes An endpoint dedicated for health check has been implemented. This is used by Kubernetes to know when an instance of the application is ready for load.\nAll applications created before 16.06.2022 must be manually updated to enable the readiness and liveness probes.\n  In App/Startup.cs\n  Add the line using Altinn.App.Core.Health; amongst the using-statements at the top of the file\n  In the function ConfigureServices, add the line\nservices.AddHealthChecks().AddCheck\u0026lt;HealthCheck\u0026gt;(\u0026#34;default_health_check\u0026#34;);   In the function Configure add the line\napp.UseHealthChecks(\u0026#34;/health\u0026#34;);     In deployment/Chart.yaml the reference to the Altinn Helm Chart should be updated to version 2.1.0\nThe final result should resemble this:\napiVersion: v1 description: A Helm chart for Kubernetes name: deployment version: 1.1.0 dependencies: - name: deployment repository: https://charts.altinn.studio/ version: 2.1.0   In deployment/values.yaml under deployment, add\nreadiness: enabled: true liveness: enabled: true   NOTE identation is imporant in yaml files. readiness og liveness must be on the level below deployment, and at the same level av volumeMounts og volumes.\n4.27.0 (23.02.2022) - Secure options endpoint Add support for secure options endpoints Fixed url and parameter separator logic in GetInstanceEvents Change redirect url from string to base64 encoded string\n4.26.0 (2022-02-10) - Improvements to text resource in relation to PDF Use new appName text resource as PDF title. Use local texts for pdf generation instead of text resources from Platform Storage.\n4.25.0 (2022-01-24) - Dynamic application settings for front end Added a new section called FrontEndSettings for use in appsetting.{environment}.json files. This is made available for front end as applicationSettings and is a dynamic list of values. It\u0026rsquo;s possible to add new entries to FrontEndSettings without the usual need to make code changes in backend. The feature ensures that backend can provide environment specific values to the front end application.\n4.24.0 (2020-01-21) Support language and query parameters in dynamic options. New way of implementing dynamic options by creating a class that implements IAppOptionsProvider. See doc\n4.23.0 (2022-01-15) - Updated backend support for BPMN gateways Restructure of process engine and support for BPMN gateways\n4.22.0 (2022-01-07) - Included access token generation for eFormidling integration point The integration point used for sending instance data through eFormidling now required a valid access token. Apps now fulfill all requirements of the integration point.\n4.21.0 (2021-12-01) - Added support for saving username for instance owner If a self indentified user instansiates an instance, their username is saved in the instance owner metadata.\nAdded Api in App to expose XACML Policy and BPMN Process\n4.20.0 (2021-11-18) - Added support for custom redirect URL when exiting an app The URL to an app can now contain a query parameter (returnUrl) which, if validated (valid URI and host name), can be used to redirect the user to that URL when the user clicks on the exit icon in an Altinn 3 app. Read more about it here\nRelated to 7183\n4.19.0 (2021-11-15) - Added support for instantiation based of a copy of an archived instance The app template now supports the instantiation of an app based on a copy of an archived instance. The new endpoint is documented here. Note that support for copying an app in the message box and configuration of the application through Altinn Studio is still under development.\nRelated to 6695\n4.18.0 (2021-11-10) - Added support for OIDC configuration You can now configure a specific OIDC provider in app.\nRelated to 7173\n4.17.2 (2021-10-27) - Added API for instansiation with key-value prefil It is now possible to instantiate with keyValue prefill through a new instantiation API.\nYou can also use prefill in custom code. This will require that the app implements the latest version of App.cs which includes the following method\npublic override async Task RunDataCreation(Instance instance, object data, Dictionary\u0026lt;string, string\u0026gt; prefill) { await _instantiationHandler.DataCreation(instance, data, prefill); } And the latest InstansiationHandler.cs with the method signature\npublic async Task DataCreation(Instance instance, object data, Dictionary\u0026lt;string, string\u0026gt; prefill) { await Task.CompletedTask; } 4.16.0 (2021-10-07) - Added API for tagging of data elements It\u0026rsquo;s now possible to save tags on a data element. To support this there are 3 new API endpoints for listing existing tags, adding a tag, and to remove a tag from a data element.\nThis change is associated with issue 6861 on github.\nThere is more information about the new API under the app API documentation.\n4.15.2 (2021-10-04) - New endpoint for retrieving active instances Altinn Apps now expose a new endpoint for retriveing active instances for a given instance owner. The new endpoint can be reached at {org}.apps.altinn.no/{org}/{app}/instances/{instanceOwnerPartyId}/active.\nThe change is related to issue 6767.\n4.14.1 (2021-09-22) - 500 error when retrieving non existing instance fixed There was a bug causing a 500 response when an request is made towards Get/Instances for a non-existing instance. This has now been fixed and the response returned is 403. Swagger for the endpoint is updated to reflect possible response codes.\n4.14.0 (2021-09-13) - Partial support for namespace XML The code that deserializes XML has been updated to support namespace declaration in the root element.\nExample:\n\u0026lt;Skjema xmlns=\u0026#34;urn:no:altinn:skjema:v1\u0026#34;\u0026gt; \u0026lt;Navn\u0026gt;Altinn\u0026lt;/Navn\u0026gt; \u0026lt;/Skjema\u0026gt; Deserialization occurs when an external system uses the app API to submit a new form, when they overwrite an existing form, and when an app retrieves a form from blob storage.\nThe change is not automatically used by all apps that update to this version. For the change to take properly effect the C# class that represents the model must be updated. The class needs to be decorated with an XmlRootAttribute with the Namespace property set to the correct namespace.\nExample:\n[XmlRoot(ElementName = \u0026#34;Skjema\u0026#34;, Namespace = \u0026#34;urn:no:altinn:skjema:v1\u0026#34;)] public class Skjema { [MaxLength(100)] [XmlElement(\u0026#34;Navn\u0026#34;)] public string Navn { get; set; } } This change must be done manually for all old and new models. The model editor in altinn.studio has not be updated to do this automatically.\n4.13.0 (2021-09-03) - Event for changed substatus on instance Changing the substatus of an instance triggers an event app.instance.substatus.changed which can be subscribed to in the event component.\nThis solves issue #6691\n4.12.0 (2021-08-27) - Identity data is included in the request telemetry for all requests In Application Insights we now register the properties listed below enabling linking of an entity to a specific request received by the application.\n partyId authentication level userId organisationNumber  This solves issue #5983\n4.11.1 (2021-08-26) - No longer possible to cache response from stateless apps Caching of the stateless data responses is no longer possible.\nThis solves issue #6532\n4.11.0 (2021-08-03) - Support for disabling reportee selection in Altinn Portal Apps now support adding query parameter DontChooseReportee=true to disable the reportee selection when an unauthorized user accesses an app. The result being that the user will represent themselves and be routed directly to the application after login.\nThis release solves issue #6573.\n4.10.2 (2021-07-15) - Text resources are loaded locally  The app will now load texts from the locally stored text resource files (config/texts/*) instead of retrieving them from Storage. Texts are still uploaded to Storage during deploy. The change is to remove unnecessary calls to Storage and to avoid an issue with caching that prevented new texts from being used immediately. #6466, #6415 Fixed a bug where a filename with space in it could lead to a crash. #6421 New apps created after the v2021.29 release will provide security headers like X-Frame-Options, X-XSS-Protection, X-Content-Type-Options, and Referer-Policy. To activate this in existing apps follow these steps:  Open the App/Startup.cs file. At the top of the file add the namespace reference: using Altinn.App.Api.Middleware; Find the Configure method and add the statement: app.UseDefaultSecurityHeaders(); Add it right before existing app.Use* statements. E.g. before app.UseRouting();    4.9.2 (2021-07-08) - Fixed messages from multipart request validation Validation messages from multipart request validation was misleading. This release solved issue #6418.\n4.9.1 (2021-07-02) - Bugfix for errors in multipart validation Fixed a bug that caused validation messages to show C# type of DataType rather than DataTypeId. Issue #6418\n4.9.0 (2021-06-29) - Support for marking a single field validation error as fixed It is now possible to mark a previous validation error as fixed by using the prefix *FIXED* in front of the original error. Documentation on how to implement the functionality.\n4.8.0 (2021-06-22) - Application version number available in AppSettings During app deployment an environment variable with the app version number/name is added to the app runtime environment. This version information can now be retrieved in any controller or service through the AppSettings configuration object. Just add a dependency on AppSettings into the class and access the new property called AppVersion.\n4.7.1 (2021-06-15) - Adjustments to response headers Some of the controllers exposed by the applications have been modified to not allow caching and/or storage of their responces in the client.\n4.7.0 (2021-06-08) Altinn Apps now authorize access for statless apps.\nAltinn Apps now have two new application events where application developers can add data processing logic. calculation, population, and more.\nIn this update the RunCalculate application event is made obsolete/deprecated. It\u0026rsquo;s recommended that Apps are updated to use RunProcessDataWrite and RunProcessDataRead instead. Calls to the RunCalculate method will be removed in a future update.\nThe process to update is\n Add the DataProcessing folder and DataProcessingHandler class from our app template to your app. Update App.cs. Add a class field for DataProcessingHandler and copy new methods ( RunProcessDataRead and RunProcessDataWrite) from App.cs Move logic from calculation handler to DataProcessinghandler Remove RunCalculation method from App.cs Remove CalculationHandler when code has been moved to DataProcessingHandler. Compile and test your app.  See details about data processing here\n4.6.2 (2021-06-01) - Duplicate keys in options causing crash This release has a fix for a crash related to PDF rendering when an app have options with duplicate entries. #5887\n4.6.1. (2021-05-21) Changed alternative subject Altinn Apps now uses org instead of organization as subject when publishing events.\n4.6.0 (2021-05-11) - Apps now support data fields Altinn Apps now support data fields. Data fields allows for adding data values, from either form fields or a custom source, to the instance object. Form data can be added by configuring data fields in applicationmetadata.json while custom sources require coding. Documentation on how to add data values to an instance can be found here.\n4.5.2 (2021-05-04) - Endpoints for stateless data elements exposed through app. Bug stopping local testing fixed Altinn Apps now expose endpoints for creating, prefilling and running calculations on stateless data elements. A stateless data element entails there is no link to an instance or instance owner, and the data is simply presented to the end user, but not persisted in any database.\nIn addition, a bug breaking apps running with localtest intoduced in 4.4.1 has been fixed.\nInformation on the new endpoints can be found in the swagger exposed by each application https://{org}.apps.altinn.no/{org}{app}/swagger\n4.4.1 (2021-04-30) - Ask user to upgrade security level An app would show the \u0026ldquo;unknown error\u0026rdquo; message if a user were trying to access an instance with a security level that was too low for the instance. This has been fixed. The user is now sent to authentication with the option to pick an authentication method that provides a higher security level. The fix targets the GET instance endpoint specifically.\n4.4.0(2021-04-27) - Performance fix Improved performance.\n4.3.0 (2021-04-28) - Apps now support presentation fields Altinn Apps now support presentation fields. By specifying presentation fields in applicationmetadata.json, speficied data values from the form data will be stored on the instance in order to show them along with the app title in the Altinn messagebox. Further documentation on how to configure presentation fields is found here.\nThis change is related to this epic.\n4.2.0 (2021-04-19) - Possible to integrate an app with eFormidling Altinn Apps now support integration with eFormidling. Documentation on how to set up an application to use eFormidling will be published once an integration point for eFormidling is set up in Altinn Platform.\n4.1.0 (2021-04-07) - Add new property with updated data to response for PUT to DataController During PUT of data to DataController ({org}/{app}/instances/{instanceOwnerPartyId:int}/{instanceGuid:guid}/data), any calculations that are defined by the apps are run, and data is potentially updated before being saved. Previously, the response returned only the metadata for the updated data element, and a GET to fetch the updated data was necessary. In this version, a dictionary of all the fields that have updated data from calculations is returned as a new parameter in the API response (in addition to the data element metadata), so that clients do not need to perform the additional GET request in order to get the updated data.\nThis change is related to this issue.\n4.0.3 (2021-03-23) - Fixed a bug reading filename from Content-Disposition  The specification for Content-Disposition specify that filename should be in quotes. This was not supported by the app backend API, causing requests following the specification to fail. This has been fixed. Added support for filename* (FilenameStar). If Content-Disposition contain both filename and filename*, the value defined by filename* will be used.  4.0.1 (2021-03-15) - Upgraded application to .Net 5 and grouped references of Altinn App and Altinn Platform services in Startup.cs Altinn.App.* librarires target .Net 5 now, which requires that the application does the same. In addition we have created two methods for referencing all app and platform sevices in Startup.cs\nSee breaking changes for how to update you app to be compatible with this version.\n"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v5/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in version 5.",
	"content": "5.3.0 (21.06.2022) - Support for autodeleting data elements This release introduces support for autodeleting dataelements when the process ends. This is to restrict end user\u0026rsquo;s access to data elements after the process has been completed.\nTo configure auto deletion include \u0026quot;autodeleteOnProcessEnd\u0026quot;:true in the appLogic section of the dataType in applicationmetadata.json. A fully configured data element should look like this\n{ \u0026#34;id\u0026#34;: \u0026#34;VedleggB\u0026#34;, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxSize\u0026#34;: 25, \u0026#34;maxCount\u0026#34;: 1, \u0026#34;minCount\u0026#34;: 1, \u0026#34;appLogic\u0026#34;: { \u0026#34;autoDeleteOnProcessEnd\u0026#34;: true } } 5.2.0 (07.06.2022) - Api for supported languages Features  This release introduces new api endpoints which gives information about the languages supported in the application. Ref. upcoming feature for selecting language  5.1.0 (23.05.2022) - Support for anonymous stateless apps Features   This release makes it possible for users to access a statelss apps without being logged in. This is particularly useful for guides where users answer various questions in order to be guided to the correct solution but you as a service owner don\u0026rsquo;t need a stored instance as the result of the process the users went through.\n  The ability to use Altinn 2 options from an Altinn 3 apps. This is useful for migration scenarios and where a corresponding Altinn 3 options are not available.\n  Bugfixes  A fix for tracks not working with stateless apps. A fix where a null pointer exception was thrown in /{org}/{app}/instances/{instanceOwnerPartyId}/active when the instance was initialized from api. A fix allowing any content type when content type is unspecified.  "
},
{
	"uri": "https://docs.altinn.studio/community/changelog/app-nuget/v6/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in version 6.",
	"content": "6.0.0 .Net 6 upgrade Upgrades App to .Net 6. See Breaking\nSee breaking changes for how to update you app to be compatible with this version.\n"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/deployment/v1/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in v1 of deployment.",
	"content": "1.1.0 First version in remote repository. Templates copied from apps template.\n"
},
{
	"uri": "https://docs.altinn.studio/community/changelog/deployment/v2/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in v2 of deployment.",
	"content": "2.1.0 Enabling of liveness and/or readiness probe requires that your application is running version 4.30.0 or higher of the Altinn.App.* nuget packages.\r\rChanges introduced  Default CPU og memory requested per pod is reduced to 50m and 128Mi, respectively. Configurable liveness and readiness probes are available. Default behavior is that this is disabled.  New optional fields with default values available in values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14  deployment: readiness: enabled: false path: /health initialDelaySeconds: 30 failureThreshold: 3 periodSeconds: 3 timeoutSeconds: 1 liveness: enabled: false path: /health initialDelaySeconds: 3 failureThreshold: 3 periodSeconds: 10   Walkthrough:\n3. Enable or disable readiness probe for this application.\n4. The path to the liveness endpoint in the application.\n5. Number of seconds after the container has started before readiness probes are initiated.\n6. Minimum consecutive failures for the probe to be considered failed after having succeeded.\n7. How often (in seconds) to perform the probe\n8. Number of seconds after which the probe times out.\n10. Enable or disable liveness probe for this application.\n11. The path to the liveness endpoint in the application.\n12. Number of seconds after the container has started before liveness probes are initiated.\n13. Minimum consecutive failures for the probe to be considered failed after having succeeded.\n14. How often (in seconds) to perform the probe\n2.0.0 Upgrading to 2.0.0 from 1.x.x leads to a short downtime during deployment. Subsequent deployments will run as normal.\r\rIf your apps deployment folder contains the templates folder please follow the migration guide.\nChanges introduced  Deployment renamed to -v2 due to changes in selector fields (field is immutable) WARNING leads to downtime during first deploy Add resource requests to all deployments Horizontal pod autoscaler enabled by default for all deployments (automatic scaling of application) Labels and selectors updated for most kubernetes objects Default initial replicaCount changed from 1 to 2  New optional fields with default values available in values.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  deployment: autoscaling: enabled: true replicas: min: 2 max: 10 avgCpuUtilization: 70 behavior: stabilizationWindowSeconds: scaleUp: 0 scaleDown: 120 resources: requests: cpu: 300m memory: 256Mi   Walkthrough\n3. Enable or disable autoscaling for this application\n5. The lower limit for the number of pods that can be set by the autoscaler.\n6. The upper limit for the number of pods that can be set by the autoscaler.\n7. The target average CPU utilization (represented as a percent of requested CPU) over all the pods for when scaling should occur.\n9. The stabilization window is used to restrict the flapping of replicas when the metrics used for scaling keep fluctuating.\n10. Number of seconds the average CPU utilization for all pods are above the threshold (avgCpuUtilization) before scaleUp starts.\n11. Number of seconds the average CPU utilization for all pods are below the threshold (avgCpuUtilization) before scaleDown starts.\n14. CPU millicores reserved by the kubelet for each pod of this application. Used by HPA to calculate scale. Pods are allowed to consume more than this if it\u0026rsquo;s available.\n15. Memory reserved by the kubelet for each pod of this application. Pods are allowed to consume more than this if it\u0026rsquo;s available\nNew optional field without default values available in values.yaml 1 2 3 4 5  deployment: resources: limits: cpu: 1000m memoty: 512Mi   Walkthrough\n4. Upper limit of CPU millicores a pod is allowed to consume. Pods hitting the limit will be throttled\n5. Upper limit of memory a pod is allowed to consume. Pods exceeding this limit will be terminated by the system with an out of memory (OOM) error.\nPull requests merged  Horizontal Pod Autoscaler (PR #3)  "
},
{
	"uri": "https://docs.altinn.studio/technology/architecture/components/application/solution/altinn-platform/authorization/xacml/",
	"title": "XACML - Altinn Studio",
	"tags": ["architecture", "security", "XACML"],
	"description": "XACML stands for &#34;eXtensible Access Control Markup Language&#34;.",
	"content": "The standard defines a declarative fine-grained, attribute-based access control policy language, an architecture, and a processing model describing how to evaluate access requests according to the rules defined in policies.\nThe Altinn Studio and Altinn Studio Apps solution uses the XACML standard for the following\n XACML Reference Architecture: Used as input for defining the Altinn Studio Apps authorization architecture XACML Policy: Used to define the authorization rules for apps XACML Request: Format used for PEP to call PDP XACML Response: Format used for response from PDP to PEP.  XACML Policy The Policy Document describes the rules for a App. This policy is imported to the Policy Retrieval Point.\nSee example policy from application in production\nXACML Request The XACML Request will follow XACML 3.0 JSON profile. See documentation.\nSingle request The below example show how a request try to verify that a user is allowed to read a given instance.\n{ \u0026#34;Request\u0026#34;: {  \u0026#34;ReturnPolicyIdList\u0026#34;: true, \u0026#34;AccessSubject\u0026#34;: [ { \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:user-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1\u0026#34; } ] } ], \u0026#34;Action\u0026#34;: [  { \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;read\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; } ] } ], \u0026#34;Resource\u0026#34;: [  { \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:instance-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026#34; } ] } ] } } Request for Multiple Decisions Policy Decision Point supports Request for Multiple Decisions. The below request show how you can request decision for both read an write for the same resource.\n{ \u0026#34;Request\u0026#34;: { \u0026#34;ReturnPolicyIdList\u0026#34;: true, \u0026#34;AccessSubject\u0026#34;: [ { \u0026#34;Id\u0026#34;: \u0026#34;s1\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:user-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1\u0026#34; } ] } ], \u0026#34;Action\u0026#34;: [ { \u0026#34;Id\u0026#34;: \u0026#34;a1\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;read\u0026#34;,  \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;IncludeInResult\u0026#34;: true } ] }, { \u0026#34;Id\u0026#34;: \u0026#34;a2\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;write\u0026#34;,  \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;IncludeInResult\u0026#34;: true } ] } ], \u0026#34;Resource\u0026#34;: [ { \u0026#34;Id\u0026#34;: \u0026#34;r1\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:instance-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026#34;, \u0026#34;IncludeInResult\u0026#34;: true }, { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:org\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;skd\u0026#34; }, { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:app\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;taxreport\u0026#34; }, { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:partyid\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000\u0026#34; }, { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:task\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;formfilling\u0026#34; } ] } ], \u0026#34;MultiRequests\u0026#34;: {  \u0026#34;RequestReference\u0026#34;: [ { \u0026#34;ReferenceId\u0026#34;: [ \u0026#34;s1\u0026#34;, \u0026#34;a1\u0026#34;, \u0026#34;r1\u0026#34; ] }, { \u0026#34;ReferenceId\u0026#34;: [ \u0026#34;s1\u0026#34;, \u0026#34;a2\u0026#34;, \u0026#34;r1\u0026#34; ] } ] } } } XACML Response The XACML Response will follow XACML 3.0 JSON profile. See documentation.\nResponse for single decision request { \u0026#34;Response\u0026#34;: [ { \u0026#34;Decision\u0026#34;: \u0026#34;Permit\u0026#34;,  \u0026#34;Status\u0026#34;: { \u0026#34;StatusCode\u0026#34;: { \u0026#34;Value\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:status:ok\u0026#34; } }, \u0026#34;Obligations\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;urn:altinn:obligation:authenticationLevel1\u0026#34;, \u0026#34;attributeAssignment\u0026#34;: [ { \u0026#34;attributeId\u0026#34;: \u0026#34;urn:altinn:obligation1-assignment1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;urn:altinn:minimum-authenticationlevel\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;, \u0026#34;issuer\u0026#34;: null } ] } ], \u0026#34;Category\u0026#34;: [ { \u0026#34;CategoryId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:partyid\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000\u0026#34; } ] } ] } ] } Response for multipe decision { \u0026#34;Response\u0026#34;: [ { \u0026#34;Decision\u0026#34;: \u0026#34;Permit\u0026#34;,  \u0026#34;Status\u0026#34;: { \u0026#34;StatusCode\u0026#34;: { \u0026#34;Value\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:status:ok\u0026#34; } }, \u0026#34;Obligations\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;urn:altinn:obligation:authenticationLevel1\u0026#34;, \u0026#34;attributeAssignment\u0026#34;: [ { \u0026#34;attributeId\u0026#34;: \u0026#34;urn:altinn:obligation1-assignment1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;urn:altinn:minimum-authenticationlevel\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;, \u0026#34;issuer\u0026#34;: null } ] } ], \u0026#34;Category\u0026#34;: [ { \u0026#34;CategoryId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;read\u0026#34; } ] }, { \u0026#34;CategoryId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:instance-id\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026#34; } ] } ] }, { \u0026#34;Decision\u0026#34;: \u0026#34;Permit\u0026#34;,  \u0026#34;Status\u0026#34;: { \u0026#34;StatusCode\u0026#34;: { \u0026#34;Value\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:status:ok\u0026#34; } }, \u0026#34;Obligations\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;urn:altinn:obligation:authenticationLevel1\u0026#34;, \u0026#34;attributeAssignment\u0026#34;: [ { \u0026#34;attributeId\u0026#34;: \u0026#34;urn:altinn:obligation1-assignment1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;urn:altinn:minimum-authenticationlevel\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;, \u0026#34;issuer\u0026#34;: null } ] } ], \u0026#34;Category\u0026#34;: [ { \u0026#34;CategoryId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;write\u0026#34; } ] }, { \u0026#34;CategoryId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:instance-id\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026#34; } ] } ] } ] } "
},
{
	"uri": "https://docs.altinn.studio/tags/xacml/",
	"title": "xacml",
	"tags": [],
	"description": "",
	"content": ""
}]