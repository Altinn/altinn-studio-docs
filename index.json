[
{
	"uri": "https://docs.altinn.studio/design/designprinsipper/",
	"title": "Designprinsipper",
	"tags": [],
	"description": "Altinn har som mål å gjøre det enklere for innbyggere og næringsliv å være i kontakt med det offentlige uavhengig av digital kompetanse.",
	"content": "Når vi utvikler nye eller forbedrer eksisterende produkter følger vi et sett med prinsipper for å kunne sikre oss at vi leverer brukervennlige løsninger til alle. Vi anbefaler å følge disse prinsippene uansett hvilken offentlig løsning du jobber med å utvikle.\nVi setter brukerbehov først Vi bruker innsikt om brukernes behov aktivt i utviklingen av produktene våre. Alle løsninger skal fokusere på å løse reelle problemer for brukerne og vi bruker undersøkelser og brukerinnsikt til å ta beslutninger.   Skjule kompleksitet Vi lager fokuserte og forenklede løsninger og skreller vekk unødvendig kompleksitet for brukerne. Løsningene er ofte komplekse på baksiden, men fremstår enkle og brukervennlige for folk som bruker dem.   Helhetlige brukeropplevelser Produktene våre skal henge sammen slik at folk får en helhetlig brukeropplevelse. Vi bruker konsistent språk og samme komponenter i alle digitale løsninger. Brukerne skal kjenne seg igjen uansett hvilken del av produktet man bruker.   Visuelt design som motiverer Det visuelle designet skal bidra til å gjøre brukerne trygge i dialogen med det offentlige. Vi bruker en vennlig fargepalett, et enklere grensesnitt, tydelige interaksjonselementer og fargesterke illustrasjoner til å skal skape en god atmosfære. Alle visuelle beslutninger skal ha et klart formål om å skape en spesifikk effekt.   Tilgjengelighet for alle Vi strekker oss langt for å lage digitale løsninger som skal være tilgjengelige for alle. Vi gjenbruker komponenter som en måte å optimalisere tilgjengelighet på - teknisk så vel som interaksjonsdesign og visuelt design.   "
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/kom-i-gang/",
	"title": "Kom i gang",
	"tags": [],
	"description": "Her finner du veiledning for hvordan du bruker designsystemet i andre løsninger, og hvordan du jobber med videreutvikling av nye komponenter i designsystemet.",
	"content": " Bruke CSS og Javascript fra designsystemet Skal du kun benytte deg av design fra designsystemet, trenger du ikke å innstallere Pattern Lab som utviklingsmiljø. Du trenger kun å hente ned de distribuerte designfilene (css og javascript) fra NPM. I tillegg kan du bruke designsystemet for å finne og kopiere HTML-koden inn i ditt system. (Grunnen til at HTML ikke kan være synkronisert, er at de ulike løsningene er bygget på ulike bakenforliggende system). Designsystemet er versjonsbasert, slik at din løsning kan velge å oppdatere til nyeste versjon av designsystemet når det er ønskelig. NB: jQuery må hentes inn i tillegg.\n\nJobbe med videreutvikling i designsystemet Med definerte UI-komponenter i Patternlab kan man som frontend-utvikler enkelt sy sammen nye maler og prototyper. NB: En designer skal alltid være ivolvert i design av nye brukergrensesnitt.\nSkal du jobbe med frontend, må du først klone Git-repositoriet fra Altinns github og følge oppskriften der for hvordan du setter opp utviklingsmiljøet. Når du er ferdig med innstallasjonen skal du kunne se dette på din localhost:3000.\nPattern Lab Dokumentasjon Dokumentasjon for hvordan utvikle atomisk design med Pattern Lab er tilgjengelig på Pattern Lab sine nettsider.\nRutiner for oppdatering Når et nytt atom, molekyl eller organisme lages, skal følgene sjekkes:\n Følg retningslinjene for frontend-kode. Dersom du har endret en eksisterende komponent, sjekk at den fortsatt fungerer som den skal på alle steder den er brukt. Placeholder-tekst i komponenter skal beskrive funksjonen. F.eks \u0026ldquo;Tittel på listen\u0026rdquo;. Løpende tekst kan være lorem ipsum. Oppdater komponentens MD-fil med versjon, status, og eventuelle notater relatert til frontend. Sjekk at komponenten fungerer i alle skjermstørrelser (responsivt). Sjekk at både koden og komponenten er universelt utformet i henhold til kravene.  Branching i github Designsystemet benytter trunk-basert utvikling. Les mer om dette på altinnpedia\nPublisering Designsystemet versjoneres og publiseres slik at det enkelt kan benyttes av andre løsninger. Vi publiserer til både npmjs.com og github.com. Les mer om dette på altinnpedia\nCSS Designsystemets css-filer er delt inn etter prosjekt. Vi har en felles \u0026ldquo;scss-common\u0026rdquo;-mappe som inneholder felles gjenbrukbar css på tvers av prosjekter.\nHvert enkelt prosjekt kan selv velge hva de ønsker å inkludere av common-filer. De kan også velge hvilken Bootstrap-css de ønsker å inkludere. Til slutt inkluderes spesifikk css for det aktuelle prosjektet. Dette gjelder alle prosjekter i designsystemet.\nIngen av prosjektene eier \u0026ldquo;scss-common\u0026rdquo;-mappen, og dersom det gjøres endringer her, skal minst en representant fra hvert prosjekt tagges i pull requesten, og godkjenne endringen.\nDersom et prosjekt ønsker å gjøre endringer som ikke påvirker de andre prosjektene, gjøres dette i prosjektets egen scss-mappe. F.eks: Dersom AltinNett har behov for å for å endre \u0026ldquo;breadcrumb-scss\u0026rdquo;, men ikke vil risikere at det påvirker brreg, oppretter de en egen \u0026ldquo;breadcrumb.scss\u0026rdquo; under scss-altinnett og gjør den aktuelle endringen her.\nJavaScript Designsystemets JavaScript-filer er delt inn i \u0026ldquo;prototyping\u0026rdquo; og \u0026ldquo;production\u0026rdquo;.\n source/js/prototyping/ inneholder funksjonalitet som bare brukes i prototype-sammenheng source/js/production/ inneholder funksjonalitet som brukes i produksjon  Hvert prosjekt har en egen \u0026ldquo;init\u0026rdquo;-fil som starter javascript-filene prosjektet har behov for.\nFilen \u0026ldquo;config.json\u0026rdquo; spesifiserer hvilke javascript-filer hvert prosjekt skal hente inn. Hvert prosjekt har i config-filen en prototype-del og en produksjons-del. Config-filen leses av Gulp for å generere produksjonsfilene til dist-mappen, mens prototypefilene genereres til public-mappen.\nEksterne biblioteker Utviklingsoppsettet er orientert rundt et Node.js-miljø og derfor blir JavaScript-biblioteker (til bruk i både utvikling og produksjon) hentet inn som Node.js-moduler (definert i fila package.json).\nDistribuert kode JavaScript-kode for Altinns brukergrensesnitt leveres som produksjonsfiler:\n dist/js/infoportal.js sammenfatter internt produsert kode for de visninger og moduler som omfattes av infoportal dist/js/infoportal.vendor.js sammenfatter eksterne biblioteker for de visninger og moduler som omfattes av infoportal dist/js/portal.js sammenfatter internt produsert kode for de visninger og moduler som omfattes av portal dist/js/portal.vendor.js sammenfatter eksterne biblioteker for de visninger og moduler som omfattes av portal  Øvrig informasjon En del av koden forutsetter jQuery som avhengighet. jQuery bundles imidlertid aldri med distrubusjonsfiler, grunnet utbredelsen til bibilioteket, og må derfor refereres til utenom.\nGithub gh-pages Vi har en egen branch som heter \u0026ldquo;gh-pages\u0026rdquo;. Filene som ligger i denne branchen vises som en demo på altinn.github.io/DesignSystem/ .\nI denne branchen ligger følgende: - Alle filer under \u0026ldquo;designsystem-styleguide\u0026rdquo; \u0026gt; \u0026ldquo;_site\u0026rdquo;. (Index-filen vil da sørge for at designsystemets utstillingsvindu er tilgjengelig på demoen over.) - Innholdet fra PatternLabs \u0026ldquo;public\u0026rdquo;-mappe, slik at frontendmiljøet kan være synlig fra altinn.github.io/DesignSystem/PatternLab - Et par andre mapper som er relevant for tidligere versjoner av prototypen\nFor å oppdatere altinn.github.io/DesignSystem/, kopier de nyeste filene fra \u0026ldquo;designsystem-styleguide\u0026rdquo; \u0026gt; \u0026ldquo;_site\u0026rdquo; og innholdet fra PatternLabs \u0026ldquo;public\u0026rdquo;-mappe. Kjør git checkout gh-pages i \u0026ldquo;Designsystem\u0026rdquo;-repositoriet, og lim inn de nye filene. Commit til gh-pages branchen.\nOppdatere Designsystemets utstillingsvindu Designsystemet har et eget \u0026ldquo;utstillingsvindu\u0026rdquo; for komponenter (Storefront). Koden for dette ligger på Git-repositoriet \u0026ldquo;designsystem-styleguide.\u0026rdquo; Dersom du skal oppdatere dette må du først klone Git-repositoriet og følge installasjonsveiledningen.\nFor å importere de siste komponentene fra Pattern Lab inn i utstillingsvinduet, gå tilbake til git-repositoriet \u0026ldquo;Designsystem\u0026rdquo; (Pattern Lab), og kjør gulp style-guide-export i kommandolinjen. Alle patterns vil da havne i \u0026ldquo;designsystem-styleguide\u0026rdquo; \u0026gt; \u0026ldquo;patterns\u0026rdquo;.\nFor å vise komponentene, må man lage en ny md-fil under ønsket kategori i \u0026ldquo;components\u0026rdquo;-mappen. F.eks under \u0026ldquo;skjemakomponenter\u0026rdquo;. Deretter må md-filen oppdateres med info og referere til korrekt fil i \u0026ldquo;patterns\u0026rdquo;-mappen.\n"
},
{
	"uri": "https://docs.altinn.studio/design/designsystem/",
	"title": "Designsystem",
	"tags": [],
	"description": "Vi har erfart at det å lage konsistente webløsninger ikke er så lett. Derfor har vi laget et designsystem som skal gjøre samarbeidet mellom designere, utviklere og andre folk lettere, og få webløsningene våre til å fremstå mer helhetlige.",
	"content": " Designsystemet består av to deler:\n Et komponentbibliotek for front-end. Komponentbiblioteket er bygget på Patternlab, du finner dokumentasjon av dette på teknologisidene. Et Figma-bibliotek med UI-komponenter som kan brukes av designere for å prototype nye maler.  Designsystemet baserer seg på såkalt atomisk designmetodikk hvor man i stedet for å designe sider designer komponenter som kan settes sammen og gjenbrukes i ulike webløsninger.\nDette ønsker vi å oppnå  Helhetlige og konsistente brukeropplevelser ved å bruke gjenkjennbare og godt testede komponenter Forenkle arbeidsflyten for designere, utviklere, produkteiere og andre  Kom i gang Det er viktig å ha dedikerte designere i prosjektet som kjenner brukernes behov og kan lage gode offentlige digitale løsninger ved å gjenbruke komponentene på riktig måte.\nSom designer kan du bruke designsystemet til å finne interaksjonselementer til å bygge nye eller videreutvikle webløsninger med. De ulike komponentene er laget for at de skal passe sammen i en større helhet. Det er derfor viktig å følge retningslinjene for hvordan disse brukes for å oppnå et konsistent og gjenkjennbart uttrykk over tid. Designsystemet vil hjelpe oss til å gjøre designprosessen mer fokusert på å løse konkrete designutfordringer for brukerne våre, ved at vi slipper å designe komponentene på nytt hver gang vi skal lage noe.\nGjenbruke eksisterende eller lage ny visuell profil Skal løsningen knyttes opp mot en eksisterende merkevare vil du som designer benytte deg av samme visuelle profil som denne merkevaren. Siden designsystemet er et levende bibliotek av komponenter vil det over tid være behov for å justere og gjøre tilføyelser til den visuelle profilen.\nFor nye løsninger som skal bruke designsystemet anbefaler vi at så mye som mulig av egenskapene til de ulike komponentene arves. Det vil typisk være behov for å bruke en annen font, andre farger og gjøre små justeringer i styling. Grid og komponentenes responsive egenskaper er noe vi ser for oss kan gjenbrukes av alle. Hver merkevare får sitt eget “theme” i designsystemet.\nEffektiv design av gode brukeropplevelser Vi er opptatt av å forbedre måten vi designer produktene våre på og jobber med å organisere arbeidet med design og utvikling. Vi ønsker at alle prosjekter er med på å videreutvikle det felles biblioteket av komponenter med både design og kode. For designere vil dette i praksis si at Altinn som eiere av designsystemet ønsker å ta imot forslag til nye komponenter etter hvert som prosjektene ser behovet for det. Hvordan dette arbeidet skal organiseres jobber vi med.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/frontend-retningslinjer/",
	"title": "Frontend retningslinjer",
	"tags": [],
	"description": "For å få en felles forståelse av &#34;best practice&#34; for frontend-utvikling i Altinn har vi samlet noen regler for Javascript og CSS, samt utilities-klassene vi opererer med",
	"content": " CSS-regler  Skriv all CSS ved hjelp av SASS/SCSS Alle variabler skal inn i \u0026ldquo;variables.scss\u0026rdquo;. Prosjekter med eget theme kan overstyre variablene i sin egen variables-fil. Bruk kun klasser til stilsetting, ikke ID\u0026rsquo;er. Kun engelske klassenavn, id-navn og kommentarer  Prefikser For å kunne skille mellom klasser som kommer fra Bootstrap, Patternlab og klasser som er ment for å stilsette Altinns UI-komponenter, bruker vi prefikser som start på egendefinerte klasser.\n .a-\u0026hellip; Spesifiserer stilsetting for Altinns UI-komponenter .a-sg-\u0026hellip; Stilsetting lagt til for å utvide Pattern Lab\u0026rsquo;s design .a-js-\u0026hellip; For JavaScript og dens funksjoner .a-st-\u0026hellip; Spesifiserer stilsetting for presentasjon av designsystemet ( storefront) Dersom en løsning skal ha et eget theme, kan Altinns styling overstyres ved å neste css\u0026rsquo;en inni en klasse som blir lagt på body, f.eks .project-altinnett.  Dersom nye klasser introduseres for et prosjekt, bruk egen prefix, f.eks; - .br- \u0026hellip; Spesifiserer stilsetting for Brønnøysundregistrenes UI-komponenter - .an- \u0026hellip; Spesifiserer stilsetting for Altinnetts UI-komponenter\nCSS Konvensjon For å sikre konsistens i CSS-koden, skiller vi modul, komponent og state med bindestrek. Hver del av navnet skrives i lowerCamelCase.\n.\u0026lt; moduleName \u0026gt; [ - \u0026lt; componentName \u0026gt; ][ - \u0026lt; state \u0026gt; ] {}\nEksempler\n Modul (container/root) .searchResults {}\n Komponen av en modul\n.searchResults-heading {}\n State: (f.eks AJAX-loading)\n.searchResults-isLoading {}\n  Sass-lint med custom policies Der det er sammenfallende regler med linting av javascript er disse like. Dette gjelder i hovedsak innrykk som settes som 2xspace. Alle regler for linting av sass ligger i filen .sass-lint.yml. Her ligger det også lenker til dokumentasjonen for de spesifikke reglene. Om en regel er satt til 0 er den skrudd av, 1 vil gi en warning og 2 vil gi en feil.\nMan kan sette opp automatisk linting av scss i Visual Studio Code, installer extension «vscode-sass-lint»: https://marketplace.visualstudio.com/items?itemName=glen-84.sass-lint .\nFor å linte sass fra kommandolinjen kjør npm run sass eller ./node_modules/.bin/sass-lint –v -q fra roten av git-repoet. Om man bruker «npm run sass» vil kommandoen gi en feilmelding til slutt om man har noen feil eller warnings. Derfor kan det være ryddigere å bruke den andre kommandoen.\nFor å linte en spesifikk sass fil, bruk kommandoen ./node_modules/.bin/sass-lint –v –q source/css/scss/\u0026lt;mappenavn\u0026gt;/\u0026lt;filnavn\u0026gt;\nSortering av element properties er satt til å ta utgangspunktet i bootstrap sin PropertySortOrder https://github.com/twbs/bootstrap/blob/v4-dev/scss/.scss-lint.yml.\nJavaScript For linting av javascript bruker vi airbnb sine regler, med noen custom overrides som finnes i .eslintrc.js.\nMan vil ikke kunne committe til github dersom det er linting-feil i koden. Dette gjelder også for css-linting.\nKodekvalitet  HTML skal validere som HTML5 CSS skal validere med unntak av CSS3-attributter og IE-filtre. Klasse- og ID-navn skal ha meningsfulle navn som fungerer til gjenbruk andre steder. Bruk av !important skal begrenses i stilarket. Sjekk først om stilsettingen kan utføres ved omstrukturering av klasser/containere. Stilarket skal ikke inneholde duplisering og ingen ubrukte klasse- eller ID-selektorer (i den grad det kan kontrolleres). Semantisk korrekt oppbygging. Eks. Overskrifter (h1 \u0026gt; h2 osv), legends i fieldsets, caption på tabeller. Lister skal være være lister. Også oppramsinger av ting kan ofte markeres som lister.  Valideringsverktøy  Bootlint - Validerer Bootstrap prosjekter CSS Validator - Validerer CSS Total Validator - Validerer tilgjengelighet, rettskriving, og ødelagte lenker Easy Checks - Nyttige verktøy for UU Tanaguru Contrast Finder - Sjekker fargekontraster og foreslår gyldige alternativer Colour Contrast Analyser - Validerer fargekontraster etter WCAG2.0 krav (ikke prøvd)  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/css-utilities/",
	"title": "CSS Utilities",
	"tags": [],
	"description": "I utgangspunktet skal kun de fargene som er presentert her brukes. Hvis nye farger blir implementert skal dette gås opp med ansvarlig designer.",
	"content": " CSS-utilities Se Bootstraps sider for utilities. Vi har i tillegg noen egne utilities:\n Fontweight: .a-fontLight .a-fontReg .a-fontMedium .a-fontBold\n Overskrifter: .a-h1 .a-h2 .a-h3 .a-h4\n Bakgrunn: .a-bgWhite .a-bgGreen .a-bgGreenLight .a-bgGreenLighter .a-bgBlue .a-bgBlueLight .a-bgBlueLighter .a-bgPurple .a-bgPurpleLight .a-bgYellow .a-bgYellowLight .a-bgRed .a-bgRedLight\n Deaktivert bakgrunn: .a-disabled\n Tekstfarger: .a-textWhite .a-textBlue\n Stiplet linje i lister: .a-dotted .a-dotted-line-top\n Lenker uten understrek: .a-noUnderline\n Maks tre linjer tekst: .a-maxThreeLines2\n Position: .a-p-relative .a-p-static\n Display: a-displayBlock\n  NB: Denne listen er ikke fullstendig per 21.nov 2019.  Deaktiverte elementer Deaktiverte elementer får en stiplet grå bakgrunn ved bruk av klassen .a-disabled\n.a-disabled Skygger Skygger aktiveres ved bruk av variabelen $shadow\nbox-shadow: 1px 1px 4px 0px rgba(137, 137, 137, 0.5);\n$shadow Fargevariabler Fargene refereres til ved bruk av variabler som er definert i  variables.scss .\n$blue-darker: #022F51; $blue-dark: #0062BA;  $blue: #1eaef7; $blue-light: #cff0ff;  $green: #17c96b;  $green-light: #d4f9e4; $red: #e23b53; $red-light: #f9cad3;  $purple: #3f3161; $purple-light: #e0daf7; $yellow: #ffda06; $yellow-light: #fbf6bd;  $black: #000;  $grey: #6a6a6a;  $grey-medium: #BCC7CC;   $grey-light: #efefef;    "
},
{
	"uri": "https://docs.altinn.studio/design/figma/",
	"title": "Kom i gang med Figma",
	"tags": [],
	"description": "For å kunne jobbe effektivt med interaksjonsdesign og nye konsepter, har vi satt opp et design kit for Figma som inneholder alle komponentene i et såkalt &#34;Team-library&#34;. Dette er tilgjengelig for konsulenter og interne som jobber med å videreutvikle Altinn.",
	"content": " For å få tilgang til Altinns Figma-konto ta kontakt med Alise Kjelling. Tjenesteeiere i Altinn kan bruke Altinns åpne design kit for eksterne.\nVed hjelp av “Team Library” deler vi komponenter på tvers av alle filer og prosjekter i Altinns Figmakonto. Filmen over viser hvordan komponentene er delt inn i \u0026ldquo;Lister\u0026rdquo;, \u0026ldquo;Skjemakomponenter\u0026rdquo; og så videre.\nMasterkomponenter og instanser Dersom en master-komponent oppdateres vil de ulike filene som bruker komponenten få en melding om oppdateringen og spørsmål om å oppdatere til nyeste versjon.\nFilmen under viser eksempel på endring av en fargekomponent. Brukes fargen av en knapp, vil man i knappens fil få spørsmål om å oppdatere fargen. Herfra kan man igjen publisere den nye knappen, slik at disse endringene igjen når ut til alle filer som bruker knappen.\nHver masterkomponent eksisterer kun en gang. Alle instanser av komponenten lever sitt eget liv og endringer i disse vil ikke påvirke masterkomponenten. Man kan alltid resette en instans til å se ut som masterkomponenten igjen (ved å høyreklikke og velge “reset”).\nSett opp en ny mal i figma For å lage en ny mal må du først kopiere griden du ønsker å bruke (som du finner i “Introduksjon” \u0026gt; “Grid”). Gå deretter inn i prosjektet du skal jobbe med (f.eks “Maler-Altinn”). Velg filen XL eller XS, alt ettersom om du skal lage en ny desktopskisse eller mobilskisse. Lim inn griden (den kan justeres i høyden, men ikke i bredden). Hent til slutt inn komponentene du trenger fra “Team Library” og gjør eventuelle justeringer på dem.\nVariasjoner av komponenter En komponent kan inneholde flere ulike varianter av lag du kan skru på og av. Dersom du f.eks henter inn komponenten “Standard liste” og ser i lagene, vil du finne skjulte lag du kan aktivere ved å bruke øyesymbolet.\nVersjonskontroll På hver fil har man mulighet til å vise versjonshistorikk. Her kan man enkelt gå tilbake i historikken dersom en komponent er ødelagt.\nPrototyping Når sidemaler befinner seg i samme fil, er det mulig å lenke mellom dem. På denne måten kan man sette opp en enkel klikkbar prototype som viser hvor de ulike lenkene fører deg hen.\nEksempel på Altinns Figma-filer De navigerbare rammene under viser eksempler på filer vi har i komponentbiblioteket vårt. For å få tilgang til biblioteket, ta kontakt med Alise Kjelling.\n    "
},
{
	"uri": "https://docs.altinn.studio/design/logo/",
	"title": "Logo",
	"tags": [],
	"description": "I Altinn-profilen er det flere virkemidler som jobber sammen. Logoen er muligens det viktigste av disse virkemidlene, og fungerer ofte som en signatur på flatene man kommuniserer på.",
	"content": " \nNegativ logo Negativ variant av logoen kan brukes i enkelte tilfeller der bakgrunnen for mørk til å vise blå versjon.\n "
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/font/",
	"title": "Font og tekststørrelser",
	"tags": [],
	"description": "All tekst på Altinn er satt med fonten ‘DIN’ i fire ulike varianter: Light, Regular, Medium og Bold. ",
	"content": " Overskrifter Overskriftsnivåer brukes for å strukturere teksten. Det er derfor viktig å ikke bruke H1, H2, H3, osv for styling av størrelse, men for strukturering. Er det sturkturmesig riktig å bruke en H2, men du den skal ha styling som H3 kan du bruke klassen a-h3. F.eks:\n\u0026lt;h2 class=\u0026quot;a-h3\u0026quot;\u0026gt;Overskrift\u0026lt;/h2\u0026gt;  Les mer om riktig bruk av overskrifter på Difis nettsider.\nLine-height Line-height er satt til 1.5 (unitless).\nTekststørrelser Standard tekststørrelse er satt til 16px regular, mens brødtekst i artikler er satt til 18px regular. Tekststørrelsene på overskrifter og paragrafer varierer med skjermstørrelse.\nSidetittel 36px (desktop)\n36px (laptop)\n28px (tablet)\n24px (mobile)\nSeksjonstittel 28px (desktop)\n24px (laptop)\n22px (tablet)\n18px (mobile)\nUndertittel 20px (desktop)\n20px (laptop)\n18px (tablet)\n16px (mobile)\n Introtekst/ingress\n20px (desktop)\n20px (laptop)\n20px (tablet)\n18px (mobile)\n Brødtekst i artikler\n18px (desktop)\n18px (laptop)\n18px (tablet)\n16px (mobile)\n "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/requirements/functional/",
	"title": "Functional",
	"tags": ["architecture"],
	"description": "Functional requirements can be important to the architecture decisions",
	"content": "The functional requirements is extensive and is written as user stories. A good starting point is to look at Issue 1337 at GitHub to get a overview over the functionality\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/grid-og-layout/",
	"title": "Grid og layout",
	"tags": [],
	"description": "Altinn’s responsive brukergrensesnitt er basert på en 12-kolonners grid layout, samt et sett definerte avstander som tar utgangspunkt i 12px som base.",
	"content": " Bootstrap grid Vi har brukt Bootstrap\u0026rsquo;s responsive gridsystem (fra aplha v4) for å bygge malene. Systemet baserer seg på flexbox. Les mer om grid-systemet hos Bootstrap\nHvordan grid-systemet skal brukes Dette står også i Bootstraps dokumentasjon, men kort oppsummert består grid-systemet av tre hovedkomponenter: \u0026ldquo;containers\u0026rdquo;, \u0026ldquo;rows\u0026rdquo;, og \u0026ldquo;columns\u0026rdquo;.\n \u0026ldquo;Containers\u0026rdquo; sentrerer innholdet på siden. .container for fast bredde eller .container-fluid for full bredde. \u0026ldquo;Rows\u0026rdquo; er horisontale grupper av kolonner som sikrer at kolonnene blir stilt opp riktig. \u0026ldquo;Columns\u0026rdquo; er barn av \u0026ldquo;rows\u0026rdquo; og det er i der inneholdet skal bli plassert.   En rad (row) må tilsammen utgjøre 12 kolonner. Man kan for eksempel kobinere 4+4+4=12, 3+3+3+3=12, osv.. Klassenavn på \u0026ldquo;Columns\u0026rdquo; indikerer antall kolonner man vil bruke ut av 12 mulige innengfor en \u0026ldquo;row\u0026rdquo;. Så hvis du vil ha tre like brede kolonner, vil du bruke klassen .col-sm-4. (4 + 4 + 4 = 12) Kolonnenes bredde blir satt i prosent, så de er alltid fluid og relative til deres forelder. Kolonnene har horisontal padding to for å lage avstand mellom hver individuelle kolonne. Det er fem grid-nivåer, en for hver responsive breakpoint: : xs, s, m, l, og xl.  Breakpoints $grid-breakpoints: ( // Extra small screen / phone xs: 0, // Small screen / phone sm: 544px, // Medium screen / tablet md: 768px, // Large screen / desktop lg: 992px, // Extra large screen / wide desktop xl: 1200px ) !default;  CSS3 Media queries @media blir brukt for å definere ulik stilsetting for ulike medietyper, skjermstørrelser og enheter. CSS-kode som skal være forskjellig på forskjellige skjermstørrelser lages for mobil først - deretter utvider vi for større skjermer. Eksempel:\n.a-navbar { width: 100%; @include media-breakpoint-up(md) { width: 300px; } }  Les mer på Bootstraps nettsider\nAvstander // SPACE $spacer : 12px; // 12px $spacer/2; // 6px $spacer*1.5; // 18px $spacer*2; // 24px $spacer*3; // 36px $spacer*4; // 48px $spacer*5; // 60px $spacer*6; // 72px  Gjenbrukbare klasser for avstander Klassene refereres til med {property}-{sides}-{size}\nF.eks \u0026ldquo;pr-1\u0026rdquo; vil sette padding right til 12px. \u0026ldquo;mt-2\u0026rdquo; vil sette margin top til 24px. Her kan man også bruke mediaquery-klasser, f.eks ved å sette \u0026ldquo;pl-md-3\u0026rdquo; så vil man få en padding left på 36 px for skjermer større enn md (768px).\nLes mer på Bootstraps nettsider\nVertikal midtstilling Når tekst skal sentreres innenfor en ramme, slik som for eksempel på en knapp, skal teksten sentreres basert på høyden til versalene i fonten (de store bokstavene). Slik figuren viser vil dermed avstanden fra toppen av k-en til toppen av knappen være større enn avstanden fra bunnen av p-en til bunnen av knappen.\nInteraktive elementer Av hensyn til ulike brukeres fingerstørrelse og førlighet skal alle interaktive elementer ha touch-target på minimum 48px. Det vil si at selv om en knapp kan se ut som den er 36px høy vil ethvert trykk innenfor 48px utløse knappen.\nDette løses ved å legge til et pseudo-element med en høyde på 48px og sentrere det, se kodeutsnittet under.\n\u0026amp;:after { content: \u0026quot;\u0026quot;; width: 100%; height: 48px; position: absolute; left: 0; top: -6px; }  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/requirements/",
	"title": "Requirements",
	"tags": ["architecture"],
	"description": "Functional and non functional requirements for the different solutions has been important for the defined architecture. This documentation describe them.",
	"content": "They are important input to deciding which cababilities required and they also is important input to the Architecture Principles and Architecture Patterns.\n\rFunctional\rFunctional requirements can be important to the architecture decisions\n\r\rNon Functional Requirements\rNon functional requirements contains requirements that typical is important for deciding the architecture\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/design/ikonbruk/",
	"title": "Ikonbruk",
	"tags": [],
	"description": "Altinns ikoner er spesialtegnet for å harmonere med Altinns profilfont DIN. Ikonene fremstår i to vekter: Regular og Bold.",
	"content": " Retningslinjer for ikonbruk:  Ikonene skal som hovedregel ikke stå alene. De er ikke nødvendigvis selvforklarende og brukes derfor som støtteelement til tekst. Som hovedregel settes ikonene i samme vekt som teksten den står til. Ikoner på deaktiverte elementer skal være grå. Ikoner skal brukes sparsomt og kun der de gir verdi. Ikoner brukes for å differensiere og fremheve interaktive elementer. Et ikon kan ikke brukes til å symbolisere flere ting Det skal ikke benyttes ikoner som ikke er en del av ikonbiblioteket. Utvikling av nye ikoner skal skje gjennom UX-ansvarlig i Altinn. Hvis du ikke finner et ikon som passer og ikke har anledning til å følge disse retningslinjene vil du antagelig klare deg fint uten  Opprette nye ikoner Når nye ikoner lages, skal de først opprettes i Figma-filen Komponenter/Ikoner. Deretter skal den nye svg-filen lastes opp til FortAwesome, slik at den kan bli brukt i designsystemets front-end kode. Kontakt UX-ansvarlig i Altinn for å få tilgang til å laste opp nye ikoner til fortAwesome.\n "
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/ikonbruk/",
	"title": "Ikonbruk",
	"tags": [],
	"description": "Ikonene er satt sammen til en font ved hjelp av verktøyet &#34;FortAwesome&#34;.",
	"content": " Ikon-fonten oppdateres med nye ikoner ved å laste opp SVG-filer til FortAwesome. Kontakt UX-ansvarlig i Altinn for å få tilgang til å laste opp nye ikoner til fortAwesome.\nSett inn et ikon i HTML For å sette inn et ikon, bruk følgende kode:\n\u0026lt;i class=\u0026quot;ai ai-flag\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; Flagg  Bytt ut \u0026ldquo;flag\u0026rdquo; med navnet på ikonet du vil sette inn.\nNB: Dersom ikonet står alene uten tekst, legg følgende etter:\n\u0026lt;span class=\u0026quot;sr-only\u0026quot;\u0026gt;flag icon\u0026lt;/span\u0026gt;  Dette vil hjelpe brukere med skjermleser å oppfatte ikonets funksjon. Denne teksten er kun synlig for skjermlesere, ikke for vanlige brukere.\n Tilgjengelige ikoner  \u0026#xf008;  ai-download f008  Last ned svg  \u0026#xf009;  ai-arrowrightup f009  Last ned svg  \u0026#xf017;  ai-money f017  Last ned svg  \u0026#xf019;  ai-skatteetaten f019  Last ned svg  \u0026#xf01a;  ai-aordningen f01a  Last ned svg  \u0026#xf01b;  ai-phone f01b  Last ned svg  \u0026#xf01f;  ai-sign f01f  Last ned svg  \u0026#xf020;  ai-write f020  Last ned svg  \u0026#xf021;  ai-read f021  Last ned svg  \u0026#xf023;  ai-archive f023  Last ned svg  \u0026#xf026;  ai-plus f026  Last ned svg  \u0026#xf027;  ai-corp f027  Last ned svg  \u0026#xf028;  ai-private f028  Last ned svg  \u0026#xf02a;  ai-deadline f02a  Last ned svg  \u0026#xf02b;  ai-tax f02b  Last ned svg  \u0026#xf02c;  ai-exit f02c  Last ned svg  \u0026#xf02d;  ai-search f02d  Last ned svg  \u0026#xf02e;  ai-back f02e  Last ned svg  \u0026#xf030;  ai-expand f030  Last ned svg  \u0026#xf031;  ai-undo f031  Last ned svg  \u0026#xf032;  ai-openmessage f032  Last ned svg  \u0026#xf033;  ai-closedmessage f033  Last ned svg  \u0026#xf034;  ai-help f034  Last ned svg  \u0026#xf035;  ai-edit f035  Last ned svg  \u0026#xf036;  ai-document f036  Last ned svg  \u0026#xf037;  ai-settings f037  Last ned svg  \u0026#xf039;  ai-server f039  Last ned svg  \u0026#xf03a;  ai-info f03a  Last ned svg  \u0026#xf03d;  ai-arrowright f03d  Last ned svg  \u0026#xf03e;  ai-keyhole f03e  Last ned svg  \u0026#xf03f;  ai-expand-circle f03f  Last ned svg  \u0026#xf041;  ai-upload f041  Last ned svg  \u0026#xf042;  ai-help-popicon f042  Last ned svg  \u0026#xf043;  ai-check f043  Last ned svg  \u0026#xf046;  ai-circle-plus f046  Last ned svg  \u0026#xf047;  ai-circle-minus f047  Last ned svg  \u0026#xf049;  ai-facebook f049  Last ned svg  \u0026#xf047;  ai-circle-minus f047  Last ned svg  \u0026#xf04a;  ai-twitter f04a  Last ned svg  \u0026#xf04b;  ai-linkedin f04b  Last ned svg  \u0026#xf04c;  ai-date f04c  Last ned svg  \u0026#xf04d;  ai-send f04d  Last ned svg  \u0026#xf04f;  ai-info-circle f04f  Last ned svg  \u0026#xf052;  ai-check-circle f052  Last ned svg  \u0026#xf053;  ai-attachment f053  Last ned svg  \u0026#xf054;  ai-forward f054  Last ned svg  \u0026#xf055;  ai-trash f055  Last ned svg  \u0026#xf056;  ai-circle-exclamation f056  Last ned svg  \u0026#xf057;  ai-family f057  Last ned svg  \u0026#xf058;  ai-more f058  Last ned svg  \u0026#xf059;  ai-archive-alt f059  Last ned svg  \u0026#xf05a;  ai-print f05a  Last ned svg  \u0026#xf05b;  ai-client f05b  Last ned svg  \u0026#xf07a;  ai-keyhole-circle f07a  Last ned svg  \u0026#xf07b;  ai-private-circle-big f07b  Last ned svg  \u0026#xf07f;  ai-corp-circle-big f07f  Last ned svg   "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/requirements/non_functional/",
	"title": "Non Functional Requirements",
	"tags": ["architecture"],
	"description": "Non functional requirements contains requirements that typical is important for deciding the architecture",
	"content": " Architectural Concerns Architecture Concerns are categories of Non-Functional Requirements (NFRs) of a system that has been important defining this architecture. These are sometimes referred to as cross-cutting concerns or \u0026ldquo;the -ilities\u0026rdquo; because most of the words end with \u0026ldquo;-ility.\u0026rdquo;\nPerformance Scalability The platform need to be highly scalable. The traffic in this types of solutions involves a large part of the countries citizens and the traffic is often concentrated around a few dates.\nThe traffic also grows every year and the architecture should be able to\nRequirement: The platform should be able to scale up and down to support this type of usage patterns.\nResponse Time The solution need to have a performance to support a user friendly experience.\nRequirement: Page load should be less than 1 second\nCapacity The different solutions have different capacity requirements.\nThe Altinn Platform would need to support the combined traffic from all applications running in Altinn Apps.\nThe usage of Altinn is growing each year.\nReliability Reliablity requirements says something about how often users will experience system errors.\nAltinn have users in every age group and for most age groups more than 90% of the citizens use Altinn every year.\nThe requirement is that less than 1% of the users will experience errors.\nAvailability The solutions need to be available 24/7.\nRequirement: The architecture itself needs to be able to support high availability. It can\u0026rsquo;t require reqular downtime or other maintainence that makes it not available.\nRecoverability Based on the important of the solution the plattform needs to be recovorable also disaster events.\nRequirement: It should be possible to setup the solutions from scratch in xx hours (will be specificed)\nSecurity Building a platform to host applications for different governmental agencies will involve sensitive data for citizens and businesses in the country.\nThis makes security one of the most important architecture concern in the solutions.\nAuthentication Only authenticated users or systems can access data in the platform.\nRequirements - Use a standardized\nAuthorization Single sign on Isolation Personel security Maintainability The solutions will be open source and involve a large amount of developers. It is important that the different components are highly maintainable to support effective development\nOperability The solutions will de operated by a small devops team and need to be highly operable. It needs to support automatic monitoring.\nUsability Accessibility Both Altinn Studio and Application created in Altinn Studio and deployed to Altinn Apps need to follow WCAG 2.1 requirements by law.\nSee details about the WCAG 2.1 requirements that applies here.\nLocalisation The data needs to be stored inside the Norwegian boarder.\nPortability The technology architecture should not make it impossible to move to different cloud providers.\nOther Non Functional requirements System location The Altinn solution needs to be located inside Norways borders. This requires that we only can choose amongst the cloud providers providing cloud services inside Norway.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/principles/",
	"title": "Architecture Principles",
	"tags": ["architecture"],
	"description": "The Architecture Principles are guidelines for the construction of the architecture.",
	"content": " The following architecture principles has been defined for the solutions.\nThe principles are document as suggested by TOGAF.\nThe [architecture principles]() below is described like TOGAF recomends.\nFree and open-source software Principle\nThe components and solutions are Free and Open Source.\nRationale\nPossibility to share the platform as Open Source. The possibility to create an Open Source community around the platform.\nImplications\n Code developed is shared on GitHub. See License We have our backlog on Github. Can\u0026rsquo;t use closed source products in the platform Can\u0026rsquo;t use products with licensing limiting use and modifications Others can reuse and modify our components and solutions  Web Standards Principle\nUse Web Standards\nRationale\nCan use standard tools and developers does not need to have special skills to develop components in the platform or applications to run on the platform.\nImplications\n Formats and frameworks used need to follow standards We use JWT in authentication cookies  Build with modern and popular frameworks Principle\nWhen needing to choose between different framework with similar capabilites select the most modern and popular framework\nRationale\nThe project is open source and it is a big advantage to build the solution on frameworks that developers love to use. This gives better access to resources with the needed competency.\nImplications\n We build the frontend using React. The most loved web framework We use .Net core that developers love the most We use Linux Docker containers in Kubernetes. The 3 most loved platforms We use Visual Studio Code and Visual Studio. The two most loved development environments  Favor standards over custom Principle\nWhenever we need to store information we favor standard formats for that information over creating a custom format for that\nRationale\nStandard formats are documented and is some cases it exists 3. party tools to edit information\nImplications\n We use BPMN 2.0 to define the process for applications We use XACML 3.0 to define authorization policies for applications We use JSON as general format.  Design and build for Public cloud Principle\nThe solutions should be deployed to a public cloud solution. The architecture need to support that.\nRationale\nUsing public cloud infrastructure for one of the big vendors gives cost savings, the team can be more agile and the solutions can take ad\nImplications\n Additional security measures Need to build knowledge about cloud solutions  Limit cloud lock-in when possible Principle\nThe architecture should try to avoid technology that locks the platform to a specific public cloud vendor. But not for all costs. In many cases it would still make sense to choose a managed service only available in a given public cloud.\nRationale\nThe goal with this principle is that it should be possible to move the solution to a different cloud provider without needing to build everything from scratch.\nImplications\n Docker and Kubernetes is used for containers and orhecstration of containers.  Build as microservices Principle\nThe platform is built as microservices. Related functionality is grouped in to seperate applications and deployed as containers. Apps created in Altinn Studio will be deployed as microservices/apps\nRationale\nThe different components can be scaled differently, it can be deployed independently. Reduced deploy time. Different teams can be responsible for different microservices/apps.\nImplications\n Functionality in Altinn Platform is seperated in Authentication, Authorization, Profile, Storage, Pdf and Register component Applications created in Altinn Studio is deployed as microapps to Altinn Apps  Design for automation Principle\nThe component should be created in a way that they support automation in development, deployment and operations.\nRationale\nReduce the required effort to develop and operate the platform.\nImplications\n We use Continuous integration We use Continuous deployment We build Infrastructure as code We use Automatic scaling We monitor and do automatic recovery of components  Favor managed services Principle\nWe should use manages cloud services when possible\nRationale\nReduce effort needed to host the platform.\nImplications\n Use managed PostgreSQL in Azure for Gitea Use managed CosmosDB as document database Use Azure blob storage for storing data Use Azure Kubernets Services to manage the Kubernetes Clusters Use Azure Api Management as API-management platform  Security in depth Principle\nAll components should authenticate and authorize requests.\nRationale\nWe can\u0026rsquo;t trust other components.\nImplications\n Components in Altinn Platform authenticates and authorize end user even if the request comes throug a application that also require the same We use API management to controll traffic between Altinn Apps and Altinn Platform.  Cross platform Principle\nThe components in the platform should be cross platform and can run on Microsoft Windows, Linux and MacOs\nRationale\nDevelopers should be able to create applications on any platform.\nImplications\n We use .Net Core or Java to build components  Container technology Principle\nApplications should be deployed as containers\nRationale\nThe rationale to use containers is that we get a consistent runtime environment Isolate runtime environment. Consistency.\nImplications\n Deploy applications/components in docker containers.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/patterns/",
	"title": "Architecture Patterns",
	"tags": ["architecture"],
	"description": "The architecture defines some architecture patterns that is reused accross the different solutions.",
	"content": " Cloud Native The solutions are designed and built to be \u0026ldquo;Cloud Native\u0026rdquo;, meaning it is built be scalable applications hosted in public cloud.\nThere is serveral Architecture Patterns that Cloud Native applications are built on.\nContainers, microservices and declarative APIs exemplify this approach.\nThese techniques enable loosely coupled components that are resilient, manageable, and observable.\nCombined with robust automation, they allow the devops team to make changes frequently.\nThe Cloud Native blueprint below show the important aspect of a Cloud Native solution.\n\nThe following listing describes the different Architecture Patterns selected for Altinn\nMicroservice Pattern Overview The Microservice Pattern is one of the more defining patterns in the platform.\nIn the new Altinn Solutions this mean that Altinn Platform will be grouped in functional related components, that will run as separate applications in docker containers.\nExample components are authorization and storage.\nEach application created in Altinn Studio will be a isolated microservice application with API\u0026rsquo;s and frontend.\nConceptual View \nBenefits  Strong Module Boundaries: Microservices reinforce modular structure, which is particularly important for larger teams. Independent Deployment: Simple services are easier to deploy, and since they are autonomous, are less likely to cause system failures when they go wrong. Technology Diversity: With microservices you can mix multiple languages, development frameworks and data-storage technologies.  Risk \u0026amp; Issues  Distribution: Distributed systems are harder to program, since remote calls are slow and are always at risk of failure. Eventual Consistency: Maintaining strong consistency is extremely difficult for a distributed system, which means everyone has to manage eventual consistency. Operational Complexity: You need a mature operations team to manage lots of services, which are being redeployed regularly.  Layered Pattern Overview Applications/Components are organized into horizontal layers, each layer performing a specific role within the application. Typical the layers will typical be Presentation, API, Business and dataacess where dataccess could be access to database or API calls to other components.\nConceptual view \nBenefits  Testability. Dependency injection. Possible to mock lower layers.  Risk \u0026amp; Issues "
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/universell-utforming/",
	"title": "Universell utforming",
	"tags": [],
	"description": "God tilgjengelighet kan hjelpe mennesker med funksjonshemninger å oppfatte innholdet vårt på en meningsfull måte. Det er flere ting vi kan gjøre, men det første og viktigste er å skrive semantisk god HTML.",
	"content": " Forskrift om universell utforming av IKT-løsninger stiller krav om at nettsider må oppfylle 35 av 61 suksesskriterier i standarden Retningslinjer for tilgjengelig webinnhold (WCAG) 2.0. Sjekk ut minimumskravene på difi som er omfattet av forskriften.\nMål for universell utforming (UU)  Løsningen skal fungere 100% ved tab-navigering, med logisk og meningsfull fokusrekkefølge. Tab-indeks må vurderes. Det elementet som er i fokus skal få en egen stilsetting, slik at det er tydelig hvor man står. For å sørge for en god brukeropplevelse for blinde, skal sidemalene testes i skjermopplesere. Det er viktig at man er bevisst på om det blir brukt knapper eller linker, da skjermlesere kan få problemer med å tolke funksjonaliteten. alt- og title-attributter skal brukes til å gi tilleggsinformasjon til bilder og andre objekter. label-element skal ha et for-attributt som matcher skjemakontrollen det tilhører, med mindre label omslutter input-feltet. Ulike typer lenker skal brukes riktig (disse har ulikt design basert på om de står sammen med annen tekst, eller om de lenker til interne/eksterne sider) Alle sidemaler skal tåle tekststørrelsesendring på opptil 200% uten å brekke eller at tekst forsvinner. Alle klikkbare elementer skal være minimum 48px på korteste side. Elementer trenger ikke oppfylle dette visuelt, men kan få et usynlig touch-område rundt seg.  Dynamisk innhold er alltid litt vanskelig med tanke på UU, bruk aria-tags.\nTilpasse WCAG 2.0 sjekkliste for prosjekt (offisiell)\nWCAG-krav er retningslinjer, ikke krav. Dersom avvik skjer, bør det finnes en god begrunnelse for avviket.\nRutiner For å sikre best mulig kvalitet på løsningen, bruk følgende verktøy/steg:\n Sjekk Errors og Alerts i Wave Toolbar HTML skal validere (som HTML5). Test skjermleserfunksjonalitet (Overskrift-hopping, tabbing, lenker og vanlig lesing) med ChromeVox. Skru av CSS i nettleseren og sjekk at rekkefølge på komponenter er logisk. Kjør Accessibility Developer Tools Audits fane i dev tools.  Disse stegene er blitt tatt som standard design-review. I tillegg bør det testes på ekte brukere der det er mulig.\nAndre nyttige verktøy som kan tas i bruk dersom man trenger mer utdypende info er:\n Kjør Ainspector Sidebar i Firefox (denne deler opp evt feil inn i WCAG standards) NoCoffee simulator viser hvordan brukere med nedsatt syn opplever nettsiden ChromeLens (legges på i dev tools) kan brukes til å simulere nedsatt syn  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/",
	"title": "Architecture Capabilities",
	"tags": ["architecture"],
	"description": "The Architecture Capabilities are the logical building blocks of the solutions. They are grouped in to Development &amp; Operations (DevOps) Capabilities and Runtime (Execution) Capabilities.",
	"content": "Functional capabilities is described in the functional description of the solutions.\n\rDevelopment \u0026amp; Operations Capabilties\rThe development \u0026amp; operations architecture capabilities list the capabilities used to develop and operate Altinn Studio, Altinn Apps and Altinn Platform.\n\r\rRuntime (execution) arhictecture capabilities\rThe runtime (execution) capabilities desribes the provided capabilites by the architecture components at runtime.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/nettleserstotte/",
	"title": "Nettleserstøtte",
	"tags": [],
	"description": "Altinn støtter de nettleserne og operativsystemene som er mest anvendt av våre brukere. Vi tester ikke utdaterte eller ikke-supporterte versjoner av nettlesere.",
	"content": " Altinn fungerer med de fleste vanlige operativsystemer og nettlesere. Ettersom ulike nettlesere tolker kildekode forskjellig, kan besøkende på altinn.no få ulike brukeropplevelser basert på hvilken nettleser de benytter.\nNettlesere vi tester  Chrome Edge Firefox Internet Explorer 11 Opera Safari  Javascript Nettleseren må ha støtte for javascript.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/",
	"title": "Architecture Components",
	"tags": ["architecture"],
	"description": "Architecture Components describes the application, data, platform and infrastructure components that provides the capabilities.",
	"content": " Components relationship The figure below shows the relationship between the different componentes in the technical architecture and the capabilities they provide.\n\n\rApplication Components\rThe Application Components is split in to solution-specific application components, application construction components and non-solution application components.\n\r\rData Components\rData is the most important part of the solutions in Altinn.\n\r\rPlatform Components\rPlatform components are a mix of managed services and standard sofware/frameworks used to created the needed capabilties.\n\r\rInfrastructure components\rThis documentation contains details about infrastructure components used in the different solutions.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/apptemplates/",
	"title": "App templates",
	"tags": [],
	"description": "The Altinn Apps architecture support that applications can be buildt based on many different framworks/templates. These are the current supported templates",
	"content": "\r\rASP.NET Web Application Template\rDescription of ASP.NET Web based App template for Altinn Apps\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/design/",
	"title": "Slik designer vi",
	"tags": [],
	"description": "Her finner du våre designprinsipper, visuelle profil, merkevare og personlighet.",
	"content": "\r\rDesignprinsipper\rAltinn har som mål å gjøre det enklere for innbyggere og næringsliv å være i kontakt med det offentlige uavhengig av digital kompetanse.\n\r\rDesignsystem\rVi har erfart at det å lage konsistente webløsninger ikke er så lett. Derfor har vi laget et designsystem som skal gjøre samarbeidet mellom designere, utviklere og andre folk lettere, og få webløsningene våre til å fremstå mer helhetlige.\n\r\rKom i gang med Figma\rFor å kunne jobbe effektivt med interaksjonsdesign og nye konsepter, har vi satt opp et design kit for Figma som inneholder alle komponentene i et såkalt \u0026#34;Team-library\u0026#34;. Dette er tilgjengelig for konsulenter og interne som jobber med å videreutvikle Altinn.\n\r\rLogo\rI Altinn-profilen er det flere virkemidler som jobber sammen. Logoen er muligens det viktigste av disse virkemidlene, og fungerer ofte som en signatur på flatene man kommuniserer på.\n\r\rIkonbruk\rAltinns ikoner er spesialtegnet for å harmonere med Altinns profilfont DIN. Ikonene fremstår i to vekter: Regular og Bold.\n\r\rFarger\rI utgangspunktet skal kun de fargene som er presentert her brukes. Hvis nye farger blir implementert skal dette gås opp med ansvarlig designer.\n\r\rIllustrasjoner\rIllustrasjonene er tegnet av illustratør Sandra Blikås. De er spesialtilpasset grid, layout og fargepalett. Motivene viser hverdagssituasjoner som er tolkninger av sentrale tema i Altinns innhold.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/about/goals/",
	"title": "Goals",
	"tags": [],
	"description": "Main goals for Altinn Studio.",
	"content": " This summarizes the high level goals for Altinn Studio.\nUser friendly and responsive apps  User interface that is user friendly, effective and modern. Support for Responsive Design both for forms and the development tool. Built in accessability with support for WCAG 2 Good performance and low response time  Effective and self-serviced development  As a developer you can do everthing yourself (including deployment to production) whenever you want, without need for orders, training ++. Bottlenecks is eliminated. Effective and real testing, where unit test works like in a test environment and produiction. Support for creating automated tests of apps Rules and logic is defined once for all channels (portal/web service / rest), and are more robust than current plattform Built inn data modelling in web based tool (and support for XSD import from external tools like SERES, OR, etc. ) Not nescessery with Citrix for access to Altinn Studio  Simple for non-technical developers, flexible for technical developers  Non-technical app developers have access to needed functionality in browser You can reuse good and testet components/widgets It is easy to do call against API\u0026rsquo;s in other systems (retrieve data, run external logic) Techincally skilled deveopers can configure all aspect of the apps, as an example make a reusable widgets, stylesheets ++ Reuse of text and other resources on the desired level (platform, org, app), all languages supported Git (version control) are used for source control for the apps, both from browser and code editior.  Open Source, cross-platform  Altinn Studio will be based on open source Altinn Studio will be open source Altinn Studio can run on your own computer, own serwers on Windows, macOS or Linux Everything is based on open web-standardes and regulaer development knowledge.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/",
	"title": "Solutions",
	"tags": [],
	"description": "The latest generation Altinn platform consist of serveral solutions.",
	"content": "\r\n\rAltinn Studio\rAltinn Studio is the design-time solution for developing, maintaining, building and deploying applications. Applications created can target both simple and complex user scenarios and have a modern web native architecture.\n\r\rAltinn Platform\rAltinn Platform contains components with central functionality that can be used by apps. Currently, this is storage, authentication, authorization, profile, register, receipt, and pdf.\n\r\rAltinn Apps\rAltinn Apps is a flexible, scalable and isolated hosting solution where apps created in Altinn Studio is deployed. The applications has a web native architecture and is deployed to Kubernetes Clusters as docker containers.\n\r\rAltinn CLI\rALtinn CLI is a command line application that can be used by service owneres to access Altinn Api\u0026#39;s. The application has as standard implemented functions for creating Altinn Applications and insatnces, functions for fetch and store application data. ALtinn CLI can be found on the GIT repo https://github.com/Altinn/altinn-cli. The application can be used as standrad or extended with custom function devloped by the service owners themselves.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/generell-systemdokumentasjon/",
	"title": "Arkitektur og infrastruktur",
	"tags": [],
	"description": "Beskrivelse av Altinns arkitekturområder, prinsipper og domenestruktur.",
	"content": "Foreløpig finner du informasjon om arkitektur og infrastruktur på altinnpedia (krever innlogging).\n\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/",
	"title": "Development &amp; Operations Capabilties",
	"tags": ["architecture"],
	"description": "The development &amp; operations architecture capabilities list the capabilities used to develop and operate Altinn Studio, Altinn Apps and Altinn Platform.",
	"content": "It covers the full spectrum of capabilities starting from development, going through a transition to operations and ending with operations it-self.\nEach capability consists of people, the procedures they follow and the software and hardware tools they use.\nThis documentation currently focus on the capabilties that can be shared and reused of others.\nFull screen | Visio\n\n\rProject Management Capabilities\rProject Management Capabilities covers the different capabilities to mange the project.\n\r\rQuality Management Capabilities\rQuality Management Capabilities covers the different capabilities to mange the project.\n\r\rPlatform Operations Management Capabilities\rPlatform Operations Management Capabilities describes the capabilities needed to operate the platform.\n\r\rAnalysis \u0026amp; Design Capabilities\rAnalysis \u0026amp; Design Capabilities is the capabiltiy needed to analyse needs and design solutions for the project.\n\r\rBuild \u0026amp; Test Capabilities\rBuild \u0026amp; Test Capabilties involves everything from the capability to write and building code to the different types of testing of th ecode\n\r\rSoftware Configuration \u0026amp; Release Management Capabilities\rSoftware Configuration \u0026amp; Release Management Capabilities process of tracking changes and handle new releases for a application\n\r\rEnvironments\rDescription of the environments\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/",
	"title": "Slik utvikler vi",
	"tags": [],
	"description": "Finn ut mer om våre tekniske løsninger, arkitekturen bak, og hvordan vi utvikler.",
	"content": "Dersom du lurer på hvordan du kan ta i bruk Altinn i ditt digitaliseringsarbeid, finner du utviklingsguider for dette på altinndigital.no/utvikling\nSlik utvikler vi Altinn Studio   Finn ut hvordan Altinn Studio er bygget opp og hvordan du skal jobbe med utvikling i løsningen.   Designsystem for front-end kode   Altinns designsystem, som er bygget med Pattern Lab, fungerer som et hjem for våre UI-komponenter og deres tilhørende front-end kode.   Altinn på github \nVi ønsker at det skal være enklest mulig for deg å bidra - flere av prosjektene våre ligger derfor åpent på github. Vi setter stor pris på dine inspill!\n\r\r\rArkitektur og infrastruktur\rBeskrivelse av Altinns arkitekturområder, prinsipper og domenestruktur.\n\r\rAltinn Studio\rSystem documentation for Altinn Studio, Altinn Apps and Altinn Platform.\n\r\rFront-end designsystem\rAltinns designsystem, som er bygget med Pattern Lab, fungerer som et hjem for våre UI-komponenter og deres tilhørende front-end kode. Designsystemet er i bruk av infoportal, portal og altinn digitalisering.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/",
	"title": "Runtime (execution) arhictecture capabilities",
	"tags": ["architecture"],
	"description": "The runtime (execution) capabilities desribes the provided capabilites by the architecture components at runtime.",
	"content": "The Runtime (exceution) Architecture supports applications at run-time. It is a unified collection of run-time technology services, capabilities, control structures, and supporting infrastructure upon which application software runs.\nThe below diagram shows the different runtime capabilities grouped by different areas.\nFull screen | Visio\n\nBelow you find detailed description of the different areas with links to the different components that provides that capability.\n\rIntegration Capabilties\rDescription of the Integration Capabilties in the technology architecture\n\r\rPresentation (User Interface) Capabilities\rPresentation Capabilities enable an application to manage the human-computer interface.\n\r\rSecurity Enforcement Capabilities\rSecurity Enforcement Capabilities are capabilities typical provided by common architecture components\n\r\rProcessing \u0026amp; Execution Capabilities\rProcessing \u0026amp; Execution Capabilities includes everthing from processing a defined business processes to loadbalancing and failover\n\r\rData management Capabilities\rData management capabilities range from handling data to defining data models for applications in Altinn Studio\n\r\rApplication development capabilities\rApplication development capabilities are capabilites that is used for developing applications in Altinn Studio\n\r\rApplication build \u0026amp; deploy capabilties\rApplication developers using Altinn Studio to create Applications have access to build \u0026amp; deploy capabilties\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/",
	"title": "Slik skriver vi",
	"tags": [],
	"description": "Tips og råd som er viktige for at flest mulig skal kunne finne og forstå teksten din.",
	"content": "Ressursene handler om ordene vi bruker, måten vi bruker dem på og hvordan vi ønsker å fremstå når vi skriver.\n\raltinn.no\rHer finner du skriveråd og regler for sidemaler som er viktige å følge når du skal skrive til innbyggere og næringslivsbrukere som målgruppe.\n\r\raltinndigital.no\rHer finner du skriveråd og regler for sidemaler som er viktige å følge når du skal skrive til etater og kommuner som målgruppe.\n\r\rUniversell utforming for innhold\rNår du lager innhold har du en rekke ansvarsområder når det kommer til universell utforming.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinn.no/m%C3%A5lform/",
	"title": "Målform",
	"tags": [],
	"description": "På altinn.no har vi innhold på både bokmål, nynorsk og engelsk. Vi forholder oss til mållova, som sier at begge målformer skal være representert med minst 25 prosent.",
	"content": "Informasjonsportal har mer variasjon i sidene som er tilgjengelig på hvilket språk, mens innlogget skal alt være oversatt. Tjenester 3.0 støtter i første utgave kun ett språk.\nNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene enda\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinn.no/skriver%C3%A5d/",
	"title": "Skriveråd",
	"tags": [],
	"description": "Tips og råd som er viktige for at flest mulig skal kunne finne og forstå teksten din. Ressursene handler om ordene vi bruker, måten vi bruker dem på og hvordan vi ønsker å fremstå når vi skriver.",
	"content": " \nNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene enda\n\r\rTall, nummer og tid Så fremt ikke annet er oppgitt her bruker vi retningslinjene for skrivemåte fra Språkrådet. Det er viktig at disse reglene følges konsekvent. Særlig aktuelt for Altinn er følgende regler:\nTid og dato Klokkeslett skal kun vises der det gir verdi for brukeren. I innboksen vil det for eksempel være naturlig å vise klokkeslett for meldinger mottatt samme dag men erstatte klokkeslett med dato for meldinger mottatt tidligere. Vi skriver som hovedregel dato med årstall når det er enkeltstående hendelser og kun dag og måned når det er snakk om gjentagende frister eller hendelser.\n Klokkeslett skriver vi kun med timer og minutter, aldri sekunder. Klokkeslett skrives slik: 13:45 Dato skal som hovedregel skrives slik: 05.06.2017 Unntaksvis kan datoer skrives slik i løpende tekst: 5. juni 2017  Organisasjonsnummer, bankkonto, personnummer og telefonnummer Riktig og konsekvent oppdeling av tallene hjelper brukeren å lese og skille forskjellige typer nummer. Ingen av nummerne skal skilles med punktum, kun mellomrom. I felt hvor brukeren skal skrive inn lengre nummer er det hjelpsomt å indikere antall siffer.\n Organisasjonsnummer deles opp i tre og tre: 123 456 789 Bankkonto deles opp i fire, to og fem: 1234 56 78901 Personnummer deles opp i seks og fem: 123456 78901 Mobilnummer deles opp i tre, to og tre: 987 65 432 Fasttelefon og faks deles opp i to og to: 98 76 54 32  "
},
{
	"uri": "https://docs.altinn.studio/innhold/altinn.no/",
	"title": "altinn.no",
	"tags": [],
	"description": "Her finner du skriveråd og regler for sidemaler som er viktige å følge når du skal skrive til innbyggere og næringslivsbrukere som målgruppe.",
	"content": "Retningslinjene skal følges når du skriver på altinn.no.\n\rMålform\rPå altinn.no har vi innhold på både bokmål, nynorsk og engelsk. Vi forholder oss til mållova, som sier at begge målformer skal være representert med minst 25 prosent.\n\r\rSkriveråd\rTips og råd som er viktige for at flest mulig skal kunne finne og forstå teksten din. Ressursene handler om ordene vi bruker, måten vi bruker dem på og hvordan vi ønsker å fremstå når vi skriver.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/",
	"title": "altinndigital.no",
	"tags": [],
	"description": "Her finner du skriveråd og regler for sidemaler som er viktige å følge når du skal skrive til etater og kommuner som målgruppe.",
	"content": "Retningslinjene skal følges når du skriver på altinndigital.no og på altinndigital.no/utvikling.\n\rSkriveråd\rSkriverådene skal sørge for at vi får et ensrettet språk i løsningene våre slik at innholdet blir lettere å forstå. Vi skal også gjøre bevisste valg på hvilken form innholdet presenteres i. Tekst, video, bilder og illustrasjoner skal velges ut fra formålet med innholdet.\n\r\rSidetyper\rInnholdet på altinndigital.no er prioritert etter de viktigste brukeroppgavene folk kommer på nettstedet for å få gjort. Her kan du se brukeroppgaver og regler for innhold for de ulike sidetypene.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/universell-utforming-for-innhold/",
	"title": "Universell utforming for innhold",
	"tags": [],
	"description": "Når du lager innhold har du en rekke ansvarsområder når det kommer til universell utforming.",
	"content": " På Difis nettsider kan du sortere UU-krav etter ansvarsområde innhold. Her får du en god oversikt på hva du må passe på når det kommer til tekst, bilder og video.\nHjelpemiddel For å oppdage feil i innholdstrukturen kan det være nyttig å benytte “Wave” som er et utvidelsesverktøy til chrome.\nLast ned Wave til chrome, installer og ikonet vil dukke opp øverst til høyre i nettleseren.\nI eksempelet under ser vi hjelp av Wave at det uheldigvis er blitt lagt inn en tom overskrift i episerver som egentlig ikke skulle vært der. For å fjerne den igjen må vi markere den tomme linjen i epi, og fjerne “Mindre kapittel Heading” som style.\n"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/kalender/",
	"title": "Arrangementer",
	"tags": [],
	"description": "Arrangementene vi markedsfører i kalenderen skal være relevante for etater og kommuner som jobber med digitalisering. Dette kan være tjenesteeiere som allerede bruker Altinn og andre som ikke bruker Altinn ennå, men er interessert i å høre om muligheter.",
	"content": " \nSekundær målgruppe vil være private aktører og andre i offentlig sektor som er interesserte i hva Altinn jobber med. NB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå\n\r\rBrukeroppgaver for arrangementer Generelt:  Har Altinn arrangementer som er relevante for meg i digitaliseringsjobben? Har Altinn kurs for å lære verktøyene? Hva er siste nytt i prosjektene?\n Hvordan har andre brukt Altinn? Kan jeg møte folk fra Altinn på andre arrangementer? For eksempel digitaliseringskonferansen og andrea arenaer Er det møteplasser hvor jeg kan møte andre etater jeg bør være med på? Hvordan komme i kontakt med Altinn for å dele fra min organisasjon på Altinns arrangementer? Er det møter jeg og min etat bør være delta på for å kunne være med på videreutviklingen av Altinn?  Brukeroppgaver arrangementsiden:  Hvor og når er det? Er det digitalt? Er det relevant for meg?\n Hva er programmet? Hvordan melder jeg meg på?\n Koster det penger?  Regler for innhold Dette er hva vi anbefaler som et minimum av informajon og rekkefølge på innholdet.\nBeskrivende tittel  Ikke interne prosjektnavn slik som for eksempel “Tjenester 3.0”. Dette kan evt. beskrives i teksten med forklaring til hva det er. Husk at folk som ikke kjenner Altinn skal forstå hva arrangementet er.  Lenke til sted  Hvis arrangementet har en fysisk lokasjon  Påmelding  Anbefalt tekst til påmeldingsknapp: “Meld meg på”.\n Hvis arrangementet ikke har påmelding bør det skrives til sist i teksten: “Arrangementet er gratis og du trenger ikke melde deg på”.  Ingress  Skriv kort og konsist\n Ingressen skal si noe om hva arrangementet er (gjerne litt selgende) og hvem det passer for.  Utfyllende tekst  Utdyp gjerne med et par setninger videre fra ingressen.\n Eventuell lenke til webinar/videomøte bør komme inn her  Agenda/program og praktisk info  Bruk bullets eller tidspunkt med bold  Eventuell bakgrunnsinfo  Hvis arrangementet er i regi av et prosjekt kan du krive kort om prosjektet til sist. Eventuelt lenke til andre sider på altinndigital hvor det står mer om temaet/prosjektet. For webinarer fra prosjektene vil det være relevant å lenke til sidene under “Hva jobber vi med”.  Etter arrangementet er ferdig  Arrangementet vil gjøres om til et tidligere arrangement når datoen for arrangementet er passert.\n Hvis det har blitt gjort opptak på video av arrangementet skal vi lenke til det. Legg inn lenke etter ingressen, slik at den er godt synlig. Lenketeksten kan for eksempel være “Se opptak fra kurset 24. Mars 2020\u0026rdquo;. Vis gjerne agenda med tidskoder for hvor i videoen de finner de ulike temaene.  "
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/skriver%C3%A5d/",
	"title": "Skriveråd",
	"tags": [],
	"description": "Skriverådene skal sørge for at vi får et ensrettet språk i løsningene våre slik at innholdet blir lettere å forstå. Vi skal også gjøre bevisste valg på hvilken form innholdet presenteres i. Tekst, video, bilder og illustrasjoner skal velges ut fra formålet med innholdet.",
	"content": " \nNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå\n\r\rOverordnede prinsipper Altinns visjon er «Sikkert samspill for et enkelt og effektivt samfunn». For målgruppen til altinndigital.no er sikkerhet spesielt viktig – at de kan stole på at informasjon utvekslet via Altinn beholder konfidensialitet og integritet. Det er også viktig at verktøyene for å lage tjenester er enkel å ta i bruk og effektive å forvalte.\nVi har spinnet videre på visjonen og laget et sett med overordnede prinsipper for altinndigital.no og sub-merkevarene. Ha prinsippene i bakhodet når du jobber med innhold til målgruppen.\nVi ønsker å fremstå som:  Pålitelige: Vi er til å stole på og har sikkerhet i høysete Tydelige: Det er lett å forstå hvilken plass Altinn har i digitaliseringsarbeidet Åpne: Vi deler og legger til rette for fornuftig bruk av skattepengene Nyskapende: Vi fornyer oss hele tiden Inkluderende: Vi er ikke kun til for de store, men også for de små etatene og kommunene som ikke har store budsjetter.  Skriveprinsipper  Vi bruker et muntlig og lett språk Vi skriver direkte til brukeren (bruk «du») Vi er sympatiske og selger Altinn på en subtil måte Vi skal engasjere og overtale Vi skriver om tekniske termer til forståelig språk Vi unngår interne begreper Vi gir gode råd om digitalisering Vi forklarer alltid hva som er neste steg\n Vi skriver på norsk der det er mulig  Generelle anbefalinger Huskeregler:  Tenk over hva som er informasjon, instruksjon og funksjon – og skriv det i forskjellige tekster/avsnitt etc. Unngå innledende tekst om teksten slik som «her kan du lese om\u0026hellip;» - gå rett på sak! Skriv kort, klart og klikkbart Skriv tekster som kan skummes Start alle sider med en oppsummering/ingress som gir tilstrekkelig informasjon slik at brukeren kjapt kan vurdere om innholdet er relevant  Lengde på tekst:  overskrifter: maks. 8 ord setninger: 15-20 ord avsnitt: 40-80 ord dokument (side): 500 ord  Unngå:  lange ord lange setninger\n kryptiske eller lyriske overskrifter\n flere poenger i samme setning flere poenger i samme avsnitt VERSALER (store bokstaver)  Overskrifter:  Skal sortere fra de brukerne som innholdet ikke er interessant for Vær spesifikk om innholdet, men sørg samtidig for å bruke ord som alle kan forstå Mere fagspesifikke termer kan komme lenger ned i teksten  Unngå verbalsubstantiver: Verbalsubstantiver gjør teksten unødvendig tung å lese. Et verbalsubstantiv er et substantiv dannet av et verb, for eksempel at «å utrede» blir til «å foreta en utredning», der utredning er selve verbalsubstantivet. De fleste verbalsubstantiv slutter på «-ing» og «-else».\nEn tekst med mange verbalsubstantiver blir abstrakt fordi den fjerner seg fra de konkrete handlingene den egentlig beskriver. Teksten blir mer konkret når vi bruker verbene i stedet.\nEksempler - Ved avtaleinngåelsen \u0026ndash;\u0026gt; Da avtalen ble inngått - Ny henvendelse \u0026ndash;\u0026gt; Kontakt oss - Innmelding av feil \u0026ndash;\u0026gt; Meld inn feil\nSkriv rett frem: Formelt språk er ofte skrudd sammen slik at utsagnet (verbet) kommer sent i setningen. Det gjør at man må lese mange ord før man får verbet. Det krever mer av leseren som må huske hva som stod tidlig i setningen. Verbet bør stå så tidlig som mulig i setningen og bør stå så nært subjektet som mulig.\nEksempel Tjenesteeier har en del plikter som må oppfylles \u0026ndash;\u0026gt; Tjenesteiere må oppfylle en del plikter\nSkriv aktivt, ikke passivt: I lovspråk blir det ofte skrevet at noe skal gjøres og det er ikke ønskelig å si noe om hvem som skal gjøre det. I Altinn sine løsninger vil det gjerne være flere enn en person som skal gjøre noe, men vi kan skrive direkte til brukeren likevel.\nEksempel Forberedelser og planleggingsaktiviteter må gjennomføres før utviklingen av tjenesten(e) kan og bør starte \u0026ndash;\u0026gt; Gjør forberedelser og planlegg godt før du utvikler tjenesten.\nUnngå stammespråk: Alle fagspråk har sitt stammespråk og i Altinn har vi både juss, byråkrati og tekniske fag hvor hvert språk har sin uttrykksform. Vi må passe på, at vi ikke bruker for mye fagspråk i løsningene våre.\nHvilken form skal innholdet være i? Skal vi lage en artikkel, video eller kanskje bruke illustrasjoner? For å velge form er det viktig å ha tenkt over hva som er formålet med innholdet. Som regel vil svaret på hvilken form innholdet skal være i at du trenger flere virkemidler for å få frem budskapet. Start derfor alltid med hva budskapet skal være, og hvordan du ønsker brukerne skal handle.\nVideo Som hovedregel skal en video aldri stå alene, men være et supplement til informasjon i tekstformat. Fordelen med videoer er at det kan fungere godt til å forklare kompleks informasjon. Ulempen er at det tvinger brukerne til å se hele sekvensen, for først da å finne ut av om det er noe som er relevant for dem. Det krever mer tid fra brukeren enn å lese tekst. De fleste brukere scanner innholdet på nettsteder og terskelen for å se en video er høyere enn å lese tekst.\nFra et tilgjengelighetsperspektiv er ikke video alltid et godt format for folk med syns- eller hørselsutfordringer. Brukerne skal ha mulighet til å tilegne seg samme informasjon på en annen måte enn video.\nVideo kan være bra til å vise hvordan et produkt fungerer eller hvordan verktøyene våre oppleves.\nRetningslinjer for bruk av video:  Gjør videoen så kort og tydelig som mulig. Det anbefales ikke lengere introduksjoner til hva videoen handler om enn 5-10 sekunder. Brukerne faller av ved lange introduksjoner. Navnet eller tittelen på videoen skal være beskrivende og tydelig Beskriv hva som er temaet, hvem er med i videoen og lengden på videoen i en undertekst (kort og konsist) Beskrivende thumbnail/bilde (ikke nødvendigvis fra starten av videoen) Video kan ofte oppleves som «dead end» - tenk over hva du vil ha brukerne til å gjøre etter å ha sett videoen. Legg for eksempel til en «call to action» eller fortsett med å sende brukeren videre til annet relevant innhold etter de har sett videoen. Hvis vi skal lenke til videoinnhold et annet sted skal det indikeres i lenken at dette er en video. Brukere liker ikke å bli overrasket over videoinnhold når de ikke forventer det.\n Alle videoer skal ha undertekster for å følge regler for tilgjengelighet  Les mer om hvordan du gjør video brukervennlig på Nilsen Norman Group – video usability.\nBilder Bilder brukes på Altinn digitalisering der det gir en merverdi til det tekstlige innholdet. For eksempel bruker vi bilder på case-artikler med eksempel på hvordan andre har brukt Altinn. Bildene viser hvem brukerne av tjenesten typisk er – vanlige folk i en bildestil som er naturlig og troverdig. Bildestilen passer med den visuelle profilen til Altinn og nye bilder skal følge samme bildestil. Bildene er tatt av Knut Åserud.\nVi bruker bilder av våre digitale veiledere (serviceledere) i «kontaktboksen» på produktsidene. Dette gjør vi får å få brukerne til å følge seg trygge – vi viser at det finnes folk på baksiden av produktet Altinn som kan hjelpe deg med digitalisering.\nRetningslinjer for bruk av bilder:  Bilder skal kun brukes der de er informasjonsbærende, ikke som pynt Stockfotos er ikke lov – undersøkelser viser at brukere ignorerer stockfotos som ikke ser ekte ut Bilder brukes i hovedsak på case/eksempler Bilder skal tas av profesjonell fotograf og følge brief til bildestil\n  Illustrasjoner Illustrasjoner brukes på Altinn digitalisering der det gir en merverdi til det tekstlige innholdet. I hovedsak bruker vi illustrasjoner til å illustrere produktene våre – til å vise hva produktet er og hvordan produktet virker. Vi bruker også illustrasjon til å formidle samarbeid om tjenesteutvikling og verktøyet, Altinn studio.\nRetningslinjer for bruk av illustrasjoner:  Illustrasjoner skal kun brukes der de er informasjonsbærende, ikke som pynt Illustrasjonene skal følge illustrasjonsstilen til altinn.no Tekniske illustrasjoner og modeller (på Altinn dokumentasjon) skal følge illustrasjonsstil som altinn.no/Altinn digitalisering Illustrasjoner skal på Altinn digitalisering i hovedsak brukes til å forklare produktene og verktøyene våre  "
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/nyheter/",
	"title": "Nytt i Altinn",
	"tags": [],
	"description": "Nyhetene skal ha relevans for etater og kommuner som jobber med digitalisering. Både tjenesteeiere og de som ikke bruker Altinn ennå. Andre private aktøre som for eksempel journalister og konsulenthus vil også kunne ha nytte av informasjonen.",
	"content": " Brukeroppgaver for nytt i Altinn Overordnede brukeroppgaver  Har det kommet noe nytt som påvirker det jeg jobber med? Venter på ny funksjonalitet og lurer på når det kommer ut? Hva kommer i Altinn fremover? Hvor mye er Altinn brukt?  Brukeroppgaver nyhetssiden  Er dette relevant for meg og min etat? Påvirker dette løsningene våre? Må vi gjøre noe? Hvor kan jeg finne mer informasjon? Hvem kan jeg kontakte om dette?  Regler for innhold Lurt å tenke over  Hvem er nyheten for? Hvorfor er den relvant? Hvorfor er dette en nyhet? Hvordan kan jeg vinkle det til å være en nyhet? Ofte vil en nyhet være noe vi ønsker folk skal ta i bruk - må gi en “call to action” videre – vi må vite hva vi ønsker de skal gjøre etter å ha lest saken og hjelpe dem videre. For eksempel via lenke til mer informasjon eller til verktøyet osv. Hva ønsker jeg å fortelle om? Hva er viktig for brukeren å vite? Hold deg til ett budskap. Mye bedre med en kort sak, enn en lang  Overskrift Skal være beskrivende og brukeren skal kunne tolke om saken er relevant for dem fra denne. Viktig å unngå stammespråk!\nIngress Kom fort til saken og unngå kryptiske innledninger. Ikke forklar hvorfor vi gjør noe før vi forklarer hva vi gjør.\nInnhold  Utdyp kort og konsist hva nyheten går ut på. Folk som ikke kjenner Altinn skal også forstå hva dette er. Forklar om dette er noe som påvirker tjenestene til etatene og kommunene – er det noe de må gjøre? Skal dette være i et driftsvarsel (er brukerne nødt til å gjøre noe)? For eksempel ha et driftsvarsel og så lenke til nyhetssaken. Vis vei til hvem brukeren kan ta kontakt med hvis de ønsker mer informasjon – enten kontaktperson, felles mailadresse, Slack eller lenke til hvor de kan finne mer informasjon  "
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/",
	"title": "Sidetyper",
	"tags": [],
	"description": "Innholdet på altinndigital.no er prioritert etter de viktigste brukeroppgavene folk kommer på nettstedet for å få gjort. Her kan du se brukeroppgaver og regler for innhold for de ulike sidetypene.",
	"content": "\nNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå\n\r\r\rArrangementer\rArrangementene vi markedsfører i kalenderen skal være relevante for etater og kommuner som jobber med digitalisering. Dette kan være tjenesteeiere som allerede bruker Altinn og andre som ikke bruker Altinn ennå, men er interessert i å høre om muligheter.\n\r\rNytt i Altinn\rNyhetene skal ha relevans for etater og kommuner som jobber med digitalisering. Både tjenesteeiere og de som ikke bruker Altinn ennå. Andre private aktøre som for eksempel journalister og konsulenthus vil også kunne ha nytte av informasjonen.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/service-configurations/",
	"title": "ServiceConfigurations.json",
	"tags": ["app-structure"],
	"description": "Beskrivelse av format for tjeneste konfigurasjons filen",
	"content": " Overordnet ServiceConfiguration.json filen spesifiserer ulike konfigurasjoner lagt til i design prosessen. Nå består den av api koblinger, kalkuleringer og dynamikk regler.\nFormat API connections Strukturen under beskriver api koblinger til et skjema. Objektet inneholder koblingene og informajson knyttet til api\u0026rsquo;ene som er i bruk. ClientParams og apiResponseMapping viser mapping til datamodellen. externalApiId viser kobling til api\u0026rsquo;er som kan brukes.\n \u0026quot;data\u0026quot;: { \u0026quot;externalApi\u0026quot;: { \u0026quot;APIs\u0026quot;: { \u0026quot;connections\u0026quot;: { \u0026quot;c5dadba0-9707-11e8-9c4d-6f48d2b86ea7\u0026quot;: { \u0026quot;externalApiId\u0026quot;: \u0026quot;id1\u0026quot;, \u0026quot;clientParams\u0026quot;: { \u0026quot;pnr\u0026quot;: \u0026quot;skattyterinfor.kontakt.kontaktpersonPostnummer.value\u0026quot; }, \u0026quot;metaParams\u0026quot;: { \u0026quot;clientUrl\u0026quot;: \u0026quot;fgdb\u0026quot; }, \u0026quot;apiResponseMapping\u0026quot;: { \u0026quot;skattyterinfor.kontakt.kontaktpersonPoststed.value\u0026quot;: \u0026quot;result\u0026quot; } } }, \u0026quot;externalApisById\u0026quot;: { \u0026quot;id1\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;id1\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Bring postnummer API\u0026quot;, \u0026quot;shortname\u0026quot;: \u0026quot;Postnummer\u0026quot;, \u0026quot;uri\u0026quot;: \u0026quot;https://api.bring.com/shippingguide/api/postalCode.json?\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Api for å hente poststed basert på postnummer\u0026quot;, \u0026quot;clientParams\u0026quot;: { \u0026quot;pnr\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;queryString\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;pnr\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;required\u0026quot;: true, \u0026quot;example\u0026quot;: \u0026quot;Example: 2050\u0026quot; } }, \u0026quot;metaParams\u0026quot;: { \u0026quot;clientUrl\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;queryString\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;clientUrl\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;required\u0026quot;: true, \u0026quot;example\u0026quot;: \u0026quot;Example: http://www.sitename.com\u0026quot;, \u0026quot;urlEncode\u0026quot;: true } } } }, \u0026quot;externalApisIds\u0026quot;: [ \u0026quot;id1\u0026quot; ] } },  Rule connections Strukturen under beskriver regler lagt til i et skjema. Objektet inneholder koblingene til regler som finnes på et skjema. I objektet er det spesifisert hvilken metode som skal brukes, hvilke felter i datamodellen som skal knyttes til input objektet til metoden og hvilke felt i datamodellen som skal knyttes til funsjonens output verdi.\n \u0026quot;ruleConnection\u0026quot;: { \u0026quot;d180e210-9707-11e8-9c4d-6f48d2b86ea7\u0026quot;: { \u0026quot;selectedFunction\u0026quot;: \u0026quot;ruleFunctionName\u0026quot;, \u0026quot;inputParams\u0026quot;: { \u0026quot;inputParam1\u0026quot;: \u0026quot;skattyterinfor.info.enhetOrganisasjonsnummer.value\u0026quot;, \u0026quot;inputParam2\u0026quot;: \u0026quot;skattyterinfor.kontakt.kontaktpersonEPost.value\u0026quot; }, \u0026quot;outParams\u0026quot;: { \u0026quot;outParam0\u0026quot;: \u0026quot;klage.spesifisering.klageSpesifisering.value\u0026quot; } } }  Conditional rendering connections Strukturen under beskriver dynamikk lagt til i et skjema. Objektet inneholder koblingene mellom skjema og dynamiske regler som finnes på et skjema. I objektet er det spesifisert hvilken metode som skal brukes, hvilke felter i datamodellen som skal knyttes til input objektet til metoden og mapping mellom regelen og elementer i skjemaet.\n \u0026quot;conditionalRendering\u0026quot;: { \u0026quot;d841b430-9707-11e8-9c4d-6f48d2b86ea7\u0026quot;: { \u0026quot;selectedFunction\u0026quot;: \u0026quot;conditionalFunctionName\u0026quot;, \u0026quot;inputParams\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026quot; }, \u0026quot;selectedAction\u0026quot;: \u0026quot;Hide\u0026quot;, \u0026quot;selectedFields\u0026quot;: { \u0026quot;d8416610-9707-11e8-9c4d-6f48d2b86ea7\u0026quot;: \u0026quot;94bb4f87-3428-4f2e-9b6a-6ff358ebd173\u0026quot; } } }  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-studio/",
	"title": "Solution-specific application components Altinn Studio",
	"tags": ["architecture", "solution"],
	"description": "Altinn Studio have many functional components that lets the app developer create, manage and deploy applications.",
	"content": "\r\n\rSolution-specific application components Altinn Studio Designer\rAltinn Studio Designer is the custom appliaction where app developers manage and creates applications.\n\r\rSolution components Altinn Studio Repositories\rIn Altinn Studio Repositories you find the functional components related to source control and access management of the application developer\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/rule-handler/",
	"title": "RuleHandler.js",
	"tags": ["app-structure"],
	"description": "Beskrivelse av format for rule handler js filen",
	"content": " Overordnet Filen RuleHandler.js brukes til å lage metoder som skal benyttes for til kalkuleringer/regler på felter i datamodellen eller for å skape dynamikk i et skjema.\nFormat Filen består av 4 objekter, 2 av de benyttes for til kalkuleringer/regler i skjema og de 2 andre benyttes til dynamikk i skjema. ruleHandlerObject og conditionalRuleHandlerObject skal benyttes til å definere metoder som kan brukes til kalkuleringer/regler i skjema. Alle metodene har et objekt som input parameter og en output verdi, strukturen på input objektet er beskrevet i ruleHandlerHelper og conditionalRuleHandlerHelper. Filen har følgende struktur:\n var ruleHandlerObject = { ruleFunctionName: (obj) =\u0026gt; { return obj.inputParam1 + \u0026quot; \u0026quot; + obj.inputParam2; }, } var ruleHandlerHelper = { ruleFunctionName: () =\u0026gt; { return { inputParam1: \u0026quot;inputParam1\u0026quot;, inputParam2: \u0026quot;inputParam2\u0026quot; }; }, } var conditionalRuleHandlerObject = { conditionalFunctionName: (obj) =\u0026gt; { return obj.input1 \u0026gt; 10; }, } var conditionalRuleHandlerHelper = { conditionalFunctionName: () =\u0026gt; { return { input1: \u0026quot;input1\u0026quot; }; }, }  Ved innlasting i skjemadesigneren vil filen lastes inn i window elementet og kalles ved hjelp av window.conditionalRuleHandlerObject.conditionalFunctionName. Kalkuleringer/regler kjøres når skjema fylles ut. Så regler kan testes både i desinger, preview og i runtime. Kalkuleringer/regler input objekt sine parameter og output parameteret kobles til felter i datamodellen.\nDynamikk regler manipulerer skjema ved å skjule eller vise felter. Input objektet kobles til datamodelfelter. Deretter må brukeren spesifisere hva som skal skje hvis metoden returnerer true. Per nå er det kun mulig å velge å skjule eller vise felter. Deretter knytter man \u0026lsquo;action\u0026rsquo; til felter som er lagt inn i skjema. Man kan knytte så mange felter man vil til en dynamisk regler.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/nonsolutionspecific/operations/backupandrecovery/",
	"title": "Backup and recovery",
	"tags": ["solution", "architecture"],
	"description": "All data created in the different solutions are backed up so it is possible to restore it in case of data loss.",
	"content": " As described under the backup and recovery capabilities there are serveral scenarious where the different type of data is lost.\nThis page describes the application components that makes it possible to protect against data loss.\nBackup Altinn Platform As described in the data section of the architecture documentation Altinn Platform stores data both in Azure Cosmos DB and in Azure Blob Storage.\nThere is different solutions for the different data stores.\nCosmos db Built in backup functionality Azure Cosmos DB automatically takes backups of your data at regular intervals. The automatic backups are taken without affecting the performance or availability of the database operations. All the backups are stored separately in a storage service, and those backups are globally replicated for resiliency against regional disasters.\nAzure Cosmos DB automatically takes a backup of your database every 4 hours and at any point of time, only the latest 2 backups are stored. However, if the container or database is deleted, Azure Cosmos DB retains the existing snapshots of a given container or database for 30 days.\nThis functionality is out of the box when using Azure Cosmos DB.\nThis backup would only be relevant to use if all data is lost from Cosmos DB.\nCustom backup with help of Azure Function To support recovery of single or group of documents we needed to create a custom backup mechanismen.\nFor this we use the change feed that Azure Cosmos DB expose.\nChange feed support in Azure Cosmos DB works by listening to an Azure Cosmos container for any changes. It then outputs the sorted list of documents that were changed in the order in which they were modified. The changes are persisted, can be processed asynchronously and incrementally, and the output can be distributed across one or more consumers for parallel processing.\nThe solution is to have a Azure Function that listens to the change feed\nand copies documents from Cosmos DB when they are created or modified to a blob storage.\nThe blob storage is a shared blob storage for all orgs. (The same way Cosmos DB is shared) The blob storage have enabled soft delete. All versions of a document in Cosmos should be written to the same blob. Soft delete will keep track of all versions.\nThe following collections has a Azure Function that takes backup. Click on name for code details about Azure Function\n Applications DataElements InstanceEvents Instance Texts  The below images show how the documents are backed up in a blob storage and soft delete has created a snapshot that last for 90 days. In theese 90 days we are able to recover the document to an earlier version.\nBlob storage Each org has their own separte storage account with a blob storage to store data for applications. In addition Altinn Platform has a shared blobstorge where metedata like XACML is stored for the different Apps.\nTo protect against unwanted deletion or changes we have enabled soft delete.\nWhen enabled, soft delete enables you to save and recover your data when blobs or blob snapshots are deleted. This protection extends to blob data that is erased as the result of an overwrite.\nWhen data is deleted, it transitions to a soft deleted state instead of being permanently erased. When soft delete is on and you overwrite data, a soft deleted snapshot is generated to save the state of the overwritten data.\nFor Altinn we have 90 days retention period. Inside that periode we can recover a blob to an earlier version.\nSee more about soft delete on Azure Documentation.\nAltinn Studio Recovery We would need to create tools to be able to restore elements from blob storage to Cosmos DB and from Snapshots in blob storage.\nThis is defined as issues in Github. Issue for Cosmos DB and Issue for Blob storage\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-studio/designer/",
	"title": "Solution-specific application components Altinn Studio Designer",
	"tags": ["solution", "architecture"],
	"description": "Altinn Studio Designer is the custom appliaction where app developers manage and creates applications.",
	"content": " Altinn Studio Designer contains serveral functional components/modules.\nWelcome Screen The welcome screen gives information to the user.\nDashboard Dashboard let the app developer search and find applications developed in Altinn Studio. It possible to search across all orgs the developer has access to.\nApp Creation App creation functionaliy lets the app developer create applications.\nDuring this process the app developer can select the org that will own the app and the repository name for that app.\nApp Info Application info module lets the user change the name of the app and add descriptions\nUI Editor The UI-editor lets the app developer create a UI interface with WYSIWYG\nDatamodel The datamodel functionality lets the developer upload a XSD for datamodel creation in app.\nWhen datamodel is uploaded a C# classes is generated based on this and metadata about datamodel is created.\nBuild \u0026amp; Deploy Build \u0026amp; Deploy functionality includes functionality to - Build created app to a docker container - Upload docker container to a container registry - Register the build in to a database - Let the app developer select a previous build and deploy that container to a specific Altinn Apps environment (test, performance test, production ++)\nProcess Process functionality lets the app developer configure the given process that a user/system acessing the developed app should follow.\nTexts The text module lets the app developer define the texts for a given app.\nLogic Editor The logic editor module lets the app developer create and modify app logic like validation and calculation. This is a very simple browser based editor. The recomendation is to clone the app repository and edit the code in a regular IDE like Visual Studio Code\nPolicy Administration Point As part of the application development process the developer defines the authorization policies for the app.\nRead more about pap and policies\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/nonsolutionspecific/development/",
	"title": "Development Applications",
	"tags": ["solution", "architecture"],
	"description": "Development Applications are used by the devops team to support the different development capabilities required",
	"content": " Application Lifecycle Management Applications Requirement \u0026amp; Release Management Use cases are defined in Github. We have defined differen types of template to support creation of user stories.\nReleases are managed on Github.\nSee releases here\nManual \u0026amp; Automated Test Tools Functional Test  Automated browser testing and WCAG testing using Testcafe.  Unit Test  Jest framework used for unit testing front-end. More details here. xunit used for unit testing back-end.  Service \u0026amp; API Test  API testing is done using Postman. More details here. Integration testing of services done using standard Microsoft frameworks.  Performance Testing \u0026amp; Profiling We will use K6 for performance testing.\nTestmanagement  Azure Test Plans in Azure Devops is usted for execution tracking Defects reported as issues in Github, using the Bug template.  DevSecOps Applications UX Design We use Figma for prototypes.\nSee our Figma Guidlines\nArtefact \u0026amp; Code Repository Github is uses for all Open Source code. See our GitHub repository.\nAzure Repos in Azure DevopsServices is used for other artefacts\nArchitecture Design Application design is created using MarkDown and published on this site. Visio is used for application drawings\nIDE The project uses Visual Studio Code and Visual Studio as IDE.\nBuild Tools The project uses different build tools based the framework.\n.Net packages \u0026amp; applications We use .Net build to build .Net packages and applications.\nWith help of Nuget packages we can easyly re-use modules accross applicatons in the different solution.\nJavascript Packages \u0026amp; applications Node is the main tool to build our javascript pacakges and applications\nLerna is used to \u0026hellip;\nJava packages \u0026amp; application We use Maven to build our java applications.\nDocker containers All applications is built as Docker Containers using Docker Build\nSe Docker files for Altinn Platform\n Authentication component Authorization component PDF Component Profile Component Receipt Component Register Component Storage Component  See docker files for Altinn Studio\n [Designer])(https://github.com/Altinn/altinn-studio/blob/master/src/AltinnCore/Designer/Dockerfile)  Artecat \u0026amp; Container Registry .Net Packages .Net pacakges som part of the codes are published as Nuget Packages. This process is manual and performed by developer.\nJavascript packages Docker Containers Dockers containers are published to Azure Container Registry\nThere is a shared Altinn Container Registry for the different Environments for Altinn Studio and Altinn Platform.\nNote as part of the runtime capabilityes we also use Azure Container Registry for apps created in Altinn Studio. See solution components\nDeployment Orchestration We use Azure Pipelenes for deployment orchestration of the different components in the different solutions.\nThe deploy pipelines has typical support for deployment to different environments (Stages).\nHelm is used to set environments variables for the different environments.\nPiplines The following pipelines is defined\n Altinn Studio - Designer Altinn Studio - Repositories Altinn Platform - Authorization Altinn Platform - Authentication Altinn Platform - PDF Altinn Platform - Profile Altinn Platform - Receipt Altinn Platform - Register Altinn Platform - Storage  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/nonsolutionspecific/operations/",
	"title": "Operations Application",
	"tags": ["solution", "architecture"],
	"description": "Operations Applications are used by the devops team for supporting the different operation and management capabilities required",
	"content": " Operation Management Applications Application Performance Monitoring Some monitoring is done from Azure Portal with help of Azure Monitor Appliation Insight and other tools avaiable.\nPasS and \u0026amp; IaaS configuration There are serveral ways PasS and \u0026amp; IaaS resources are configured \u0026amp; managed\n Azure Portal Azure CLI Azure mobile app  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/",
	"title": "Solution-Specific (Functional) Application Components",
	"tags": ["solution", "architecture"],
	"description": "Solution-Specific (Functional) Application Components describes the different applications and their functional components. It does not go in to detail about technology.",
	"content": "Functionality in Altinn is distributed between five different solutions\n Altinn Studio - The new application development solution Altinn Apps - The new hosting and infrastructure solution for applications Altinn Platform - The new supporting platform solution SBL - The old hosting solution for InfoPath services TUL - The old app development solution  The diagram below shows where functionality is located in the five different solutions:\nFull screen | Visio\n\n\rSolution-specific application components Altinn Studio\rAltinn Studio have many functional components that lets the app developer create, manage and deploy applications.\n\r\rSolution-specific application components Altinn Apps\rDescription of the Altinn Studio solution\n\r\rSolution-specific application components Altinn Platform\rFunctionality in Altinn Platform is distributed between different reusable components.\n\r\rSolution-specific application components local deveolopment\rAs part of the platform it is created a solution to develop and test applications\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/about/",
	"title": "About Altinn Studio",
	"tags": [],
	"description": "Description of the Altinn Studio, Altinn Apps and Altinn Platform solutions",
	"content": " What is Altinn Studio? Altinn Studio is the third-generation application development solution from Altinn. Norway\u0026rsquo;s public platform for E-Government.\nThe current development solution and hosting platform (launched 2010) is considered by Gartner as one of the five leading digital government technology platforms in the world.\nThe current platform is used by over 90% of the Norwegian population and almost 100% of the businesses. Over 55 agencies and municipalities host their solutions in the Altinn platform.\nAltinn Studio gives organizations an efficient and self-serviced way to design, build and deploy containerized applications in a modern cloud infrastructure. These applications can have GUI for web access and/or APIs for system integrations. An app can contain any type of functionality targeted for users and/or systems.\nThe current platform has almost 1000 active solutions supporting different user scenarios.\nExamples of solutions in the current platform is: Tax reporting, aircraft incident reporting, correspondence services from health department, lookup service in to the business register and many many more.\nWhat is Altinn Apps? Altinn Apps is the infrastructure where apps developed in Altinn Studio is running. This is a highly scalable platform for running container-applications with a seperate Kubernetes cluster for each organizations, giving maximum isolation and flexibility.\nWhat is Altinn Platform? Altinn Platform is a highly scalable platform with reusable micro services used by apps and other systems. Altinn Platform have services for storage of data, authorization, authentication, userprofile+++.\nWhat types of apps can be built with Altinn Studio and hosted in Altinn Apps? The first version will support apps where the use case is to submit data from the end user or system to the organizations.\nWhy Altinn Studio? There are many reasons to use Altinn Studio instead of building everything from scratch.\n Easy to develop and deploy apps Reuse of data, APIs and functionality (code) A known platform for end users Highly scalable and secure infrastructure Open source  When will it be released First version is planned to be launched early 2020.\nPresentations Presentation Mars 2019 Norwegian\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/",
	"title": "Altinn API",
	"tags": ["api"],
	"description": "Description of the Altinn API for end users and application owners.",
	"content": " This is work-in-progress. This is a proposed API which most likely is going to change.\n\rIntroduction There are primarily two types of consumers of the Altinn APIs. The first group consists of applications and systems used by the owners of the applications hosted on the Altinn platform. The group is called Application Owners. The second group consists of organisations and people using the applications through a client system, the group is called Application Users. The two groups have many similar needs, but there are also differences in what type of tasks they need to be able to perform. Traditionally the two groups have had access to completely separated API endpoints in Altinn. The new API will be available to both parties, but with some functions that will normally be used only by one of the groups.\nApplication Owners A list of common tasks for an application owner.\n Query instances for a given application according to status Create an application instance Upload form data Download form data Confirm successful download  Confirm complete  Change process state (workflow)  Application Users A list of common tasks for an end user.\n Create an application instance Upload form data Download form data Change process state (workflow) View status of an instance  Two different APIs The new solution will have multiple APIs. There are two APIs available for Application Owners and Users. There will be one API for each application cluster, called the Application API, and one for the Platform Storage cluster, called Platform Storage API. Both apis will provide similar operations. The Application API has business rules and must be used for validation of schema data, to change process state of the application instance. The Platform Storage API will provide access to information stored by the application. More information on the Platform apis can be found here\nApplication API An api that provides access to all instances of a specific app.\nappPath = https://org.apps.altinn.no/org/app  Identifies the organisation cluster and the application. Should be used to instantiate an application, to validate data, to change process and to save/update data elements.\nPlatform Storage API An api that provides access to all instances of all apps, it should be used to access metadata about instances and to download data elements.\nstoragePath = https://platform.altinn.no/storage  Should be used by application owners to download data elements. Downloads will be logged.\nCreate an application instance Altinn assigns an unique identifier to all users that wishes to report data. We call this id instanceOwner.partyId. If you do not know this, you should provide the official identity number, e.g national identification number for persons or organisation number for organisations, and in some case user name. This should be provided as part of the payload to the creation request. Altinn will look up this identifier and replace it with the instanceOwner.PartyId. The official identity number will be stored in the instance metadata.\nData elements can be provided as part of the creation request, but can also be uploaded at a later time.\nThe client specify the instance owner and can set a number of the metadata fields of the instance by attaching the following form:\n{ \u0026quot;appId\u0026quot; : \u0026quot;org/app\u0026quot;, \u0026quot;instanceOwner\u0026quot;: { \u0026quot;personNumber\u0026quot;: \u0026quot;12247918309\u0026quot;, \u0026quot;organisationNumber\u0026quot;: null }, \u0026quot;appOwner\u0026quot;: { \u0026quot;labels\u0026quot; : [ \u0026quot;gr\u0026quot;, \u0026quot;x2\u0026quot; ] }, \u0026quot;dueBefore\u0026quot;: \u0026quot;2019-06-01T12:00:00Z\u0026quot;, \u0026quot;title\u0026quot;: { \u0026quot;nb\u0026quot;: \u0026quot;Arbeidsmelding for Ola Nordmann\u0026quot; }, \u0026quot;visibleAfter\u0026quot;: \u0026quot;2019-05-20T00:00:00Z\u0026quot;, \u0026quot;status\u0026quot;: {} }  Notice that all dates must be expressed in Utc (Zulu) time zone and represented according to ISO 8601!\nData elements (files) can be attached to the initial request as a multipart/form-data or as attachments. The name of the parts must correspond to element types defined in the application metadata.\nPOST {appPath}/instances  A multipart formdata should contain the instance json document and the data element files of the instance. The first part should be instance which contains the json template to create an instance from. The subsequent parts must have a name that correspond to the element types defined in application metadata. They may have a filename. Hence the model1 and certificate names correspond to data types defined in the application metadata. If more data elements are needed they must be defined in the application metadata.\nContent-Type: multipart/form-data; boundary=\u0026quot;abcdefg\u0026quot; --abcdefg Content-Type: application/json; charset=utf-8 Content-Disposition: form-data; name=\u0026quot;instance\u0026quot; { ... } --abcdefg Content-Type: application/xml Content-Disposition: form-data; name=\u0026quot;model1\u0026quot; \u0026lt;xml\u0026gt; ... \u0026lt;/xml\u0026gt; --abcdefg Content-Type: application/pdf Content-Disposition: form-data; name=\u0026quot;certificate\u0026quot;; filename=certificate.pdf %PDF-1.4 %Óëéá 1 0 obj ... --abcdefg--  This call will return the instance metadata record that was created. A unique identifier, which consist of the instance owner id and an guid, will be generated and should be used for later reference.\n{ \u0026quot;id\u0026quot;: \u0026quot;347829/762011d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;selfLinks\u0026quot;: { \u0026quot;apps\u0026quot;: \u0026quot;{appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026quot;, \u0026quot;platform\u0026quot;: \u0026quot;{platformPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026quot; }, \u0026quot;appId\u0026quot;: \u0026quot;org/app\u0026quot;, \u0026quot;instanceOwner\u0026quot;: { \u0026quot;partyId\u0026quot;: \u0026quot;347829\u0026quot;, \u0026quot;personNumber\u0026quot;: \u0026quot;12247918309\u0026quot; }, \u0026quot;created\u0026quot;: \u0026quot;2019-03-06T13:46:48.6882148Z\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;org23\u0026quot;, \u0026quot;dueBefore\u0026quot;: \u0026quot;2019-06-01T12:00:00Z\u0026quot;, \u0026quot;visibleAfter\u0026quot;: \u0026quot;2019-05-20T00:00:00Z\u0026quot;, \u0026quot;title\u0026quot;: { \u0026quot;nb\u0026quot;: \u0026quot;Arbeidsmelding for Ola Nordmann\u0026quot;}, \u0026quot;process\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2019-09-25T09:32:44.20Z\u0026quot;, \u0026quot;currentTask\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2019-10-10T32:22.00Z\u0026quot;, \u0026quot;elementId\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Fyll ut\u0026quot;, \u0026quot;altinnTaskType\u0026quot;: \u0026quot;data\u0026quot;, \u0026quot;validated\u0026quot;: { \u0026quot;timestamp\u0026quot;: \u0026quot;2019-10-04T12:00.00Z\u0026quot;, \u0026quot;canCompleteTask\u0026quot;: true } } }, \u0026quot;status\u0026quot;: { \u0026quot;archived\u0026quot;: null, \u0026quot;softDeleted\u0026quot;: null, \u0026quot;hardDeleted\u0026quot;: null }, \u0026quot;appOwner\u0026quot;: { \u0026quot;labels\u0026quot;: [ \u0026quot;gr\u0026quot;, \u0026quot;x2\u0026quot; ], }, \u0026quot;completeConfirmations\u0026quot;: [ { \u0026quot;stakeholderId\u0026quot;: \u0026quot;org\u0026quot;, \u0026quot;confirmedOn\u0026quot;: \u0026quot;2020-03-16T14:38:11\u0026quot; } ], \u0026quot;data\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;model1\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;application/xml\u0026quot;, \u0026quot;blobStoragePath\u0026quot;: \u0026quot;org/app/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;, \u0026quot;selfLinks\u0026quot;: { \u0026quot;apps\u0026quot;: \u0026quot;{appPath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;, \u0026quot;platform\u0026quot;: \u0026quot;{storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot; }, \u0026quot;filename\u0026quot;: \u0026quot;prefill.xml\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2019-03-06T15:00:23Z\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;org23\u0026quot;, \u0026quot;size\u0026quot;: 20001, \u0026quot;locked\u0026quot;: false, }, ... ] }  Data An instance holds metadata objects that describe the data files that can be uploaded and downloaded from storage. These metadata objects are called data elments. A data element is identified with a guid.\n to stream a data file you must talks to the /data endpoint of the instance. to get or update the data element metadata elements you must talk to the /dataelements endpoint of the instance.  Create and upload data Post a data file (e.g. an xml-document) as body (stream content) of request with matching headers. Must specify dataType as defined in the application metadata.\nPOST {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/data?dataType=default  The request should have a content type and a content disposition which holds the data file\u0026rsquo;s filename. You may also use a multipart, but only the first part will be read.\nContent-Type = \u0026quot;image/png\u0026quot; Content-Disposition = attachment; filename=myfile.png PUT {appPath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff  This call returns the data element metadata object that were created.\n{ \u0026quot;id\u0026quot;: \u0026quot;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;, \u0026quot;instanceGuid\u0026quot;: \u0026quot;762011d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;application/xml\u0026quot;, \u0026quot;blobStoragePath\u0026quot;: \u0026quot;org/app/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;, \u0026quot;selfLinks\u0026quot;: { \u0026quot;apps\u0026quot;: \u0026quot;{appPath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;, \u0026quot;platform\u0026quot;: \u0026quot;{storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot; }, \u0026quot;filename\u0026quot;: \u0026quot;default.xml\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2019-03-06T15:00:23Z\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;org23\u0026quot;, \u0026quot;lastChanged\u0026quot;: \u0026quot;2019-03-07T15:00:23Z\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;org23\u0026quot;, \u0026quot;size\u0026quot;: 20001, \u0026quot;locked\u0026quot;: false }  Update data file Update (replace) a data element with a new one (payload). Data as multipart or as single body. Client does a PUT request to the App. It first calculates the data and replaces the existing data element. It returns the instance metadata to the client.\nContent-Type = \u0026quot;image/png\u0026quot; Content-Disposition = attachment; filename=myfile.png PUT {appPath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff  Download a specific data file Clients can download the data by a get request. Notice that application owner\u0026rsquo;s get of an instance owners data will update metadata for on data element.\nGET {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff  { ... \u0026quot;data\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;default.xml\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;application/xml\u0026quot;, \u0026quot;lastChange\u0026quot;: \u0026quot;2019-03-06T15:00:23Z\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;org24\u0026quot;, \u0026quot;size\u0026quot;: 34059, \u0026quot;locked\u0026quot;: false, \u0026quot;applicationOwner\u0026quot;: { \u0026quot;downloaded\u0026quot;: [\u0026quot;2019-05-15T08:23:01Z\u0026quot;] } } ] }  Receipt data element All applications has an element type called ref-data-as-pdf. This is the place to store generated pdf receipt data.\nUpload a pdf and associate the pdf with an existing data element POST {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data?dataType=ref-data-as-pdf\u0026amp;refs=692ee7df-82a9-4bba-b2f2-c8c4dac69aff  Results in a new data element with reference to the first. It is also possible to reference multiple data elements.\n{ ... \u0026quot;data\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;model1\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;default.xml\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;application/xml\u0026quot;, \u0026quot;lastChanged\u0026quot;: \u0026quot;2019-03-06T15:00:23Z\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;org24\u0026quot;, \u0026quot;size\u0026quot;: 34059, \u0026quot;locked\u0026quot;: true, \u0026quot;applicationOwner\u0026quot;: { \u0026quot;downloaded\u0026quot;: [\u0026quot;2019-05-15T08:23:01Z\u0026quot;] } }, { \u0026quot;id\u0026quot;: \u0026quot;c15f0401-e19d-4f1d-8ad1-1ce8cc96eb5d\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;ref-data-as-pdf\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;model1-view.pdf\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;application/pdf\u0026quot;, \u0026quot;lastChanged\u0026quot;: \u0026quot;2019-10-10T15:00:23Z\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;org24\u0026quot;, \u0026quot;size\u0026quot;: 34059, \u0026quot;locked\u0026quot;: false, \u0026quot;refs\u0026quot;: [\u0026quot;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;] } ] }  Download the PDF of a data element Select the data PDF you want to download from the list of the instances\u0026rsquo; list of data elements.\nGet list\nGET {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data  Get one data element\nGET {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/c15f0401-e19d-4f1d-8ad1-1ce8cc96eb5d  Application owner download Downloads is logged on the data element1 Confirm successful download (as application owner) Application owner must confirm that the data file that the data element represent was downloaded. This can be done for one data element or for all data elements fo the instance.\nFor one data element:\nPUT {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/dataelements/692ee7df-82a9-4bba-b2f2-c8c4dac69aff/confirmDownload  For all data elements:\nPUT {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/dataelements/confirmDownload  { ... \u0026quot;data\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;, ... \u0026quot;applicationOwner\u0026quot;: { \u0026quot;downloaded\u0026quot;: [\u0026quot;2019-05-15T08:23:01Z\u0026quot;], \u0026quot;downloadConfirmed\u0026quot;: [\u0026quot;2019-05-16T10:23:00Z\u0026quot;] } } ] }  Download a complete instance with data elements and corresponding pdfs1 GET {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/downloadAll  Will return a multipart http response with the following content:\n instance metadata (application/json) the first data element (application/xml) second data element (e.g. attachement) third data element (e.g. image) fourth data element (e.g. pdf) \u0026hellip;  Confirm instance completed The last step for application owner in all processes is to confirm that they consider the case associated with an instance as finished. Its purpose is to tell Altinn that the application owner has downloaded all data, finished any internal processing, and if applicable, posted a response. The original instance is no longer needed. Only the first call to this operation will be registered. Consecutive calls are ignored.\nGET {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/complete  The operation returns an updated instance with the added CompleteConfirmation.\nQuery instances It is possible to query instances based on a number of query parameters.\nApplication owners can search for from a single application or across all applications that they have. Using this endpoint requires the scope \u0026lsquo;altinn:instances.read\u0026rsquo;. And query parameter \u0026lsquo;org\u0026rsquo; or \u0026lsquo;appId\u0026rsquo; must be included in the request.\nUsers can search for instances linked to either themselves or an instanceOwner they are authorized to read the instances of. Query parametr \u0026lsquo;instanceOwner.partyId\u0026rsquo; must be included in the request if using this endpoint as an end user.\nSearch for instances with a simple GET request towards the instances endpoint. Avaliable query paramters include:\n process.currentTask (string) process.isComplete (bool) process.endEvent (string) process.ended (datetime) instanceOwner.partyId (int) appOwner.labels (comma separated list of strings) lastChanged (datetime) created (datetime) visibleAfter (datetime) dueBefore (datetime)  For example: To get all instances of appId org/app, that is in at task with id Task_2 (which is Submit, see process definition), has last changed date greater than 2019-05-01 and that has label gruppe3.\nGET {storagePath}/instances?appId=org/app\u0026amp;process.currentTask=Task_2\u0026amp;lastChanged=gt:2019-05-01\u0026amp;appOwner.label=gruppe3  Another example is get all instances of all apps of an organisation org that has ended date greater than 2020-03-10.\nGET {storagePath}/instances?org=org\u0026amp;process.ended=gt:2020-03-10  Yet another example is get all instances of an app that are in a specific task e.g. Task_1.\nGET {storagePath}/instances?appId={org}/{app}\u0026amp;process.currentTask={taskId}  On query parameters specifying date time you can use the following operators:\n gt: - greater than gte: - greater than or equal to lt: - less than lte: - less than or equal to eq: - equal (can also be blank)  They can be combined to define a range:\ndueBefore=gt:2019-02\u0026amp;dueBefore=lt:2019-03-01  The query returns a result object (page) which includes a collection of instance that matched the query. 100 instances is returned by default. Use size to get more or less instances per page. To get to the next page you have to use the continuationToken present in the next link.\nThe instances endpoint returns a query result object with information about how many total hits totalHits that the query matched and how many objects returned count.\nThe endpoint supports plain application/json.\nAccept: application/json { \u0026quot;totalHits\u0026quot;: 234, \u0026quot;count\u0026quot;: 50, \u0026quot;self\u0026quot;: \u0026quot;{storagePath}/instances?appId=org/app\u0026amp;size=50\u0026quot;, \u0026quot;next\u0026quot;: \u0026quot;{storagePath}/instances?appId=org/app\u0026amp;size=50\u0026amp;continuationToken=%257b%2522token%2522%253a%2522%252bRID%...\u0026quot; \u0026quot;instances\u0026quot;: [ {...}, {...}, ... ] } }  Events Instance events All instance events, e.g. creation, read, save, change process state, \u0026hellip;\nGET {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/events  Example of event data.\n{ \u0026quot;id\u0026quot;:\u0026quot;6dff32bc-0928-4ae8-937c-b362d6941c89\u0026quot;, \u0026quot;instanceId\u0026quot;: \u0026quot;60238/5c6b1a71-2e1f-447a-ae2f-d1807dcffbfb\u0026quot;, \u0026quot;eventType\u0026quot;: \u0026quot;deleted\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2019-05-02T13:08:21.981476Z\u0026quot;, \u0026quot;instanceOwnerPartyId\u0026quot;: \u0026quot;60238\u0026quot;, \u0026quot;user\u0026quot;: { \u0026quot;userId\u0026quot;: 338829, \u0026quot;authenticationLevel\u0026quot;: 1, \u0026quot;enduserSystemId\u0026quot;: 2 }, \u0026quot;process\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2019-05-01T12:45:01.3233Z\u0026quot;, \u0026quot;startEvent\u0026quot;: \u0026quot;Start_22\u0026quot;, \u0026quot;currentTask\u0026quot;: { \u0026quot;elementId\u0026quot;: \u0026quot;Task_2\u0026quot; } } }  Application events (for application owners)1  WARNING: This section will be redesigned\n Selected instance events. Created, first read, change process state. Optinally specified by application developer.\nEvents can be queried. May be piped.\nGET {storagePath}/applications/org/app/events?created=gte:2019-03-30\u0026amp;process.currentTask=Task_2  Validation There are multiple endpoints that can trigger validation and provide feedback regarding the state of an instance and its data. Some of them validates data already uploaded and stored in Altinn while others can validate input.\nValidate stored instance This action will validate an entire instance including the all data elements already uploaded and stored in Altinn. Validation will be performed based on current task in the process. Validation will ensure that all required data elements, as defined by the application metadata, have been uploaded and are valid. If the result of the validation is that nothing is missing or wrong, the action will update the instance with information indicating that the instance is valid. The response will be an empty array. In the case of validation issues the response will provide an array of the identified issues. Validation of a full instance use validation of data as described in the chapter below.\nGET https://{org}.apps.at21.altinn.cloud/{org}/{app}/instances/{instanceOwnerPartyId}/{instanceId}/validate  Example response:\n[ { \u0026quot;severity\u0026quot;: \u0026quot;Error\u0026quot;, \u0026quot;scope\u0026quot;: \u0026quot;INSTANCE\u0026quot;, \u0026quot;targetId\u0026quot;: null, \u0026quot;field\u0026quot;: null, \u0026quot;code\u0026quot;: \u0026quot;TooManyDataElementsOfType\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;TooManyDataElementsOfType\u0026quot; } ]  Validate stored data This action will validate a specific data element already uploaded and stored in Altinn. The logic validates that the data element has the correct Content-Type, that it isn\u0026rsquo;t too large and so on. Data elements with a model bound to them will be validated against the model (Schema). Validation will also check that the data element being validated is required for the current task in the process. If the data is validated during a task different from what is intended, the validator will give a warning.\nGET https://{org}.apps.at21.altinn.cloud/{org}/{app}/instances/{instanceOwnerPartyId}/{instanceId}/data/{dataid}/validate  Example response:\n[ { \u0026quot;severity\u0026quot;: \u0026quot;Error\u0026quot;, \u0026quot;scope\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;targetId\u0026quot;: null, \u0026quot;field\u0026quot;: null, \u0026quot;code\u0026quot;: \u0026quot;MissingContentType\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;MissingContentType\u0026quot; } ]  Validate data1 The application will provide a method to validate the datamodel without creating a instance of the data. Data must be provided as formdata. The validate method takes a data file of an dataType and performs validation on that file. It returns a validation report.\nPUT {appPath}/validate?dataType=modelA  Calculate / check business rules1 The app will provide a method to perform calculation / perform business rules for a datamodell to an app. The calculate method takes a data file and performs calculations and returns the possibly altered data file with updated fields.\nPUT {appPath}/calculate?dataType=modelB  Instantiation details Instantiate an app Client instantiates an app. The app create an initial data element (file) according to the app\u0026rsquo;s prefill rules. Instance metadata, with links to the data element is returned which allow the Client to download the data. Process is set to first task. The task specifies if the data can be updated or not.\nInstantiate an app and complete process Instantiate an app with data as multipart content (stream). The app creates an instance and stores the attached data element. The app attempts to complete the process. If the process is completed successfully, the data can no longer be updated.\nProcess Application has a process definition that specifies start events, end events, tasks and the allowed flows (transitions) between these. A process is started by the application, which selects a start event to start and follows the sequence flow to the first task and creates a current task object to holde the process state.\nA process is represented by an process modell in BPMN/XML notation. Each task has an unique id, which is used to refer to the task in the api.\n\u0026lt;bpmn2:process id=\u0026quot;Process_1\u0026quot; isExecutable=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;bpmn2:startEvent id=\u0026quot;StartEvent_1\u0026quot;\u0026gt; \u0026lt;bpmn2:outgoing\u0026gt;SequenceFlow_1\u0026lt;/bpmn2:outgoing\u0026gt; \u0026lt;/bpmn2:startEvent\u0026gt; \u0026lt;bpmn2:task id=\u0026quot;Task_1\u0026quot; name=\u0026quot;Utfylling\u0026quot; altinn:tasktype=\u0026quot;data\u0026quot;\u0026gt; \u0026lt;bpmn2:incoming\u0026gt;SequenceFlow_1\u0026lt;/bpmn2:incoming\u0026gt; \u0026lt;bpmn2:outgoing\u0026gt;SequenceFlow_2\u0026lt;/bpmn2:outgoing\u0026gt; \u0026lt;/bpmn2:task\u0026gt; \u0026lt;bpmn2:endEvent id=\u0026quot;EndEvent_1\u0026quot;\u0026gt; \u0026lt;bpmn2:incoming\u0026gt;SequenceFlow_2\u0026lt;/bpmn2:incoming\u0026gt; \u0026lt;/bpmn2:endEvent\u0026gt; \u0026lt;bpmn2:sequenceFlow id=\u0026quot;SequenceFlow_1\u0026quot; sourceRef=\u0026quot;StartEvent_1\u0026quot; targetRef=\u0026quot;data_1\u0026quot; /\u0026gt; \u0026lt;bpmn2:sequenceFlow id=\u0026quot;SequenceFlow_2\u0026quot; sourceRef=\u0026quot;Task_1\u0026quot; targetRef=\u0026quot;EndEvent_1\u0026quot; /\u0026gt; \u0026lt;/bpmn2:process\u0026gt;  Altinn specific task types Application developers can in their BPMN Definition specify some altinn specific task types, see altinn:tasktype, which signify the behaviour of the task. So far we have defined the following:\n data - user is asked to fill inn one or more data elements, e.g. upload data or fill in forms submit - user is asked if he should submit the information which has been filled in on previous tasks payment - user is asked to pay a specific amount signing - user is asked to provide a digital signature external - task is handled by an external entity, user must wait until they have completed the task.  Get process state of a specific instance GET {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process  For an ongoing process this process state can look like the json below. It indicates that the process was started at a given date time and that it\u0026rsquo;s current task is Task_1. The flow number indicates the sequence of process events/tasks that occurs during the execution of the process. Notice that same task can be visited multiple times in a process if there is a sequence flow that allows that.\n{ \u0026quot;started\u0026quot;: \u0026quot;2019-09-25T09:32:44.20Z\u0026quot;, \u0026quot;currentTask\u0026quot;: { \u0026quot;flow\u0026quot;: 2, \u0026quot;started\u0026quot;: \u0026quot;2019-10-10T32:22.00Z\u0026quot;, \u0026quot;elementId\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Fyll ut\u0026quot;, \u0026quot;altinnTaskType\u0026quot;: \u0026quot;data\u0026quot;, \u0026quot;validated\u0026quot;: { \u0026quot;timestamp\u0026quot;: \u0026quot;2019-10-04T12:00.00Z\u0026quot;, \u0026quot;canCompleteTask\u0026quot;: true } } },  For an ended process the following will be returned:\n{ \u0026quot;started\u0026quot;: \u0026quot;2019-09-25T09:32:44.20Z\u0026quot;, \u0026quot;startEvent\u0026quot;: \u0026quot;StartEvent_1\u0026quot;, \u0026quot;ended\u0026quot;: \u0026quot;2019-10-10T14:01:22.034Z\u0026quot;, \u0026quot;endEvent\u0026quot;: \u0026quot;EndEvent_1\u0026quot; }  Process events The system will generate a number of process related events, which can be found in the instances event history.\n Start Event StartTask Event EndTask Event End Event  Start Event { \u0026quot;instanceId\u0026quot;: \u0026quot;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026quot;, \u0026quot;eventType\u0026quot;: \u0026quot;process:Start\u0026quot;, \u0026quot;processInfo\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2019-09-25T09:32:44.20Z\u0026quot;, \u0026quot;startEvent\u0026quot;: \u0026quot;StartEvent_1\u0026quot; }, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-10-10T14:01:22.034Z\u0026quot;, }  StartTask Event { \u0026quot;instanceId\u0026quot;: \u0026quot;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026quot;, \u0026quot;eventType\u0026quot;: \u0026quot;process:StartTask\u0026quot;, \u0026quot;processInfo\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2019-09-25T09:32:44.20Z\u0026quot;, \u0026quot;startEvent\u0026quot;: \u0026quot;StartEvent_1\u0026quot;, \u0026quot;currentTask\u0026quot;: { \u0026quot;flow\u0026quot;: 2, \u0026quot;started\u0026quot;: \u0026quot;2019-10-01T13:22.01Z\u0026quot;, \u0026quot;elementId\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Fyll ut MVA rapport\u0026quot;, \u0026quot;altinnTaskId\u0026quot;: \u0026quot;data\u0026quot; } }, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-10-01T13:22.01Z\u0026quot;, }  EndTask Event { \u0026quot;instanceId\u0026quot;: \u0026quot;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026quot;, \u0026quot;eventType\u0026quot;: \u0026quot;process:EndTask\u0026quot;, \u0026quot;processInfo\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2017-10-01T13:22.00Z\u0026quot;, \u0026quot;startEvent\u0026quot;: \u0026quot;StartEvent_1\u0026quot;, \u0026quot;currentTask\u0026quot;: { \u0026quot;flow\u0026quot;: 2, \u0026quot;started\u0026quot;: \u0026quot;2019-10-05T01:11.33Z\u0026quot;, \u0026quot;elementId\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;altinnTaskId\u0026quot;: \u0026quot;data\u0026quot;, \u0026quot;ended\u0026quot;: \u0026quot;2019-10-05T01:11.33Z\u0026quot; } }, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-10-05T01:11.33Z\u0026quot;, }  End Event { \u0026quot;instanceId\u0026quot;: \u0026quot;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026quot;, \u0026quot;eventType\u0026quot;: \u0026quot;process:EndEvent\u0026quot;, \u0026quot;processInfo\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2017-10-01T13:22.00Z\u0026quot;, \u0026quot;startEvent\u0026quot;: \u0026quot;StartEvent_1\u0026quot;, \u0026quot;ended\u0026quot;: \u0026quot;2019-10-05T08:15:23.544Z\u0026quot;, \u0026quot;endEvent\u0026quot;: \u0026quot;EndEvent_1\u0026quot; }, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-10-05T08:15:23.544Z\u0026quot;, }  Get process history of a specific instance1 Based on the process events the history of the instance\u0026rsquo;s process is generated. The following illustrates an ended process:\nGET {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/history  \u0026quot;processHistory\u0026quot;: [ { \u0026quot;eventType\u0026quot;: \u0026quot;process_StartEvent\u0026quot;, \u0026quot;elementId\u0026quot;: \u0026quot;StartEvent_1\u0026quot;, \u0026quot;occured\u0026quot;: \u0026quot;2020-01-21T13:49:09.3109169Z\u0026quot; }, { \u0026quot;eventType\u0026quot;: \u0026quot;process_StartTask\u0026quot;, \u0026quot;elementId\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;started\u0026quot;: \u0026quot;2020-01-21T13:49:09.4264322Z\u0026quot;, \u0026quot;ended\u0026quot;: \u0026quot;2020-01-21T13:49:39.66609Z\u0026quot; }, { \u0026quot;eventType\u0026quot;: \u0026quot;process_EndEvent\u0026quot;, \u0026quot;elementId\u0026quot;: \u0026quot;EndEvent_1\u0026quot;, \u0026quot;occured\u0026quot;: \u0026quot;2020-01-21T13:49:39.7681248Z\u0026quot; } ] }  Start Process To start a process one can post start to the process endpoint.\nPOST {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/start[?startEvent=StartEvent_1]  This will start the process and move the process state to the first task from the given start. If process has more than one start event, then the client has to chose which one to start with the startEvent query parameter.\nComplete and move to next task The process logic attempts to finish the current task and then moves the process forward to the next task in the flow. The cannot always select the next task, especially when more than one tasks can be chosen. In this case the client must chose which process element id to select.\nPUT {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/next[?id=Task_2]  Complete the process The complete process method will attempt to complete the process for an instance. Hence, the app will move the process from one task to the next until it reaches an valid end state.\nIf a task\u0026rsquo;s exit condition is not met, the process will be stopped in the last valid task. And the user must manually fix the problem and complete the process.\nPUT {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/completeProcess  Get the next tasks in a process Returns an list of the next tasks/events that can be reached from the current task.\nGET {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/next  Start a task If you are at a specific task and want to start the next task you can try to put next to the process endpoint. The process controller then tries to close the current task and start the wanted task. Updates process state accordingly. If exit condition of current task is not met, an error will be returned. If the task is not directly reachable by the flow, an error will be returned.\nPUT {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/next?id=Task_2  Application resources The application has a number of resource files that is used by the app\u0026rsquo;s frontend and which defines it\u0026rsquo;s behaviour.\nApplication metadata Get application\u0026rsquo;s metadata :\nGET {appPath}  { \u0026quot;id\u0026quot;: \u0026quot;test/sailor\u0026quot;, \u0026quot;versionId\u0026quot;: \u0026quot;v32.23-xyp\u0026quot;, \u0026quot;org\u0026quot;: \u0026quot;test\u0026quot;, \u0026quot;app\u0026quot;: \u0026quot;sailor\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2019-03-06T13:46:48.6882148Z\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;title\u0026quot;: { \u0026quot;nb\u0026quot;: \u0026quot;Testapplikasjon\u0026quot;, \u0026quot;en\u0026quot;: \u0026quot;Test Application\u0026quot; }, \u0026quot;processId\u0026quot;: \u0026quot;twoTasksDataAndSubmit\u0026quot;, \u0026quot;validFrom\u0026quot;: \u0026quot;2019-04-01T12:14:22Z\u0026quot;, \u0026quot;validTo\u0026quot;: null, \u0026quot;maxSize\u0026quot;: -1, \u0026quot;dataTypes\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;model1\u0026quot;, \u0026quot;appLogic\u0026quot;: { \u0026quot;autoCreate\u0026quot;: true, \u0026quot;classRef\u0026quot;: \u0026quot;Skjema22\u0026quot;, \u0026quot;schemaRef\u0026quot;: \u0026quot;schemas/boatdata\u0026quot; }, \u0026quot;description\u0026quot;: {\u0026quot;nb\u0026quot;: \u0026quot;Båtdata\u0026quot;, \u0026quot;en\u0026quot;: \u0026quot;Boat data\u0026quot;}, \u0026quot;allowedContentTypes\u0026quot;: [\u0026quot;application/json\u0026quot;], \u0026quot;taskId\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;maxSize\u0026quot;: 200000, \u0026quot;minCount\u0026quot;: 1, \u0026quot;maxCount\u0026quot;: 1, }, { \u0026quot;id\u0026quot;: \u0026quot;crewlist\u0026quot;, \u0026quot;appLogic\u0026quot;: { \u0026quot;autoCreate\u0026quot;: false, \u0026quot;classRef\u0026quot;: \u0026quot;CrewList\u0026quot;, \u0026quot;schemaRef\u0026quot;: \u0026quot;schemas/crewlist\u0026quot; }, \u0026quot;allowedContentTypes\u0026quot;: [\u0026quot;application/xml\u0026quot;], \u0026quot;taskId\u0026quot;: \u0026quot;Data_2\u0026quot;, \u0026quot;maxSize\u0026quot;: -1, \u0026quot;minCount\u0026quot;: 1, \u0026quot;maxCount\u0026quot;: 3, }, { \u0026quot;id\u0026quot;: \u0026quot;certificate\u0026quot;, \u0026quot;appLogic\u0026quot;: null, \u0026quot;allowedContentTypes\u0026quot;: [\u0026quot;application/pdf\u0026quot;], \u0026quot;task\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;maxSize\u0026quot;: -1, \u0026quot;minCount\u0026quot;: 1, \u0026quot;maxCount\u0026quot;: 1, }, { \u0026quot;id\u0026quot;: \u0026quot;receipt\u0026quot;, \u0026quot;appLogic\u0026quot;: null, \u0026quot;allowedContentTypes\u0026quot;: [\u0026quot;application/pdf\u0026quot;], \u0026quot;maxSize\u0026quot;: -1, \u0026quot;minCount\u0026quot;: 0, \u0026quot;maxCount\u0026quot;: -1, } ] }  Process model1 Get the application\u0026rsquo;s process model.\nGET {appPath}/process  Returns the bpmn file defining the process.\nGet text resources for the application for a specific language1 GET {appPath}/texts?lang=nb  Get text resources for a given element type1 GET {appPath}/metadata/{typeName}/texts?lang=nb  Get the schema for a given element type1 Accept=application/schema+json GET {appPath}/metadata/{typeName}/schema  Get the model config for a given element type1 GET {appPath}/metadata/{typeName}/modelConfig  (ServiceMetadata.json) Get the layout for a given element type1 GET {appPath}/metadata/{typeName}/layout  (FormLayout.json) Gets the rules for a given element type1 GET {appPath}/metadata/{typeName}/rules  (RuleHandler.js) Get the API service configuration for how the app calls external APIs1 GET {appPath}/metadata/{typeName}/externalApis  (ServiceConfiguration.json) \rAuthentication\rHow to authenticate towards the apis\n\r\r\r\rPrefill Client Example\rThis page demonstrates multiple prefill with an example client application.\n\r\r\r\rSwagger\rOpen API Specifications for Altinn 3.\n\r\r\rAuthentication\rAPI documentation for Altinn Platform Authentication.\n\r\rAuthorization\rAPI documentation for Altinn Platform Authorization.\n\r\rPDF\rAPI documentation for Altinn Platform PDF.\n\r\rProfile\rAPI documentation for Altinn Platform Profile.\n\r\rRegister\rAPI documentation for Altinn Platform Register.\n\r\rStorage\rAPI documentation for Altinn Platform Storage.\n\r\rStudio\rAPI documentation for Altinn Studio Repos.\n\r\r\r Not implemented yet!\r[return]   "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/appdeploy/deployment/",
	"title": "Altinn Apps - Deployment Architecture",
	"tags": [],
	"description": "Description of the deployment architecture for Altinn Apps",
	"content": " NOTE: Work in progress. Stuff will change\n\rAltinn Apps is the solution where all the apps developed in Altinn Studio is deployed. The following diagram shows the deployment architecture for Altinn Studio together \u0026amp; Altinn Apps\n\nSee fullscreen or download as visio\nContainer Orchestration by Kubernetes Each \u0026ldquo;App\u0026rdquo; created in Altinn Studio is deployed to Altinn Apps as separate applications running in Docker Containers. The containers will be orchestrated by Kubernetes.\nThe Altinn App is deployed as sets of Docker Containers defined as Kubernetes Deployment. The deployment will be in the organisation\u0026rsquo;s own Kubernetes Cluster.\n All organisations will have their own Kubernetes Cluster.\n Each set of Kubernetes Deployment will be scaled based on the usage of the app. Scaling of the Deployment will be configurable in the Kubernetes Deployment and automatically scaled using Kubernetes Replicaset.\n Kubernetes Clusters and Altinn Apps can do horizontal autoscaling. It is currently not decided if and how autoscaling will be used.\n The Altinn App in Kubernetes will be configured as a Kubernetes Service which consist of the latest runtime application available when building the Altinn App and the Altinn App with related code and configuration.\nKubernetes Clusters per Organisation In Altinn Apps, every organisation will have their separate Kubernetes Cluster in each environment. The Kubernetes Cluster architecture will be the same in test and production environment This will support scaling tailored each organisations needs and separation of each organisation\u0026rsquo;s app.\nSecrets Pods, where the Altinn App are delpoyed, gets access to secrets during deployment via HELM charts.\nKubernetes Namespace It\u0026rsquo;s not planned to use namespaces.\nKubernetes Service Each Altinn App will be a Kubernetes Service.\nNetworking Sub domains Each organisation will have their own sub domain.\n org.apps.altinn.no\n Path for the Altinn App  org.apps.altinn.no/app\n Encrypted traffic and network policy There is ongoing analysis related to this topic. Click here to find more information on Github.\nRouting / Ingress-Controller Routing in Kubernetes is handled by an Ingress-Controller called Traefik.\nTo be able to route traffic to the correct Kubernetes Service (Altinn App), each container is tagged to a specific Altinn App. The routing mecahnism routes to the correct Kubernetes Service based on the url containing the Altinn App parameter.\nAPI Proxy API Proxy is needed for controlling credentials and outbound firewall rules from the platform. This might be handled by the API Managment software. Needs Analyzis\nAPI Management The platform requires API management software to handle SLA ++. Needs Analyzis\nAltinn App build and deploy process Building the Altinn App with \u0026ldquo;app specific\u0026rdquo; files from Gitea, creating a \u0026ldquo;App Image\u0026rdquo;, deploying to Azure Container Registry and telling Kubernetes to deploy app.\nBuild process (Pipeline)  This process har more details in the Dockerfile. This is a summary.\n  Downloading files from app repository in Gitea Building Docker base image with Dockerfile. This includes \u0026ldquo;Dotnet build\u0026rdquo; for C# files from Gitea. \u0026ldquo;Dotnet build\u0026rdquo; is executed on the Runtime Base Image reusing previous.  Docker Pull: Altinn/Runtime Base Image with SDK from ACR. This makes the AltinnApp build faster. Clone and build code from Gitea inside Altinn-Runtime Base Image. Docker Pull: Microsoft/DotNet AspNetCore. Copy Altinn Runtime, AltinnApp Build files and App Metadata/Resources from Gitea.  Publish to ACR.  The build and deploy app pipeline is controlled by different flags :\n APP_COMMIT_ID - used as id for the app image and should be used to reference the repository at that commit state APP_DEPLOY_TOKEN - used to identify user when cloning repository (is only really necessary for private repositorys but is mandetory) APP_ENVIRONMENT - represent which environment to deploy to (not yet used) APP_OWNER - the owner of the repository APP_REPO - the name of the repository to clone and use to create the app GITEA_ENVIRONMENT - the gitea environment to clone the repository from should_build - flag that can be used if one only wishes to deploy a app and not build it (default set to true) should_deploy - flag that can be used if one wishes to deploy an app (default set to false)  Triggered by:\n \u0026ldquo;Deploy\u0026rdquo;-button in Altinn Studio.  Manual deployment of Altinn App A manual deployment of the Altinn App requires access to you Kubernetes Cluster and knowledge about Helm.\nIf you want to configure the Helm chart and do a manual deployment you can find the Helm chart in your repo in the \u0026ldquo;deployment\u0026rdquo; folder.\nPlatform Cluster The platform cluster in Altinn Studio Apps will host common application like DataServices.\nPlatform integration The platform integration is a new application hosted in the existing infrastructure. It exposes REST-APIs for Profile, Register, Authorization, Intermediary and Authentication. These are services not part of the Altinn Platform (yet) and everyone planning to run the Altinn Platform would need to implement their own components that support. (?)\nData services The data services application is the application responsible exposing data related functionality to the Altinn App. This container will be scaled based on need.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/",
	"title": "Application construction components for Altinn Apps",
	"tags": [],
	"description": "Application created in Altinn Studio is deployed to Altinn Apps. This documentation covers application construction components for the applications and for monitoring applications for Altinn Apps.",
	"content": " The diagram below shows the different components in Altinn Apps and below you find links to the description of the Application Architecture for the different components/parts of Altinn Apps.\n\nSee fullscreen or download as visio.\nApp routing In Altinn Apps each app is hosted inn different containers/Kubernetes Pods. We use Traefik to route traffic to the correct app/container/Pod\nApplication (App) The App developed in Altinn Studio is deployed as a Docker container in a Kubernetes Pod. See deployment architecture for deployment details.\nThe App itself consist of two applications with different Application Architecture\nRead more about the application architecture for App Frontend\nKubernetes Proxy This is the application that gives Altinn Studio information about a Apps cluster\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-apps/",
	"title": "Solution-specific application components Altinn Apps",
	"tags": ["architecture", "solution"],
	"description": "Description of the Altinn Studio solution",
	"content": "Functionality in Altinn Apps are located in the Apps deployed to the Altinn Apps functionality.\nThis functionality depends on what kind of application template the app is based on and what the app developer have added in addition.\n\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/",
	"title": "Application construction components for Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Altinn Platform consist of serveral components that is constructed with help of different frameworks and components.",
	"content": "See below for application contruction components for the different components in Altinn Platform.\n\rApplication construction components - Altinn Platform Authentication\rThe authentication component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\n\r\rApplication construction components - Altinn Platform Authorization\rThe authorization component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\n\r\rApplication architecture pdf component - Altinn Platform\rThe PDF component is created as an Spring Boot (Java) web application hosted in Kubernetes as a docker container.\n\r\rApplication construction components - Altinn Platform Profile\rThe profile component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\n\r\rApplication architecture receipt component - Altinn Platform\rDescription of receipt component\n\r\rApplication construction components - Altinn Platform Register\rThe register component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\n\r\rApplication Construction components - Storage\rThe storage component is a asp.net core application hosted in Kubernetes as a docker container.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/",
	"title": "Solution-specific application components Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Functionality in Altinn Platform is distributed between different reusable components.",
	"content": "The diagram below shows where the different functionality i located in the components.\n\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/softwareconfiguration/deployment/altinn-studio/",
	"title": "Altinn Studio - Deployment Architecture",
	"tags": [],
	"description": "Description of the deployment architecture for runtime application",
	"content": " NOTE: Work in progress. Stuff will change\n\rThe Altinn Studio App Development solution is deployed to a Kubernetes Cluster. The diagram below show the different applications that is part this.\n\nRepository GITEA is used as Repository in Altinn Studio App Development solution. There is one instance of GITEA running in a docker container in the solution. It uses cloud service database and cloud file share for configuration and remote repos. The Repository is accessed both from the designer application and from code IDE\u0026rsquo;s from app developers computers.\nDesigner Designer is the web based editor for anything related to the app development. (UI, workflow, rules ++) It runs in Docker Containers. (Linux) (how many needed will be analyzed at a later stage).\nRuntime Runtime is used for integration testing of apps as part of Altinn Studio App Development solution. The same runtime application is shared between all app developers. The app code/configuration is copied from local repo of the app developers testing the app.\nRouting NGINX is used for routing between the different applications.\nLocal Developer App Developers can use locally installed IDE and other tools and communicate directly with the repository. This is targeted for the more experienced developers.\nLocal Developer with Altinn Studio For developers that is required to develop custom widgets (REACT) they can install Altinn Studio App Development solution locally on their computer. (Altinn studio support both Windows, Linxu and MacOS)\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/",
	"title": "Application construction components Altinn Studio",
	"tags": [],
	"description": "The application construction components for Altinn Studio includes all components uses to create the Altinn Studio Applications.",
	"content": "The following diagram shows the application construction construction for the Altinn Studio solution with its applications\n\nSee fullscreen or download as visio\nBelow you find the application components for the different applications in the solution\n\rApplication Construction Components Designer\rThis application constructions components for designer application describes the frameworks used, the code structure and other information about how designer is constructed\n\r\rApplication construction components Loadbalancer\rThe loadbalancer for Altinn Studio is based on standard open source softwarre.\n\r\rApplication construction components Repositories\rThe application construction components for Repositories is based on standard open source software.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/",
	"title": "Altinn Studio",
	"tags": [],
	"description": "Altinn Studio is the design-time solution for developing, maintaining, building and deploying applications. Applications created can target both simple and complex user scenarios and have a modern web native architecture.",
	"content": "Altinn Studio is a user-friendly solution where non-technical and technical developers can create apps based on reuse and configuration of existing building blocks.\nExamples on building blocks can be layouts, themes, web-components, texts, API-calls, code lists, and process tasks.\nAltinn Studio consist of serveral parts.\n\rDesigner\rThe designer part of Altinn Studio is where developers create, modify, build and manage deployment of applications. In the background it uses GIT to store code and config for applications in Altinn Studio Repos.\n\r\rAltinn Studio Repos\rThe Git repository solution for storing and versioning apps developed with Altinn Studio.\n\r\rThird Party Tools\rOne important aspect of the Altinn Studio is that we encourage to use third party development tools to create and modify applications.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/altinnservice-projectfile/",
	"title": "AltinnService.csproj",
	"tags": [],
	"description": "Description for AltinnService.csproj file",
	"content": " Summary This is a c# project file that is generated when a new app is created. This project file is placed in the root of the app folder. This project file helps in compiling the app.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-apps/app/",
	"title": "Solution-specific application components for App based on Asp.Net template",
	"tags": ["architecture", "solution"],
	"description": "Description of the Altinn Studio solution",
	"content": " Functionality in Altinn Apps are located in the Apps deployed to the Altinn Apps functionality.\nThis functionality depends on what kind of application template the app is based on and what the app developer have added in addition.\n\nInstanstation The app has instansiation functionality that presents the user for a list over alternative parties that he can select to instansiate a app for.\nThe app developer can add instansiation controll that veriy the type of party selected.\nHe can also add instansiation validation logic that can check anything.\nFormfilling Formfilling renders the UI designed in Altinn Studio and lets the user input data\nProcess handling The app handles a defined process hand moves the app ahead in process depending on the task defined in the process. Currently it is limited to only data tasks\nReceipt When process is completed the user is shown a receipt.\nValidation Application developers can add validaiton logic to the app. User of the app will then gets it data validated and get error messages if the data is not valid.\nCalculation Application developers cann add calculation logic to the app. Users of the app will then get calculated data based on data inputed or prefilled\nPrefill Application developers can configure register and profile prefill. This means that the app will take values from register and profile and set them to the defined field in the datamodel.\nThe user will then experience that known fields of data about him or the choosen party is already filled out in the datamodel for the app.\nApplication developers can also add custom logic that retrieve prefill data from other api\u0026rsquo;s outside Altinn. This logic is run when app is instansiated.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/",
	"title": "Application construction components App",
	"tags": ["architecture"],
	"description": "Description of the application construction components for the app developed in altinn studio.",
	"content": " The App developed in Altinn Studio is currently based on a asp.net application template that contains backend and frontend components. The app developer modifies and enhances the app with changing code and configuration in Altinn Studio or external devlopment tools like Visual Studio Code.\nThe application is built and deployed as a Docker container in a Kubernetes Pod to a Kubernetes cluster. See deployment architecture for deployment details.\nIn the future Altinn Studio will support apps based on different templates. Currently we support the below template(s).\nApp based on Asp.Net core backend and React frontend App Backend App-Backend exposes api to frontend and contains functionality to handle the typical functional scenarious needed like process handling, data storage, business logic ++.\nRead more about the application architecture for App Backend\nApp Frontend Apps based on this template can be configured to have a frontend. Apps created for beeing only a backend for mobile apps other systems will not have a App Frontend.\nRead more about the application architecture for App Frontend\n\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-backend/",
	"title": "Application construction components App Backend",
	"tags": ["architecture", "app-backend"],
	"description": "Description of the application construction components for App Backend",
	"content": " In this app template the App Backend is based on ASP.NET Core and is a Web Api application.\nThe App Backend exposes REST-Api\u0026rsquo;s consumed by a optional App Frontend and/or external systems / mobile apps. The structure of the API\u0026rsquo;s is documented here\nThe diagram below show how the code is structured in different parts.\n\nAltinn.App.Api - Standard API\u0026rsquo;s The REST-APIS are implemented in different web-api-controllers and uses attribute based routing to identify the correct operation. The web-api controllers are implemented in a library called Altinn.App.Api and is published to Nuget.\nThe app template is configured to use this nuget package.\nAltinn.App.PlatformServices - Platform services Platform services are services that are configured in startup on the app and with help of dependendency injection is available to the API controllers and other code in the app. The services are implemented in a library called Altinn.App.PlatformServices and is published to Nuget.\nAltinn.App.Common - Common functionality In common functionality to read configuration from the docker drive is implemnted and other common functionality. The common functionality are implemented in a library called Altinn.App.Common and is published to Nuget.\nApp logic The app logic contains the custom application code that a app developer has generated/created in Altinn Studio or in third party development tools like Visual Studio Code.\nDatamodel The data model in an app is defined as an XSD. From the XSD it is generated a C# representation of that model.\nIn app backend all data is deserialized/serialized from/to this model when communication with frontend/external systems.\nAll logic in the app will typical be related to the datamodel.\nIn the future we will support apps with multiple data models.\n\rAppLogic events\rDescription of applogic events\n\r\rApp Process\rDescription of the process handling of App Backend\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-frontend/",
	"title": "App Frontend Application Architecture",
	"tags": ["architecture"],
	"description": "Description of the Application architecture for App-Frontend",
	"content": " App Frontend is a Single Page Application built using React + Redux.\nThis application is responsible for presenting a UI to the end user. The application consists of several different features that are responsible for handling the UI for different steps in the workflow.\nThe app frontend is automatically built and deployed to a CDN, and is versioned using semantic versioning. Each App developed in Altinn Studio will reference the app frontend, which will be served by the CDN. By default, an app will reference the latest major version that was available when the app was created. Each app may reference a specific version, so that there can be different versions of the app frontend for two different deployed apps.\nReact Architecture The app frontend uses the React and Redux frameworks for presenting a UI to the end user, together with redux-saga to handle side effects. Components are based on Material UI components.\nThe diagram below show the architecture:\n\nStore A store holds the whole state tree of your application. The only way to change the state inside it is to dispatch an action on it.\nRead more\nReducers Reducers specify how the application\u0026rsquo;s state changes in response to actions sent to the store. Remember that actions only describe what happened, but don\u0026rsquo;t describe how the application\u0026rsquo;s state changes.\nRead more\nMiddleware redux-saga is a library that aims to make application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, easy to test, and better at handling failures.\nRead more\nWe try to follow some best-practices for React architecture:\n Small, function-specific components\n UI components are \u0026ldquo;dumb\u0026rdquo;, this keeps the amount of logic to a minimum within the components.  Reusability\n UI components are shared across apps. Shared components between app frontend and receipt frontend . Use Material UI components as much as possible instead of building our own components from scratch.  DRY code\n Use shared resources accross features to avoid duplication of code. Share resources/utils between app frontend and receipt frontend.  Comments only where necessary\n Function and component names should be self-explanatory. Avoid clutter and having to update comments when things change.  Component names in capital\n Keep complex data-loading logic separate from rendering of components\n State is handled by redux as much as possible Data should be passed as props to UI components where possible  Use a feature-based code structure\n Code related to a feature should be grouped together, rather than grouping code by function (actions/reducers etc).  Follow linting rules\n Use a code analyzer to make sure linting rules are followed, for clean readable code   App Frontend Features The App Frontend SPA is seperated in serveral features that is a collection of components and containers that support a given functional area for a App. Typical a feature is connected to a type of workflow step. Like formfilling, signing, ++.\nSupport for new types of workflow steps will be added as they become available in the backend.\nInstantiate This feature is responsible for creating a specific instance of the app for the end user. This feature validates the selected party by checking authorization, and gives the user the option to select a new party (if available) if the current party is invalid. Once a user/party is validated, the backend API to create an instance is called, and the user is sent to the first process step defined for the app.\nForm This feature is responsible for the form filling process step. This includes rendering the form UI designed in Altinn Studio, running any rules/dynamics, calling APIs to perform calulations, validations, save form data, submit/move process to next step.\nTo render the form UI, the form layout defined in Altinn Studio is used together with metadata about the data model. The form components are rendered based on the contents of the form layout.\nReceipt This feature is responsible to show the summary of the instance when an app is sent to end state of the process flow.\nConfiguration files The App Frontend requires some configuration files to work correctly. These files are loaded through APIs.\nFormLayout.json The form layout is used to render the UI for the form feature. It defines which layout elements should be rendered, in what order, and contains details about how they should be rendered (ex. text keys, data model, etc.)\nSee details about FormLayout.json\nLanguage All text resources that are used in the app frontend.\nServiceMetadata Contains information about the data model and is used by UI-render to map the fields to the data model.\nSee details about ServiceMetadata.json\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-backend/applogic-events/",
	"title": "AppLogic events",
	"tags": [],
	"description": "Description of applogic events",
	"content": " The application backend has a defined AppLogic event model that can be used by the app developer to controll when logic in the app will run.\nThese events are mapped to functional events triggered by end users or systems. This functional events are typical trigged by a API-call from App Frontend or other systems/applications using the API\u0026rsquo;s in App Backend.\nSome AppLogic Events happens in more than one functional event.\nOver AppLogic Events AppLogic events are defined in the IAltinnApp interface\nThe following AppLogic Events are currently defined\n InstantiateValidation - Event where app developer can add custom code to validate instantiation. DataCreation - Event where app develoepr can add custom code to prefill data Calculation - Event where app developer can add custom calculation code Validation - Event where app developer can add custom code to validate the instance/data OnStartProcess OnStartProcessTask CanEndProcessTask OnEndProcessTask OnEndProcess  Functional event and their Applogic Events Below different functional events are listed. For each functional event there is described which AppLogic events that is triggered.\nInstansiation Instansiation is when the end user, end user system or organisation instansiates a new app instance. Events connected to instansiation can contain logic that can prefill the datamodell or validate if the user or system is allowed to instansiate that app.\n\nFull screen\nThe below sequence diagram shows how the app-logic events are combined with other logic for a requesting to start an app in the app catalogue.\n\nFull screen\nLoad form data (GET) Loading of form data can be performed by the App Frontend or an end user system that needs to get the latest updated form data.\nThe following events will be performed\n\nFull screen\nStoring of form data (POST) Update of form data can happen when frontend (REACT app) sends data to backend or a end user system does the same. When an update happend there is defined serveral events that is performed in a given order. The app developer can implement logic related to this event that could perform calculation, validation, API calls and much more.\nThe API for updating form data support different modes\n Create - Data should be stored as a new form instance Complete - Data is complete and the app should move ahead in the workflow Calculate - Logic in the calculation event should be performed and the updated form data should be returned Validate - Calculation will be performend and then validation logic is runned and any validation errors is returned. Update - Calculation is runned before data is stored in to the database.  The order of events are\n\nFull screen\nUpdate form data (PUT) Update of form data happens when the frontend or external end user systems/applications want to update a existing form connected to an app instance\nThe following events happens:\n\nFull screen\nValidation Validation is triggered from App Frontend or from end user system.\nThe below sequence diagram shows the application events\n\nFull screen\nProcess: Next git\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/",
	"title": "Application Components",
	"tags": ["architecture"],
	"description": "The Application Components is split in to solution-specific application components, application construction components and non-solution application components.",
	"content": "\r\rSolution-Specific (Functional) Application Components\rSolution-Specific (Functional) Application Components describes the different applications and their functional components. It does not go in to detail about technology.\n\r\rApplication Construction Components\rApplication Construction Components refers to the required components and configurations needed to create the different applications in the different solutions.\n\r\rNon-Solution-Specific\rNon-Solution-Specific Application components refer to all components other than the core solution or solution-specific Application typical used for devops\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/",
	"title": "Architecture",
	"tags": ["architecture"],
	"description": "Altinn Studio, Altinn Apps and Altinn Platform has a modern &#34;web native&#34; architecture. This documentation describes everything from the requirements affecting the architecture to the defined capabilities and the components that provides them.",
	"content": " How is the architecture documented? The non functional and functional requirements have given input to which devops and runtime capabilities that is needed in the solutions. It also have given input which type of components that is needed to implement the capabilities. The Architecture Principles and Architecture Patterns has been decided based on requirements and other goals with the new solutions. The Principles and patterns has been deciding factors how the components implements the capabilities needed.\nThe diagram below show the relationships and you can click the elements to read more about each architecture artifact or select in menu or section below diagram.\n\n\rRequirements\rFunctional and non functional requirements for the different solutions has been important for the defined architecture. This documentation describe them.\n\r\rArchitecture Principles\rThe Architecture Principles are guidelines for the construction of the architecture.\n\r\rArchitecture Patterns\rThe architecture defines some architecture patterns that is reused accross the different solutions.\n\r\rArchitecture Capabilities\rThe Architecture Capabilities are the logical building blocks of the solutions. They are grouped in to Development \u0026amp; Operations (DevOps) Capabilities and Runtime (Execution) Capabilities.\n\r\rArchitecture Components\rArchitecture Components describes the application, data, platform and infrastructure components that provides the capabilities.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/back-end/async-programming/",
	"title": "Async programming",
	"tags": ["development", "asynchronous-programming"],
	"description": "Guidelines for asynchronous programming",
	"content": " The way our solution is built there is a large need for asynchrous functionality. It is important for the development teams to be aware of best practices as well as which antipatterns to avoid.\nBest Practices Async Antipatterns Keep an eye out for anti-patterns and help the team to maintain a high quality in our code base.\nBlocking on tasks with .Result When an asynchronous call is needed in a synchronous method, the implementation below is quite common. This use of .Result ties up the thread that could be doing other useful work, but even more serious it might cause a deadlock.\nInstead of implementations like this:\npublic Party GetCurrentParty() { UserContext userContext = _userHelper.GetUserContext(HttpContext).Result; int userId = userContext.UserId; string cookieValue = Request.Cookies[_settings.GetAltinnPartyCookieName]; int.TryParse(cookieValue, out int partyId); (...) }  Try using this:\npublic async Party GetCurrentParty() { UserContext userContext = await _userHelper.GetUserContext(HttpContext); int userId = userContext.UserId; string cookieValue = Request.Cookies[_settings.GetAltinnPartyCookieName]; int.TryParse(cookieValue, out int partyId); (...) }  Whenever in a method that needs to call an asynchronous method, make the method itself asynchronous.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/authentication/",
	"title": "Authentication",
	"tags": ["api"],
	"description": "How to authenticate towards the apis",
	"content": " Authentication for application owners Application owners should be authenticated with maskinporten.\nAPI provisioning in Maskinporten Api-provider To provide an API in maskinporten Altinn has to do two operations.\n As Api-provider Altinn registres a scope in Maskinporten:\n POST /scopes { \u0026quot;prefix\u0026quot;: \u0026quot;altinn\u0026quot;, \u0026quot;subscope\u0026quot;: \u0026quot;instances/metadata.read\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Clients can access metadata for all instances for all apps of the organisation\u0026quot; }   As Api-provider Altinn has to give access to its scope for a given organisation:\n PUT /scopes/access/889640782?scope=altinn:apps.read  Here we have given organisation 889640782 access to the scope altinn:instances/metadata.read The organisation must then create a client that uses the scope.\nApi-consumer To access the Altinn api an organisation must create a client\n As API-consumer the organisation must create a client in Maskinporten with scopes provided by Altinn:\n POST /clients/ { \u0026quot;client_name\u0026quot;: \u0026quot;altinnOrgRead\u0026quot;, \u0026quot;client_type\u0026quot;: \u0026quot;CONFIDENTIAL\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Client for accessing the my orgs app data\u0026quot;, \u0026quot;scopes\u0026quot;: [ \u0026quot;altinn:instances/metadata.read\u0026quot; ], \u0026quot;token_reference\u0026quot;: \u0026quot;SELF_CONTAINED\u0026quot; }  Scopes scope names must follow the following regexp: ^([a-z0-9]+\\/?)+[a-z0-9]+(\\.[a-z0-9]+)?$?. It means that we cannot have - or _ in scope names.\nAll instances scope altinn:instances.read altinn:instances.write  This is the most general scope which can be given to an organisation by Altinn. It means that the application owner can create a client that can access all instances of apps issued by that application owner. Clients with write scope will be able to instantiate applications through direct access to the app\u0026rsquo;s api, update metadata, update process state, upload data, validate data, and change process of an instance. Clients with read token will only be allowed to read metadata, data and events information.\nExchange of JWT token Application owners register clients in Maskinporten and selects the scope they need.\nA client is authenticated by Maskinporten and are given a Maskinporten JWT access token.\nThis token has to be validated and replaced with an Altinn JWT access token which should be used to access the apis.\nMaskinporten JWT access token (input) Client provides a self-contained access-token.\nAutorization: Bearer eyJraWQiOiJIdFlaMU1UbFZXUGNCV0JQVWV3TmxZd1RCRklicU1Hb081OFJ4bmN6TWJNIiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiJ0ZXN0X3JwIiwic2NvcGUiOiJ ... GET /authentication/api/v1/exchange/maskinporten  The token looks something like this (after decoding):\n{ \u0026quot;kid\u0026quot;: \u0026quot;HtYZ1MTlVWPcBWBPUewNlYwTBFIbqMGoO58RxnczMbM\u0026quot;, \u0026quot;alg\u0026quot;: \u0026quot;RS256\u0026quot; } . { \u0026quot;aud\u0026quot;: \u0026quot;https://tt02.altinn.no/maskinporten-api/\u0026quot;, \u0026quot;scope\u0026quot;: \u0026quot;altinn:instances.write\u0026quot;, \u0026quot;iss\u0026quot;: \u0026quot;https://oidc-ver2.difi.no/idporten-oidc-provider/\u0026quot;, \u0026quot;client_amr\u0026quot;: \u0026quot;virksomhetssertifikat\u0026quot;, \u0026quot;token_type\u0026quot;: \u0026quot;Bearer\u0026quot;, \u0026quot;exp\u0026quot;: 1571935870, \u0026quot;iat\u0026quot;: 1571923870, \u0026quot;client_id\u0026quot;: \u0026quot;0de19f7a-f5fa-45d1-874c-3d2e88ce97d9\u0026quot;, \u0026quot;client_orgno\u0026quot;: \u0026quot;974760673\u0026quot;, \u0026quot;jti\u0026quot;: \u0026quot;U3HMLIY8b_X454CADQzfttSuWpCADPQhc57iZXVF_Ac\u0026quot;, \u0026quot;consumer\u0026quot;: { \u0026quot;authority\u0026quot;: \u0026quot;iso6523-actorid-upis\u0026quot;, \u0026quot;ID\u0026quot;: \u0026quot;0192:974760673\u0026quot; } } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt;  Maksinporten provides the legal consumer (the client) in ISO 6523 format. The client_orgno claim is deprecated.\nThe Altinn JWT Access token (output) The convert operation validates the incomming token and generates a new JWT token with the same scope as the token. The scopes is copied. The organisationNumber, org and orgName is added by the token converter.\n{ \u0026quot;scope\u0026quot;: \u0026quot;altinn:instances.read altinn:instances.write\u0026quot;, \u0026quot;token_type\u0026quot;: \u0026quot;Bearer\u0026quot;, \u0026quot;exp\u0026quot;: 1571996946, \u0026quot;iat\u0026quot;: 1571995146, \u0026quot;client_id\u0026quot;: \u0026quot;0de19f7a-f5fa-45d1-874c-3d2e88ce97d9\u0026quot;, \u0026quot;client_orgno\u0026quot;: \u0026quot;974760673\u0026quot;, \u0026quot;jti\u0026quot;: \u0026quot;BcNIAuZKXdjpECmmwalAm-pcBp0iNc56T6eXhlxNBZE\u0026quot;, \u0026quot;consumer\u0026quot;: { \u0026quot;authority\u0026quot;: \u0026quot;iso6523-actorid-upis\u0026quot;, \u0026quot;ID\u0026quot;: \u0026quot;0192:974760673\u0026quot; }, \u0026quot;org\u0026quot;: \u0026quot;brg\u0026quot;, \u0026quot;orgNumber\u0026quot;: 974760673, \u0026quot;iss\u0026quot;: \u0026quot;https://platform.altinn.cloud/\u0026quot;, \u0026quot;AuthenticateMethod\u0026quot;: \u0026quot;maskinporten\u0026quot;, \u0026quot;AuthenticationLevel\u0026quot;: 3, \u0026quot;nbf\u0026quot;: 1571995146 } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt;  Authentication for end user system End user systems should be authentication with ID-porten. When authenticated the system may exchange a token provided by ID-porten with an Altinn token by instructions below.\nExchange of JWT token This token has to be validated and replaced with an Altinn JWT access token which should be used to access the apis.\nID-porten JWT access token (input) Autorization: Bearer eyJraWQiOiJjWmswME1rbTVIQzRnN3Z0NmNwUDVGSFpMS0pzdzhmQkFJdUZiUzRSVEQ0IiwiYWxnIjoiUlMyNTYifQ.eyJhdF9 ... GET /authentication/api/v1/exchange/id-porten  The token looks something like this (after decoding):\n{ \u0026quot;kid\u0026quot;: \u0026quot;cZk00Mkm5HC4g7vt6cpP5FHZLKJsw8fBAIuFbS4RTD4\u0026quot;, \u0026quot;alg\u0026quot;: \u0026quot;RS256\u0026quot; } . { \u0026quot;at_hash\u0026quot;: \u0026quot;IF-jpSLtMjzoHdEhLq9pnw\u0026quot;, \u0026quot;sub\u0026quot;: \u0026quot;PZcxQYOR_ylbrlj69pXn_HdTmrpDRpA3X0rTyOEyN5I=\u0026quot;, \u0026quot;amr\u0026quot;: [ \u0026quot;Minid-PIN\u0026quot; ], \u0026quot;iss\u0026quot;: \u0026quot;https://oidc-ver2.difi.no/idporten-oidc-provider/\u0026quot;, \u0026quot;pid\u0026quot;: \u0026quot;191080XXXXX\u0026quot;, \u0026quot;locale\u0026quot;: \u0026quot;nb\u0026quot;, \u0026quot;nonce\u0026quot;: \u0026quot;1584978003167642\u0026quot;, \u0026quot;sid\u0026quot;: \u0026quot;bQDBkJmjrX3bx2agu4q7BS5QW6TPf9CHnJX11vEthZg\u0026quot;, \u0026quot;aud\u0026quot;: \u0026quot;38e634d9-5682-44ae-9b60-db636efe3156\u0026quot;, \u0026quot;acr\u0026quot;: \u0026quot;Level3\u0026quot;, \u0026quot;auth_time\u0026quot;: 1584978021, \u0026quot;exp\u0026quot;: 1584978141, \u0026quot;iat\u0026quot;: 1584978021, \u0026quot;jti\u0026quot;: \u0026quot;_Og8JT1zMKzzHFB4WoVCdvqzmEpoY1hPhLa47bieJ94\u0026quot; } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt;  The Altinn JWT Access token (output) The exchange operation validates the incomming token and generates a new JWT token that contains user data retrieved from the database using the provided pid (person identification number) and pre-existing data from the ID-porten token. pid is referred to as ssn (social security number) i Altinn Platform.\n{ \u0026quot;nameid\u0026quot;: \u0026quot;20000011\u0026quot;, \u0026quot;urn:altinn:userid\u0026quot;: \u0026quot;20000011\u0026quot;, \u0026quot;urn:altinn:username\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;urn:altinn:partyid\u0026quot;: 50002119, \u0026quot;urn:altinn:authenticatemethod\u0026quot;: \u0026quot;Minid-PIN\u0026quot;, \u0026quot;urn:altinn:authlevel\u0026quot;: 3, \u0026quot;amr\u0026quot;: \u0026quot;Minid-PIN\u0026quot;, \u0026quot;pid\u0026quot;: \u0026quot;191080XXXXX\u0026quot;, \u0026quot;locale\u0026quot;: \u0026quot;nb\u0026quot;, \u0026quot;nonce\u0026quot;: \u0026quot;1585045781364132\u0026quot;, \u0026quot;sid\u0026quot;: \u0026quot;BYSqEpVGRrh6rElmnzzTjcU0roC95rxNCC2kAsB2hmY\u0026quot;, \u0026quot;acr\u0026quot;: \u0026quot;Level3\u0026quot;, \u0026quot;auth_time\u0026quot;: 1585045793, \u0026quot;exp\u0026quot;: 1585047785, \u0026quot;iat\u0026quot;: 1585045985, \u0026quot;nbf\u0026quot;: 1585045985 } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt;  Open ID Connect configuration This is work-in-progress. The response is still missing required information and might be inconsistent with actual authentication mechanisms.\n\rMetadata about Altinn as an Open ID provider is exposed as a .well-known endpoint as defined by OpenID Connect Discovery.\nThe primary porpose of this endpoint is to make available the Altinn signing certificate for the JSON Web Tokens being generated. It is recommended that clients of Altinn use this discovery endpoint to automatically have their systems updated when Altinn changes their signing certificate.\n   Environment URL     AT2x https://platform.at2x.altinn.cloud/authentication/api/v1/openid/.well-known/openid-configuration   YT01 https://platform.yt01.altinn.cloud/authentication/api/v1/openid/.well-known/openid-configuration   TT02 https://platform.tt02.altinn.no/authentication/api/v1/openid/.well-known/openid-configuration    "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/authentication/",
	"title": "Authentication Capabilities",
	"tags": ["architecture", "security"],
	"description": "The different solutions need different types of Authentication capabilties to support the different users and systems",
	"content": " Altinn Studio Developer authentication The App Developer using Altinn Studio will authenticate with help of the build in account in Gitea.\nThe designer part of Altinn Studio integrates with Gitea so it identifies the user logged in in Gitea.\nGIT Repo authentication When users tries to update the Git repo where source files for the app is stored it needs to authenticate agains the GIT repo.\nThis can be done through using a App Key generated in Gitea or using the username/password for the Gitea account.\nAltinn Apps / Altinn Platform In Altinn Platform and Altinn Apps there is deployed applications and components that need to be able to authenticate users and systems accessing them.\nThis is needed when resources requiring authentication and authorization is requested.\nThis will typical be API\u0026rsquo;s that expose, or updates data owned by a specific party (person or organization)\nOverall Authentication architecture There are several requirements to an authentication architecture for Altinn Apps / Altinn Platform. The most important is\n Needs to be supported by different types of application frameworks Needs to support end users accessing Altinn Apps / Altinn Platform through a web browser running the REACT application Needs to be safe against XSS attacks. Needs to support scenarios where users are accessing through external systems or mobile apps Needs to support systems from org(s) that is authorized to perform application operations. Apps should not have access to secret so they can create their own token. Needs to support passing the identity to api\u0026rsquo;s that are consumed by Altinn Apps.  Since Altinn Platform will in the future support applications created by different frameworks (Java/.Net/Node ++++) it is important that the authentication mechanisms are supported by different types of platforms.\nJSON Web Token are an open, industry standard RFC 7519 method for representing claims securely between two parties and are chosen as the bearer of information about users and systems.\nThe JWTToken is created in an asymmetric process where the Authentication component will use a private key from a certificate to sign the token, and the different apps and components that needs to verify it will use the public key. See JWT Format for details on the algorithm used.\nThe application architecture below show how JWT flows between the different parts of the solutions.\n\nSee fullscreen or download as visio.\nEnd user using app frontend For end user accessing the app through browser that loads app frontend, the authentication mechanism is based on using a protected cookie containing a JWT Token. ( HttpOnly and Secure)\nThe reason for putting the JWT token in the cookie for this scenarious is to protect against XSS attacks.\nIf the REACT application stored the JWT token as part of browser memory (REDUX), XSS attacks could potential expose those tokens. When storing the tokens in secure cookies those tokens are not available to any JavaScript code running in the browser.\nThe cookie with the JWT token is created by Authentication component in the Altinn Platform solution.\nThe React application would need to refresh the token at given interval or the token will expire. To refresh a cookie token, the token API in Platform needs to be called\norg systems accessing app and platform api\u0026rsquo;s org (the entity owning the application) will have seperate API\u0026rsquo;s in a spp to perform operations on. They are authenticated with help of agency system id + password. A API in the authentication component in Altinn creates a JWT token that can be used to authenticate the agency system when calling api\u0026rsquo;s on apps running in Altinn Apps.\nSee Authentication API for details.\nEnd user systems accessing app api\u0026rsquo;s This solutions is yet to be finalized. The assumption is that the either the organization that own the system is authenticated and have a jwt token containing the organization number for that given organization or that the user using the system is authenticated and the systems send user token with request.\nThis is analyzed in #3291 and #237\nAuthentication of Altinn Apps against Altinn Platform Applications hosted in a Altinn Apps solution would in many cases need to authenticate the end user against the different Altinn Platform components.\nThe solution for this is that the Apps would forward the JWT Token from the bearer token or JWT Cookie to the component that is called. This would be forwarded as a bearer token in the Authorization header in the request against the component.\nThis makes it possible to configure JWTCookie authentication mechanismen to authenticate the end user also in the components.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/authentication/",
	"title": "Application construction components - Altinn Platform Authentication",
	"tags": ["architecture", "solution"],
	"description": "The authentication component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": " The application runs on port 5040. See full details in dockerfile\nApi Controllers  Authentication : Functionality to convert the different ID-tokens from ID providers OpenID : Contains well known endpoint Organization : TODO. is this needed  Dependencies Authentication component take use of libraries for OpenID connect to create and validate JWT tokens.\nSee full list of dependencies in csproj configuration.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authentication/",
	"title": "Application arhicture authentication component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Description of authentication component",
	"content": " The Authentication component is an a ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\nThe solution is currently available at http://platform.altinn.cloud/authentication/api/v1.\nResources: authentication\n/authentication Authenticate user The authentication resource enables authenticating a user and redirecting it to another Altinn-url. If the user is not authenticated already it will be sent to the login page before redirecting the user to its final destination {url}.\nGET /authentication?goto={url}  Refresh a valid JwtToken: GET /refresh  Exchange a JWT token from an external token provider. Accepted providers include: maskinporten and id-porten. Request must include a bearer token in the authorization header. Set test equal to true if retrieving a token for Testdepartementet. (This ony works with maskinporten as the token provider.)\nGET /exchange/{tokenProvider}?test={bool}  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/authentication/authentication-api/",
	"title": "Authentication APIs",
	"tags": ["architecture", "security"],
	"description": "Description of the Authentications API in Authentication Component",
	"content": " As part of the authentication component there will be some API\u0026rsquo;s that support authentication of different types of users and systems.\nAPI for SBL Authentication cookie This API creates a JWT Cookie (A cookie with a JWT Token) based on the SBL Cookie created during login in the Legacy SBL solution. This API uses API in the SBL Bridge to verify the cookie and get information about the logged in user. Based on this information this API creates a JWT token with claims about the user (userid, authentication level ++) and sign the JWT token with the private key of Altinn Platform.\nThe login process for a user that wants to access a app in Altinn Apps is described below.\n\nAPI for End User System There are two API\u0026rsquo;s for end user sytems\nReserve Pin for End User This API lets the user request a Altinn PIN or SMS Pin for a end user\nValidate system and/or end user This API validates the end user systm id together with the password for the system\nThe below diagram shows how\n\nAPI for enterprise users \nAPI for Org systems This API is used to authenticate the org systems.\nTo authenticate a system like this Altinn Platform requires that the system is registred as a client in Maskinporten for a given org. The org need also to be given scopes that matches the scopes for the API requested in Maskinporten.\nThis will be given by Altinn.\nThe org system should be given the scope needed by the administrator of org. (done through Maskinporten API described under 4 here)\nThe org system would need to request a access token from Maskinporten with the correct scope. This token will be used in the org API in Authentication component in the Altinn Platform to create a new JWT token that can be used for all org apis in Apps and platform.\nDuring the verification process of the Maskinporten JWT token the scope and org is verified.\nThe below sequence diagram show how this will happen.\n\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/authorization/",
	"title": "Authorization",
	"tags": ["architecture", "security"],
	"description": "The authorization model in Altinn Apps / Altinn Platform is flexible and supports different needs.",
	"content": " Rights In Altinn Apps/Platform a right is a permission to perform an action on a given resource. The action can be one of some predefined option like read, write and sign but can also be any other action defined on a custom api in the apps. The resource is typical an app instance or part of it where data belongs to a given party (person or organisation).\nA user or system gets a right based on rules that describes permissions based on being a specific user or having a specific role.\nRules A authorization rule in Altinn Platform defines who has been given the right to perform actions on a given resource. A rule consist of 5 elements\nResource This describe which resource the rule applies for. Altinn Apps currently support the following resource types in rules.\n Org - Unique identifier of the organisation responsible for the app. App - Application identifier which is unique within an organisation. Task - A specific task in the process defined for a app  Some of the resourcetypes is meant to be used in combination. As an exemple you can have been given the right for an app for a given reportee\nSubject The subject in a authorization rule identifies who the rules applies for. In Altinn Apps/Platform the resource can be the following.\n RoleType org  Action The Action part of the rule define what type of action that the subject can perform on the resource. In Altinn Studio we have the following actions\n Read Write Sign ArchiveRead ArchiveDelete  Condition The condition part of the rule is extra conditions needed to be fulfilled for the rule to be valid. In Altinn Studio we have the following types of conditions.\n Valid To  Obligation A obligation is a obligation that needs to be followed it the user is permited or denied. In Altinn Apps/Platform this is used to define the minimun authentication level.\nCreation of rules The rules in Altinn Studio Apps is defined when the app developer defines the rules for the app. The rules are deployed together with the App to a given Altinn Studio App environment.\nIn Altinn II end user can also create rules. This happens when: - When user creates a local role that contains rights that user have through other roles - When delegating single rights to a user or organisation.\nThe rules is slightly different since rules defined by the end user have different subjects and can be defined for a more limited resource.\nAltinn Studio rule \nUser defined rule \nRoles Altinn Studio Apps will retrieve roles from Altinn II Administration. This will later could be expanded to other sources for roles.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/authorization/",
	"title": "Application construction components - Altinn Platform Authorization",
	"tags": ["architecture", "solution"],
	"description": "The authorization component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": " The authorization component consists of several parts. For a functional description see details in application solution components.\nPolicy Decision Point - PDP This is implemented as a separate class library This is published to Nuget.\nPolicy Retrieval Point - PRP Policy Retrieval Point component that stores authorization policies for applications.\nThe policies are stored as XACML (xml) documents in a blob storage.\nWhen an authorization request is received to PDP, PRP identifies the correct policy document in the policy storage.\nSee code\nContext Handler Context handler enriches the authorization request with information about the user and the resource requested. Roles are retrieved from SBL Brigde while resource information is retrieved from Instances in storage.\nSee code\nPolicy Information Point - Roles PIP for roles, calls SBL bridge to get the rules a user or system has for a resource party.\nApi controllers  Decision Policy Roles Parties  Dependencies See csproj\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/",
	"title": "Altinn Platform - Authorization",
	"tags": ["architecture", "solution"],
	"description": "Description of authorization component",
	"content": " This page is a work-in-progress. Currently we haven\u0026rsquo;t defined all the resources and operations for the authorization component.\n\rThe Authorization component exposes a REST-API to Altinn Apps.\nAuthorization is used by the applications to authorize an action requested by the logged in user on a given resource and to retreive policy information. Use the authorization api to manage authorizations in altinn platform.\nResources: Actor, Roles\nParties A party is a person whom you can represent and perform a request on his behalf. A logged in user can retrieve a list of parties that he/she can represent.\nOperations Get a list of parties that the user can represent. The userid is sent as parameter\nGET /authorization/api/v1/parties?userid={userid}  Validate that a given user is allowed to represent a given party. The partyid and userid are sent as parameters\nGET /authorization/api/v1/parties/{partyId}/validate?userid={userid}  Roles A role in altinn offers or denies right to the logged in user to perform an action or group of actions for him or on behalf of someone.\nOperations Get a list of roles that the user can perform for the selected party\nGET /authorization/api/v1/roles  Policies A set of polices contains authorization rules.\nOperations Stores / updates rules for a given app, defined in the query string. The rules are sent in the body of the request. Reade more about the policy format here.\nPOST /authorization/api/v1/policies?org=org\u0026amp;app=app  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/abac/",
	"title": "Authorization Component - Altinn Platform",
	"tags": ["architecture", "security", "authorization", "Altinn Platform"],
	"description": "Description of the Authorization Architecture for Altinn Platform",
	"content": " Altinn Platform has a attribute based access control (ABAC). In short, request is authorized based on attributes for the request. Eg what data element is the user accessing, who owns it, what type of data element and so on.\nThe Authorization Component contains a large part of the authorization architecture components.\nAuthorization Architecture Components The authorization architecture for Altinn Platform are based on the XACML reference architecture.\nThis architecture defines the following components.\nPolicy Decision Point (PDP) The Policy Decision Point is responsible for deciding if the requested operation is allowed. PDP looks at the rules defined for a given resource and based on roles or other claims it decides if user or system can perform the request. Altinn Apps uses Policy Decision Point in Altinn Platform solution\nLearn about Policy Decision Point in authorization component\nPolicy Information Point The Policy Information Point is used by PDP to gather information needed to perform the decision. Altinn Apps uses Policy Information Point in Altinn Platform to get information about resources and users/systems.\nLearn about Policy Information Point in authorization component\nPolicy Retrieval Point The policy retrieval point is where PDP can request the policies for a given resource. Altinn Apps uses PRP in Altinn Platform Learn about Policy Retrieval Point in authorization component\nContext handler The context handler is responsible for enriching the decision request, so it contains all attributes that PDP needs to take a decision. Altinn Apps uses Context Handler in Altinn Platform\nLearn about Context Handler in authorization component\nPolicy Administration Point (Altinn Studio) The policy administration point is where the policy rules are defined. The policy for Apps is defined in Altinn Studio\nLearn about Policy Administration Point in Altinn Studio\nPolicy Enforcement Point (Common) The Policy Enforcement Point is where the user or system is actual stopped or allowed to perform a requested operation on a resource. Each App in Altinn Apps need to have a Policy Enforcement Points on all resources that needs to be authorized\nLearn about Policy Enforcement Point in apps based on ASP.NET core template\nThe Overall Authorization flow The sequence diagram below shows how request is authorized\n\nSee fullscreen\nExample process The following example flow describes in detail the authorization process when the REACT frontend calls an API to store form data\n User trigger save in the REACT application. REACT application makes a http post request against the ServiceAPIController in The configured Policy Enforcement Point for the API, the Service Access Handler,\ntriggers to verify that user is authorized The PEP identifies the authenticated user from authorizationhandler context and find the relevant resource ID from request The PEP calls the PDP functionality in Authorization Component in Altinn Platform PDP calls context handler to enrich the decision request Context handler calls Storage PIP to get resource information Context handler calls authorization PIP to get roles user have for resource party Context handler enriches the decision request and return to PDP PDP calls PRP to get the policy for the resource PDP evaluates the decision request and returns a decision response If the result was Permit, the PEP validates the obligation from PDP to see if authentication level was high enough. If it is enough the request is let through If the authentication level is not high enough the PEP will throw a not authorized exception (403) If the result was \u0026ldquo;Not Applicable\u0026rdquo; the PEP will throw a not authorized exception (403)  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/automated-test-app/",
	"title": "Automated test app",
	"tags": ["development", "testing"],
	"description": "An app used solely for automated testing in the browser",
	"content": " Rules\nConditional rules\nValidation\nAPI connections\nAutomated test app This is an app which should only be used to run automated tests against. It contains these components:\n Title Paragraph Input Textarea Checkbox Radio button Attachment Datepicker Address API  Bring postnummer API  Button  All the components are connected to the datamodel.\nRules In the input field with the label Kort svar komponent (dynamics) for automatisert testing, write a year there (i.e. 2019) and the datepicker below with the label Dato komponent (dynamics) for automatisert testing should be filled with 01-01-2019. The relevant code:\nberegnStartdato: (obj) =\u0026gt; { return obj.regnskapsaar.concat(\u0026quot;-01-01\u0026quot;); } beregnStartdato: () =\u0026gt; { return { regnskapsaar: \u0026quot;regnskapsår\u0026quot; } }  Conditional rules If you click the option Ja on the radio buttons with the label Radioknapp komponent for automatisert testing, the first paragraph with the label Paragraf at the top of the app will be shown. If you click the option Nei on the same radio button component, that same paragraph will be hidden. The relevant code:\nsjekkOmJa: (obj) =\u0026gt; { return (obj.value \u0026amp;\u0026amp; obj.value === \u0026quot;Ja\u0026quot;); } sjekkOmJa: () =\u0026gt; { return { value: \u0026quot;Verdi\u0026quot; } }  Validation In the input field with the label Kort svar komponent (hard validation) for automatisert testing, hard validation has been connected. That means it checks your input and validates that the input has fewer than 4 characters as seen here:\nprivate void ValidateKortsvarHard(Skjema skjema, ModelStateDictionary modelState) { string input = skjema?.AutomatedTest_HardValidering; if(input == null) { modelState.AddModelError( \u0026quot;automatedTest_HardValidering\u0026quot;, \u0026quot;mangler svar\u0026quot;); } else if (input.Length \u0026gt;= 5) { modelState.AddModelError( \u0026quot;automatedTest_HardValidering\u0026quot;, \u0026quot;ikke mer enn 4 tegn\u0026quot;); } }  In the input field with the label Kort svar komponent (soft validation) for automatisert testing, soft validation has been connected. It will check if the input has any characters, and if it has any, the soft validation will trigger.\nprivate void ValidateKortsvarMyk(Skjema skjema, ModelStateDictionary modelState) { string input = skjema?.AutomatedTest_MykValidering; if(input != null) { modelState.AddModelError( \u0026quot;automatedTest_MykValidering\u0026quot;, \u0026quot;*WARNING*du skrev noe\u0026quot;); } }  API connections In the input field with the label API tilkobling input (Bring postnummer) for automatisert testing, write a postal code in Norway (i.e. 0155). The input field with the label API tilkobling output (Bring postnummer) for automatisert testing should now show the city in Norway based on the postal code written in the previous field.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/azure-dev-spaces/",
	"title": "Azure Dev Spaces",
	"tags": ["development"],
	"description": "Guidelines for deploying storage",
	"content": " This page is a work-in-progress. Currently we don\u0026rsquo;t have azure dev spaces set up for tjeneste 3.0\n\rAzure Dev Spaces Azure dev spaces is an offering from Azure for a rapid, iterative Kubernetes development experience for teams. AZDS gives the opportunity to iteratively run and debug containers directly in Azure Kubernetes Service (AKS) with minimal dev machine setup. You can read more about AZDS, setup and configuration for visualstudio or Visualstudiocode here.\nEnable Azure Dev Spaces in Storage Once you install the visual studio or visual studio code extensions for azure dev spaces, you should see the option for azure dev spaces in debug tool.\nOn selecting the azure dev spaces option for a selected project, azure dev spaces configuration modal popsup where you must select the subscription, cluster name and space.\nAzure dev spaces tools for Visual studio automatically generates the required helm charts and dockerfile for the first time.\nThe application is then deployed to the selected dev space and ready for debugging.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/azure-devops/",
	"title": "Azure DevOps",
	"tags": ["development"],
	"description": "Guidelines for working with resources in Azure DevOps",
	"content": "\r\rPipelines\rQuality checklist and overview of pipelines in Azure DevOps\n\r\r\r\rWe use Azure DevOps for building and deploying both our solution and the app owners applications.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/bpmn/",
	"title": "BPMN 2.0",
	"tags": ["process"],
	"description": "Business Process Model and Notation (BMN) - Workflow",
	"content": " Needs/Background  Support for visually creating and editing a workflow. Standardized workflow format (XML/JSON). Step parameters.  BPMN 2.0 Business Process Model and Notation (BPMN) is a standard for business process modeling that provides a graphical notation for specifying business processes in a Business Process Diagram, based on a flowcharting technique very similar to activity diagrams from Unified Modeling Language (UML) -*Wikipedia.\n BPMN 2.0 has a standardized XML format for exchanging BPMN 2.0 processes between different parties and software. BPMN 2.0 supports defining collaboartion between two or more collaborators.  BPMN 2.0 XML Extensibility In the formal specifications chapter 8.2.3 the following is described:\n The BPMN metamodel is aimed to be extensible. This allows BPMN adopters to extend the specified metamodel in a way that allows them to be still BPMN-compliant.\nIt provides a set of extension elements, which allows BPMN adopters to attach additional attributes and elements to standard and existing BPMN elements.\nThis approach results in more interchangeable models, because the standard elements are still intact and can still be understood by other BPMN adopters. It’s only the additional attributes and elements that MAY be lost during interchange.\n When extended the BPMN XML is still understood by other BPMN adopters, but the additional attributes and elements MAY be lost during interchange.\n Testing different BPMN software packages shows that the extended attributes in the XML does not show up as configurable properties in other software. Modifying the \u0026ldquo;default template\u0026rdquo; in the BeeBPMN editor did not remove the default Altinn properties.  XML / XSD https://www.omg.org/spec/BPMN/2.0/About-BPMN/\nBPNM.io - bpnm-js Homepage\nBMPN.io modeler\n bpmn-js uses BPMN 2.0 XML standard. bpmn-js is an open source BPMN 2.0 web-based rendering toolkit and modeler. bpmn-js can be extended with rules and custom elements.  Custom elements Nyan  bpmn-js has parameter sidebar link  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/designer/backend/",
	"title": "Altinn Studio Designer - Back-end",
	"tags": [],
	"description": "Application construction components used in Altinn Studio Designer backend",
	"content": " Altinn Studio Designer Back-end is a ASP.Net Core application that exposes web-API\u0026rsquo;s to be used by Altinn Studio Designer Frontend. It is built and deployed as a Docker container running in Kubernetes\nAPI Controllers The API controllers exposes the web-APIs.\nThey are structured in different controllers that is grouped by functional areas.\nThe controllers we have now is\n ApplicationMetadata - responsible for functionality related to metadata Config Deployment Pipelines Releases Repository ServiceDevelopment UIEditor  Services Services in a asp.Net application is configured services that controllers and other components used. They are defined with a interface and a implementation and configured in startup.\nThis makes them easy to mock out when doing integration testing of the Altinn Studio Designer backend.\nThe services we have now is\n ApplicationInformation ApplicationMetaata AuthorizationPolicy Deployment Pipeline Release GiteaAPIWrapper Repository SourceControl  Model View Controllers The model view controllers are responsible for presenting razor views where we dont use React as frontend.\nWe are in process with moving functionality to react and api controllers.\nThe following MVC controllers\nFactories Model Factory Model factory is the module that generates metadata and C# models based on uploaded XSD.\nLibraries Altinn Studio Designer backend uses some libraries for different functionality\nLogging Application Insight GIT Client The details about all libraries used can be found in the project file.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/back-end/",
	"title": "Back-end",
	"tags": ["development", "todo"],
	"description": "Coding guidelines for back-end",
	"content": "TODO\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/best-practices/",
	"title": "Best practices",
	"tags": ["development", "front-end"],
	"description": "Best practices for altinn.studio frontend",
	"content": " Altinn.studio best practices will be updated with more and better practices ;)\n\rBest practices  Simple lists should be sorted alphabetically  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/known-issues/breaking-changes/",
	"title": "Breaking changes errors and how to fix them",
	"tags": [],
	"description": "Overview of breaking changes introduced into Altinn Studio and how and what to update on an existing app to fix the problem.",
	"content": " Breakig change: Platform authorization introduced for Platform Register and Profile Introduced with issue: #4162 and Release: v2020.23. The change affects all application created in Altinn Studio before 03.06.2020.\nErrors Users will experience that instantiation, form filling and viewing receipt fails with the following error: When checking the network log one will find that the POST request to https://ttd.apps.at22.altinn.cloud/ttd/apps-test/instances?instanceOwnerPartyId= fails with status code 404.\nHow to fix There are three steps you must take in order to update your application to adhere to the breaking change.\n Update values.yaml in the deployment folder in your application repository.\nIf no custom changes have been made to this file since you created the application, simply replace the content of the file with this code.\nThe picture illustrates which changes are required in the file if you wish to do it manually, or inspect your code. Be ware that indentation is important when working with .yaml files.  Update nuget dependencies in App.csproj to version 1.0.86-alpha.\nNavigate to you application repository and find App.csproj in the App folder. Upgrade the three Altinn.App nugetpackages to version 1.0.86.\n\u0026lt;PackageReference Include=\u0026quot;Altinn.App.Api\u0026quot; Version=\u0026quot;1.0.86-alpha\u0026quot; /\u0026gt; \u0026lt;PackageReference Include=\u0026quot;Altinn.App.Common\u0026quot; Version=\u0026quot;1.0.86-alpha\u0026quot; /\u0026gt; \u0026lt;PackageReference Include=\u0026quot;Altinn.App.PlatformServices\u0026quot; Version=\u0026quot;1.0.86-alpha\u0026quot; /\u0026gt;  Update Startup.cs in the App folder in your application repository. If no custom changes have been made to this file since you created the application, simply replace the content of the file with this code.\nThe picture illustrates which changes are required in the file if you wish to do it manually, or inspect your code.   Breaking change: Updated client-side validation - frontend v2 and Nuget v1.0.82-alpha Introduced with issue: #3944, and applies to existing apps that upgrade to the new major version of\napp frontend (v2).\nThe client-side validation of the app frontend has been replaced with a JSON-schema validation in order to provide a more complete client-side validation. As of v2 of app frontend, client-side validation has support for type-checking basic types, including enums. When upgrading the frontend version to v2, the app must use nuget versions 1.0.82-alpha or newer. See details below.\nIn order to implement this, we have made changes to how we bind the data model to fields in the forms.\nThe change is only breaking for apps using OR-type xsd (or have fields with --character in xsd). Most Seres-type data models will not be affected, and will work without needing to make changes, even after updating to v2 of app frontend. If you do experience any problems with submitting/validating form data even with a seres-type xsd, follow the steps below.\n\rErrors For apps that use an OR-type xsd (or have fields with --character in xsd), the app may crash during submission/validation because the data model binding used does not match the true path in the json schema (and xsd). This is because we have been using a simplified path previously, to match with the C# model. We have now changed that so that the data binding name corresponds to the true xpath for the field.\nHow to fix  If using app frontend v2 or newer, make sure app is using nuget packages v1.0.82-alpha or newer. See documentation on how to update dependencies.. Open the app in altinn.studio and upload datamodel again to generate a new version of the model files, with all the updated paths.  Please note that this overwrites any texts in the text resource files, so make sure to save a copy or push the app to the app repo before doing this, to recover any texts that might disappear.  Update data model bindings in altinn.studio UI Editor, or update FormLayout.json with new data model bindings (see below for new format).  Each part of the path now corresponds to the xname of the field in the xsd. F.ex:   XSD:\n \u0026lt;xs:schema xmlns:xs=\u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;!--title='Eksempel xsd skjema' lang='NOB'--\u0026gt; \u0026lt;xs:element name=\u0026quot;Skjema\u0026quot;\u0026gt; \u0026lt;xs:complexType\u0026gt; \u0026lt;xs:sequence\u0026gt; \u0026lt;xs:element minOccurs=\u0026quot;0\u0026quot; ref=\u0026quot;SomeGroup-grp-1111\u0026quot; /\u0026gt; \u0026lt;/xs:element\u0026gt; \u0026lt;/xs:sequence\u0026gt; \u0026lt;xs:anyAttribute /\u0026gt; \u0026lt;/xs:complexType\u0026gt; \u0026lt;/xs:element\u0026gt; \u0026lt;xs:element name=\u0026quot;SomeGroup-grp-1111\u0026quot;\u0026gt; \u0026lt;xs:complexType\u0026gt; \u0026lt;xs:sequence\u0026gt; \u0026lt;xs:element minOccurs=\u0026quot;0\u0026quot; ref=\u0026quot;SomeField-datadef-12345\u0026quot; /\u0026gt; \u0026lt;/xs:sequence\u0026gt; \u0026lt;xs:attribute fixed=\u0026quot;1111\u0026quot; name=\u0026quot;gruppeid\u0026quot; type=\u0026quot;xs:positiveInteger\u0026quot; use=\u0026quot;required\u0026quot; /\u0026gt; \u0026lt;/xs:complexType\u0026gt; \u0026lt;/xs:element\u0026gt; \u0026lt;xs:element name=\u0026quot;SomeField-datadef-12345\u0026quot;\u0026gt; \u0026lt;xs:simpleContent\u0026gt; \u0026lt;xs:extension base=\u0026quot;SomeTextformat\u0026quot;\u0026gt; \u0026lt;xs:attribute fixed=\u0026quot;12345\u0026quot; name=\u0026quot;orid\u0026quot; type=\u0026quot;xs:positiveInteger\u0026quot; use=\u0026quot;required\u0026quot; /\u0026gt; \u0026lt;/xs:extension\u0026gt; \u0026lt;/xs:simpleContent\u0026gt; \u0026lt;/xs:complexType\u0026gt; \u0026lt;/xs:element\u0026gt; \u0026lt;xs:simpleType name=\u0026quot;SomeTextformat\u0026quot;\u0026gt; \u0026lt;xs:restriction base=\u0026quot;xs:string\u0026quot;\u0026gt; \u0026lt;xs:length value=\u0026quot;11\u0026quot; /\u0026gt; \u0026lt;/xs:restriction\u0026gt; \u0026lt;/xs:simpleType\u0026gt; \u0026lt;/xs:schema\u0026gt;   Old format for data model binding: someGroupgrp1111.someFielddatatef12345.value. New format for data model binding: SomeGroup-grp-1111.SomeField-datadef-12345.  Once the data model and bindings are updated, build and deploy app for the changes to take effect.\nBreaking change: Error when attempting to create an instance as Application Owner Introduced with issue: #3738\nThe Register API had a few GET operations that took an input parameter through the body of an http request. Requests against these operations would work in AT environments, but would be broken by API Management in production like environments. The operations in question has now been removed and replaced with operations that require POST requests.\nErrors The methods that have been removed were used by an app when an instantiation were done by the Application owner. More specifically if the instanceOwnerPartyId were unknown. The instantiation request would then have the Person number or organization number instead and the Register operation would be used to identify the correct party id.\nPOST https://{{org}}.apps.{{envUrl}}/{{org}}/{{app}}/instances/ { \u0026quot;appId\u0026quot; : \u0026quot;org/app\u0026quot;, \u0026quot;instanceOwner\u0026quot;: { \u0026quot;personNumber\u0026quot;: \u0026quot;12247918309\u0026quot;, \u0026quot;organisationNumber\u0026quot;: null, \u0026quot;instanceOwnerPartyId\u0026quot;: null }, ... }  How to fix Any issues related to this change can be fixed by upgrading to the latest version of Altinn.App.PlatformServices. This means the App must be updated and a the new version deployed to all environments. Existing instances are not affected.\nBreaking change: Deploy pipeline fails with error: UPGRADE FAILED Introduced with upgrade of AKS cluster. The api version (extensions/v1beta1) used to deploy apps to the AKS cluster is no longer supported.\nErrors When triggering deploy from altinn.studio the deploy fails. On closer inspection of the pipeline (byggloggen) the error message below is shown at the end of the failed step.\nHow to fix To fix this issue the deployment to use a new api version. Navigate to you application repository and find deployment.yaml. It is placed in the folder deployment/templates.\nMake the changes spesified below to the file, and update the repository. Remember to pull the latest version in altinn.studio before attempting to re-deploy.\n Change apiVersion from extensions/v1beta1 to apps/v1.\n Add the following lines under replicas in the spec section. Be ware of indentation here. Two spaces are used as indent for sub sections.\n  selector: matchLabels: app: {{ template \u0026quot;name\u0026quot; . }}  Breaking change: Send-in / Validation fails with \u0026lsquo;Ukjent feil\u0026rsquo; Introduced with issue: #3927 There was a vulnerability in the solution allowing to update a whole instance object using an endpoint in app backend or storage. This has been solved by refactoring app backend and removing the endpoints.\nError When sending in an instance after completing form filling the error below i prompted. In network you can see that the \u0026lsquo;validate\u0026rsquo;-request receives a 500 code in response.\nHow to fix Navigate to you application repository and find App.csproj. Upgrade the three Altinn.App nugetpackages to version 1.0.78.\n\u0026lt;PackageReference Include=\u0026quot;Altinn.App.Api\u0026quot; Version=\u0026quot;1.0.78-alpha\u0026quot; /\u0026gt; \u0026lt;PackageReference Include=\u0026quot;Altinn.App.Common\u0026quot; Version=\u0026quot;1.0.78-alpha\u0026quot; /\u0026gt; \u0026lt;PackageReference Include=\u0026quot;Altinn.App.PlatformServices\u0026quot; Version=\u0026quot;1.0.78-alpha\u0026quot; /\u0026gt;  Breaking change: Validation fails for attachments in some cases after 30.03.2020 Introduced with issues: #1925 and #3915 In Altinn Studio, all data types that were created from a FileUpload component were set with allowedContentTypes: [application/octet-stream] as default. This was also set for all uploads from the app. This has now been changed, so that the file types defined by the app developer are also set in allowedContentTypes, and the file upload is sent with the corresponding Content-Type of the file in the request header.\nError Apps that were created before the fix was implemented (30.03.2020) may experience that validation fails for the attachment, even though it is of the correct format specified in Altinn Studio. This is because the dataType for the attachment expects application/octet-stream, but instead receives the actual mime type for the uploaded file.\nHow to fix Update allowedContentTypes for the data type that fails. This can either be done manually in the applications applicationMetadata.json for the affected data type(s) or by updating the FileUpload component in Altinn Studio so that the expected allowedContentTypes are saved.\nAfter updating, the app must be re-deployed.\nBreaking change: Build fails after upgrading Altinn.App-nugets to version 1.0.62-alpha Introduced with issue: #3820 The base class that every application inherits has been altered to allow for both data and task validation.\nError When building App.cs errors simillar to those depicted in the picture below are logged. How to fix If you haven\u0026rsquo;t made any changes to App/logic/Validation/ValidationHandler.cs and App/logic/App.cs the quickest way to fix the build errors are to copy these files from the template and paste them into your repository. Find the template files here.\nIf changes have been made to these files, follow the instructions below to fix the errors.\nApp/logic/Validation/ValidationHandler.cs  Add a reference to Altinn.Platform.Storage.Interface.Models by including the snippet below amongst the using statements.\nusing Altinn.Platform.Storage.Interface.Models;  Add the function below in the class.\npublic async Task ValidateTask(Instance instance, string taskId, ModelStateDictionary validationResults) { await Task.CompletedTask; }   App/logic/App.cs  Rename function RunValidation to RunDataValidation Add the function below in the class  /// \u0026lt;summary\u0026gt; /// Run validation event to perform custom validations /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;Object to contain any validation errors/warnings\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;Value indicating if the form is valid or not\u0026lt;/returns\u0026gt; public override async Task RunTaskValidation(Instance instance, string taskId, ModelStateDictionary validationResults) { await _validationHandler.ValidateTask(instance, taskId, validationResults); }  Breaking change: Error message when deleting instance from messagebox Introduced with issue: #2487 A new policy has been introduced for deleting instances which is not included in the policy file for apps created in altinn.studio before 10.03.2020.\nError When delting an active or archived instance from Altinn Portal (Messagebox) the user is prompted with an error.\nHow to fix The new rule must be included in the policy file. Once this is done, build and redeploy your applicatin to all relevant environments.\nNavigate to App/config/authorization/policy.xml in your repository and add the following rule. OBS! [ORG] and [APP] tags must be replaced with your organisation code and application name.\n\u0026lt;xacml:Rule RuleId=\u0026quot;urn:altinn:example:ruleid:4\u0026quot; Effect=\u0026quot;Permit\u0026quot;\u0026gt; \u0026lt;xacml:Description\u0026gt;Rule that defines that user with role REGNA or DAGL can delete instances of [ORG]/[APP]\u0026lt;/xacml:Description\u0026gt; \u0026lt;xacml:Target\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;REGNA\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:altinn:rolecode\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:3.0:function:string-equal-ignore-case\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;DAGL\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:altinn:rolecode\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;[ORG]\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:altinn:org\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;[APP]\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:altinn:app\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;xacml:AnyOf\u0026gt; \u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;delete\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; \u0026lt;/xacml:AnyOf\u0026gt; \u0026lt;/xacml:Target\u0026gt; \u0026lt;/xacml:Rule\u0026gt;  Breaking change: re-arranging order for calls for app frontend Introduced with issue: #3625 All applications retrieve the same javascript file for application frontend, however all applications are not updated with the latest nuget version of the three Altinn.App nuget packages. This results in an incompatability when rendering application frontend.\nError When instantiating an application either locally or in a test environment the page keeps loading. Checking the network calls will reveal that is a POST request with query parameter partyId=undefined that receives a 400 response. How to fix Update nuget versions for the Altinn.App packages in App.csproj. Version should be 1.0.48.\n\u0026lt;PackageReference Include=\u0026quot;Altinn.App.Api\u0026quot; Version=\u0026quot;1.0.48-alpha\u0026quot; /\u0026gt; \u0026lt;PackageReference Include=\u0026quot;Altinn.App.Common\u0026quot; Version=\u0026quot;1.0.48-alpha\u0026quot; /\u0026gt; \u0026lt;PackageReference Include=\u0026quot;Altinn.App.PlatformServices\u0026quot; Version=\u0026quot;1.0.48-alpha\u0026quot; /\u0026gt;  Breaking change: updated traefik in app clusters Introduced with issue: #3325\nOld apps were configured to work with traefik 1.x.x. We have now updated the traefik versjon to 2.1.4, and the app helm charts have therefore been updated. This means that old helm charts are no longer usable.\nErrors Deploy of app fails with error: UPGRADE FAILED: template: deployment/templates/ingress.yaml:1:14: executing \u0026ldquo;deployment/templates/ingress.yaml\u0026rdquo; at \u0026lt;.Values.ingress.enabled\u0026gt;: nil pointer evaluating interface {}.enabled.\nHow to fix Replace all content in the deployment folder in the app repo with the content found in the altinn-studio\\src\\Altinn.Apps\\AppTemplates\\AspNet\\deployment from the altinn studio github repo\nError when trying to deploy an app to any environment (AT21, AT23) Introduced with issue: #1158 which was implemented in relation with issue #2757\nErrors When deploying your app to an environment (AT21, AT23) and you get an error box appearing from the \u0026ldquo;Deploy new version\u0026rdquo;-button with a 404 statuscode, it could mean that the server can\u0026rsquo;t find the Authorization folder and policy.xml residing within.\nHow to fix Make sure the Gitea repository connected to the relevant app contains (on the root level) a folder named Authorization and the folder contains a file named policy.xml.\nIf there is no folder named Authorization, add the folder and within the folder, add policy.xml. Inside the policy.xml file, you need to change {org} to the relevant organisation and {app} to the relevant application name.\nHere is the policy.xml.\nIf you have a folder named Authorization but there is no policy.xml file within it, add the file with the procedure described above.\nBreaking change: data element validation returns an internal server error to app frontend Introduced with issue: #2457\nOld apps created in Altinn Studio had no connection between the current process task and the date element it was allowed to change data on. This caused a System.NullReferenceException error in the AltinnCore.Runtime.RestControllers.ValidateController.ValidateData endpoint when running validtions against the data element.\nHow to fix Log onto the altinn.studio and access the application metadata file: https://altinn.studio/repos/{org}/{app}/src/branch/master/Metadata/applicationmetadata.json\nIn the elementTypes object, locate the object with the id default. This looks something like this:\n{ \u0026quot;id\u0026quot;:\u0026quot;default\u0026quot;, \u0026quot;allowedContentType\u0026quot;:[\u0026quot;application/xml\u0026quot;], \u0026quot;appLogic\u0026quot;:true, \u0026quot;maxCount\u0026quot;:0, \u0026quot;minCount\u0026quot;:0 }  This object should be extended with the following property \u0026quot;task\u0026quot;:\u0026quot;Task_1\u0026quot;,. After this is added, the object should look like this\n{ \u0026quot;id\u0026quot;:\u0026quot;default\u0026quot;, \u0026quot;allowedContentType\u0026quot;:[\u0026quot;application/xml\u0026quot;], \u0026quot;appLogic\u0026quot;:true, \u0026quot;task\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;maxCount\u0026quot;:0, \u0026quot;minCount\u0026quot;:0 }  Breaking change: Deploy fails with error \u0026ldquo;The current .NET SDK does not support targeting .NET Core 3.0\u0026rdquo; Introduced with issue: #2762\nWhen an application is deployed the latest Runtime image is copied from Azure Container Registery. As this image will be based on ASP.NET Core 3.0 the application must also specify that it should run on the same version. For all applications created before 21.10.2019 the specified version in .ASP.NET Core 2.2, and this must be changed.\nHow to fix Log onto altinn.studio and access the Dockerfile using this url: https://altinn.studio/repos/{org}/{app}/src/branch/master/Dockerfile Edit line 9 from FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final to FROM mcr.microsoft.com/dotnet/core/aspnet:3.0-alpine AS final\nThe complete dockerfile should now look like the example below.\n#altinn-runtime with sdk FROM altinntjenestercontainerregistry.azurecr.io/altinn-runtime:latest AS build WORKDIR /AltinnService/ COPY AltinnService.csproj ./ COPY Implementation/* ./ COPY Model/*.cs ./ RUN dotnet publish -o publish/ FROM mcr.microsoft.com/dotnet/core/aspnet:3.0-alpine AS final WORKDIR /app #copy altinn-runtime app COPY --from=build /app . #copy service WORKDIR /AltinnService/bin/ COPY --from=build /AltinnService/publish/AltinnService* ./ WORKDIR /AltinnService/ COPY . . WORKDIR /app #entrypoint ENTRYPOINT [\u0026quot;dotnet\u0026quot;, \u0026quot;AltinnCore.Runtime.dll\u0026quot;]  Breaking change: Added parameter to identify form data in applicationMetadata file Introduced with issue: #2592\nWhen posting data to an instance the element type should be specified. default is currently used to identify form data, and in application metadata there is a boolean to indicate that elements of thios type are form data. This will cause POST requests to https://{{appOwner}}.apps.{{platformUrl}}/{{appOwner}}/{{appName}}/instances/{{instanceOwnerId}}/{{instanceId}}/data?elementType=default to fail if application metadata has not been updated.\nHow to fix Set appLogic equal to true for element type with id \u0026lsquo;default\u0026rsquo;. Log onto altinn.studio and access the metadata file using this url: https://altinn.studio/repos/{org}/{app}/src/branch/master/Metadata/applicationmetadata.json Edit the default element type in the metadata to match the example below Breaking change: Url for application repository is updated. Introduced with issue: #2029\nIt is no longer possible to access repositories in Gitea through https://altinn.studio/{org}/{app}. This is due to changes made in backend routing with release v2019.27, url to Gitea and the application repositories now requires a /repos.\nHow to fix To access your repository go to: https://altinn.studio/repos/{org}/{app}\nError -The type or namespace name * Introduced with issue: #875\nErrors When compiling C# files for a given service application the following errors occurs:\n ServiceImplementation.cs - The type or namespace name \u0026lsquo;IPlatformServices\u0026rsquo; could not be found (are you missing a using directive or an assembly reference?) ServiceImplementation.cs - The type or namespace name \u0026lsquo;IServiceImplementation\u0026rsquo; could not be found (are you missing a using directive or an assembly reference?) ServiceImplementation.cs - The type or namespace name \u0026lsquo;RequestContext\u0026rsquo; could not be found (are you missing a using directive or an assembly reference?) ServiceImplementation.cs - The type or namespace name \u0026lsquo;ServiceContext\u0026rsquo; could not be found (are you missing a using directive or an assembly reference?) ServiceImplementation.cs - The type or namespace name \u0026lsquo;StartServiceModel\u0026rsquo; could not be found (are you missing a using directive or an assembly reference?) ValidationHandler.cs - The type or namespace name \u0026lsquo;RequestContext\u0026rsquo; could not be found (are you missing a using directive or an assembly reference?)  How to fix Make the following updates to the application repo (https://altinn.studio/{org}/{app}):\n /AltinnService.csproj (update to latest nuget package)   Implementation/ServiceImplementation.cs   Implementation/Validation/ValidationHandler.cs  Error - \u0026lsquo;ServiceImplementation\u0026rsquo; does not implement interface member * Introduced with issue: #142 and #875.\nErrors When compiling C# files for a given app the following errors occurs:\n ServiceImplementation.cs - Error - \u0026lsquo;ServiceImplementation\u0026rsquo; does not implement interface member \u0026lsquo;IServiceImplementation.SetContext(RequestContext, ServiceContext, StartServiceModel, ModelStateDictionary)\u0026rsquo; ServiceImplementation.cs - Error - \u0026lsquo;ServiceImplementation\u0026rsquo; does not implement interface member \u0026lsquo;IServiceImplementation.SetContext(RequestContext)\u0026rsquo;  How to fix Make the following updates to the application repo (https://altinn.studio/{org}/{app}):\n /AltinnService.csproj (update to latest nuget package)   Implementation/ServiceImplementation.cs  Breaking change: Change storage format of form layout After we have rewritten the runtime react application, we will also introduce a new format the layout is saved as. This change will be pushed in the transition between May and June 2019.\nHow to fix If you don\u0026rsquo;t want to end up with a empty layout un the UI-editor, send a mail with the name of the organization and the repo-name. And an admin will convert your formLayout.json to the new format.\nCannot deserialize the current JSON object Introduced with issue #991.\nCannot deserialize the current JSON object (e.g. {\u0026ldquo;name\u0026rdquo;:\u0026ldquo;value\u0026rdquo;}) into type \u0026lsquo;System.Collections.Generic.List\u0026rsquo;1[AltinnCore.Common.Models.Data]\u0026rsquo; because the type requires a JSON array (e.g. [1,2,3]) to deserialize correctly\u0026hellip;.\nErrors Error when trying to test app:\n ServiceImplementation.cs - Error - \u0026lsquo;ServiceImplementation\u0026rsquo; does not implement interface member \u0026lsquo;IServiceImplementation.SetContext(RequestContext, ServiceContext, StartServiceModel, ModelStateDictionary)\u0026rsquo; ServiceImplementation.cs - Error - \u0026lsquo;ServiceImplementation\u0026rsquo; does not implement interface member \u0026lsquo;IServiceImplementation.SetContext(RequestContext)\u0026rsquo;  How to fix Make the following updates to the application repo (https://altinn.studio/{org}/{app}):\n Delete all files under the \u0026lsquo;Testdataforparty\u0026rsquo;, this has to be done by deleting one by one file:   or you can clone your app by using git clone, then remove the files from the clone folder, git add to specify which files to check in, git commit -m to commit and git push to push changes to master (git clone urlToApp):   if help is needed send a mail with the name of the organisation and the repo-name.  Error when trying to open an archived instance in message box Introduced with issue: #1771.\nErrors When opening an archived instance instanciated before the 24.06.2019, the following error message is prompted:\nHow to fix There is no fix for this breaking change. New instances of the app must be instanciated.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/build/",
	"title": "Build",
	"tags": ["development", "front-end", "build"],
	"description": "Build documentation for altinn.studio frontend",
	"content": " Building of react apps in altinn.studio The building of react apps are done in dockerfiles which then again are used in the build of altinn-core docker-image.\nApps are compiled and copied.\nAdding new packages to react-applications Adding of a new package in an app is done with lerna in the lerna-folder (/src/react-apps/). Command syntax for this will be:\nlerna add [package-name] --scope=[app-name] --exact\nIf you are going to add react to a new app called Foo:\nlerna add react --scope=Foo --exact\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/build_and_test/build/",
	"title": "Build process",
	"tags": ["build", "ci"],
	"description": "Altinn Studio Build Processes",
	"content": "  For information regarding Altinn App build process, see Architecture/Infrastructure/Deployment.\n Build Pipelines Quality Build When creating a Pull Request a pipeline is building the applications, running tests and style check/linting. TSLint, SonarCloud (for Typescript) and Stylecop (C#) is used for style check/linting.\nTriggered by:\n Pull Request  Altinn Studio and Runtime Docker Images Separate pipelines will build and deploy the Altinn Studio Docker Image and the Runtime Docker Image to Azure Container Registry. The different Altinn Studio applications (React Apps) is built in seperate Docker images to utilize Docker\u0026rsquo;s cache technique and minimize unnecessary rebuilding.\nDocker-Compose is used when developing and running Altinn Studio locally, building several Docker images and using the same caching technique used in the Pipeline.\nTriggered by:\n Git Merge to Master  Altinn Studio Release Build When the build for either Altinn Studio or Runtime is successfully ran a release build will start. The Release Build will update the Kubernetes cluster with the images created in the Altinn Studio and the Runtime build pipelines.\nTriggered by:\n Successfull build of either/both Altinn Studio and Runtime.  Generating Altinn Pipelines Images Summary  The Altinn Azure Pipelines Image (image) is built with Packer. The Packer JSON configuration is based on the same configuration used by Microsoft to build their own Hosted Agent images. The image is built in Azure Pipelines passing in \u0026ldquo;secrets\u0026rdquo; to the Packer configuration with Environment Variables not visibly available during the build process.  Usage  Create a Virtual Machine in Azure using the pre built image found under \u0026ldquo;browse all images and disks\u0026rdquo;. Create a username and password (should be stored in Azure Vault).  Installing Agent Host The script for installing the Agent Host is found at: Maintenance/azure-pipelines-image/scripts/agent/agent-install.sh (Currently a manual job)\nA computer can have one or several Agent Hosts installed. Several Agents, on one or several servers, can connect to one Agent Pool.\nCreating Pipelines Image with Packer.io The process of creating an Image with Packer is described here: https://docs.microsoft.com/en-us/azure/virtual-machines/linux/build-image-with-packer\nSome steps might already be performed in Azure.\nThe repo for creating the Pipelines Image for Altinn is hosted in this branch: https://github.com/Altinn/altinn-studio/tree/Maintenance/azure-pipelines-image and is based on the Microsoft Packer scripts from this repo: https://github.com/Microsoft/azure-pipelines-image-generation\nThe variables used in the Packer JSON configuration file is passed in via hidden Pipelines environment variables.\nUbuntu1604-full The \u0026ldquo;full\u0026rdquo; image contains components for building Dotnet and NodeJS applications, running JavaScript based headless tests and running Docker Images. See the JSON file for specifications.\nUbuntu1604-light The \u0026ldquo;light\u0026rdquo; image only contains Git and Docker and is created for only running Docker images.\nClean-up Packer creates Resource Groups in Azure keeping the image build for history and debuggind purposes. To remove this Resource Group run AZ Cli:\n az group delete -n PackerResourceGroup  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/calculationhandler/",
	"title": "CalculationHandler.cs",
	"tags": [],
	"description": "Beskrivelse av format for calculation handler",
	"content": " Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes videre med i MVP.\n\rOverordnet \u0026lsquo;CalculationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som gjør kalkuleringer.\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom CalculationHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/general/",
	"title": "Cheat Sheet",
	"tags": ["development", "todo"],
	"description": "Qucik guide for different commands",
	"content": " GIT git clone repourl\ngit\nDocker docker ps to list all running docker containers.\nAKS kubectl get pods list all pods in current cluster\nkubectl -n default logs -f deployment/altinn-storage --all-containers=True - get logs for all components of the same deployment\nkubectl describe pod [pod name] describes current state and lists environment variables for a given pod\nkubectl delete pod [pod name] deletes a pod and a new pod of the same deployment will start\nkubectl set env [deployment] [key]=[value] update or insert new enviornment variable for a deployment\nMore useful kubectl commands can be found in Kubernetes\u0026rsquo; own documentation.\nHELM helm uninstall [deployment] deletes a helm release. Running pods in AKS cluster will also be deleted.\nMarkdown Azure CLI "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/component-library/",
	"title": "Component Library",
	"tags": ["development"],
	"description": "Component documentation for altinn.studio",
	"content": " WARNING: Component library will be documented when the task is done.\n\rSummary All shared components are to be documented in Markdown with inline JSX.\n All shared components shall have a corresponding component.md file in the same directory. The shared component must hava a default export function AND also exporting the rendered function. React Styleguidist is used to build the documentation site. The Component Library is currently a local dev server  Running dev server  \u0026ldquo;npm run styleguide\u0026rdquo; from src\\react-apps\\applications\\shared\n Inline comments on props  Reacy Styleguidist supports inline comments. Props should have inline comments.  export interface IAltinnButtonComponentProvidedProps extends WithStyles\u0026lt;typeof styles\u0026gt; { /** Button ID */ id?: any; /** @ignore */ classes: any; /** Text shown on button */ btnText: string; /** onClick function */ onClickFunction?: any; /** Class objects created with Material-Ui's createStyle */ className?: any; /** Secondary styling */ secondaryButton?: boolean; /** Disabled styling */ disabled?: boolean; }  Example markdown ### Default button ```jsx \u0026lt;AltinnButton btnText='Altinn button with some text' /\u0026gt; ``` ### Disabled button ```jsx \u0026lt;AltinnButton btnText='Disabled button' disabled={true} /\u0026gt; ``` ### Secondary button ```jsx \u0026lt;AltinnButton btnText='Secondary button' secondaryButton={true} /\u0026gt; ``` ### Click function Altinn button supports onClickFunction via the onClickFunction prop. ```jsx const myFunc = () =\u0026gt; { console.log('My Function'); } \u0026lt;AltinnButton btnText='Button with onClickFunction' onClickFunction={myFunc} /\u0026gt; ``` ### Styling Altinn button also supports Material-UI class objects (classes.someObject) passed via the optional className prop. ```jsx static \u0026lt;AltinnButton btnText='Secondary button' className={classes.someClassObject} /\u0026gt; ```  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/ui-designer/components/",
	"title": "Available UI components",
	"tags": ["ui-designer", "ui-components"],
	"description": "Overview of the components that are available for use.",
	"content": " Text components    Component name Available properties Properties editor Default look   Title   Title text Title type (H2, H3, H4)      Paragraph   Paragraph text       Basic form components    Component name Available properties Properties editor Default look   Input   Link to data model Label text Description text      Checkboxes   Link to data model Label text Description text Method to add options (codelist/manual) Codelist name Manual option  Label Value  Pre-selected choice   Manual adding of options   Adding options via codelist      Radio buttons   Link to data model Label text Description text Method to add options (codelist/manual) Codelist name Manual option  Label Value  Pre-selected choice   Manual adding of options   Adding options via codelist       Text Area   Link to data model Label text Description text Read only       Datepicker   Link to data model Label text Description text       Button   Action (not configurable in MVP) Label text   TBA TBA   File Upload   Component mode Label text Description text Accepted attachment types, see html input accept parameter Max number of attachments Max file size in mb        NOTE: To make a File Upload component optional, make sure to set the minimum number of attachments to 0. The \u0026lsquo;optional\u0026rsquo; value (used on other components) does not work for file upload.\n\rIn addition to the above components, the following basic form components are under development. These are not ready to be used, they will be added to the overview when they are ready to use:\n Dropdown Container  Advanced form components Advanced form components are components that potentially contain multiple fields that each need to be mapped to a field in the data model. They will typically contain fields that are functionally related, ex. fields related to address, see below.\nNOTE: The address component is a proof of concept. The content/design of this component and its configuration is under development. The component is available for use, but might undergo major changes in the future.\n\r   Component name Available properties Properties editor Default look   Address component (simple mode)   Link to data model for field:  Address Postal code Postal area  Label text for Address field      Address component (advanced mode)   Link to data model for field:  Address Postal code Postal area C/O Housing number  Label text for Address field       See all Github issues for UI-editor.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/infrastructure/computing/",
	"title": "Computing componentens",
	"tags": ["architecture", "infrastructure"],
	"description": "Computing components gives processor power to applications and software",
	"content": " Cloud Compute Container Orchestration Nodes As part of Azure Kubernetes Services setup you can change the number of nodes and the size. (CPU, RAM )\nVirtual Images We use Virtual Images hosted in Azure.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/data/conceptual/",
	"title": "Conceptual",
	"tags": ["architecture"],
	"description": "The conceptual data model describes the data entities in the solutions and their relatiohip.",
	"content": "\r\nSee fullscreen / Visio\n\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/",
	"title": "Application Construction Components",
	"tags": ["architecture"],
	"description": "Application Construction Components refers to the required components and configurations needed to create the different applications in the different solutions.",
	"content": "It also describes the internal frameworks used in the different applications and how they consume and produce data.\n\rApplication construction components for Altinn Apps\rApplication created in Altinn Studio is deployed to Altinn Apps. This documentation covers application construction components for the applications and for monitoring applications for Altinn Apps.\n\r\rApplication construction components for Altinn Platform\rAltinn Platform consist of serveral components that is constructed with help of different frameworks and components.\n\r\rApplication construction components Altinn Studio\rThe application construction components for Altinn Studio includes all components uses to create the Altinn Studio Applications.\n\r\rShared\r\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/contexthandler/",
	"title": "Context Handler",
	"tags": ["architecture", "security"],
	"description": "Description of Context Handler in Altinn Studio Apps",
	"content": "The responsibility for the Context Handler is to enrich a decision request from a PEP to PDP.\nAs an example a decision request could only contain instanceID and userId togheter with the action requested\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;Request xsi:schemaLocation=\u0026quot;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17 http://docs.oasis-open.org/xacml/3.0/xacml-core-v3-schema-wd-17.xsd\u0026quot; ReturnPolicyIdList=\u0026quot;false\u0026quot; CombinedDecision=\u0026quot;false\u0026quot; xmlns=\u0026quot;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;Attributes Category=\u0026quot;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026quot;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:altinn:user-id\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;1\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026quot;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:altinn:instance-id\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;cbdc7b44-9442-4fe0-854b-da278bf0b0e\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026quot;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;Read\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:environment\u0026quot; /\u0026gt; \u0026lt;/Request\u0026gt;  The enriched decision request contains all the needed attributes so PDP can identify the correct policy and evauluate the request based on it. Context handler uses instance data from storage\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;Request xsi:schemaLocation=\u0026quot;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17 http://docs.oasis-open.org/xacml/3.0/xacml-core-v3-schema-wd-17.xsd\u0026quot; ReturnPolicyIdList=\u0026quot;false\u0026quot; CombinedDecision=\u0026quot;false\u0026quot; xmlns=\u0026quot;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;Attributes Category=\u0026quot;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026quot;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:altinn:user-id\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#integer\u0026quot;\u0026gt;1\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:altinn:rolecode\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;DAGL\u0026lt;/AttributeValue\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;REGNA\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026quot;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:altinn:instance-id\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;cbdc7b44-9442-4fe0-854b-da278bf0b0e\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:altinn:org\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;SKD\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:altinn:app\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;TaxReport\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:altinn:task\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;FormFilling\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:altinn:partyid\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#integer\u0026quot;\u0026gt;123456\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026quot;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026quot;false\u0026quot; AttributeId=\u0026quot;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026quot;\u0026gt; \u0026lt;AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;Read\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:environment\u0026quot; /\u0026gt; \u0026lt;/Request\u0026gt;  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/dashboard/",
	"title": "Dashboard",
	"tags": [],
	"description": "The Dashboard in Altinn Studio gives the developer full overview over apps",
	"content": "The dasboard lets the developer search for apps, create new apps, list all orgs and apps that developer have access to.\nSee Getting started for more info on how to use dashboard.\nSee all issues for dashboard on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/debug/",
	"title": "Debug",
	"tags": ["development", "debug"],
	"description": "Debug documentation for altinn.studio frontend",
	"content": " Debugging Google Chrome has many debugging tools, but most used in altinn.studio is breakpoints in the react-code.\nThis allows for code to run, and pause at the desired codeline, so the developer can then inspect different values that is present when the desired code is ran.\nDebugging tools  Google Chrome React Devtools Google Chrome Redux Devtools  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/softwareconfiguration/deployment/",
	"title": "Deployment",
	"tags": ["deployment"],
	"description": "Description of the Altinn Studio solution",
	"content": "The Altinn Studio components are deployed as two different solutions.\n Altinn Studio - The complete Development solution Altinn Studio Apps - Where apps are hosted and accessed by end users.  In this section you will find details about the deployment architecture for these solutions.\nIn addition there is a seperate article on how End Users Apps developed in Altinn Studio App Development solution are deployed to the runtime solution\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/deployment/",
	"title": "Deployment",
	"tags": ["development", "deploy"],
	"description": "Guidelines for deploying",
	"content": " ci build devops pipeline pipelines Build process Build Pipelines Quality Build Building the docker image, running tests and checking code. Triggered by:\nGit Push Pull Request Altinn Studio and Runtime Docker Images Separate pipelines are made for Altinn Studio and Runtime. The pipeline will build and deploy the Altinn Studio Docker Image and the Runtime Docker Image to Azure Container Registry.\nTriggered by:\nGit Merge to Master Altinn Studio Release Build When the build for either Altinn Studio or Runtime is successfully ran a release build will start. The release build will update the kubernetes cluster with the images created in the Altinn Studio and the Runtime builds\nTriggered by:\nSuccessfull build of either/both Altinn Studio and Runtime Altinn Service Deploy\nService Runtime docker image bundling process. Building the Altinn Service with “service specific” files from Gitea, creating a “Service Image”, deploying to Azure Container Registry and telling Kubernetes to deploy service.\nBuild process (Pipeline):\nThis process have more details in the Dockerfile. This is a summary.\nDownloading files from service repo in Gitea Building Docker base image with Dockerfile. This includes “Dotnet build” for C# files from Gitea. “Dotnet build” is executed on the Runtime Base Image reusing previous. Docker Pull: Altinn/Runtime Base Image with SDK from ACR. This makes the AltinnService build faster. Clone and build code from Gitea inside Altinn-Runtime Base Image. Docker Pull: Microsoft/DotNet AspNetCore. Copy Altinn Runtime, AltinnService Build files and Service Metadata/Resources from Gitea. Publish to ACR. Triggered by:\n“Publish Service”-button in Altinn Studio. Generating Altinn Pipelines Images Summary The Altinn Azure Pipelines Image (image) is built with Packer. The Packer JSON configuration is based on the same configuration used by Microsoft to build their own Hosted Agent images. The image is built in Azure Pipelines passing in “secrets” to the Packer configuration with Environment Variables not visibly available during the build process. Usage Create a Virtual Machine in Azure using the pre built image found under “browse all images and disks”. Create a username and password (should be stored in Azure Vault). Installing Agent Host The script for installing the Agent Host is found at: Maintenance/azure-pipelines-image/scripts/agent/agent-install.sh (Currently a manual job)\nA computer can have one or several Agent Hosts installed. Several Agents, on one or several servers, can connect to one Agent Pool.\nCreating Pipelines Image with Packer.io The process of creating an Image with Packer is described here\nSome steps might already be performed in Azure.\nThe repo for creating the Pipelines Image for Altinn is hosted in this branch and is based on the Microsoft Packer scripts from this repo\nThe variables used in the Packer JSON configuration file is passed in via hidden Pipelines environment variables.\nUbuntu1604-full The “full” image contains components for building Dotnet and NodeJS applications, running JavaScript based headless tests and running Docker Images. See the JSON file for specifications.\nUbuntu1604-light The “light” image only contains Git and Docker and is created for only running Docker images.\nClean-up Packer creates Resource Groups in Azure keeping the image build for history and debuggind purposes. To remove this Resource Group run AZ Cli:\naz group delete -n PackerResourceGroup\nDeleting build queue If there is the need to delete builds in the Azure Devops pipelines queue, you can use the DELETE rest API found here. You can use PostMan. Rememember to copy the cookies from an authenticated browser.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/designer/",
	"title": "Application Construction Components Designer",
	"tags": [],
	"description": "This application constructions components for designer application describes the frameworks used, the code structure and other information about how designer is constructed",
	"content": "Designer is split in two applications. One frontend created in REACT that communicates with the back-end application through rest-API.\n\rAltinn Studio Designer - Back-end\rApplication construction components used in Altinn Studio Designer backend\n\r\rApplication construction components - Designer Front-end\rDescription of the application construction components for Altinn Studio Designer Front-end\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/",
	"title": "Designer",
	"tags": ["altinn-repos"],
	"description": "The designer part of Altinn Studio is where developers create, modify, build and manage deployment of applications. In the background it uses GIT to store code and config for applications in Altinn Studio Repos.",
	"content": "\r\rFunctionality\rThe designer can been seen as a collection of different editors or applications specialized to create and edit different aspects of the created applications.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/",
	"title": "Development",
	"tags": ["development", "architecture"],
	"description": "Information about developing the open source Altinn Studio solution.",
	"content": "See the projects Github page.\n\rIntro for Developers\rIntroduction\n\r\rAnalysis\rAnalysis of areas in Altinn Studio. Typically linked to a corresponding GitHub issue.\n\r\rBranching\rBranching information for Altinn Studio\n\r\rFlight Rules\rFlight rules for Altinn Studio\n\r\rHandbook\rDevelopment handbook for Altinn Studio\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/encryption/",
	"title": "Encryption",
	"tags": ["architecture", "security", "encryption"],
	"description": "Description of the encryption architecture",
	"content": " NOTE: Work in progress. See Github Issue\n\rApps hosted in Altinn Apps could cover lots of functional scenario. For statefull apps where the App store data in Altinn Platform in the Storage component, the type of data could be data that is 100% public to highly sensitive data.\nThe Org that creates the App, would based on the type of data have spceial requirements for encryption to support their Confidentiality requirement for the data\nStorage encryption The storage component uses Azure Cosmos DB and Azrue Blob storage to store data for apps. In Cosmos metadata about instance data is stored, while in Azure Blob Storage\nAzure Cosmos DB encryps all data at rest. This is transparent for Altinn Platform. See documentation about Azure Cosmos DB\nAzure Blob storage encrypts all data at rest. This is transparent for Altinn Platform. Blog storage support customer managed keys\nSee documentation about Azure Storage Encryption\nApplication layer encryption For App scenario where there is a higher requirement for encryption there might be a need to implement Application layer encryption.\nThis can be done throug custom encryption code using standard algorithms or through existing libraries like the Azure Storage client library .\nAlgorithms For a application layer encryption functionality we would need to choose a best practice encryption algoritmh together with best practice key length-\nNeeds to be analyzed\nLimitations Application layer encryption would probably limit the size on the data, since it would not be possible to stream data to storage before we encrypt.\nNeeds to be analyzed\nKey management When doing application layer encryption Altinn Platform needs to manage the keys for the encrypted data\nNeeds to be analyzed.\nRisk Doing Application Layer introudces risks for data loss. (if keys are lost)\nNeeds to be analyzed\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/error-handling/",
	"title": "Error handling",
	"tags": ["development", "error-handling"],
	"description": "Guidelines for error handling front-end",
	"content": " This page is a work-in-progress. Because we do not have details on how potential errors should be shown to the users, this is only a general overview currently. More details will be added once we have a functional understanding of how users should experience errors.\n\rReact components Error boundaries Error boundaries are React\u0026rsquo;s official way of handling errors that occur in a component. This functionality is available from React 16. Using this allows a component to fail without unmounting the whole application, and allows us to control how the user is exposed to unexpected errors.\nSee the official React documentation or this official blog post for more information about error boundaries and how to implement them.\nWe need a generic error boundary component that can be configured and reused for all of the sub-applications. Each sub-application should be wrapped in this error boundary component. This will allow the main applications (service-development and dashboard) to keep functioning even though any sub-applications throw an error.\nIn addition we should have a generic \u0026ldquo;something went wrong\u0026rdquo; error boundary for the main applications.\nWithin the sub-applications, it may be beneficial to implement error boundaries around key components. This will typically be relevant for components that act as containers for other components. An example could be the preview-component in the UI-editor, which shows the working surface of the forms designer.\nEvent handlers Error boundaries do not catch errors that occur within event handlers, as mentioned in the official React documentation. Thus, any direct API calls from within an event handler in a React component should be wrapped in a try/catch block.\nOptional props Any use of props that have been defined as optional should be done together with a null/undefined-check, to make sure that the prop is actually available.\nRedux Actions All actions should have sibling actions for success and error. See naming conventions for actions. The success action is triggered when everything is ok, while the error action is triggered if something goes wrong.\nSagas If a saga needs to make an API call (or uses logic/utils that make API calls), this should be wrapped in a try/catch block. If an error occurs, this should be logged and the corresponding error action should be triggered. If no error occurs then the corresponding success action should be triggered. See here for more information on actions and sagas.\nReducers If an error handling action is triggered, the reducer should update the corresponding error object in the state to reflect that an error has occured.\nLogging errors We need to decide if all errors should be logged on the server or not. If all front-end errors should be logged on the server, we need to create an API we can call from the front-end to to the logging.\n\rAll errors that are caught should be logged to the console using console.error.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/back-end/error-handling/",
	"title": "Error handling and Error logging",
	"tags": ["development", "error-handling"],
	"description": "Guidelines for error handling and error logging in backend",
	"content": " This page is a work-in-progress. Because we do not have details on how potential errors should be shown to the users, this is only a general overview currently. More details will be added once we have a functional understanding of how users should experience errors.\n\rException Handling .Net core provides a default middleware \u0026ldquo;UseExceptionHandler\u0026rdquo; that will catch exceptions and log them. You can read more about it here. In addition to the default exception middleware, a custom exception middleware can be added to customize the error handling to suit application needs. Custom exception middleware will be implemented once we have a functional understanding of how users should experience errors.\nAPI Exception in API is handled by sending response message to users. The response messages are sent based on\n Request validation Input validation Exceptions that is thrown due to bug in code  The repsonse messages usually are returned with a status code. It is recommended to start with the basic status codes below\n 200 - Ok (Success) 400 - Bad request (input validation, request validation (basically problems at client side)) 401 - Unauthorized 403 - Forbidden 404 - Not found 500 - Internal server error (other type of server errors) By limiting the usage of status codes, we could also ease the handling of different status codes at client side.  Web Services The exceptions rising from internal web services will bubble up and will be handled in API that requested the service.\nLogging .Net core provides a standard logging framework that can be used to log exceptions or events to a desired logging provider (console, eventlog, azure app service, application insights). You can read more about logging in asp.net core from here.\nWhat to log? Context is very important to any warning message or error that is logged. Without context, it can be difficult to relate applicaiton failures to logs. So it is important to include the following details in the log\n Where in the code did the application fail? Who was using the system when it failed? What was the system doing when it failed? Specify a log level that can be used to filter logs when needed  Where do we log? The idea is to send the logs to the console and collect them using Application Insights (Note: Application Insights involves data limitation and costs vary based on needs). It is also possible to log to different log providers by configuring it in the config file. F.ex It is possible log only error and warning message to appinsights and information logs to console.\nThird Party Logging Frameworks There are a bunch of third party logging frameworks available for .net core. Serilog is one of them and Altinn studio will use it to log. There are many advantages of using serilog\n It\u0026rsquo;s open source Allows logging to many sinks like slack, azure, etc. It has support for logging to files (Microsfot basic logging doesn\u0026rsquo;t have support for logging in file at this point) It allows to define a custom message template for logging. Provides prebuilt enrichers through nuget. These add more value and information to the log events. This can be used to filter events in Application Insights.  Step one - Init logger in Program.cs public static IWebHostBuilder CreateWebHostBuilder(string[] args) =\u0026gt; WebHost.CreateDefaultBuilder(args) .ConfigureLogging((hostingContext, logging) =\u0026gt; { logging.ClearProviders(); Serilog.ILogger logger = new LoggerConfiguration() .WriteTo.Console() .CreateLogger(); logging.AddProvider(new SerilogLoggerProvider(logger)); })  Step two - inject logger where it is needed private ILogger logger; public ApplicationsController(IApplicationRepository repository, ILogger logger) { this.logger = logger; this.repository = repository; }  Step three - log error logger.Error($\u0026quot;Unable to store application data in database. {exception}\u0026quot;);;  Read more on serilog\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/form-layout/",
	"title": "FormLayout.json",
	"tags": ["app-structure"],
	"description": "Beskrivelse av format for skjema-layout",
	"content": " Overordnet \u0026lsquo;FormLayout.json\u0026rsquo; describes the structure of a schema.\nFormat \u0026lsquo;FormLayout.json\u0026rsquo; is divided into three objects:\n Components: describes the components in the schema and configurations connected to the specific component. E.g the binding to a data model. Containers: describes the layout containers used in the schema and the configurations connected to them. E.g if the container is a repeating group Order: this object specify the order of the containers and components in the schema.  Eksempel Here is an example on how the form layout file could look like:\n \u0026quot;components\u0026quot;: { \u0026quot;a3569c64-2a54-493c-a2a2-213034ed9207\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;Input\u0026quot;, \u0026quot;itemType\u0026quot;: \u0026quot;COMPONENT\u0026quot;, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;25795.OppgavegiverNavnPreutfylt.Label\u0026quot;, }, \u0026quot;dataModelBindings\u0026quot;: { \u0026quot;simpleBinding\u0026quot;: \u0026quot;skattyterinfor.info.oppgavegiverNavnPreutfylt.value\u0026quot;, }, }, \u0026quot;74b7ff77-a80b-45d4-8f4a-81d7a52e69c6\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;Input\u0026quot;, \u0026quot;itemType\u0026quot;: \u0026quot;COMPONENT\u0026quot;, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;25796.OppgavegiverAdressePreutfylt.Label\u0026quot;, }, \u0026quot;dataModelBindings\u0026quot;: { \u0026quot;simpleBinding\u0026quot;: \u0026quot;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026quot;, }, \u0026quot;hidden\u0026quot;: false, }, \u0026quot;95ddc03a-282a-4ed3-b854-18a3921eec0f\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;Input\u0026quot;, \u0026quot;itemType\u0026quot;: \u0026quot;COMPONENT\u0026quot;, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;2.KontaktpersonNavn.Label\u0026quot;, }, \u0026quot;dataModelBindings\u0026quot;: { \u0026quot;simpleBinding\u0026quot;: \u0026quot;skattyterinfor.kontakt.kontaktpersonNavn.value\u0026quot;, }, }, }, \u0026quot;containers\u0026quot;: { \u0026quot;6eb99041-1ecc-4e83-9312-596a0802e728\u0026quot;: { \u0026quot;repeating\u0026quot;: false, \u0026quot;dataModelGroup\u0026quot;: null }, \u0026quot;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026quot;: { \u0026quot;repeating\u0026quot;: false, \u0026quot;dataModelGroup\u0026quot;: null, \u0026quot;index\u0026quot;: 0 } }, \u0026quot;order\u0026quot;: { \u0026quot;6eb99041-1ecc-4e83-9312-596a0802e728\u0026quot;: [ \u0026quot;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026quot;, \u0026quot;95ddc03a-282a-4ed3-b854-18a3921eec0f\u0026quot; ], \u0026quot;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026quot;: [ \u0026quot;a3569c64-2a54-493c-a2a2-213034ed9207\u0026quot;, \u0026quot;74b7ff77-a80b-45d4-8f4a-81d7a52e69c6\u0026quot; ] }  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/designer/frontend/",
	"title": "Application construction components - Designer Front-end",
	"tags": [],
	"description": "Description of the application construction components for Altinn Studio Designer Front-end",
	"content": " React architecture NOTE: Parts of the front-end is currently built in .NET Core. This will gradually be ported over to React as we work with the different functional areas.\rThe front-end of Altinn Studio is build using React and Redux. Each functional area has its own React application, complete with Redux store/reducer when needed.\nNavigation/administration of the different applications is done from top-level applications, which import the applications for the different functional areas.\nThe React front-end for Altinn Studio is split into two top level applications: dashboard and service-developpent. In addition to these top level application, each feature/functional area will have its own React application which will be imported to the relevant top level application as a subapp (see https://redux.js.org/recipes/isolatingsubapps ).\n Remember: New subapps must be configured in the top level application\u0026rsquo;s Dockerfile and in the Designer\u0026rsquo;s gulpfile.\nThis is not necessary for shared components.\n In addition to feature applications there is also a component library of shared components, that can be reused by all the applications. An example is navigation components.\nSee below diagram for an overview of the different applications.\nNOTE: Runtime applications are part of Altinn Studio Apps, and will not be described here.\r\nservice-development This is a top-level application, and will only handle simple operations like navigation to the different subapps. It will not have access to the store of any of the subapps.\nHeader and Navigation Material UI (applicatiopn bar and drawer) components are customized with altinn studio styles for the header and navigation in Altinn Studio. A third party library \u0026ldquo;React Routing\u0026rdquo; is used together with Material UI to handle navigation. When the user clicks on a header/side navigation link, the route changes and the subapp specific to the route is rendered.\nHeader Menu (Application bar) Application bar component is the Altinn Studio\u0026rsquo;s header menu(navigation links at the top). React router library is used to handle those navigations. Header menu has different user interface on desktop and tablet. The display text and the links for navigation are built as object in a configuration file appbarconfig. The configuration object in the file is iterated and the application bar is rendered. The styles specific to the component are placed inside the component file. In addition to the navigation menu, a breadcrumb is also rendered in tablet view.\nSide Menu (Drawer Menu) Drawer menu component is the Altinn Studio\u0026rsquo;s side menu which can be found on the left. It displays a list of Icons by default and on hover expands the menu and lists text by the side of the icon. It will render a list of navigation links based on the selected header menu. Side menu has different user interfaces in desktop and tablet. In tablet, only text is displayed and it slides in from left when \u0026ldquo;Menu\u0026rdquo; button is clicked. So 2 different components are created to acheive this (LeftDrawerMenu, TabletDrawerMenu)\nThe styles specific to the side menu is added in a separate style file. Similar to the header menu, the side menu is also rendered by looping over the menu settings object which is available in a separate configuration file\nservice-overview Implementation not started. Details will be made available once this application is created.\nux-editor The general concept is that there is a JSON file (FormLayout.json) where the components that are to be part of a form are specified. This includes the component types, texts, order, etc. This file is then parsed to display the form.\nThe ux-editor application is used to create/change this file. The components specified in the file are rendered to visually display the result.\nThe components All the components that can be added in the ux-editor are React components, and when they are added, the FormLayout-file is updated and the component is rendered. Currently, available components are:\n HeaderComponent InputComponent CheckboxContainerComponent TextAreaComponent RadioButtonContainerComponent DropdownComponent FileUploadComponent ThirdPartyComponent (imported from outside Altinn Studio)  Each component has a defined set of props that it expects as input. It\u0026rsquo;s up to the parent component to provide these. In addition, props can be mapped directly from the Redux store.\nWhen an end user makes changes in a form (for example type something in a text box), an event is triggered which triggers an action, handled by a dispatcher.\n/** * This is the event handler that triggers the Redux Actions * that is sendt to the different Action dispatcher. * This event handler is used for all form components rendered from this */ public handleComponentDataUpdate = (callbackValue: any): void =\u0026gt; { if (!this.props.component.dataModelBinding) { return; } FormFillerActionDispatchers.updateFormData( this.props.id, callbackValue, this.props.dataModelElement, ); ExternalApiActionDispatchers.checkIfApiShouldFetch(this.props.id, this.props.dataModelElement, callbackValue); RuleConnectionActionDispatchers.checkIfRuleShouldRun(this.props.id, this.props.dataModelElement, callbackValue); }  Containers Components are rendered within containers. There is a base container which is always available, and unless otherwise specified, components are rendered within the base container. Any other containers that are defined in FormLayout.json are also rendered inside the base container. When an app developer first creates a form, the base container is automatically generated with the first component added.\nAn app developer can add new containers to group together fields in a form. These groups may be repeating if the data model allows for this. If a group is defined as repeating, it must be connected to the relevant repeating group in the data model.\nRedux Redux is used to manage the states of the ux-editor.\nAppConfigState\nWhich mode is the application in.\nexport interface IAppConfigState { designMode: boolean; }  DataModelState\nInformation about the data model elements. Based on JSON file generated from XSD data model.\nexport interface IDataModelState { model: IDataModelFieldElement[]; fetching: boolean; fetched: boolean; error: Error; }  RuleModelState\nInformation about the rules defined for the app.\nexport interface IRuleModelState { model: IRuleModelFieldElement[]; fetching: boolean; fetched: boolean; error: Error; }  TextResourceState\nAll text resources for the ap.\nexport interface ITextResourcesState { resources: ITextResource[]; language: string; fetching: boolean; fetched: boolean; error: Error; }  FormFillerState\nAll form data and any validation errors on this form data.\nexport interface IFormFillerState { formData: any; validationErrors: any; }  Form data format\nThe form data is stored in the state as key-value pairs with data model element as the key. For example, a field connected to melding.adresse.postnummer in the data model will be stored as:\nformData: { melding.adresse.postnummer : \u0026quot;1234\u0026quot; }  If a field is inside a repeating group, an index will be added in the key to specify which instance of the group the data belongs to. For example, if the group melding.adresse is defined as repeating and the end user has added 3 instances of this group, it would result in the following form data being stored.\nformData: { melding.adresse[0].postnummer : \u0026quot;1234\u0026quot;, melding.adresse[1].postnummer : \u0026quot;2345\u0026quot;, melding.adresse[2].postnummer : \u0026quot;4567\u0026quot; }  Reducer Redux reducers are used to update the different states in the store. There is one reduer per state. The reducers listen to the actions that are dispatched when changes are made.\nAction types Action types are type definitions for events that trigger an update of the store. For example:\n// All update form data actions export const UPDATE_FORM_DATA: string = `${moduleName}.UPDATE_FORM_DATA`; export const UPDATE_FORM_DATA_FULFILLED: string = `${moduleName}.UPDATE_FORM_DATA_FULFILLED`; export const UPDATE_FORM_DATA_REJECTED: string = `${moduleName}.UPDATE_FORM_DATA_REJECTED`;  Actions Actions are the events that are triggered when a change is made. An action contains the action type, and any metadata needed to complete the action. For example:\nexport interface IUpdateFormDataAction extends Action { formData: any; componentID: string; dataModelElement: IDataModelFieldElement; }  Action creators create the actions, based on the interfaces defined for the action. For example:\nexport function updateFormDataAction( componentID: string, formData: any, dataModelElement: IDataModelFieldElement, ): IUpdateFormDataAction { return { type: ActionTypes.UPDATE_FORM_DATA, formData, componentID, dataModelElement }; }  The actions are dispatched by an action dispatcher.\nRedux saga Redux saga is the middleware used to process information before the store is updated. All logic used in a saga should be an exported function in the utils-folder. This is decided since we need to split up the logic from the fetching of data, so we have a more testable codebase. The saga only fetches data from the state, and sends the appropriate data to utils-functions.\nAn example is asyncronous calls to backend APIs to get data, or submit data.\nEach saga defines methods that complete different tasks, connected to actions. These methods are called via listeners that listen to the actions that are being dispatched. There are different sagas for all the different functional areas.\n/** * Define the saga for the UPDATE_FORM_DATA event */ function* updateFormDataSaga(action: ActionType) { try { const relevantData = yield selectRelevantStateObjects(...); ... doRelevantLogic(relevantData); ... yield call(updateFormDataSagaFulfilled, ... ); } catch (err) { yield call(updateFormDataSagaRejected, err); } } /** * Define a listener for the UPDATE_FORM_DATA event */ export function* watchUpdateFormDataSaga(): SagaIterator { yield takeLatest(FormFillerActionTypes.UPDATE_FORM_DATA, updateFormDataSaga); }  datamodel Implementation not started. Details will be made available once this application is created.\nlogic-rules Implementation not started. Details will be made available once this application is created.\nworkflow Implementation not started. Details will be made available once this application is created.\ntranslations Implementation not started. Details will be made available once this application is created.\nautosave If you make changes to the form, the app should auto-save. This is done by triggering a new save-action after the addition, update or delete of: - components - containers - api-connections - dynamic rules - conditonal rendering rules The auto-save also triggers when you update the order of the components inside the form.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/",
	"title": "Front-end",
	"tags": ["development", "front-end"],
	"description": "Coding guidelines for front-end",
	"content": " Coding guidelines for front-end \rBest practices\rBest practices for altinn.studio frontend\n\r\rBuild\rBuild documentation for altinn.studio frontend\n\r\rComponent Library\rComponent documentation for altinn.studio\n\r\rDebug\rDebug documentation for altinn.studio frontend\n\r\rError handling\rGuidelines for error handling front-end\n\r\rPost Message\rGuidelines for using post message functionality in Altinn Studio\n\r\rReact\rGuidelines for using React in Altinn Studio\n\r\rRedux\rGuidelines for using Redux in Altinn Studio\n\r\rStyling (css)\rGuidelines for styling components in Altinn Studio\n\r\rVersioning\rGuidelines for versioning of front-end\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/functional/",
	"title": "Functionality in Repos",
	"tags": ["altinn-repos"],
	"description": "Funksjonalitet for lagring og versjonering av tjenester i Git-repositories samt funksjonalitet for application lifecycle management.",
	"content": " \u0026ldquo;Altinn Repositories\u0026rdquo; er en frittstående Git versjonskontroll og Application Lifecycle Management-løsning, som både Designer, kodeeditorer og andre eksterne verktøy vil benytte som back-end og felles sted for å lagre og versjonere tjenestene som utvikles.\nRepositories har et GitHub-lignende brukergrensesnitt og både Git og REST-baserte tekniske grensesnitt.\nDet vil være en omfattende jobb å forsøke å utvikle en Git + ALM løsning på egen hånd, ref. all funksjonaliteten som behøves.\nHeldigvis finnes det flere open source \u0026ldquo;GitHub-kloner\u0026rdquo; som vi kan benytte, og blant dem virker Gitea å være mest lovende (uttales som /ɡɪ’ti:/ - \u0026ldquo;gitty\u0026rdquo;). Bilder fra Gitea benyttes som eksempler videre i denne dokumentasjonen.\nFunksjonalitet i \u0026ldquo;Repositories\u0026rdquo; Repositories inneholder et repository med versjonerte filer for hver 3.0-tjeneste. Eksempel på typer filer som en \u0026ldquo;3.0-tjeneste\u0026rdquo; vil kunne bestå av er kode, tester, web-komponenter, layouts og stiler, oversettinger, arbeidsflyt og konfigurasjon.\nRepositories vil tilby funksjonalitet rundt den enkelte 3.0-tjeneste, og eksponere funksjonaliteten via både brukergrensesnitt og et REST-API som er en klone av GitHub sitt v3 API-format. Dette er positivt da det finnes andre verktøy som også støtter dette API-formatet, og da det kan forenkle det å kunne erstatte Gitea som back-end med andre liknende Git-systemer.\n  3.0 Tjeneste Repository som representerer en \u0026ldquo;3.0-tjeneste\u0026rdquo;, og inneholder alle filer som tjenesten består av.\nHver utgave av en tjeneste vil leve i sin egen mappe, slik at ett repository kan inneholde èn eller flere utgaver av den samme tjenesten.\nRepository management Håndtering av repositories er en kjerneaktivitet, da hver tjeneste som utvikles vil lagres i sitt eget repository.\n Create/delete repository Link to repository Rename repository Fork repository  Muliggjør at man kan ha et \u0026ldquo;master\u0026rdquo;-repository med felles tjenester som flere andre kan benytte, slik som dagens \u0026ldquo;master-tjenester\u0026rdquo; bare mye kraftigere Muliggjør også at utviklere kan lage som egen kopi og teste ut nye muligheter og løsninger på sitt eget område uten å påvirke originalen  List repositories Download/upload files Download repo Create files and folders Read/edit files Rename files Delete files View raw file Link to file  Dokumentering Det er viktig å ha god støtte for å dokumentere tjenestene man utvikler, slik at det vil være enkelt for andre personer på teamet å bidra. Det er derfor ønskelig å ha innebygd Wiki-funksjonalitet med støtte for å editere i markdown, slik som i Altinn docs og AltinnPedia.\n Wiki  Add/edit/delete pages Markdown editing Link to specific wiki page Support for other external wikis Emojis  Markdown editing  Preview Fullscreen Side-by-side   Versjonering Hver eneste fil som en 3.0-tjeneste består av skal ha full versjonshistorikk, uavhengig av om man jobber mot filene via Designer eller eksternt og distribuert/lokalt i en kodeeditor på egen maskin. Repositories sitt versjonskontrollsystem, som er basert på Git, er laget nettopp med tanke på dette.\n Version history of all files, artifacts, code and configuration  Link to each change with a unique id Link to each changed file Link to who did the change Highlight the last change done in the repository Time of change Comments/messages  Diff between versions  Release management En svært viktig egenskap når man utvikler programvare (noe som 3.0-tjenester er) er å kunne tagge ulike versjoner, og kunne gå tilbake og teste eller patche en tidligere versjon hvis man ønsker det. Det er også viktig å kunne se alt som har endret seg mellom versjonene.\nSiden Git benyttes for versjonering, så vil en release/tag som opprettes peke på en eksakt versjon av hver eneste fil som en 3.0-tjeneste består av, og man kan enkelt se hva som er endret.\n Create tags for the 3.0 app Link to tags Create/delete releases Link to releases Marking of pre-releases Time of release creation User that triggered the release Download zipped files of release Browse content of a given tag/release  QA En QA-prosess for godkjenning av endringer basert på branching og pull requests, vil for større teams kunne være mulig. Dette er i tråd med hvordan programvare utvikles, inkludert selve Altinn.\nBacklog management Som for all annen programvareutvikling, så vil hver 3.0-tjeneste typisk ha en egen backlog med bugs, forbedringer, fremtidige features, etc. som tjenesteutviklerne vil jobbe mot. Dette er en sentral del av Application Lifecycle Management.\n Create/close issues pr. 3.0 app  Time of creation Who  Filter issues by open/closed Add labels  Filter issues by label  Assign to milestone  Filter issues by milestone  Assign to user  Filter issues by assignee  Markdown editing Discussions Add files to issue Notifications when issues change Issues search List issues  Org management Organisasjoner er tjenesteeiere, men i 3.0 er det ikke noe i veien for at brukere også kan utvikle tjenester. I en organisasjon så kan man gi tilganger til brukere, og man kan opprette teams med tilgang til en eller flere 3.0-tjenester.\nDet å håndtere organisasjonen, som alt annet, skal være 100% selvbetjent.\n Create/delete organisations  Name/shortname URL Logo  List organisations Link to organisation Create repository for organisation ref. repository management Add/remove teams in organisation List teams in organisation Add/remove users in organisation List all users in organisation Add/remove users in teams List users in teams  Brukerstyring Brukerne i denne sammenheng er tjenesteutvklerne. Det å håndtere organisasjonen skal være helt selvbetjent.\n Add/remove users Name Avatar Add/remove users to/from teams \u0026ldquo;Starring\u0026rdquo; of favorite repositories List of user repositories (including forks) Activity log for user Workspace for user (dette er veldig viktig, betyr at tjenesteutviklere kan \u0026ldquo;leke seg\u0026rdquo; på sitt eget område)  I første omgang (MVP) vil tjenesteeier (org-admin) legge til alle sine brukere i gruppen \u0026ldquo;owner\u0026rdquo; slik at de får tilgang til å opprette repositories (tjenester). Gruppen \u0026ldquo;owner\u0026rdquo; gir vide fullmakter på organisasjonsnivå (dvs tjenesteeiernivå), så på sikt vil det implementeres mer granulert tilgangsstyring.\nSøke Søk er viktig for å finne frem, og skal være bygd inn i løsningen.\n Repositories Issues Edits Users Organisations  Tilgangsstyring Det skal være mulig å styre tilgang til repositories, les/skriv/admin, teams, brukere, samt opprette private repos.\n Access to 3.0 apps (read/write) Access to orgs Users access Private/public app-repos Administrator AM/AD-integration API access  Trigge hendelser I dagens hverdag, med bruk av Slack og andre systemer ifbm. utvikling, så er det viktig at \u0026ldquo;Repositories\u0026rdquo; kan trigge hendelser i andre systemer, f.eks. poste til en Slack-kanal når en endring skjer i en 3.0-tjeneste.\n Trigger events at org-level Trigger events at 3.0 app-level  Logge inn Tjenesteutviklere og andre interessenter skal kunne logge inn og få tilgang til organisasjoner og 3.0-tjenester.\n Login page CAPTCHA? Forgot password? 2-factor auth External authentication  Sende varslinger  Send notifications to users based on events or mentions User can control the notifications to receive Users can follow other users and subscripe to issues  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/",
	"title": "Functionality",
	"tags": [],
	"description": "The designer can been seen as a collection of different editors or applications specialized to create and edit different aspects of the created applications.",
	"content": "This aspects are controlled by code and configurations that is stored in source control in Altinn Studio Repos.\n\rDashboard\rThe Dashboard in Altinn Studio gives the developer full overview over apps\n\r\rBuilding and configuring app\rAltinn Studio can been seen as a collection of different editors or applications specialized to create and edit different aspects of an Altinn Studio app.\n\r\rApp Deployment\rAltinn Studio will let the developer deploy apps to test enviroments and production without any manuel steps.\n\r\rVersion Control\rIn Altinn Studio a developer can perform version control operation on the source code for the app\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/cheatsheet/",
	"title": "General",
	"tags": ["development", "todo"],
	"description": "General coding guidelines",
	"content": " TODO\nGit git add .\ngit commit -m \u0026ldquo;\u0026ldquo;\nAzure CLI az login --use-device-code  Kubectl ```bash\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/getting-started/",
	"title": "Getting started",
	"tags": ["development"],
	"description": "Information about how to get started",
	"content": " .highlight-source-batchfile { color: #fff !important; }  \n  let content = document.getElementById('readmeContent'); if (content.innerHTML === '') { content.innerHTML = 'Loading from github...'; } axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://github.com/Altinn/altinn-studio/blob/master/README.md`) .then((res) = { const doc = new DOMParser().parseFromString(res.data, \"text/html\"); content.innerHTML = doc.getElementById('readme').innerHTML; });  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/git/",
	"title": "Git",
	"tags": ["development", "git"],
	"description": "Information about version control with Git",
	"content": "   let content = document.getElementById('contributionContent'); if (content.innerHTML === '') { content.innerHTML = 'Loading from github...'; } axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://github.com/Altinn/altinn-studio/blob/master/CONTRIBUTING.md`) .then((res) = { const doc = new DOMParser().parseFromString(res.data, \"text/html\"); content.innerHTML = doc.getElementById('readme').innerHTML; });  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/gitea/",
	"title": "Gitea",
	"tags": ["development", "gitea"],
	"description": "Gitea documentation for altinn.studio",
	"content": " Gitea Gitea is used in altinn.studio as version control of the services developed in altinn.studio.\nLinks  Gitea docs  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/traefik/installation/",
	"title": "Installation of Traefik 2.0",
	"tags": ["development", "routing", "traefik", "installation"],
	"description": "How to install traefik",
	"content": "Installation of traefik is done through helm, and we have a traefik helm chart for Altinn Tjenester 3.0.\nIf there is a fresh installation of traefik 2.0 with helm 3.0, make sure that there is a folder called crds in that helm chart folder. After that it is just to install with helm, and wait for the traefik service to have a public IP before updating the Azure DNS zone with a A record.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/instantiationhandler/",
	"title": "InstansiationHandler.cs",
	"tags": ["app-structure"],
	"description": "Beskrivelse av format for InstansiationHandler",
	"content": " Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes videre med i MVP.\n\rOverordnet \u0026lsquo;InstansiationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som hånderer instansiering av en tjeneste.\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom InstansiationHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/integration/",
	"title": "Integration Capabilties",
	"tags": ["architecture"],
	"description": "Description of the Integration Capabilties in the technology architecture",
	"content": " Integration \u0026amp; Data Transport Capabilties End-point enablement The different solutions in the platform has the capability to expose API endpoints.\nThis including exposing it with Open API documentation for a given endpoint.\nTransport \u0026amp; Delivery The different solutions of the platform support transport \u0026amp; delivery of the data\nPublish \u0026amp; Subscribe A important change for Altinn moving to the new platform is we change to an event driven architecture.\nAltinn Platform / Altinn Apps will publish events that can be subscribed to.\nRead all details here.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/devslide/",
	"title": "Intro for Developers",
	"tags": [],
	"description": "Introduction",
	"content": " Altinn Studio Aka. \u0026ldquo;Tjenester 3.0\u0026rdquo; What are we creating  A app development solution Altinn Studio: The development tool Altinn Platform: The supporting platform Altinn Apps: The solution to host the Apps  What technologies are we using  .Net Core : Backend / API REACT : Frontend Altinn Studio \u0026amp; App Docker: Apps are created as Docker Containers Kubernetes: The containers are hosted in Kubernetes Azure: We use Azure for Kubernetes hosting  Altinn Studio  Design frontend Define frontend logic Define datamodel for app Define app logic for backend Build \u0026amp; deploy app container Source Control for App files\n Altinn Apps Kubernetes Cluster where apps are hosted\n One cluster per Organisation Altinn Platform Supporting functionality\n Authentication\n Authorization\n Storage\n Register\n Profile Documentation The different solutions are described in detail on docs Terms Architecture\n  The End Tilbake\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/authentication/jwt-format/",
	"title": "JWT Format",
	"tags": ["architecture", "security"],
	"description": "Description of the JWT Format used in Altinn Studio, Altinn Platform and Altinn Apps",
	"content": " JSON Web Token are an open, industry standard RFC 7519 method for representing claims securely between two parties and are choosen as the bearer of information about users and systems.\nThe format that is choosen for JWT tokens is RSA256. This is a asymetric algorithm where the Authentication component in Altinn Platform generates tokens based on a private key in a certificate, and everyone can validate the token with the public key.\nAltinn Platform and Altinn Apps support JWT tokens as bearer tokens in Authorization header and as JWT Tokens inside cookie.\nThe cookie will be used when users access application with a frontend in Altinn Apps. (typical REACT application). The bearer token will be used when the user access throug mobile apps or external systems.\nThe below screenshot shows how a JWT Token can be verified at jwt.io\nClaims in token UserId The internal Altinn userId for the authenticated user\nssn The social security number\nPartyId AuthenticationLevel The authentication level used when user logged in\nAuthenticationMethod The authentication method used when user logged in\nend user system Id The internal ID for end user system\nSystemOwnerPartyId The internal PartyID for system owner\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/shared/security/authentication/jwtcookieauthentication/",
	"title": "JWTCookieAuthentication",
	"tags": ["architecture", "security"],
	"description": "Description of the JWTCookieAuthentication created for Altinn",
	"content": " JWTCookieAuthentication is a asp.net core authentication service created for supporting Json Web Tokens (JWT) as bearer tokens and JWT in Cookies. It is based on JWTBearer\nThis is created for scenarios where you have need for APIs that will be accessed from system using bearer tokens and from Single Page Applications (SPA) where you want to protect the JWT from this SPA. (Xss attacks). When JWT is put in a http only cookie it is not accessible from the SPA and can\u0026rsquo;t be stolen by malicous javascript running in the browser.\nThis is created as a seperate C# Project and published as a Nuget Package here\nFeatures Consumer  Support Verification of JWT Tokens as bearer tokens Support Verification of JWT Tokens from cookie Configureble name of cookie used Automatic detection if request contains Authorization bearer token or JWT in cookie Uses Microsoft.IdentityModel.Tokens for verification and generation. Uses OpenID connect well known endpoint to retrieve the JSON Web Key (JWK) used to sign JWT from the JSON Web Key Set Support rotating of JWK (TODO)  Features ID Provider  Support Generation of JWT Tokens as bearer tokens Support Generation of JWT Tokens inside Cookies Configureble name of cookie used Configurable Signing Certitcate Uses standard JWT Library for verification and generation. Uses OpenID connect well known endpoint to retrieve the JSON Web Key (JWK) used to sign JWT from the JSON Web Key Set Support rotating of JWK (TODO)  How To Configure JWTCookieAuthentication Configuration for consumers // Configure Authentication // Use [Authorize] to require login on MVC Controller Actions services.AddAuthentication(JwtCookieDefaults.AuthenticationScheme) .AddJwtCookie(options =\u0026gt; { options.TokenValidationParameters = new TokenValidationParameters { ValidateIssuerSigningKey = true, ValidateIssuer = false, ValidateAudience = false, RequireExpirationTime = true, ValidateLifetime = true }; options.Cookie.Domain = Configuration[\u0026quot;GeneralSettings:HostName\u0026quot;]; options.Cookie.Name = Services.Constants.General.RuntimeCookieName; options.MetadataAddress = Configuration[\u0026quot;AppSettings:OpenIdWellKnownEndpoint\u0026quot;]; if (_env.IsDevelopment()) { options.RequireHttpsMetadata = false; } });  Configuration for the identity provider The below configuration is relevant for the Identity Provider application.\n// Use [Authorize] to require login on MVC Controller Actions services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme) .AddJwtCookie(JwtCookieDefaults.AuthenticationScheme, options =\u0026gt; { options.ExpireTimeSpan = new TimeSpan(0, 30, 0); options.Cookie.Name = Common.Constants.General.RuntimeCookieName; })  How to get access to user information When a application is configured with JWTCookie authentication the information is available in httpContext about the user\npublic static int GetUserId(HttpContext context) { int userId = 0; if (context.User != null) { foreach (Claim claim in context.User.Claims) { if (claim.Type.Equals(AltinnCoreClaimTypes.UserId)) { userId = Convert.ToInt32(claim.Value); } } } return userId; }  Known Issues "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/oscloudplatform/kubernetes/",
	"title": "Kubernetes",
	"tags": ["architecture"],
	"description": "Kubernetes is an important part of the infrastructure",
	"content": " Kubernetes is choosen to orcestrate the containers in the different solutions. There are serveral Kubernetes Clusters involved.\nThe solution uses managed Kubernetes Clusters. Azure Kubernetes Services\nSetup We use Azure CLI to setup the different Kubernetes Clusters. (Altinn Studio, Altinn Apps and Altinn Platform).\nThis include networking and node setup.\nManagement \u0026amp; monitoring From the Azure Portal we can manage and montitor the Kubernetes Clusters\nNodes We can scale up and down Nodes\nContainers We get monitor the number of containers and state of containers\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/kuberneteswrapper/",
	"title": "Application Architecture Kubernetes Wrapper",
	"tags": [],
	"description": "Description of the application architecture for Kubernetes Wrapper",
	"content": "The Kubernetes Wrapper is a application that exposes information about the Altinn Apps Kubernetes Cluster it is deployed to.\nThis is used by Altinn Studio for information about the apps deployed to a given Altinn Apps cluster.\nThe Kubernetes Wrapper is a ASP.NET core MVC application exposing REST\u0026rsquo;API\u0026rsquo;s\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/loadbalancer/",
	"title": "Application construction components Loadbalancer",
	"tags": [],
	"description": "The loadbalancer for Altinn Studio is based on standard open source softwarre.",
	"content": "To redirect traffic to designer and repositories we use NGINX as a reverse proxy.\nNGINX is a open source Reverse Proxy/ Loadbalancer\nSee Github repository.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/data/logical/",
	"title": "Logical datamodel",
	"tags": ["architecture"],
	"description": "The logcical datamodel describes the different data entities that is stored",
	"content": "The following diagram shows the different entities stored. Click on the entity for the physical model used.\n\nSee fullscreen / Visio\n\rData is stored in Cosmos DB as JSON documents. In addition we use object database to store the raw objects of business data that org has defined for the application.\nData Entities Altinn Platform Instances Example document from instance.\nAppId is the reference to APP.\n{ \u0026quot;id\u0026quot;: \u0026quot;3cc58033-128e-414d-86c2-d652af251b39\u0026quot;, \u0026quot;instanceOwner\u0026quot;: { \u0026quot;partyId\u0026quot;: \u0026quot;50002123\u0026quot;, \u0026quot;personNumber\u0026quot;: \u0026quot;01054210007\u0026quot; }, \u0026quot;appId\u0026quot;: \u0026quot;ttd/rip-livsgnist\u0026quot;, \u0026quot;org\u0026quot;: \u0026quot;ttd\u0026quot;, \u0026quot;title\u0026quot;: { \u0026quot;nb\u0026quot;: \u0026quot;rip-livsgnist\u0026quot; }, \u0026quot;process\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2020-01-16T10:54:04.7691165Z\u0026quot;, \u0026quot;startEvent\u0026quot;: \u0026quot;StartEvent_1\u0026quot;, \u0026quot;ended\u0026quot;: \u0026quot;2020-01-16T11:11:16.6358823Z\u0026quot;, \u0026quot;endEvent\u0026quot;: \u0026quot;EndEvent_1\u0026quot; }, \u0026quot;status\u0026quot;: { \u0026quot;archived\u0026quot;: \u0026quot;2020-01-16T11:11:16.6358823Z\u0026quot; }, \u0026quot;appOwner\u0026quot;: {}, \u0026quot;created\u0026quot;: \u0026quot;2020-01-16T10:54:05.0591613Z\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;20000015\u0026quot;, \u0026quot;lastChanged\u0026quot;: \u0026quot;2020-01-16T11:11:21.4678343Z\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;20000015\u0026quot;, \u0026quot;_rid\u0026quot;: \u0026quot;Mx4uAJesYy0BAAAAAAAAAA==\u0026quot;, \u0026quot;_self\u0026quot;: \u0026quot;dbs/Mx4uAA==/colls/Mx4uAJesYy0=/docs/Mx4uAJesYy0BAAAAAAAAAA==/\u0026quot;, \u0026quot;_etag\u0026quot;: \u0026quot;\\\u0026quot;00004300-0000-3c00-0000-5e2044d90000\\\u0026quot;\u0026quot;, \u0026quot;_attachments\u0026quot;: \u0026quot;attachments/\u0026quot;, \u0026quot;_ts\u0026quot;: 1579173081 }  DataItem Example document from data items\ninstanceGuid references to iinstance\nblobstoragePAth references to the storage location for the given data\n{ \u0026quot;instanceGuid\u0026quot;: \u0026quot;7eae6eec-f686-40b6-bc57-6fafc8c94f13\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;94f277a5-7d37-48e1-973c-92fb1f84f83a\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;ServiceModel-test\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;application/xml\u0026quot;, \u0026quot;blobStoragePath\u0026quot;: \u0026quot;ttd/endring-av-navn-v2/7eae6eec-f686-40b6-bc57-6fafc8c94f13/data/94f277a5-7d37-48e1-973c-92fb1f84f83a\u0026quot;, \u0026quot;size\u0026quot;: 1515, \u0026quot;locked\u0026quot;: false, \u0026quot;refs\u0026quot;: [], \u0026quot;created\u0026quot;: \u0026quot;2020-01-20T09:07:59.5480429Z\u0026quot;, \u0026quot;lastChanged\u0026quot;: \u0026quot;2020-01-20T09:08:48.3218863Z\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;20013900\u0026quot;, \u0026quot;_rid\u0026quot;: \u0026quot;Mx4uAOy+834VAAAAAAAAAA==\u0026quot;, \u0026quot;_self\u0026quot;: \u0026quot;dbs/Mx4uAA==/colls/Mx4uAOy+834=/docs/Mx4uAOy+834VAAAAAAAAAA==/\u0026quot;, \u0026quot;_etag\u0026quot;: \u0026quot;\\\u0026quot;00004c00-0000-3c00-0000-5e256e210000\\\u0026quot;\u0026quot;, \u0026quot;_attachments\u0026quot;: \u0026quot;attachments/\u0026quot;, \u0026quot;_ts\u0026quot;: 1579511329 }  InstanceEvent Example on instance event.\nInstanceID references to the instance.\n{ \u0026quot;user\u0026quot;: { \u0026quot;userId\u0026quot;: 20000015, \u0026quot;orgId\u0026quot;: null, \u0026quot;authenticationLevel\u0026quot;: 1, \u0026quot;endUserSystemId\u0026quot;: null }, \u0026quot;instanceId\u0026quot;: \u0026quot;50002123/3cc58033-128e-414d-86c2-d652af251b39\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2020-01-16T10:54:05.1706031Z\u0026quot;, \u0026quot;eventType\u0026quot;: \u0026quot;Created\u0026quot;, \u0026quot;instanceOwnerPartyId\u0026quot;: \u0026quot;50002123\u0026quot;, \u0026quot;processInfo\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2020-01-16T10:54:04.7691165Z\u0026quot;, \u0026quot;startEvent\u0026quot;: \u0026quot;StartEvent_1\u0026quot;, \u0026quot;currentTask\u0026quot;: { \u0026quot;flow\u0026quot;: 2, \u0026quot;started\u0026quot;: \u0026quot;2020-01-16T10:54:04.7871455Z\u0026quot;, \u0026quot;elementId\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Utfylling\u0026quot;, \u0026quot;altinnTaskType\u0026quot;: \u0026quot;data\u0026quot; } }, \u0026quot;id\u0026quot;: \u0026quot;5c57d85b-18e4-4215-9976-065290ef086f\u0026quot;, \u0026quot;_rid\u0026quot;: \u0026quot;Mx4uAImMTtoBAAAAAAAAAA==\u0026quot;, \u0026quot;_self\u0026quot;: \u0026quot;dbs/Mx4uAA==/colls/Mx4uAImMTto=/docs/Mx4uAImMTtoBAAAAAAAAAA==/\u0026quot;, \u0026quot;_etag\u0026quot;: \u0026quot;\\\u0026quot;0900c6e2-0000-3c00-0000-5e2040cd0000\\\u0026quot;\u0026quot;, \u0026quot;_attachments\u0026quot;: \u0026quot;attachments/\u0026quot;, \u0026quot;_ts\u0026quot;: 1579172045 }  Application Example document on appliation\n{ \u0026quot;id\u0026quot;: \u0026quot;ttd-testavpdf-2020\u0026quot;, \u0026quot;versionId\u0026quot;: \u0026quot;7cfd1c857a8535c74690aa7d6c22258c94eabf6f\u0026quot;, \u0026quot;org\u0026quot;: \u0026quot;ttd\u0026quot;, \u0026quot;title\u0026quot;: { \u0026quot;nb\u0026quot;: \u0026quot;testavpdf-2020\u0026quot; }, \u0026quot;validFrom\u0026quot;: \u0026quot;2020-01-14T11:39:00.3281424Z\u0026quot;, \u0026quot;dataTypes\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;ServiceModel\u0026quot;, \u0026quot;allowedContentTypes\u0026quot;: [ \u0026quot;application/xml\u0026quot; ], \u0026quot;appLogic\u0026quot;: { \u0026quot;autoCreate\u0026quot;: null, \u0026quot;classRef\u0026quot;: null, \u0026quot;schemaRef\u0026quot;: null }, \u0026quot;taskId\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;maxCount\u0026quot;: 1, \u0026quot;minCount\u0026quot;: 1 }, { \u0026quot;id\u0026quot;: \u0026quot;ref-data-as-pdf\u0026quot;, \u0026quot;allowedContentTypes\u0026quot;: [ \u0026quot;application/pdf\u0026quot; ], \u0026quot;maxCount\u0026quot;: 0, \u0026quot;minCount\u0026quot;: 0 } ], \u0026quot;partyTypesAllowed\u0026quot;: { \u0026quot;bankruptcyEstate\u0026quot;: false, \u0026quot;organisation\u0026quot;: false, \u0026quot;person\u0026quot;: false, \u0026quot;subUnit\u0026quot;: false }, \u0026quot;created\u0026quot;: \u0026quot;2020-01-14T11:39:00.3281424Z\u0026quot;, \u0026quot;lastChanged\u0026quot;: \u0026quot;2020-01-14T11:39:00.3281424Z\u0026quot;, \u0026quot;_rid\u0026quot;: \u0026quot;Mx4uAL3TuwQBAAAAAAAAAA==\u0026quot;, \u0026quot;_self\u0026quot;: \u0026quot;dbs/Mx4uAA==/colls/Mx4uAL3TuwQ=/docs/Mx4uAL3TuwQBAAAAAAAAAA==/\u0026quot;, \u0026quot;_etag\u0026quot;: \u0026quot;\\\u0026quot;00008644-0000-3c00-0000-5e1da8540000\\\u0026quot;\u0026quot;, \u0026quot;_attachments\u0026quot;: \u0026quot;attachments/\u0026quot;, \u0026quot;_ts\u0026quot;: 1579001940 }  Data entities Altinn Studio releases Exampl document\n{ \u0026quot;tagName\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;body\u0026quot;: \u0026quot;ver 1\u0026quot;, \u0026quot;targetCommitish\u0026quot;: \u0026quot;304e64a5b768a1a438f5682f05c81f1e3f4806e8\u0026quot;, \u0026quot;build\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;25639\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;completed\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;failed\u0026quot;, \u0026quot;started\u0026quot;: \u0026quot;2020-01-28T14:26:38.776664Z\u0026quot;, \u0026quot;finished\u0026quot;: \u0026quot;2020-01-28T14:27:50.8388306Z\u0026quot; }, \u0026quot;id\u0026quot;: \u0026quot;a361d1c8-11a1-49fb-8775-59f231aadcd5\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2020-01-28T14:26:22.167018+00:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;jeeva\u0026quot;, \u0026quot;app\u0026quot;: \u0026quot;apps-test\u0026quot;, \u0026quot;org\u0026quot;: \u0026quot;ttd\u0026quot;, \u0026quot;_rid\u0026quot;: \u0026quot;9g8wAPi8x1cLAAAAAAAAAA==\u0026quot;, \u0026quot;_self\u0026quot;: \u0026quot;dbs/9g8wAA==/colls/9g8wAPi8x1c=/docs/9g8wAPi8x1cLAAAAAAAAAA==/\u0026quot;, \u0026quot;_etag\u0026quot;: \u0026quot;\\\u0026quot;10008d1b-0000-0c00-0000-5e3044f90000\\\u0026quot;\u0026quot;, \u0026quot;_attachments\u0026quot;: \u0026quot;attachments/\u0026quot;, \u0026quot;_ts\u0026quot;: 1580221689 }  Deployments Example document for deploymens\n{ \u0026quot;tagName\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;envName\u0026quot;: \u0026quot;at22\u0026quot;, \u0026quot;build\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;25637\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;completed\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;succeeded\u0026quot;, \u0026quot;started\u0026quot;: \u0026quot;2020-01-28T14:17:53.0563266Z\u0026quot;, \u0026quot;finished\u0026quot;: \u0026quot;2020-01-28T14:18:39.2312059Z\u0026quot; }, \u0026quot;id\u0026quot;: \u0026quot;682e31ee-3aeb-4f28-b457-98db2f34ece6\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2020-01-28T14:17:37.2229801+00:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;steph\u0026quot;, \u0026quot;app\u0026quot;: \u0026quot;process-history-app\u0026quot;, \u0026quot;org\u0026quot;: \u0026quot;ttd\u0026quot;, \u0026quot;_rid\u0026quot;: \u0026quot;9g8wAKEPFmYBAAAAAAAAAA==\u0026quot;, \u0026quot;_self\u0026quot;: \u0026quot;dbs/9g8wAA==/colls/9g8wAKEPFmY=/docs/9g8wAKEPFmYBAAAAAAAAAA==/\u0026quot;, \u0026quot;_etag\u0026quot;: \u0026quot;\\\u0026quot;04007c5a-0000-0c00-0000-5e3042ca0000\\\u0026quot;\u0026quot;, \u0026quot;_attachments\u0026quot;: \u0026quot;attachments/\u0026quot;, \u0026quot;_ts\u0026quot;: 1580221130 }  Altinn Studio Repositories Altinn Studio Repositories uses Gitea that uses a PostgreSQL database.\nThe logical datamodel is a black box for the project. See Gitea project\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/naming/",
	"title": "Naming Conventions",
	"tags": ["development"],
	"description": "Naming guidelines for Altinn Studio development",
	"content": " C# The Altinn project will use Microsoft’s coding conventions as a general guideline when no other guidelines are given.\nExceptions/additions to the general guideline:\nImplicit typing (var) should only be used when a variable is initialized with an anonymous type, which is a common scenario in LINQ query expressions. In general implicit typing makes the code more difficult to read and understand,and should be avoided. Altinn specific coding guidelines:\nMethods should not be more than 50 lines long When dealing with XML you should prefer XDocument to XmlDocument (especially in new methods) If/for/while/using and other structures should normally not be more than 2-3 levels deep All disposeable objects (proxies, DbCommand and so on) should be disposed by using a using block. Altinn specific naming guidelines:\nNames for classes, methods and variables should be describing, but not too long WCF-Artifact Naming TUL Naming Standard Namespace \u0026amp; Solution Structure\nReact Names of react-components should be descriptive and in pascal case\nActions Names of actions should be descriptive and in camel case.\nAn action should have the initial action, for instance fetchFormLayout, and an action if it succeeds and if it fails. For instance fetchFormLayoutFulfilled(succeed) and fetchFormLayoutRejected(failed).\nSagas Names of sagas should have the name of the action it listens to, and the word Saga appended to the end. For instance fetchFormLayoutSaga.\nAnd for saga-watchers, should have the watch-word appended to the start, and the saga name it watches. For instance watchFetchFormLayoutSaga.\nReducers Names of reducers should have a descriptive name of that it is responsible for updating in the redux-store, and the word Reducer appended to the end. For instace formLayoutReducer.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/loadbalancer/ssl-certificate/",
	"title": "Nginx SSL/TLS certificate",
	"tags": ["development", "nginx", "routing", "ssl", "tls", "certificate"],
	"description": "Information about SSL/TLS certificates with nginx",
	"content": " Generate SSL/TLS certificates from .PFX file In altinn studio we are using nginx as a proxy for internal routing. After issues with creating SSL/TLS certificates for nginx we we have written a guide for future developers to follow when creating SSL/TLS certificate secrets in kubernetes and mounting them to the nginx pods.\nDownload .pfx file At the moment of writing this guide, we store our *.altinn.studio certificate in azure keyvault and you will need access to download it from that vault. When you have downloaded the .pfx file, you can start extracting the CA certificate bundles, private key and the certificate.\nExtracting the values from the pfx file With openssl installed and in path, open a terminal and type the command\nExtracting the private key $ openssl pkcs12 -in \u0026lt;filename.pfx\u0026gt; -nocerts -nodes -out star.altinn.studio.key  Extracting the certificate $ openssl pkcs12 -in \u0026lt;filename.pfx\u0026gt; -clcerts -nokeys -out star.altinn.studio.cert  Extracting the CA certificates $ openssl pkcs12 -in \u0026lt;filename.pfx\u0026gt; -cacerts -nokeys -chain -out star.altinn.studio.ca.cert  Assembling a SSL/TLS bundle After extracting all the certificate and keys, you will have 3 new files in the same directory that you have the .pfx file. These files will be:\n star.altinn.studio.key star.altinn.studio.crt star.altinn.studio.ca.crt  Now you can start assembling an SSL/TLS certificate bundle.\nIn the file star.altinn.studio.ca.crt you will have 2 certificate, one intermediate and a root certificate. The root certificate doesn\u0026rsquo;t need to be in the SSL/TLS bundle, so copy the second certificate block (including the -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----) in this file and paste it at the bottom in star.altinn.studio.crt-file.\nUsing the SSL/TLS values in the kubernetes pod Kubernetes encodes secrets with base64, so you will need to encode the contents of star.altinn.studio.cert and star.altinn.studio.key files. And create a secret in the kubernetes cluster. The secret can be defined like this:\napiVersion: v1 kind: Secret metadata: name: ssl-cert type: Opaque data: star.altinn.studio.cert: \u0026lt;BASE 64 ENCODED SSL/TLS-BUNDLE\u0026gt; star.altinn.studio.key: \u0026lt;BASE 64 ENCODED PRIVATE KEY\u0026gt;  The names under data will be the filenames mounted on the kubernetes pods (these will have to match with the filenames defined in the nginx.conf config file, which is a configmap).\nnginx.conf:\n ... server { listen 443 ssl http2; ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5; ssl_certificate /etc/nginx/ssl/altinn_studio/star.altinn.studio.cert; ssl_certificate_key /etc/nginx/ssl/altinn_studio/star.altinn.studio.key; ssl_stapling on; ssl_stapling_verify on; ssl_trusted_certificate /etc/nginx/ssl/altinn_studio/star.altinn.studio.cert; ssl_session_cache shared:SSL/TLS:40m; ssl_session_timeout 4h; ssl_session_tickets on; ... }  The path of where the certificates are mounted is described in the helm deployment. It will be a volume and volumeMount on the deployment. (same as mounting of configuration through a configmap).\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/loadbalancer/",
	"title": "Nginx loadbalancing in studio",
	"tags": ["development", "nginx", "routing"],
	"description": "Information about routing with nginx",
	"content": " Nginx routing The router config is stored as a configmap in our kubernetes cluster, and mounted to the pod as a .conf file. When the config needs to be changed, the changes should be done in the loadbalancer-configmap for the correct environment (dev/prod).\nApply the changes, and restart the pod:\nOption 1: kill the pod and let the deployment spinn up a new pod.\nOption 2: open a shell into the pod kubectl exec -it [POD_NAME] -- sh and run the command nginx -s reload\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/nginx/",
	"title": "Nginx routing",
	"tags": ["development", "nginx", "routing"],
	"description": "Information about routing with nginx",
	"content": " Nginx routing The router config is stored as a configmap in our kubernetes cluster, and mounted to the pod as a .conf file. When the config needs to be changed, the changes should be done in the loadbalancer-configmap for the correct environment (dev/prod).\nApply the changes, and restart the pod:\nOption 1: kill the pod and let the deployment spinn up a new pod.\nOption 2: open a shell into the pod kubectl exec -it [POD_NAME] -- sh and run the command nginx -s reload\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/back-end/nuget-package/",
	"title": "Nuget Package",
	"tags": ["nuget"],
	"description": "Overview of nuget package usage in altinn studio",
	"content": " This page is constantly updated on the use of nuget package in altinn studio.\n\rNuget Package Altinn Studio publishes nuget package to share common libraries between different solutions. You can read more about nuget here.\nFollowing nuget packages are published and are available for download here\n Altinn.App.Api Altinn.App.Common Altinn.App.PlatformServices Altinn.Common.PEP Altinn.Platform.Storage.Interface JWTCookieAuthentication  Procedure for Nuget Packages  Implement all changes necessary in the Nuget Package project e.g. Storage.Interface.csproj. Submit PR on these changes only. No implementation on other projects should be included. Once PR approved and changes are merged into master; create and deploy new Nuget Package based on master branch.\n Continue with implementation, referencing the updated Nuget wherever it is needed. Remember to update all outdated references to the Nuget and check that all tests run successfully before submitting a final PR.  Create Nuget Package Detailed documentation on how to create a nuget package, guidelines etc can be found here.\nAn example of nuget package creation in altinn studio Example : Create Altinn.Platform.Storage.Interface nuget package\nSet Project Properties  Open Altinn.Platform.Storage solution Right click on Storage.Interface project and select properties. You will see the screen below  Choose Package, add the package details such as id, version, description, author, company and tags.\n Save the changes\n Choose release mode\n Right click on Storage.Interface and select \u0026ldquo;Pack\u0026rdquo;\n The package will now be created in \u0026ldquo;C:\\Repos\\altinn-studio\\src\\Altinn.Platform\\Altinn.Platform.Storage\\Storage.Interface\\bin\\Release\u0026rdquo;\n Go to commandline, navigate to the release path\n run \u0026ldquo;dotnet nuget push Altinn.Platform.Storage.Interface.1.0.1-alpha.nupkg -k [nuget api key] -s https://api.nuget.org/v3/index.json\u0026quot;\n Your package will now be published to nuget.org\n  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/pap/",
	"title": "Policy Administration Point",
	"tags": ["architecture", "security"],
	"description": "Description of Policy Administration Point for Altinn Platform",
	"content": "The rules for apps is defined in Altinn Studio when the service developer is developing the app (service). The rules for this is defined by XACML. See XACML for details.\nDelegation of rights is performed in Altinn II platform. When delegation is done through creation of new rules that gives user or organisation new rights.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-studio/designer/pap/",
	"title": "Policy Administration Point",
	"tags": ["architecture", "security"],
	"description": "Description of Policy Administration Point for Altinn Platform",
	"content": "The rules for apps is defined in Altinn Studio when the service developer is developing the app (service). The rules for this is defined by XACML. See XACML for details.\nDelegation of rights is performed in Altinn II platform. When delegation is done through creation of new rules that gives user or organisation new rights.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/pdf/",
	"title": "Application architecture pdf component - Altinn Platform",
	"tags": ["architecture", "solution", "pdf"],
	"description": "The PDF component is created as an Spring Boot (Java) web application hosted in Kubernetes as a docker container.",
	"content": "The PDF component is an Spring Boot java application exposing an api for triggering pdf generation.\nThe pdf api is exposed at http://platform.altinn.cloud/pdf/api/v1.\nThe available endpoints can be seen in the swagger definition.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/pdp/",
	"title": "Policy Decision Point",
	"tags": ["architecture", "security"],
	"description": "Description of the Authoirzation architecture",
	"content": " The Policy Decision Point is implemented in the authorization application that is deployed Altinn Platform.\nThe Policy Decision Point follow eXtensible Access Control Markup Language (XACML) Version 3.0.\nThis mean that the rules are defined in XACML Policies files and PDP evalutes request based on the rules.\nThe PDP evaluates the Context Request based on standard XACML 3.0 behaviour. There is no specific Altinn behaviour.\nPolicy Decision Point exposes a method that authorize the decision request.\nPDP uses the configured context handler to enrich the decision request with attributes about the subject, resource and environment.\nIf instanceID or dataID is used as Resource ID PDP will use Context Handler to identifiy the correct appId, the instance workflow state and the reporteId for the existing resource.\nFor request for non existing instances the appId will be used and the reportee is a required input\nThe diagram below show the detailed flow.\n\nFlow explained\n Decision Request is sent to context handler for enriching Context handler call PIP for resource attributes Context handler call PIP for subject attributes PRP Identifies the correct policy based on resource attributes in enriched decision request PDP identifyes matching rules PDP checks if there is any matching rules and returnes interderminate if not Matches the rules with subject attributes Verify match and return indeterminate if not Evaluate any conditions in policy If condiation does not match return indterminate Add any obligations to the result Return the decsion result  XACML Conformance The PDP tries to follow XACML standard and have implemented some conformance tests. The goal is to fully implement all conformance test. See test here.\nSupported matching algorithms "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/shared/pep/",
	"title": "Policy Enforcment Point",
	"tags": ["architecture", "security"],
	"description": "Description of Policy Enforcment Point for Altinn Studio Apps",
	"content": " There will be some different Policy Enforcement Points in Altinn Platform depending on the service in platform.\nStandard PEP See GitHub\nAttribute based authorization is best solved with Policy Based Authorization in asp.net core\nThe Policy Enforcement Point in the ASP.Net Web application template is created as a Authorization Handler.\nIn the App there is defined a set of AuthorizationRequirements and for each operation of the different API endpoints needs to be configured with the correct requirement.\nExample on requirements are - InstanceRead (User/system needs to be authorized to perform read action on the instance in current state) - InstanceWrite (User/system needs to be authorized to perform write action on the instance and its data in current state) - InstanceInstantiate (user/system needs to be authorized to Instantiate an instance for an app)\nThe PEP will based on route data (like instanceId) and the authenticated Identity create a decision request and call PDP. Based on the response the PEP will deny or approve the user. (Deny = http 403)\nThe PEP validates any obligation from the PDP like minimum authentication level. If this is not valid, the request will be denied. (http 403)\nCustom PEP "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/pip/",
	"title": "Policy Information Point",
	"tags": ["architecture", "security"],
	"description": "Description of Policy Information Point for Altinn Platform",
	"content": "A Policy Information Point is a component that is used by the Context Handler to enrich the decision request with the needed attributes so that the Policy Decision Point can evaluate the decision request against the relevant policy for a decision request.\nFor the Altinn Platform there is serveral Policy Information Points\n Altinn II Authorization - Get information about roles a user or system has for a given party Storage PIP - Get attributes about the resource in the decision request Register PIP - Possible information about the party (is he still alive?) Other Register - Roles/claims stored other places than in Altinn  The exact number of pips are work in progress.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/prp/",
	"title": "Policy Retrieval Point",
	"tags": ["architecture", "security"],
	"description": "Description of Policy Information Point for Altinn Platform",
	"content": "The Policy Retrieval Point is the functionality where Policy Decision Point (PDP) can retrieve the rules defined for a app resource.\nDuring deployment of a app the rules for the app is added to the Altinn Storage.\nThe rules are defined as a XACML 3.0 Policy document.\nSee XACML for detailed description of Policy format\nFor delegated rights Altinn II will provide the delegated policy.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/azure-devops/pipelines/",
	"title": "Pipelines",
	"tags": ["development"],
	"description": "Quality checklist and overview of pipelines in Azure DevOps",
	"content": "  Quality checklist Build pipelines Release pipelines  Quality Checklist all sensitive information is marked as secret. Read more about setting variables as secret here. verify that no sensitive information is available in the exported API JSON definition (https://dev.azure.com/brreg/d0be3bbb-9145-4490-8d76-fd8024277467/_apis/pipelines/{definitionId}) make sure that no secrets are shared with forks of github repos if you are using a github integrated pipeline. Read more about that here. if it exists a built in task for the job the pipeline should do, this should be prefered over writing your own scripts. Both for maintainability and security reasons. referencing other pipelines is done by definitionId.  Build Pipelines The build pipelines are grouped in folders based on either the part of the solution they are used for or the purpose of the pipeline. See build pipelines here.\n altinn-apps altinn-platform altinn-studio code-analysis load-test test  altinn-apps There are pull request and master pipelines for app frontend and kubernetes wrapper.\nThe pull request pipeline builds a dockerimage and is triggered whenever a pull request is created or updated that modifies code related to the component.\nThe master pipeline builds a docker image and pushes it to Azure Container Registry. The pipeline is triggered whenever new code is merged into the master branch that modifies code related to the component.\nRemaing pipelines in this folder are described below.\naltinn-studio-build-app-image  trigger: triggered by app developers in Altinn Studio details: builds a docker image of an app and pushes it to Container Registery. cloud component integrations: Azure Container Registry  altinn-studio-deploy-app-image  trigger: triggered by app developers in Altinn Studio. details: Gets APIM Subscription key if required and deploys a new helm release to the correct AKS cluster. cloud component integrations: Azure API Management, Azure Kubernetes services  altinn-studio-update-deploy-release-db  trigger: final step in build/deploy app image pipelines details: Sends request to designer to update status of a given buil or release of an app.  altinn-platform / altinn-studio Pipelines in altinn-platform and altinn-studio share the same structure. There is a pull request and master pipeline for each component.\nThe pull request pipeline builds a dockerimage and is triggered whenever a pull request is created or updated that modifies code related to the component.\nThe master pipeline builds a docker image and pushes it to Azure Container Registry. The pipeline is triggered whenever new code is merged into the master branch that modifies code related to the component.\nThe pull request pipeline for the .net app template does not build a docker image, but simply ensures that it is possible to build the app template used by Altinn Studio.\nPipelines follow this naming standard: [component]-(master/pull-request).\ncode-analysis Each component in the solution has their own analysis pipeline. The pipeline runs unit and integration tests and triggers a sonar cloud analysis of the code.\nPipelines follow this naming standard: [component]-analysis-[langugage].\nload-test The load-test pipelines are administered by the load-testing team. The pipelines run k6 tests aimed at YT01.\ntest There are automated tests that are aimed at our running solutions and that can be run in any environment.\nThe pipelines in this project have varying triggers. Some are on a schedule and regularily run in one or all of our environments. Others are triggered when a new release is deployed to an environment.\napps-and-platform-postman  trigger: nightly schedule environment: at22 details: tests platform and app APIs  studio-testcafe  trigger: final task in release pipeline for Designer environment: all details: runs test café test in Altinn Studio to validate most common functionality.  apps-k6  trigger: N/A environment: N/A details: k6 tests to verify Altinn Apps behavior  platform-k6  trigger: final task in release pipeline for relevant platform components. environment: all except YT01. details: k6 tests to verify Altinn Platform functionality.  Release Pipelines See all release pipelines here.\nOur release pipelines are set up with multiple stages. This allows for different policies related to deploy and varying triggers.\nCommon for all release pipelines is that they rely on an artifact containing the helm chart which is packed in Azure Studio Ops project.\nDeploy to TT02 or production requires approval from a team member. Weekly releases are scheduled for these environments.\nHOWTO Setting a variable as secret Marking a variable is secret is straight forward. Navigate to the pipeline variables.\nAll that is needed in order for a variable to be secured in the pipeline is click on the lock icon at the right hand side.\nDisable sharing of secrets on github forks Disabling of secret sharing on repo forks are done by navigating from the pipeline to Triggers and selecting the github integration under \u0026ldquo;Pull Request Validation\u0026rdquo;. Here you can disable secret sharing by disabling the build on forks.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-studio/designer/pap/xacmlpolicy/",
	"title": "Authorization - Altinn Apps - Policy",
	"tags": ["architecture", "security"],
	"description": "Description of the XACML Policy defined for a app",
	"content": " A App needs to have defined a Authoriation Policy that will be imported in to Policy Retrieval Point when a app is deloyed to a Altinn Apps/Platform environment.\nThe policy format follows XACML 3.0 and for every rule in the policy, there is attributes defining which resource, subject and which action it targets.\nResource Attributes Org The org part of the resource attribute defines which org that owns the app\nApp The app part of the identifies the app itself.\nTask / Event The task/event part of the resource makes it possible to have seperate rules for the different tasks\nExample The below example show a part of XACML 3.0 Policy where a resource is identified.\n\u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;skd\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:altinn:org\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;taxreport\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:altinn:app\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;instansiate\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:altinn:event\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt;  Subject Attributes The subject part of the target for the rule defines who the rule target\nRole Code The role code is used for rule that target end users and systems\nOrg The org code is used for rule that target orgs\nExample RolCode Example with rolecode\n\u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;regna\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:altinn:rolecode\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt;  Org Example with org\n\u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;skd\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:altinn:org\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt;  Action Attributes Example Example with read action\n\u0026lt;xacml:Match MatchId=\u0026quot;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;\u0026gt;read\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;xacml:AttributeDesignator AttributeId=\u0026quot;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026quot; Category=\u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026quot; DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; MustBePresent=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt;  Action ID Obligation The obligation part is used to define information that should be used by PEP. For Altinn Apps the minimum authentication level\n\u0026lt;xacml:ObligationExpressions\u0026gt; \u0026lt;xacml:ObligationExpression FulfillOn=\u0026quot;Permit\u0026quot; ObligationId=\u0026quot;urn:altinn:obligation:authenticationLevel1\u0026quot;\u0026gt; \u0026lt;xacml:AttributeAssignmentExpression AttributeId=\u0026quot;urn:altinn:obligation1-assignment1\u0026quot; Category=\u0026quot;urn:altinn:minimum-authenticationlevel\u0026quot;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026quot;http://www.w3.org/2001/XMLSchema#integer\u0026quot;\u0026gt;2\u0026lt;/xacml:AttributeValue\u0026gt; \u0026lt;/xacml:AttributeAssignmentExpression\u0026gt; \u0026lt;/xacml:ObligationExpression\u0026gt; \u0026lt;/xacml:ObligationExpressions\u0026gt;  Full examples On Github you can look at some full policy examples\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/postmessage/",
	"title": "Post Message",
	"tags": ["development", "front-end"],
	"description": "Guidelines for using post message functionality in Altinn Studio",
	"content": " Window.postMessage() is introduced to handle communication between components that has no connection other then the need to communicate/trigger events. Eg. its used to communicate with the syncBar to get it to perform a new status check. To read more see: Window.postMessage\nUsage Dispatching a message event is done the following way:\n// variables should be used for messages var SAVED_EVENT = 'SAVED' window.postMessage(SAVED_EVENT, window.location.href);  Catching the event is done by adding an event listener to the component one needs to communicate with:\npublic componentDidMount() { window.addEventListener('message', this.eventThatShouldHappend); } public eventThatShouldHappend(){ if (event.data === SAVED_EVENT){ //Do necessary handling of correct message } }  When the commponent is unmounting the event listener should be removed:\npublic componentWillUnmount() { window.removeEventListener('message', this.eventThatShouldHappend); }   Remember to create \u0026ldquo;message variables\u0026rdquo; that make sense when comparing different messages. Example: \u0026ldquo;SAVED_IN_UI_EDITOR\u0026rdquo;, \u0026ldquo;SAVED_IN_OTHER_PLACE\u0026rdquo; or \u0026ldquo;FETCH_REPO_STATUS\u0026rdquo;.\n "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/postman/",
	"title": "Postman",
	"tags": ["development", "testing", "api"],
	"description": "API Testing with postman",
	"content": " Postman To test API endpoints the tool postman enables easy configuration and setup of various HTTP requests, read more about postman here.\nAuthentication Several of the exposed APIs requires various cookies, for instance authentication and gitea information. To be able to do requests against these APIs the cookies have to be included in the HTTP request, and configured in postman. The cookies can be found in the following way: - In your browser login to dev.altinn.studio/altin.studio/altinn3.no depending on what environment you are targeting - Notice that the cookies AltinnStudioDesigner, AltinnStudioRuntime and i_like_gitea (among others) has been saved for the domain name you have logged in to. - For Chrome cookies can be found under settings -\u0026gt; advanced -\u0026gt; cookies -\u0026gt; see all.\nThe two cookies AltinnStudioDesigner and AltinnStudioRuntime works as auth against the Designer and APP API respectively, so if you are targeting a Designer API you should include the AltinnStudioDesigner cookie, along with the i_like_gitea cookie, and if you are targeting a runtime API the AltinnStudioRuntime cookie should be included. Cookies are easily added to the postman requests under the slightly hidden cookies setting, see:\nSet up postman tests  Download and install postman native app. Import the files from src/test/Postman/Collection to the collections area in Postman. Import the environment .json file from src/test/Postman to the environments area in Postman.  How to write postman tests  Find the area/collection where the new test has to be added. Add a new request of type GET/POST/PUT/DELETE under the right folder. Provide the endpoint, input for the request. Make sure the variable values are accessed from environments file. Write the tests as a javascript code in the \u0026lsquo;tests\u0026rsquo; section of a request. More about test scrips Tests should have one test to verify valid response code and another test to validate the content of the response.  Postman test pipeline in Azure Devops Azure Devops Pipeline\nInformation about the postman collections  Collections folder include postman collections for Platform API, Storage API, APP API. Platform API uses Platform.postman_environment as an environment file. Storage, App API and Negative tests uses App.postman_environment as an environment file. One has to fill in the values (testdata) in the environment file based on the environment under test. The collections has steps that would authenticate an user and set appropriate cookies.  Run Postman tests against a test environment.  Open Postman and Import the Postman collection file and the corresponding envrinonment file. Select the environment file and fill in the necesary information for the required collection. Required Test data for App / Storage / Negative Tests Collection are envUrl, org(appOwner, app(level2-app), testUserName(level2LoginUser), testUserPassword(use same password for two users), level3-app, level1-app, testUserName2(level1LoginUser) Required Test data for Platform are envUrl, org(appOwner), app(level2-app), partyID, SSN, OrgNr, userID Open the Postman runner -\u0026gt; Select the collection and environment and click \u0026lsquo;Start Run\u0026rsquo;  Note: newman can be used to a Postman collection from command line interface.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/clients/",
	"title": "Prefill Client Example",
	"tags": ["api"],
	"description": "This page demonstrates multiple prefill with an example client application.",
	"content": " Introduction Link to the example client application codebase: https://github.com/Altinn/altinn-studio/tree/master/src/Altinn.ExampleClients/PrefillClient\n\rThis is an example client appliation which demonstrate how an prganisation can use the Altinn API to instantiate applications with prefill data on a multiple set of persons (or organisations). To achieve this the Altinn API supports an HTTP technique called multipart request. This allow us to send and process an HTTP request with several content parts in one operation.\nThis example application gives you an idea on how to work with multipart prefill instantiation of applications.\nExample walkthrough First we will walk you through a scenario of running the application from start to end.\n1: To begin with we have created and placed the XML files containing the data to be prefilled on each person in a folder on our computer:\nWe have named each XML file with a person number. The XML content is the prefill data we wish to instantiate the applications with for each person.\nFor the example purpose these files contain just a few XML lines. In a real world situation this could be large files containing schema data for a given set of persons or organisations.\nHere is the content from one of the XML files (01036800298.xml):\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; ?\u0026gt; \u0026lt;testcase\u0026gt; \u0026lt;testperson\u0026gt; Test person 1 \u0026lt;/testperson\u0026gt; \u0026lt;/testcase\u0026gt;  We will later showcase this XML content from an URL in browser window, after it has been saved to the storage of the application instance.\n2: Then we start the application from a command-line interface with a set of parameters:\ndotnet run PrefillClient -url=https://platform.at21.altinn.cloud/storage/api/v1/instances -folder=C:\\test\\input -appid=tdd/dog  3: After the application have run, the same folder now contain the additional files:\nOur example application creates JSON files containing the application instance information on successful instantiations. If any failure, an error file is created per person.\nTherefore we see three persons have had an application successfully instantiated with prefill data, and lastly one application instantiation for a person failed.\nThe next code block show the content of a newly created JSON file (01036800298.json):\n{ \u0026quot;id\u0026quot;: \u0026quot;50006341/3a0c71c2-4448-4620-bd04-c742b6e41074\u0026quot;, \u0026quot;instanceOwnerId\u0026quot;: \u0026quot;50006341\u0026quot;, \u0026quot;selfLinks\u0026quot;: { \u0026quot;platform\u0026quot;: \u0026quot;http://platform.at21.altinn.cloud/storage/api/v1/instances/50006341/3a0c71c2-4448-4620-bd04-c742b6e41074\u0026quot; }, \u0026quot;appId\u0026quot;: \u0026quot;tdd/dog\u0026quot;, \u0026quot;org\u0026quot;: \u0026quot;tdd\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-09-03T11:52:49.9684927Z\u0026quot;, \u0026quot;lastChangedDateTime\u0026quot;: \u0026quot;2019-09-03T11:52:49.9684927Z\u0026quot;, \u0026quot;presentationField\u0026quot;: { \u0026quot;nb\u0026quot;: \u0026quot;Testapplikasjon\u0026quot;, \u0026quot;en\u0026quot;: \u0026quot;Test Application\u0026quot; }, \u0026quot;process\u0026quot;: { \u0026quot;currentTask\u0026quot;: \u0026quot;FormFilling_1\u0026quot;, \u0026quot;isComplete\u0026quot;: false }, \u0026quot;instanceState\u0026quot;: { \u0026quot;isDeleted\u0026quot;: false, \u0026quot;isMarkedForHardDelete\u0026quot;: false, \u0026quot;isArchived\u0026quot;: false }, \u0026quot;data\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;269909ea-3d1b-4a6b-85c5-021e5d63eef9\u0026quot;, \u0026quot;elementType\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;application/xml\u0026quot;, \u0026quot;storageUrl\u0026quot;: \u0026quot;tdd/dog/3a0c71c2-4448-4620-bd04-c742b6e41074/data/269909ea-3d1b-4a6b-85c5-021e5d63eef9\u0026quot;, \u0026quot;dataLinks\u0026quot;: { \u0026quot;platform\u0026quot;: \u0026quot;http://platform.at21.altinn.cloud/storage/api/v1/instances/50006341/3a0c71c2-4448-4620-bd04-c742b6e41074/data/269909ea-3d1b-4a6b-85c5-021e5d63eef9\u0026quot; }, \u0026quot;fileSize\u0026quot;: 112, \u0026quot;isLocked\u0026quot;: false, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-09-03T11:52:49.9684927Z\u0026quot;, \u0026quot;lastChangedDateTime\u0026quot;: \u0026quot;2019-09-03T11:52:49.9684927Z\u0026quot; } ] }  If we follow the URL given under the dataLinks property from the JSON file, we see the content of the XML file saved as a data element to the application instance:\nLastly to be examined from the folder, is the error file on the failed instantiation (error-01036800236.txt) from our example:\nStatus code '400', error message: \u0026quot;Instance owner lookup failed.\u0026quot;  Behind the scenes Now we will take a short look of what happens behind the scenes when running the example application.\nOur example client application iterates over the XML files in the folder, creates an instance template containing an instanceOwnerLookup.PersonNumber value to find, and then generate the multipart content with the following blocks of C# code.\nXML file iteration and instanceOwnerLookup creation:\nforeach (string xmlFilePath in xmlFilePaths) { xmlFileName = xmlFilePath.Split(\u0026quot;\\\\\u0026quot;).Last(); // The person number is the XML filename personNumber = xmlFileName.Split(\u0026quot;.\u0026quot;).First(); Instance instanceTemplate = new Instance() { InstanceOwnerLookup = new InstanceOwnerLookup() { PersonNumber = personNumber, } };  Multipart content creation:\nMultipartFormDataContent content = new MultipartContentBuilder(instanceTemplate) .AddDataElement(\u0026quot;default\u0026quot;, new FileStream(xmlFilePath, FileMode.Open), \u0026quot;application/xml\u0026quot;) .Build();  *We have made a helper class, MultipartContentBuilder, to easily add new data elements to the multipart in case several attachements are to be used for prefill.*\nIn our example we have used an element type default and content type application/xml. These two must be declared in the application metadata in order to store the files. The same goes for instance and application/json to create the instance template, which is added within the constructor of the MultipartContentBuilder class:\npublic class MultipartContentBuilder { private MultipartFormDataContent builder; public MultipartContentBuilder(Instance instanceTemplate) { builder = new MultipartFormDataContent(); if (instanceTemplate != null) { StringContent instanceContent = new StringContent(JsonConvert.SerializeObject(instanceTemplate), Encoding.UTF8, \u0026quot;application/json\u0026quot;); builder.Add(instanceContent, \u0026quot;instance\u0026quot;); } }  The C# code then generates the following multipart information to be sent with the request to the Altinn API:\nContent-Type: multipart/form-data; boundary=\u0026quot;abcdefg\u0026quot; --abcdefg Content-Type: application/json; charset=utf-8 Content-Disposition: form-data; name=\u0026quot;instance\u0026quot; { \u0026quot;instanceOwnerLookup\u0026quot;: { \u0026quot;personNumber\u0026quot;: \u0026quot;01036800298\u0026quot; } } --abcdefg Content-Type: application/xml Content-Disposition: form-data; name=\u0026quot;default\u0026quot; \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; ?\u0026gt; \u0026lt;testcase\u0026gt; \u0026lt;testperson\u0026gt; Test person 1 \u0026lt;/testperson\u0026gt; \u0026lt;/testcase\u0026gt; --abcdefg--  Here we see two C# codelines to post the multipart content to the Altinn API and retrieve the response, then store it temporarily as string result:\nHttpResponseMessage response = client.PostAsync(requestUri, content).Result; string result = response.Content.ReadAsStringAsync().Result;  At last we include the deserialization of the result to an Instance object with Json. NET functionality.\nInstance instanceResult = JsonConvert.DeserializeObject\u0026lt;Instance\u0026gt;(result);  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/presentation/",
	"title": "Presentation (User Interface) Capabilities",
	"tags": ["architecture"],
	"description": "Presentation Capabilities enable an application to manage the human-computer interface.",
	"content": " This includes capturing user actions and generating resulting events, presenting data to the user, and assisting in the management of the dialog flow of processing\nThese capabilities is both targeting App developers creating applications in Altinn Studio and the application created in Altinn Studio and Deployed to Altinn Apps for end users.\nRendering \u0026amp; Interaction Capabilities Composition \u0026amp; Rendering Composition The app developer may create the layout of the App UI using Altinn Studio. Standard UI components are available, in addition the app developer may create custom components and/or layouts.\nRendering  The UI in Altinn Studio being presented to app developers, and The UI designed in Altinn Studio being presented in an App to end users,  use client-side rendering, and may be rendered by a web browser.\nTODO: Link to relevant archiecture component(s) providing this capability.\nSession \u0026amp; State Management Cookies are used for client-side session management, both in Altinn Studio and Altinn Apps.\nInput Validation  The UI in Altinn Studio being presented to app developers, and The UI designed in Altinn Studio being presented in an App to end users,  support input validation of data inputed by App Developers or end users using Apps developed in Altinn Studio.\nTODO: Link to relevant archiecture component(s) providing this capability.\nPDF Generation Apps created in Altinn Studio have the possibility to have created a PDF of the UI designed in Altinn Studio.\nTODO: Link to relevant archiecture component(s) providing this capability.\nHelp TODO: Link to relevant archiecture component(s) providing this capability.\nNotification Management TODO: Link to relevant archiecture component(s) providing this capability.\nPresentation Adaptation Capabilities TODO: Link to relevant archiecture component(s) providing this capability.\nMulti-channel Presentation App developers may use Altinn Studio in a web browser, or local development tools to create an app. TODO: Link to relevant archiecture component(s) providing this capability.\nResponsive Presentation  The UI in Altinn Studio being presented to app developers, and The UI designed in Altinn Studio being presented in an App to end users,  support support responsive presentation. TODO: Link to relevant archiecture component(s) providing this capability.\nLocalization The UI designed in Altinn Studio, being presented in an App to end users support localization, as defined by app developers. TODO: Link to relevant archiecture component(s) providing this capability.\nAccessibility The presentation both in Altinn Studio for the App Developer and the presentation created in Altinn Studio and presented in the App is created to fullfill WCAG 2.0\nTODO: Link to relevant archiecture component(s) providing this capability.\nUI Design This is typical a part of the development capabilities, but since the Altinn Studio Solutions lets App developers design the UI we need this as a runtime capabilitiy also. App developers can customize the UI design in the App presented to end users.\nUI Component Library App developers have a UI component library available in Altinn Studio to select UI components from.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/presentation/",
	"title": "Presentation Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Presentation Components are in charge of processing information and making it accessible to users.",
	"content": " Web interemediation software Proxy Servers In Altinn Studio we use NGINX as a proxy server.\nIn Altinn Apps TRAEFIK is used as a proxy server\nCDN For Altinn apps we have create a CDN for storing common files used by browsers.\nA example is App Frontend.\nRead all about Altinn CDN\nPresentation Software Webserver For Altinn Studio, Altinn Apps and Altinn Platform we use Kestrel as the web server/ application server for dot.net applications. Read more about Kestrel at Microsoft\nFor Java Applications we use Tomcat.\nPresentation frameworks \u0026amp; Libraries SPA Frameworks Altinn Studio, Altinn Apps and Altinn Platform uses REACT.JS as Single Page Application framework.\nRead more about coding in our development handbook.\nDynamic webpage frameworks Some views in Altinnn Studio is currently created with asp.net pages coded with Razor syntax.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/processing/process/",
	"title": "Business Process Processing Capabilities",
	"tags": ["app-backend", "BPMN"],
	"description": "Description of the business process processing capabilities",
	"content": " A application deployed to Altinn Apps will typical have a business process that users and systems need to follow.\nApps created in Altinn Studio uses BPMN 2.0 standard to describe the business process and the app will have functionality to support different types of tasks in the process.\nThe process is defined by the application developer in Altinn Studio. When a new app is created it a basic process is created.\nSupported Tasks Applications will support different processes with different types of task as part of the process. The current types of tasks is implemented and planned to be implemented. This list is not final.\nData This is the task where the user or system create and updates data for one more datamodelles defined for the App.\nConfirmation (backlog) This is a task where user can look at the data filled and then confirm it. Replaces send in it\nConfirmationAndSigning (backlog) This is a task where user can look at the data filled and then confirm and sign data. Replaces send in it\nPayment (backlog) This is a task where user is redirected to a external payment provider to pay related to the process. The payment can be related to data filled out in earliers task, or can be a fixed value connected to the app.\nSee Github issue for details\nSigning (backlog) Signing is a task where one or more users sign the data submitted. In most uses cases this is a strictly functional operation but depending on the authentication level it can be a digital signature involved. The different types of signing relevant for this platform is.\nThere is a epic for signing on GitHub\nRegular signing Regular signing is when one user with a specific role is required to functional sign the data before submitting it.\nParalell signing This is a task where serverel users need/can sign the data in paralell. The task is completed when the needed amount of signatures has been added\nSee Github issue for details\nUser controlled signing User controlled signing is a task where the data inputed in earliers task in process defines which users that needs to sign.\nSee GitHub issue for details\nDigital Signing with BankId Digital signing with BankID creates a digital signature of the data for the instance.\nSee Github issue for details\nLookup (backlog) This is a task in a process where user/system can lookup external data with help of inputs from UI or API.\nState change The application is responsible to make sure that\nExample process There is some freedom of the order of task in the process, but not all combinations is functional valid.\nEach type of task will have som requirement to be fullfilled to be allowed to be completed.\nThe below diagram show some example processes that a App possible will support in the future. Even it is possible to technical order the different types of task\nProcess: Data \nThis is the a common process. In this scenario a user will typical fill out formdata and when formfilling task is completed the data will be marked as locked and the final data can be read from the org. The org will be able to read data before the formfilling task is completed, but then the end user can still update the data.\nProcess: Data - Signing \nThis is the a common process. In this scenario a user will typical fill out formdata and when formfilling task is completed, the process is moved to a signing task where the user can verify the data and then confirm it with a signing of data. Depending on the required security level for the application the signing will use PKI systems to digital sign the data or just be a more functional confirmation from the user. The org will be able to read data before the formfilling task is completed, but then the end user can still update the data. The data will not be allowed to be changed while the instance is in signing task.\nProcess: Data - Confirmation - Payment \nIn this scenario a user will typical fill out formdata and when formfilling task is completed, the process is moved to a confirm task where the user can verify the data and then confirm, when the data is confirmed the process is moved to a payment task where the user needs to pay before the process is completed. The payment functionality will be handled by external payment providers. The app will integrate with API\u0026rsquo;s for the payment provider. Altinn runtime will support different payment providers.\nProcess: Data - Confirmation - External validation \nIn this scenario a user or system will typical fill out formdata and when formfilling task is completed, the process is moved to a confirm task where the user can verify the data and then confirm it. The process is the moved to a external validation task where the org is doing validation. The org can chose to complete the task or send the instance back to a earlier task for correction of the data.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-backend/process/",
	"title": "App Process",
	"tags": ["process", "BMPN"],
	"description": "Description of the process handling of App Backend",
	"content": " Process API Apps created in Altinn Studio have a seperate Process API that exposes functionality to clients to controll the process.\nSee github for source code\nInstance API Process Service The process service is where the business logic for BPMN processing is located. It is responsible for verifying state, and changes of state\nSee github for source code\nBPMN Reader BPMN reader is the component that parses BPMN process in apps.\nSee github for source code\nProcess Step App Frontend App frontends as a process step module that verifes current state for an app and present the correct view depending on task a app instance\nSee github for source code\nApp Logic When app process changes state app logic is run making it possible for app developers to implements specific app logic.\nSee AppBase.cs and IAltinnApp\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/processing/process/process_interaction/",
	"title": "Process Interaction",
	"tags": ["app-backend"],
	"description": "",
	"content": " App backend exposes different APIS that is relevant during a app process.\nThis page show examples\nProcess Interaction App Frontend - App Backend - \nFull Screen\nThe above example show the following\n User clicks link to a App from service catalog The browser redirect to the start service page in the app. The react application renders the correct view User click on instantiate button. App Frontend calls instansiate API Instantiate create a new instance with data for the datamodell with prefill and returns instance information that user should be redirect to. User/browser open the instance App frontend calls app backed to get the instance state App Frontend render the correct component for the given state. User input data . App Frontend call Data API to update data. If calculation or dataretrieavel causes additional data updates on server side, the response indicates to app frontend to get the latest data App frontend gets the updated data 9 and 10 is repeated as long user has data to input\n User press complete/send inn button\n App frontend Saves data\n App frontend calls validation API and any possible errors are presented to the user. If\n If no errors are returned App Frontend call Process API to complete Task. Process Api trigger task validation to make sure it is allowed to move process forward. If validation fails, process API returns\n  Process Interaction End User System - App Backend - \nFull Screen\nProcess Interaction Sirius Use case \nFull Screen\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/profile/",
	"title": "Application construction components - Altinn Platform Profile",
	"tags": ["architecture", "solution"],
	"description": "The profile component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/profile/",
	"title": "Application arhicture profile component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Description of profile component",
	"content": " The profile component is an ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\nThe profile solution is now available locally at http://platform.altinn.cloud/profile/api/v1 and all resources are avaiable through endpoints defined below.\nResources: users\n/users A user is the entity which is logged in in Altinn and performs actions for on behalf of an instance owner.\nUser type    Attribute Type Description     UserId int user ID   UserName string username set by the user   PhoneNumber string phone number   Email string email address   PartyId int party ID   Party Party party object that represents the user   UserType UserType user type   ProfileSettingPreference ProfileSettingPreference object containing the users profile setting preferences    Operations Get information about a user from user id:\nGET /users/{userId}  Get information about a user from SSN. Send a POST request with the SSN contained in the request body.\nPOST /users  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/projectmanagement/",
	"title": "Project Management Capabilities",
	"tags": ["architecture"],
	"description": "Project Management Capabilities covers the different capabilities to mange the project.",
	"content": " Most of the project capabilties is not listed. The once that is listed is the ones where we use technolgies and teqniques that can be shared/reused.\nAgile Project Management Capabilties Backlog managmenent and prioritazion The project has capability to manage the backlog and priorize it.\nThis is done in Github and Zenhub,\nBurn-down / Tracking The project has capability to manage see the burn-down and track issues in backlog\nThis is done in Github and Zenhub,\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/integration/eventcapabilties/",
	"title": "Event capabilites",
	"tags": ["architecture"],
	"description": "Description of the event driven architecture for Altinn Apps and Altinn Platform",
	"content": " This is work-in-progress. The event driven architecture is still in analysis.\n\rThe new generation of Altinn is moving to an event-driven architecture. This means that Altinn Platform and Altinn Apps will publish events that organizations and parties(citizens and businesses) can subscribe to.\nOverall Concept Events Events in the new platform would be a combination of standard events defined by the platform and custom events added in an application by application developers.\nStandard events could be\n An instance is created An instance changes state (moving from one task to another, example: data -\u0026gt; signing) An instance is completed  Events would have some attributes\n [org] - The organization the event is created for [app] - The app the event is created for [instanceid] - The instanceid [eventtype] - The type of event. created, completed ++++ Probably something we want as free text.  The event would contain limited set of information. To get the full details the subscriber would need to get all details from instance / instance event api.\nExample events\n2020-08-10T21:03:07+00:00 nav/kontonr/84356677/2c1c5395-0f98-4054-8cbf-bbb1ece09a25 ProcessCompleted 2020-08-10T22:03:07+00:00 skd/skattemelding/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8 InstanceCreated 2020-08-10T28:03:07+00:00 nav/sykemelding/56234234/2c1c5395-0f98-4054-8cbf-bbb1ece09a25 ProcessCompleted 2020-08-10T45:03:07+00:00 ssb/lakselus/63463336/9add6388-647e-434c-94d9-00d272e2a1e3 DataTaskCompleted 2020-08-11T21:03:07+00:00 skd/skattemelding/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8 DataTaskCompleted 2020-08-12T23:03:07+00:00 hdir/corona/1523456/9add6388-647e-434c-94d9-00d272e2a1e3 InstanceDeleted 2020-08-12T23:03:07+00:00 skd/skattemelding/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8 ProcessCompleted 2020-08-12T24:02:07+00:00 skd/skattemelding/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8 FeedbackAdded 2020-08-12T25:03:07+00:00 skd/amelding/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8 FraudDetected  Event Schema The event would be a JSON object. The event schema would need to be defined. One option is to use Azure Event Grid event schema\n[ { \u0026quot;topic\u0026quot;: string, \u0026quot;subject\u0026quot;: string, \u0026quot;id\u0026quot;: string, \u0026quot;eventType\u0026quot;: string, \u0026quot;eventTime\u0026quot;: string, \u0026quot;data\u0026quot;:{ object-unique-to-each-publisher }, \u0026quot;dataVersion\u0026quot;: string, \u0026quot;metadataVersion\u0026quot;: string } ]  Example\n[{ \u0026quot;id\u0026quot;: \u0026quot;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026quot;, \u0026quot;eventType\u0026quot;: \u0026quot;InstanceCreated\u0026quot;, \u0026quot;topic\u0026quot;: \u0026quot;skd/skattemelding/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8\u0026quot;, \u0026quot;subject\u0026quot;: \u0026quot;234234422\u0026quot;, \u0026quot;eventTime\u0026quot;: \u0026quot;2017-08-10T21:03:07+00:00\u0026quot;, \u0026quot;data\u0026quot;: { }, \u0026quot;dataVersion\u0026quot;: \u0026quot;1.0\u0026quot; }]  Event Producers Altinn Platform Storage is probably the one component that would create the most standard events.\nThis could be events for the creation of instances when instances state is updated and so on. We would need to define what kind of standard events storage should create.\nThe assumption is that all process change events logged to instance events in storage would be published to the event architecture with limited information.\nAltinn Apps Applications hosted in Altinn Apps would be able to create events.\nThe application template will contain API so logic in event can publish events based on rules defined by the application developer.\nThis events could be anything.\nEvent subscribers Orgs (Application owners) Orgs will need to know about events happening for their applications running in Altinn Apps.\nFor some orgs there is a need for subscribing to events for a specific app, others might want to subscribe to all events, or maybe a specific type of event.\nParties (Persons and organizations) Parties submitting and receiving data in Altinn would benefit from knowing about events. This could be feedback has been added to a form, or a new message has been received.\nIn many cases, parties use professionals to handle their data in Altinn. These professionals typically have many hundred or thousands of clients.\nOther event concepts in the platform Events are used in different scenarios in the platform.\n Instance Events - Events that happen on a given instance. It could be created, saved, ++ This is stored to cosmos DB. The number of details in these events is higher than we would put on an event feed. Application logic events - This is events where app developers could implement logic to get a specific behavior. Calculation, validation ++ This type of event is probably not relevant to push to the event feed.\n  Possible solutions Custom REST API \u0026amp; Cosmos DB Currently, there exists no API where orgs or end users can query events without knowing the instanceid where the event happened. For orgs this is impossible to use directly since instanceid is not known\nThere is create a issue for analyze and implement the needed API\u0026rsquo;s #3783\nAzure Event Hub Azure Event Hub is an Event ingestion service. It can receive and process millions of events per second.\nEach Subscription can have 100 Event Hub Namespaces Each Namespace can have 10 Event Hubs\nMeaning for each Subscription we can have 1000 Event Hubs,\nSubscribers to Hubs use AMQP 1.0 protocol to read the event feed.\nEvent format data The events can be any JSON format or text\nEvent filtering There is no way to filter events before they are read at the subscriber.\nSubscribers Subscribers need to have a SAS key for accessing the event hub.\nThe client needs to use AMQB 1.0 standard. There exist client library for Java and .Net\nAzure Event Grid Event Grid is an eventing backplane that enables event-driven, reactive programming. It uses a publish-subscribe model. Publishers emit events but have no expectation about which events are handled. Subscribers decide which events they want to handle.\nAzure Event Grid can listen to an event for Azure Services, but in our scenario, Altinn Apps and Altinn Platform would create custom events that they post to topics.\nSystems can subscribe to different topics.\nEvent Grid supports dead-lettering for events that aren\u0026rsquo;t delivered to an endpoint.\nQuotas    Resource Limit     Custom topics per Azure subscription 100   Event subscriptions per topic 500   Publish rate for a custom topic (ingress) 5,000 events per second per topic   Publish requests 250 per second   Event size 1 MB (charged in as multiple 64-KB events)    Event format data The events needs to follo the Azure Event Grid event schema\nEvent Filtering A subscription can have a filter on subject or event type. Or Even the data. Meaning that subscribers could have on system handling just some specific events.\nSubscribers The subscribers need to have a web hook endpoint. Event Grid will then post the event to the given URL. If not available it will try up to 1400 minutes. (24 hours)\nPro  Subscribers can filter on topics Dead letter possiblities  Cons  Need to have a active endpoint where events could be sent Not able to support topic per party.  Apache Kafka in Azure HDInsight Apache Kafka is an open-source distributed streaming platform that can be used to build real-time streaming data pipelines and applications. Kafka also provides message broker functionality similar to a message queue, where you can publish and subscribe to named data streams.\nApache Kafka kan be deployed in to a HDInsight cluster. See details\nProducers would send events to Kafka Brokers. In a HD-insight cluster each worker nod is a Kafka broker.\nQuotas    Resource Limit     Topics per kafka cluster 2000-3000   Retention time up to unlimited    Pro  Most popular event streaming platform. Can store events indefently  Cons  Cost of HDInsight cluster Requires more admin compared to other platforms in Azure Not able to support topic per party.  Custom + Event Hub / Grid To support scenarios where parties subscribe to events related to own or client parties we would need to build a custom solution.\nThe reason for this is - Events can contain information that is sensitive. (Events needs to be isolated between parties, and also inside same party there might be different access rights to events) - Event Hub or Event Grid does not have the capacity to the amount of isolated feeds or topic to support the millions of parties\nProposed Concept As part of platform we would need to introduce an \u0026ldquo;event component\u0026rdquo; that does the following. The component could be Azure functions. This seems to be supported.\n Subscribe to Event Hub or topic in Event Grid Analyze events and store events with partyID as a partition key to Cosmos DB collection. org/app/instanceid need to be part of the event. Expose event API Filter API based on created profiles.  org or key role person have access to all events REGN or LEDE has a profile where the API filter on som predefined events.   \nFull size\nTo be analyzed and clarified Before the final solution can be defined the following needs to be clarified\nFunctional  Do org want to pull or push events Is 7 days retention time enough if they are given the ability to search on older events (with low throughput) Define data model for events. The assumption is to follow Azure Event Grid event schema How to we filter events for party. Should we support events that should not be sent to end user, only org. Like \u0026ldquo;fraud detection\u0026rdquo;. Do we need to support pushing events to event grid Is it a problem that one org knows about other orgs events? (Probably)  Technical  Event Hub: How many hubs are needed?  One Hub for the whole solution One Hub per Org? One Hub per App/Org?  Do we need one Azure function for each Event Hub? What kind of automatic filtering can we do based on roles for a requester to event API. Is there a standard for REST API to expose events we should follow.\n Event Hub: Which subscription should be used? (probably one hub per org and put under the orgs subscription) Event Hub: Should we capture the events to storage? (org storage) Event Grid: Do we need to handle dead letters or should we ask org to check against db?   Tasks The following task are identified (depending on choosen solution )\n Infrastructure: Create scripts for event hub configuration Infrastructure: Create scripts for event grid Infrastructure: Create a way for org so get SAS keys Platform: Build event component with needed api. Storage: Create event collection in cosmos  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/rest/",
	"title": "RESTful APIs (Representation State Transfer)",
	"tags": ["development", "api"],
	"description": "Guidelines for designing REST apis for microservices in Altinn",
	"content": " This page is work-in-progress. This is a proposed api which most likely is going to change.\n\rREST REST is an architectural style for designing loosely coupled applications over HTTP which was coined by Rob Fielding in 2000. We will define services according to REST.\n REST APIs should start with /api so that we with ease can differentiate between an rest api call and a ux-application call.\n REST APIs should start with a short word to indicate the logical domain or group of apis.\n REST APIs should be versioned, with semantic versioning: v1 major (incompatible API changes), v1.1 minor (add backwards-compatible functionality), and v1.1.1 patch (bugfix). We should strive to make REST APIs backwards compatible, hence clients should not break if we add a new parameter.\n REST APIs paths should be in lower case letters. Query parameter names should be lowerCamelCase.\n REST APIs should be resource oriented. A resources is a thing that the client and server knows about. The API provides methods to find, create, update, delete or manipulate a resource object. A resource in a system should have only one logical URI, which should provide a way to fetch related or additional data about the resource.\n REST APIs specifications should be public awailable as OpenApi 3.0 (swagger).\n  /api/{domain}/{version}/{resource}  Example:\nCreate a new instance resource. Post to instances with query params that identifies the application and the instance owner. This call should return identifier of the new instance resource or the json of the instance resource itself.\n/api/storage/v1/instances?applicationId=KNS-sailor\u0026amp;instanceOwnerId=1024  GET one instance or PUT to to this url to update the instance.\n/api/storage/v1/instances/23f1faab-bdb3-4cba-aed2-d515e1be6db8  Get (query) all instances that is instance owner has\n/api/storage/v1/instances\u0026amp;instanceOwnerId={instanceOwnerId}[\u0026amp;since=2017-01-01]  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/react/",
	"title": "React",
	"tags": ["development", "react"],
	"description": "Guidelines for using React in Altinn Studio",
	"content": " React React is a library for developing component based applications. It is done by having declared html as xml in javascript code, and that is again transpiled into vanilla javascript for the browser to render into a page.\nReact Components lifecycle There are sequences that are called when mounting, updated, unmounted and error-catching for every component in React. This is the order they are called:\nMounting  constructor() static getDerivedStateFromProps() render() componentDidMount()  Updating  static getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate()  Unmounting  componentWillUnmount()  Error handling  static getDerivedStateFromError() componentDidCatch()  Other React component APIs and properties APIs  setState() forceUpdate()  Class Properties  defaultProps displayName  Instance Properties  props state  Adding a new react-app to altinn.studio When adding a new react-app, use the template folder that is in the github repo. Create a new folder in the src/react-apps/applications-folder and copy the contents from the src/react-apps/templates/template-app-folder of that newly created folder.\nThen change the names in the package.json-file and start developing the new application.\nIn the templates folder, in the src/index.tsx-file, a function called run is commented out, if your application needs to have sagas, uncomment the run-function which should initialize the sagas.\nReact Folder Structure This is the best practice for folder structure in applications.\n- src / - config / - config.json - exportedConfig.ts - features / # routes,pages,features - [featureName] / - components / - containers / - resources / - featureSpecificData / - delete / - deleteFeatureSpecificDataActions.ts - deleteFeatureSpecificDataSagas.ts - fetch / - ... - upload / - ... - featureSpecificDataActions.ts - featureSpecificDataActionTypes.ts - featureSpecificDataReducers.ts - featureSpecificDataSagas.ts - selectors / - getSomeResourceSelector.ts - reducers / - featureNameReducer.ts - utils / # Feature specific utils - formFiller / # Example feature - components / - containers / - resources - attachments / # FileUpload example - delete / - deleteAttachmentsActions.ts - deleteAttachmentsSagas.ts - fetch / - fetchAttachmentsActions.ts - ... - upload / - ... - attachmentsActions.ts - attachmentsActionTypes.ts - attachmentsReducers.ts - attachmentsSagas.ts - validations / - componentValidation - componentValidationActions.ts - ... - singleFieldValidation / - singleFieldValidationActions.ts - ... - validationsActions.ts - validationsActionTypes.ts - validationsReducers.ts - validationsSagas.ts - selectors / - getSomeResouceSelector.ts - reducers / - formfillerReducer.ts - utils / - instantiate / - components / - containers / - resources / - selectors / - reducers / - reducers / - index.ts - shared / - components / # Shared components - altinnAppHeader.tsx - resources / # Shared resources - language / - fetch / - fetchLanguageActions.ts - fetchLanguageSagas.ts - someAction / - someActionOnLanguageActions.ts - someActionOnLanguageSagas.ts - languageActions.ts - languageActionTypes.ts - languageReducer.ts - languageSagas.ts - repoStatus / - fetch / - fetchRepoStatusActions.ts - fetchRepoStatusSagas.ts - repoStatusActions.ts - repoStatusActionTypes.ts - repoStatusReducer.ts - repoStatusSagas.ts - types / - utils / - store - types - utils  Links  Documentation for react components  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/receipt/",
	"title": "Application architecture receipt component - Altinn Platform",
	"tags": ["architecture", "solution", "receipt"],
	"description": "Description of receipt component",
	"content": " The receipt component is an .NET Core MVC Application exposing a react receipt application, and internal apis.\nThe receipt frontend view is available at https://platform.at22.altinn.cloud/receipt/{instanceOwnerId}/{instanceId}. The receipt component also exposes apis that are intended for use by the receipt frontend. If you need information about the user, instance or party you should use their respective platform components.\nReceipt backend exposes two enitities through API endpoints prefixed with https://platform.at22.altinn.cloud/receipt/api/v1/; user and extendedInstance\n/users A user is the entity which is logged in in Altinn and performs actions for on behalf of an instance owner.\nOperations Get information about the currently logged in user\n/users/current  /extendedinstance The extended instance object holds metadata about and instance and party data related to the instance owner.\n{ \u0026quot;instance\u0026quot;: {}, \u0026quot;party\u0026quot;: {} }  Operations Get instance and party data for a given instance id. It is optional to include the party data, and this can be regulated using the query parameter includeParty.\n/instances/{instanceOwnerPartyId}/{instanceGuid}?includeParty={true/false}  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/redux/",
	"title": "Redux",
	"tags": ["development", "front-end", "react"],
	"description": "Guidelines for using Redux in Altinn Studio",
	"content": " Redux is used to manage the states of the ux-editor.\nActions Actions are the events that are triggered when a change is made. An action contains the action type, and any metadata needed to complete the action. For example:\nexport interface IUpdateFormDataAction extends Action { formData: any; componentID: string; dataModelElement: IDataModelFieldElement; }  Sagas Redux saga is the middleware used to process information before the store is updated. All logic used in a saga should be an exported function in the utils-folder. This is decided since we need to split up the logic from the fetching of data, so we have a more testable codebase. The saga only fetches data from the state, and sends the appropriate data to utils-functions.\nAn example is asyncronous calls to backend APIs to get data, or submit data.\nEach saga defines methods that complete different tasks, connected to actions. These methods are called via listeners that listen to the actions that are being dispatched. There are different sagas for all the different functional areas.\n/** * Define the saga for the UPDATE_FORM_DATA event */ function* updateFormDataSaga(action: ActionType) { try { const relevantData = yield selectRelevantStateObjects(...); ... doRelevantLogic(relevantData); ... yield call(updateFormDataSagaFulfilled, ... ); } catch (err) { yield call(updateFormDataSagaRejected, err); } } /** * Define a listener for the UPDATE_FORM_DATA event */ export function* watchUpdateFormDataSaga(): SagaIterator { yield takeLatest(FormFillerActionTypes.UPDATE_FORM_DATA, updateFormDataSaga); }  Reducers Redux reducers are used to update the different states in the store. There is one reduer per state. The reducers listen to the actions that are dispatched when changes are made\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/register/",
	"title": "Application construction components - Altinn Platform Register",
	"tags": ["architecture", "solution"],
	"description": "The register component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/register/",
	"title": "Application arhicture register component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Description of register component",
	"content": " The register component is an ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\nThe solution is now available at https://platform.altinn.cloud/register/api/v1 and all resources are avaiable through endpoints defined below.\nResource: Organizations, Parties, Persons\n/organizations Get information about an organisation:\nOrganization type    Attribute Type Description     OrgNumber string the organisation number nine digits   Name string the registered name of the organisation   UnitType string    TelephoneNumber string the telephone number   MobileNumber string the mobile number   FaxNumber string the fax number   EMailAddress string the email adress   InternetAddress string the url for a web site   MailingAddress string the adress for sending mail to the organisation   MailingPostalCode string the postal code for sending mail to the organisation   MailingPostalCity string the city for sending mail to the organisation   BusinessAddress string the address of the daily business   BusinessPostalCode string the postal code for the daily business   BusinessPostalCity string the city for the daily business    Operations GET /organizations/{orgNr}  /persons Person type    Attribute Type Description     SSN string Social security number   Name string the person\u0026rsquo;s full name   FirstName string the person\u0026rsquo;s first name   MiddleName string the person\u0026rsquo;s middle name   LastName string the person\u0026rsquo;s last name   TelephoneNumber string telephone number   MobileNumber string mobile number   MailingAddress string mailing address   MailingPostalCode string mailing postal code   MailingPostalCity string mailing postal city   AddressMunicipalNumber string adress municipal number   AddressMunicipalName string adress municipal name   AddressHouseNumber string address house number   AddressHouseLetter string address house letter   AddressPostalCode string address postal code   AddressCity string adress city    Operations Get information about a person: Send a GET-request with the persons SSN contained in the request body to\nGET /persons  /parties Party type    Attribute Type Description     PartyId int the party ID   PartyTypeName PartyType the type of the party; organisation or person   OrgNumber string the organisation number. Empty string if party is person.   SSN string the social security number. Empty string if party is organisation.   UnitType string    Name string the full name of the person or name of the organisation   IsDeleted bool true is the organisation has been deleted from the registery   OnlyHiearhyElementWithNoAccess bool true if party is a parent unit with no access in current context   Person Person the person the party represents   Organization Organization the organisation the party represents   ChildParties List List of sub units if the party is an organisation    Operations Get information about a party:\nGET /parties/{partyId}  Lookup a party id based on social secutiry number or organisation number: (SSN or OrgNumber should be included in string format in the request body.)\nGET /parties/lookup  Lookup a party based on social secutiry number or organisation number: (SSN or OrgNumber should be included in string format in the request body.)\nGET /parties/lookupObject  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/repositories/",
	"title": "Application construction components Repositories",
	"tags": [],
	"description": "The application construction components for Repositories is based on standard open source software.",
	"content": "Each application created in Altinn Studio Designer gets a GIT repository where all code and configuration for that app is stored\nWe use GITEA as a GIT based code hostet solution in Altinn Studio. Gitea is a Open Source product.\nGitea host code on Github. See repository here.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-studio/repositories/",
	"title": "Solution components Altinn Studio Repositories",
	"tags": ["solution", "architecture"],
	"description": "In Altinn Studio Repositories you find the functional components related to source control and access management of the application developer",
	"content": " Application Repositories In Altinn Studio Repositories the developer find all repostiries for different organization and in every reporistory the source code for all apps are located\nGIT Based source control The app developer can use the source control to clone, comitt, pull and other GIT related functionality.\nThe app developer can view the application repository\nAuthentication The login functionality for Altinn Studio is located in repositories\nUser Profile User profile in Altinn Studio Repostories lets the app developer manage its user profile\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/routing/",
	"title": "Application Architecture Routing",
	"tags": [],
	"description": "Descripton of the Application Architecture for the Routing Application",
	"content": " Routing in Altinn Apps are done by Traefik. See Traefik documentation for detailed architecture information\nConfiguration "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/",
	"title": "Routing",
	"tags": ["development", "routing"],
	"description": "Information about routing",
	"content": " Routing \rNginx routing\rInformation about routing with nginx\n\r\rTraefik routing\r\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/shared/security/",
	"title": "Security Enforcement Capabilities",
	"tags": ["architecture", "security", "runtime capabilities"],
	"description": "Description of the Altinn Studio, Altinn Apps, Altinn Platform security architecture providing runtime capabilities for the solutions.",
	"content": "For a solutions like Altinn Studio, Altinn Apps and Altinn Platform security is a important aspect.\nThe security architecture is based on the following reference model\n\rJWTCookieAuthentication\rDescription of the JWTCookieAuthentication created for Altinn\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/securecoding/checklist/",
	"title": "Security Checklist",
	"tags": ["checklist", "OWASP", "security"],
	"description": "Checklist for security OWASP.",
	"content": " Design General    # Title Description     1 Do the design use the security architecture correct? Are the mechanismen like authentication and authorization used correctly?.   2 Sikrer designet    3 Vil designet gi økt fare for DOS angrep? Eksponerer funksjonalitet tunge operasjoner som kan gjentas mange ganger   4 Is it performed a treath assessment for the change? Hvilke nye risikoer introdusereres ved hjelp av endringen Muligheter for tilgang til data? Manipulering av data     "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/serviceimplementation/",
	"title": "ServiceImplementation.cs",
	"tags": ["app-structure"],
	"description": "Beskrivelse av format for tjenesteimplementasjonen",
	"content": " Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes videre med i MVP.\n\rOverordnet \u0026lsquo;ServiceImplementation.cs\u0026rsquo; er hovedgrensesnittet mellom Altinn Core runtime og foretningslogikken i tjenesten som kjører på server.\nFormat \u0026lsquo;ServiceImplementation.cs\u0026rsquo; implementerer grensesnittet IServiceImplementation som har følgende metoder definert.\nobject CreateNewServiceModel(); Metode som oppretter nytt datamodell objekt basert på den datamodellen som tjenesten definerer\nvoid SetServiceModel(object model); Metode som gjør at plattformen kan tilgjengeliggjøre en populert datamodell til tjenesteimplementasjonen\nvoid SetContext(RequestContext requestContext, dynamic viewBag); Metode som setter context informasjon til tjenesteimplementasjon\nvoid SetContext(RequestContext requestContext, dynamic viewBag, ServiceContext serviceContext, StartServiceModel startServiceModel, ModelStateDictionary modelState); Metode som setter context informasjon til tjenesteimplementasjon\nTask RunServiceEvent(ServiceEventType serviceEvent); Metode som trigger en tjeneste hendelse. Dette gjør plattformen ved spesielle tidspunkt og tjenesteutvikler kan da velge å kjøre forretningslogikk under dise hendelsene.\nHendelsene som er definert til nå er.\n BeforeRender Calculation Instantiation ValidateInstantiation Validation DataRetrieval  void SetPlatformServices(IPlatformServices platformServices); Tilgjengeligjør plattformtjenester.\nViewMetadata GetView(string viewID, UserActionType userAction); Henter view. TODO: Vurder å fjerne dette når man har konkludert om MVC Razor views skal støttes av plattformen.\nUtvikling Under opprettelse av en tjeneste vil en tom ServiceImplementasjonsklasse opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\nForretningslogikk Foretningslogikk implementeres i denne klassen eller andre relatert klasser som denne referer til. Det vil være opp til utvikler å eventuelt skille kode ut i flere andre klasser.\nTjenester 3.0 oppretter egne klasser for forretningslogikk tilknyttet kalkuleringer, valideringer og instansiering.\nEksempel på forretningslogikk\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/servicemetadata/",
	"title": "ServiceMetadata.json",
	"tags": ["app-structure"],
	"description": "Beskrivelse av format for ServiceMetadata",
	"content": " Overordnet \u0026lsquo;ServiceMetadata.json\u0026rsquo; beskriver datamodellen til et skjema. Den autogenereres fra XSD.\nFormat \u0026lsquo;ServiceMetadata.json\u0026rsquo; inneholder informasjon om alle felter i en datamodell. ServiceModell vil genereres fra denne. Hvis man ønsker å overstyre egenskaper fra XSD så kan det gjøres her.\nTODO: Det er en rekke ting som er uavklart om hva man vil kunne gjøre av endringer på denne.\nEksempel Under er et eksempel på hvordan ServiceMetadata kan se ut\n{ \u0026quot;Org\u0026quot;:\u0026quot;BR\u0026quot;, \u0026quot;Service\u0026quot;:\u0026quot;Tjeneste1\u0026quot;, \u0026quot;Edition\u0026quot;:\u0026quot;2019\u0026quot;, \u0026quot;Elements\u0026quot;:{ \u0026quot;Skjema.skjemanummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.skjemanummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;skjemanummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/skjemanummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;Integer\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;skjemanummer\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;1243\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.spesifikasjonsnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.spesifikasjonsnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;spesifikasjonsnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/spesifikasjonsnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;Integer\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;spesifikasjonsnummer\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;10702\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.blankettnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.blankettnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;blankettnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/blankettnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;blankettnummer\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;RF-1117\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.tittel\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.tittel\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;tittel\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/tittel\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;tittel\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;Klage p� likningen\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5800\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.etatid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.etatid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;etatid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/etatid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;etatid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5801\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5802\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25795\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverNavnPreutfylt.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;175\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25795.OppgavegiverNavnPreutfylt.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25795.OppgavegiverNavnPreutfylt.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;OppgavegiverNavnPreutfylt-datadef-25795\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25796\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;500\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25796.OppgavegiverAdressePreutfylt.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25796.OppgavegiverAdressePreutfylt.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;OppgavegiverAdressePreutfylt-datadef-25796\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25797\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverPostnummerPreutfylt.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;length\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;4\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;pattern\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;[0-9]{4}\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25797.OppgavegiverPostnummerPreutfylt.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25797.OppgavegiverPostnummerPreutfylt.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;OppgavegiverPostnummerPreutfylt-datadef-25797\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25798\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverPoststedPreutfylt.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;35\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25798.OppgavegiverPoststedPreutfylt.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25798.OppgavegiverPoststedPreutfylt.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;OppgavegiverPoststedPreutfylt-datadef-25798\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;26\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverFodselsnummer.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;length\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;11\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;26.OppgavegiverFodselsnummer.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;26.OppgavegiverFodselsnummer.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;OppgavegiverFodselsnummer\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;OppgavegiverFodselsnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverFodselsnummer\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;OppgavegiverFodselsnummer-datadef-26\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;18\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.enhetOrganisasjonsnummer.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;length\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;9\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;18.EnhetOrganisasjonsnummer.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;18.EnhetOrganisasjonsnummer.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.enhetOrganisasjonsnummer\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;EnhetOrganisasjonsnummer-datadef-18\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetKommunenummer/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;17\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.enhetKommunenummer.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetKommunenummer/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;length\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;4\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;pattern\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;[0-9]{4}\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;17.EnhetKommunenummer.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;17.EnhetKommunenummer.Label\u0026quot;, \u0026quot;PlaceHolder\u0026quot;:\u0026quot;17.EnhetKommunenummer.PlaceHolder\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;EnhetKommunenummer\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;EnhetKommunenummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.enhetKommunenummer\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetKommunenummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;EnhetKommunenummer-datadef-17\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;info\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;info\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:3, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;info-grp-5802\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5803\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;2\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonNavn.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;150\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Label\u0026quot;:\u0026quot;2.KontaktpersonNavn.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonNavn\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonNavn\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonNavn\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonNavn-datadef-2\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;2751\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonAdresse.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;105\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;2751.KontaktpersonAdresse.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;2751.KontaktpersonAdresse.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonAdresse\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonAdresse\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonAdresse\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonAdresse-datadef-2751\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;10441\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonPostnummer.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;length\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;4\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;pattern\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;[0-9]{4}\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;10441.KontaktpersonPostnummer.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;10441.KontaktpersonPostnummer.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonPostnummer\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonPostnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonPostnummer\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonPostnummer-datadef-10441\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;10442\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonPoststed.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;35\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;10442.KontaktpersonPoststed.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;10442.KontaktpersonPoststed.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonPoststed\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonPoststed\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonPoststed\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonPoststed-datadef-10442\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;27688\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonEPost.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;45\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;27688.KontaktpersonEPost.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;27688.KontaktpersonEPost.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonEPost\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonEPost\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonEPost\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonEPost-datadef-27688\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;3\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonTelefonnummer.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;13\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;3.KontaktpersonTelefonnummer.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;3.KontaktpersonTelefonnummer.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonTelefonnummer\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonTelefonnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonTelefonnummer\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonTelefonnummer-datadef-3\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;Kontakt\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;Kontakt\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ \u0026quot;Label\u0026quot;:\u0026quot;5803.Kontakt.Label\u0026quot;, \u0026quot;Help\u0026quot;:\u0026quot;5803.Kontakt.Help\u0026quot;, \u0026quot;PlaceHolder\u0026quot;:\u0026quot;5803.Kontakt.PlaceHolder\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;Kontakt-grp-5803\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5804\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25455\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klageGjeldendeInntektsar.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;GYear\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25455.KlageGjeldendeInntektsar.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25455.KlageGjeldendeInntektsar.Label\u0026quot;, \u0026quot;PlaceHolder\u0026quot;:\u0026quot;25455.KlageGjeldendeInntektsar.PlaceHolder\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KlageGjeldendeInntektsar\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KlageGjeldendeInntektsar\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klageGjeldendeInntektsar\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KlageGjeldendeInntektsar-datadef-25455\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25454\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klagemeldingSendtInnenKlagefrist.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;3\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;enumeration\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;Ja;Nei;\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25454.KlagemeldingSendtInnenKlagefrist.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25454.KlagemeldingSendtInnenKlagefrist.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KlagemeldingSendtInnenKlagefrist-datadef-25454\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25456\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klageUtloptKlagefristBegrunnelse.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1000\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25456.KlageUtloptKlagefristBegrunnelse.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25456.KlageUtloptKlagefristBegrunnelse.Label\u0026quot;, \u0026quot;PlaceHolder\u0026quot;:\u0026quot;25456.KlageUtloptKlagefristBegrunnelse.PlaceHolder\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KlageUtloptKlagefristBegrunnelse-datadef-25456\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;klagefrist\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;klagefrist\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ \u0026quot;Label\u0026quot;:\u0026quot;5804.klagefrist.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;klagefrist-grp-5804\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;Skattyterinfor\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;Skattyterinfor\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ \u0026quot;Label\u0026quot;:\u0026quot;5801.Skattyterinfor.Label\u0026quot;, \u0026quot;Help\u0026quot;:\u0026quot;5801.Skattyterinfor.Help\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;Skattyterinfor-grp-5801\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5805\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.spesifisering.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.spesifisering.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage.spesifisering\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/spesifisering/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5836\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.spesifisering.KlageSpesifisering.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.spesifisering.KlageSpesifisering.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage.spesifisering.KlageSpesifisering\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/spesifisering/KlageSpesifisering/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25457\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.spesifisering.KlageSpesifisering.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.spesifisering.KlageSpesifisering.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage.spesifisering.KlageSpesifisering\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;klage.spesifisering.klageSpesifisering.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/spesifisering/KlageSpesifisering/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1000\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25457.KlageSpesifisering.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25457.KlageSpesifisering.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.spesifisering.KlageSpesifisering\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.spesifisering.KlageSpesifisering\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage.spesifisering\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KlageSpesifisering\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KlageSpesifisering\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;klage.spesifisering.klageSpesifisering\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/spesifisering/KlageSpesifisering\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KlageSpesifisering-datadef-25457\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.spesifisering\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.spesifisering\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;spesifisering\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;spesifisering\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;klage.spesifisering\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/spesifisering\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;spesifisering-grp-5836\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;klage\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;klage\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;klage\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ \u0026quot;Label\u0026quot;:\u0026quot;5805.klage.Label\u0026quot;, \u0026quot;Help\u0026quot;:\u0026quot;5805.klage.Help\u0026quot;, \u0026quot;PlaceHolder\u0026quot;:\u0026quot;5805.klage.PlaceHolder\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;klage-grp-5805\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;ParentElement\u0026quot;:null, \u0026quot;TypeName\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false } } }  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/servicemodel/",
	"title": "ServiceModel.cs",
	"tags": ["app-structure"],
	"description": "Beskrivelse av ServiceModel.cs",
	"content": " Overordnet \u0026lsquo;ServiceModel.cs\u0026rsquo; er tjenestemodellen som automatisk genereres fra datamodellen som er valgt på tjenesten. Denne kommer i utgangspunktet fra XSD, men tjenester 3.0 vil mest sannsynlig få støtte for å definere datamodell selv.\nRuntime vil populere datamodellen med data fra GUI og forretningsregler vil kunne jobbe mot denne modellen.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/servicemodelxsd/",
	"title": "ServiceModel.xsd",
	"tags": ["app-structure"],
	"description": "Beskrivelse av ServiceModel.xsd",
	"content": " Overordnet \u0026lsquo;ServiceModel.xsd\u0026rsquo; er definasjonen på datamodellen på tjenesten. Dette er en XSD som typisk er definert i Seres eller OR i dagens Altinn løsning.\nFor tjenester 3.0 vil jobbes med å kunne definere XSD som en del av løsningen. (f.eks å definere skjema i GUI og få XSD basert på det). Dette vil avklares fremover.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/about/slide/",
	"title": "Slides",
	"tags": [],
	"description": "En presentasjon om målsettinger og konsepter for Tjenester 3.0",
	"content": " Altinn Studio Aka. \u0026ldquo;Tjenester 3.0\u0026rdquo; Dagens løsning  Produksjonsatt sommeren 2010 Basert på InfoPath og SharePoint 115.000.000 skjema fylt ut 404 aktive innsendingstjenester i 2018 Bakgrunn og mål Behov har vært kjent lenge\n POC utviklet i 2015 (men lagt på is grunnet manglende finansiering)\n Finansiering på Statsbudsjettet 2018\n Startet opp igjen våren 2018\n Hva er målet med prosjektet? En modern utviklingsplattform\n Et effektivt utviklingsverktøy\n En moderne infrastruktur\n En plattform for gjenbruk\n En platform for deling av data og erfaringer En moderne utviklingsplattform Altinn Studio er en åpen og modern utviklingsplattform\n Versjonering og samarbeid via Git\n Støtte for distribuert utvikling\n All programvare som benyttes er åpen kildekode. Også selve 3.0-plattformen.\n Funksjonalitet i Altinn tilgjengelig via API’er\n Moderne og populær teknologi, f.eks. React og Visual Studio Code\n Full selvbetjening Tekniske utviklere kan benytte best-of-breed utvikler-verktøy og teknologi, slik de er vant til.\n Et effektivt utviklingsverktøy Altinn Studio tilbyr enkel, effektiv og 100% selvbetjent utvikling og forvaltning av tjenester, også for ikke-teknologer.\n Brukergrensesnitt (GUI)\n API’er\n Arbeidsflyt\n Logikk og dynamikk\n Datamodellering\n Konfigurasjon og tilgangsstyring\n Automatisert testing\n… En moderne infrastruktur Altinn Studio (og tjenester som lages der) vil kjøre på en moderne infrastruktur.\n Docker containers for applikasjoner\n Kubernetes for orkestrering av containers\n  Dette gir isolering mellom applikasjoner (microservices), enklere skalering og understøtter “DevOps”.\n Hva kan jeg gjøre med MVP? Opprette bruker og logge inn i Altinn Studio Lage (og finne igjen) en tjeneste Finne tjenester fra andre organisasjoner Laste opp en datamodell som fungerer i tjenesten (Seres eller OR) Lage et skjemadesign med drag and drop av elementer (begrenset utvalg av komponenter) Legge inn tekster/tekstnøkler for tjeneste Legge inn regler for skjemalogikk (validering, kalkulering, dynamikk) Bruke API-oppslag i tjenesten (forutsetter Ajax kall kodet i GUI)\nEndre på standardfil for arbeidsflyt Endre på filer med versjonskontroll Legge den ferdige tjenesten i test- og produksjonsmiljø\n Tjenster 3.0 vs Tjenester 2.0 Skjemaverktøy  Egenutviklet vs InfoPath React vs SharPoint formserver Responsivt vs ikke responsivt\nArbeidsflyt BPMN vs Custom\nTjenester som API REST vs SOAP\n Individuell API vs Generelle\nRessurser Isolerte vs delte\n Raskt skalerbar vs lang leveringstid\nDataformat JSON/XML vs XML\nKontroll på logikk Full kontroll på når ting skjer i plattformen i motsetning til Infopath\nShipment Inntil videre kun pull-basert nedlasting av skjemadata.\n  Videre arbeid i MVP  Fokus på infrastruktur Skyløsninger Sikkerhet Deploy av tjenester Integrasjon med tjenesteeier Understøtte piloter Detaljer løsning Tre nye løsninger\n Altinn Studio Altinn Apps Altinn Platform   ## Altinn Studio\nAltinn Apps Altinn Platform Status Du kan følge utviklingen på Github. Motivasjon Se Archimate arkitekturmodell. The End Tilbake\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/storage/",
	"title": "Application Construction components - Storage",
	"tags": ["architecture", "solution"],
	"description": "The storage component is a asp.net core application hosted in Kubernetes as a docker container.",
	"content": " API Controllers Storage exposes functionality throug API controllers.\nThe following controllers exist\nApplications Data InstanceEvents Instances MessageboxInstances Process\nDependencie Storage components\nSee complete list of dependencies in csproj file for storage.\nDocker configuration Storage listen on port 5010.\nSee DockerFile for details.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/storage/",
	"title": "Altinn Platform - Storage",
	"tags": ["architecture", "solution", "platform"],
	"description": "Description of the application architecture for Storage component",
	"content": " The Storage component exposes a REST-API to Altinn Apps.\nStorage provides persistent storage service for applications in Altinn. It is mostly used by the app-backend to store information about instances and their data elements. It provides a registry of all applications metadata, data types and events. It is also intended to be used by organisations and other clients to read data.\nResources: Instance, Application, DataType, ApplicationLogic, InstanceEvent, ApplicationEvent, MessageBoxInstance, ProcessHistory\n\nInstance An application instance is created when a instance owner (reportee) starts a process in an Altinn application. An instance replaces Altinn2 Message. An instanceOwner is a person/company that reports information via Altinn. An appId refers to the application information element which defines the metadata about the application.\n{ \u0026quot;id\u0026quot;: \u0026quot;60238/762011d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;appId\u0026quot;: \u0026quot;test/sailor\u0026quot;, \u0026quot;org\u0026quot;: \u0026quot;test\u0026quot;, \u0026quot;instanceOwner\u0026quot;: { \u0026quot;partyId\u0026quot;: \u0026quot;60238\u0026quot; }, \u0026quot;created\u0026quot;: \u0026quot;2019-03-06T13:46:48.6882148+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;user32\u0026quot;, \u0026quot;lastChanged\u0026quot;: \u0026quot;2019-03-07T23:59:49+01:00\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;user34\u0026quot;, \u0026quot;dueBefore\u0026quot;: \u0026quot;2019-06-10T00:00:00.00Z\u0026quot;, \u0026quot;visibleAfter\u0026quot;: null, \u0026quot;title\u0026quot;: { \u0026quot;nb\u0026quot;: \u0026quot;Færder påmelding 2019\u0026quot;, \u0026quot;en\u0026quot;: \u0026quot;Fearder Race Registration 2019\u0026quot; }, \u0026quot;process\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2019-09-25T09:32:44.20Z\u0026quot;, \u0026quot;currentTask\u0026quot;: { \u0026quot;started\u0026quot;: \u0026quot;2019-10-10T32:22.00Z\u0026quot;, \u0026quot;elementId\u0026quot;: \u0026quot;Data_1\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Fyll ut\u0026quot;, \u0026quot;altinnTaskType\u0026quot;: \u0026quot;data\u0026quot;, \u0026quot;validated\u0026quot;: { \u0026quot;timestamp\u0026quot;: \u0026quot;2019-10-04T12:00.00Z\u0026quot;, \u0026quot;canCompleteTask\u0026quot;: true } } }, \u0026quot;status\u0026quot;: { \u0026quot;softDeleted\u0026quot;: null, \u0026quot;archived\u0026quot;: \u0026quot;2019-12-20T20:30:33.233Z\u0026quot;, \u0026quot;hardDelete\u0026quot;: null, }, \u0026quot;appOwner\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;xyz\u0026quot;, \u0026quot;importantUser\u0026quot;], \u0026quot;message\u0026quot;: { \u0026quot;nb\u0026quot;: \u0026quot;field 32 is incorrect\u0026quot;, \u0026quot;at\u0026quot;: \u0026quot;2018-12-22\u0026quot;} }, \u0026quot;data\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;boatdata\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;application/json\u0026quot;, \u0026quot;blobStoragePath\u0026quot;: \u0026quot;test/sailor/60238/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff.json\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;davidsyacht.json\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2019-03-06T15:00:23+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;size\u0026quot;: 2003, \u0026quot;locked\u0026quot;: true }, { \u0026quot;id\u0026quot;: \u0026quot;999911d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;crewlist\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;text/xml\u0026quot;, \u0026quot;blobStoragePath\u0026quot;: \u0026quot;test/sailor/60238/762011d1-d341-4c0a-8641-d8a104e83d30/data/999911d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;crewLIst.xml\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2019-03-07T23:59:49+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;lastChanged\u0026quot;: \u0026quot;2019-03-10T23:59:49+01:00\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;XXX\u0026quot; } ] }  Instance type    Attribute Type Description User Owner App Storage     id string unique id    C   appId string application id    C   instanceOwner.partyId integer id of instance owner C C     appOwner.labels string[] array of string labels  C     create dateTime creation time    C   createdBy string user id    C   lastChanged dateTime? last changed time    C   lastChangedBy string user id    C   dueBefore dateTime? deadline for submit  CU     visibleAfter dateTime? when visible for user  CU     title string text shown in inbox  CU U    process ProcessState process state info   U (U)   userStatus InboxStatus statuses that the user can change U      instance InstanceState data on delete and archive state of the instance   U C   appOwner AppOwnerState status from app owner  CU     data List data elements   CU     C - creation time, U - can be updated\nOperations Create a new instance of an app for a given instance owner. Post with query params that identifies the appId and the instance owner. An instance object can be sent as json data to set certian values.\nPOST /instances?appId=test/sailor { \u0026quot;instanceOwner\u0026quot;: { \u0026quot;partyId\u0026quot;: \u0026quot;60238\u0026quot; }}  Get information about one instance.\nGET /instances/{instanceId}  Get (query) all instances that an instance owner has\nGET /instances/{instanceOwnerPartyId}  Query all instances of an application owner\u0026rsquo;s organisation\nGET /instances?org={org}  Delete a specific instance (also deletes its data).\nDELETE /instances/{instanceId}  Data service A data element is a file that contains a specific form element of an instance. It may be structured file, e.g. json, xml, or it may be a binary file, e.g. pdf. The application metadata restricts the types of form elements that are allowed {dataType}.\nGet a specific data element\nGET /instances/{instanceId}/data/{dataId}  Post to create a specific data element. Content a file (as MultipartContent). After success the instance\u0026rsquo;s data section is updated, with the appropriate dataId guid that is used to identify the specific data element\nPOST /instances/{instanceId}/data?dataType={dataType}  Put to replace a specific data element. Delete to remove data element.\nPUT /instances/{instanceId}/data/{dataId}  Notice that PDFs, such as receipts or simmilar, is handled the same way as data elements.\nApplication Application metadata used to validate data element types in instances. And to provide application events.\nResource: /applications/test/sailor\n{ \u0026quot;id\u0026quot;: \u0026quot;test/sailor\u0026quot;, \u0026quot;versionId\u0026quot;: \u0026quot;v32.23-xyp\u0026quot;, \u0026quot;org\u0026quot;: \u0026quot;test\u0026quot;, \u0026quot;app\u0026quot;: \u0026quot;sailor\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2019-03-06T13:46:48.6882148+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;title\u0026quot;: { \u0026quot;nb\u0026quot;: \u0026quot;Testapplikasjon\u0026quot;, \u0026quot;en\u0026quot;: \u0026quot;Test Application\u0026quot; }, \u0026quot;processId\u0026quot;: \u0026quot;standard\u0026quot;, \u0026quot;validFrom\u0026quot;: \u0026quot;2019-04-01T12:14:22+01:00\u0026quot;, \u0026quot;validTo\u0026quot;: null, \u0026quot;maxSize\u0026quot;: null, \u0026quot;dataTypes\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;boatdata\u0026quot;, \u0026quot;description\u0026quot;: {\u0026quot;nb\u0026quot;: \u0026quot;Båtdata\u0026quot;, \u0026quot;en\u0026quot;: \u0026quot;Boat data\u0026quot;}, \u0026quot;allowedContentTypes\u0026quot;: [\u0026quot;application/json\u0026quot;], \u0026quot;taskId\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;appLogic\u0026quot;: { \u0026quot;autoCreate\u0026quot;: true, \u0026quot;classRef\u0026quot;: \u0026quot;Skjema\u0026quot;, \u0026quot;schemaRef\u0026quot;: \u0026quot;schemas/boatname\u0026quot; }, \u0026quot;maxSize\u0026quot;: 200000, \u0026quot;maxCount\u0026quot;: 1 }, { \u0026quot;id\u0026quot;: \u0026quot;crewlist\u0026quot;, \u0026quot;allowedContentTypes\u0026quot;: [\u0026quot;application/xml\u0026quot;], \u0026quot;taskId\u0026quot;: \u0026quot;Task_2\u0026quot;, \u0026quot;appLogic\u0026quot;: { \u0026quot;autoCreate\u0026quot;: false, \u0026quot;classRef\u0026quot;: \u0026quot;CrewList\u0026quot;, \u0026quot;schemaRef\u0026quot;: \u0026quot;schemas/crewlist\u0026quot; }, \u0026quot;maxSize\u0026quot;: null, \u0026quot;minCount\u0026quot;: 1, \u0026quot;maxCount\u0026quot;: 3 }, { \u0026quot;id\u0026quot;: \u0026quot;certificate\u0026quot;, \u0026quot;allowedContentType\u0026quot;: [\u0026quot;application/pdf\u0026quot;], \u0026quot;appLogic\u0026quot;: null, \u0026quot;maxSize\u0026quot;: null, \u0026quot;maxCount\u0026quot;: 1 } ] }  Application type    Property Type Description     id string application id   versionId string release or commit id   processId string application process id   title LanguageString[] application title in different languages   validFrom dateTime when the application is valid from   validTo dateTime? when the application is valid to   dataTypes DataType[] Metadata about data requirements in the application. See DataType.   maxSize integer the maximum number of bytes that the data elements can have    DataType The DataType model represents data requirements for an application for different process tasks.\n   Property Type Description     id string Required. Id of the data type.   description LanguageString[] A short description of the data type. Language support.   allowedContentTypes string[] A list of allowed content types.   allowedContributers string[] A list of allowed contributers. On the format \u0026lsquo;{keyword}:{value}\u0026rsquo; Approved keywords are: org and orgno.   taskId string Required. Associated task from the process definition. Defines that the data is required to progress to next task in a process.   appLogic ApplicationLogic Data object that connect data to application models. This should be null for data types describing attachments. See ApplicationLogic.   maxSize int Maximum allowed size of a data item of this type. Undefined means that the limit is unbounded.   maxCount int Maximum allowed data item count of this type. Zero or below indicate unbounded.   minCount int Minimum number of data items of this type. Zero or below indicate that the data type is optional.    Example { \u0026quot;id\u0026quot;: \u0026quot;receipt\u0026quot;, \u0026quot;allowedContentTypes\u0026quot;: [\u0026quot;image/jpeg\u0026quot;, \u0026quot;image/png\u0026quot;], \u0026quot;taskId\u0026quot;: \u0026quot;Task_1\u0026quot;, \u0026quot;appLogic\u0026quot;: null, \u0026quot;maxSize\u0026quot;: 20, \u0026quot;minCount\u0026quot;: 1, \u0026quot;maxCount\u0026quot;: 3 }  In order to complete process task Task_1 the user must upload at least one image. It can be either a jpg or png below 20 MB. The user is allowed to upload additional 2 images. The application does not have any business logic associated with the data type.\nApplicationLogic The ApplicationLogic model describes the connection between a data type and a corresponding data model in the application. This is required for all data types associated with an XSD or JSON Schema. In most cases it also implies that there is a UI with a form the user can fill in.\n   Property Type Description     autoCreate bool Indicate that the application should automatically create a data item of this type with every new application instance.   classRef string Reference to the class definition representing the data model.   schemaRef string Reference to the XSD or JSON schema.    Operations Get a list of all Applications\nGET /applications  Get metadata about a specific application\nGET /applications/{appId}  Get application events.\nGET /applications/{appId}/events  InstanceEvent User actions on an instance trigger instance events such as created, saved, _submitted, deleted, and undeleted. The events are associated with an instance, a user and an instance owner and generated by the application and stored in CosmosDB.\nFormat of the JSON object stored in the database.\n{ \u0026quot;id\u0026quot;:\u0026quot;6dff32bc-0928-4ae8-937c-b362d6941c89\u0026quot;, \u0026quot;instanceId\u0026quot;: \u0026quot;60238/5c6b1a71-2e1f-447a-ae2f-d1807dcffbfb\u0026quot;, \u0026quot;eventType\u0026quot;: \u0026quot;deleted\u0026quot;, \u0026quot;created\u0026quot;: \u0026quot;2019-05-02T13:08:21.981476Z\u0026quot;, \u0026quot;instanceOwnerPartyId\u0026quot;: \u0026quot;60238\u0026quot;, \u0026quot;user\u0026quot;: { \u0026quot;userId\u0026quot;: 3, \u0026quot;authenticationLevel\u0026quot;: 1, \u0026quot;enduserSystemId\u0026quot;: 2 } }  Instance Event type    Attribute Type Description     id Guid? Id set by CosmosDB when the instance event is stored   instanceId string {instanceOwnerPartyId}/{instanceGuid}   dataId string Id of data element if event is related to a data element.   created DateTime? DateTime set by CosmosDB when the event is stored   eventType string the event type. Available instance event types are listed here   instanceOwnerPartyId string the instance owner id   user.userId int? the user who triggered the event   user.authenticationLevel int the authentication level for the user or system that triggered the event   user.endUserSystemId int? the end user system that triggered the event   process ProcessState the process step during which the event occured    Operations GET /instances/{instanceId}/events  Create an event. POST with body. Note id and createDateTime is set by the system and should not be included in the json object.\nPOST /instances/{instanceId}/events  Get all instance events for a specific instance.\nGET /instances/{instanceId}/events  Get all instance events for a specific instance filtered by event types\nGET /instances/{instanceId}/events?eventTypes={eventTypeA},{eventTypeB}  Get all instance events for a specific instance within a time frame The times are strings defined in UTC-format. E.g. \u0026ldquo;2019-05-03T12:55:23\u0026rdquo;\nGET /instances/{instanceId}/events?from={fromtime}\u0026amp;to={totime}  Get all instance events for a specific instance within a time frame filtered by event types\nGET /instances/{instanceId}/events?from={fromtime}\u0026amp;to={totime}\u0026amp;eventTypes={eventTypeA},{eventTypeB}  Delete all instance events for a specific instance. DELETE request.\nDELETE /instances/{instanceId}/events  MessageBoxInstance A message box instance is a compressed instance object stripped for data that is not relevant for the Altinn II message box. In addition some properties from the application metadata such as application title are included in the object.\nMessageBoxInstance type    Attribute Type Description     id string unique id (corrresponds to instance guid)   instanceOwnerId integer id of instance owner   org string Application owner for the app   appName string name of the application   title string title of the application in language defined in the request   processCurrentTask string current task in the process state   createDateTime dateTime creation time   lastChangedBy string user id of the user who last changed the instance   lastChangedBy string user id   dueDateTime dateTime? deadline for submit   bool allowDelete is current user allowed to delete instance   bool authorizedForWrite is current user allowed to write to edit the instance   deletedDateTime dateTime? date the instance was deleted   archivedDateTime dateTime? date the instance was archived    Operations Get a single instance in message box instance format in (optional) preffered language. Default lanugage is norsk bokmål (nb). Available language specifications: en, nb, nn-NO.\nGET /sbl/instances/{instanceOwnerPartyId}/{instanceId}?language={languageId}  Get list of all instances for an instance owner in a specific state, with a visible dateTime that has passed and (optional) preffered language. Available states: active, deleted, archived. Available language specifications: en, nb, nn-NO.\nGET /sbl/instances/{instanceOwnerPartyId}?state={instanceState}\u0026amp;language={languageId}  Mark an instance for deletion in storage. Set parameter hard equal to true or false to indicate soft or hard deletion. Calling this endpoint will not the delete the instance from Storage, simply mark is as deleted.\nDELETE /sbl/instances/{instanceOwnerPartyId}/{instanceId}?hard={true/false}  Restore a soft deleted instance.\nPUT /sbl/instances/{instanceOwnerPartyId}/{instanceId}/undelete  ProcessHistory The process history is a list comprised of process history events for a given instance.\nProcessHistoryItem type    Attribute Type Description     EventType string the event type. Available process event types are listed here with the prefix _process__   ElementId string element id for the process flow step   Occured DateTime? event occurence time   Started DateTime? task start time   Ended DateTime? task end time    Operations Get process history for a given instance\nGET /instances/{instanceOwnerPartyId}/{instanceId}/process/history  Texts Represents text resources for an application.\nText type    Property Type Description     id string text id {org-app-language}. Only used internally for storage purposes. Auto generated.   language string the language. Two letter ISO name.   org string the org. Only used internally for storage purposes. Auto generated.   resources TextResource[] list of text resources    the id and org fields are generated by the system, and should not be included when using POST the text resource object. Example of an text element that should be sent during a POST:\n{ \u0026quot;language\u0026quot;: \u0026quot;nb\u0026quot;, \u0026quot;resources:\u0026quot;: [ {\u0026quot;id\u0026quot;: \u0026quot;some_id\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;some value\u0026quot;}, {\u0026quot;id\u0026quot;: \u0026quot;some_other_id\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;some other value\u0026quot;}, {\u0026quot;id\u0026quot;: \u0026quot;yet_another_id\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Text containing two variables: {0} and {1}.\u0026quot;, \u0026quot;variables\u0026quot;:[ { \u0026quot;key\u0026quot;: \u0026quot;dataSouce.TextKey_1\u0026quot;, \u0026quot;dataSource\u0026quot;: \u0026quot;dataModel.dataModelName\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;dataSouce.TextKey_2\u0026quot;, \u0026quot;dataSource\u0026quot;: \u0026quot;dataModel.dataModelName\u0026quot; }] } ] }  TextResource type    Property Type Description     id string text resource id (for instance schema.postplace)   value string the value   variables list\u0026lt;TextResourceVariable\u0026gt; list of text resource variables.    TextResourceVariable type    Property Type Description     key string the key for the text resource variable   dataSource string the datasource for the text resource variable. Allowed prefix: \u0026ldquo;dataModel\u0026rdquo;    Operations Create a new text resource for an application.\nPOST /applications/{appId}/texts  Get a specific text resource for an application.\nGET /applications/{appId}/texts/{language}  Update a specific text resource for an application.\nPUT /applications/{appId}/texts/{language}  Delete a specific text resource for an application.\nDELETE /applications/{appId}/texts/{language}  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/",
	"title": "Data Structure for Repos",
	"tags": ["altinn-repos", "arkitektur"],
	"description": "Struktur for repositories og filer i Gitea.",
	"content": " Under arbeid\u0026hellip; Her må det gjøres en større opprydding i filstrukturen.\n\rOverordnet struktur Gitea\n├── \raltinn\n│ ├── \rcommon\n│ │ ├── \rtext \u0026hellip;\n│ │ └── \rwidgets \u0026hellip;\n│ │ └── README.md\n│ ├── \rcodelists\n│ │ ├── \rcountries.json\n│ │ └── \r\u0026hellip;\n│ │ └── README.md\n│ └── \r\u0026hellip;\n│\n├── \rorg-x\n│ ├── \rorg-x\n│ │ ├── \rsettings.json\n│ │ ├── \rtext \u0026hellip;\n│ │ └── \rwidgets \u0026hellip;\n│ │\n│ ├── \rcodelists\n│ │ ├── \rkodeliste1.json\n│ │ └── \r\u0026hellip;\n│ │\n│ ├── \rtjeneste-1\n│ │ ├── \rDeployment (helm)\n│ │ │ ├── \rtemplates\n│ │ │ │ ├── \r_helpers.tpl\n│ │ │ │ ├── \rdeployment.yaml\n│ │ │ │ ├── \ringress.yaml\n│ │ │ │ ├── \rNOTES\n│ │ │ │ └── \rservice.yaml\n│ │ │ ├── \r.helmignore\n│ │ │ ├── \rChart.yaml\n│ │ │ └── \rvalues.yaml\n│ │ ├── \rImplementation\n│ │ │ ├── \rCalculation\n│ │ │ │ └── \rCalculationHandler.cs\n│ │ │ ├── \rInstantiationHandler.cs\n│ │ │ ├── \rServiceImplementation.cs\n│ │ │ └── \rValidationHandler.cs\n│ │ ├── \rMetadata\n│ │ │ ├── \rapplicationmetadata.json\n│ │ │ ├── \rServiceMetadata.json\n│ │ │ └── \rworkflow.json\n│ │ ├── \rModel\n│ │ │ ├── \rServiceModel.xsd\n│ │ │ └── \rServiceModel.cs\n│ │ ├── \rResources\n│ │ │ ├── \rDynamics\n│ │ │ │ └── \rRuleHandler.js\n│ │ │ ├── \rStyles.json\n│ │ │ ├── \rreact-app.css\n│ │ │ ├── \rreact-app.js\n│ │ │ ├── \rFormLayout.json\n│ │ │ ├── \rServiceConfigurations.json\n│ │ │ ├── \rresource.nb-NO.json\n│ │ │ └── \rresource.nn-NO.json\n│ │ ├── \rTest (used for runtime)\n│ │ ├── \rTestdataforparty (used for runtime)\n│ │ │ ├──\r\ruser1\n│ │ │ │ ├──\r\rinstance1\n│ │ │ │ │ ├──\r\rinstance1.json\n│ │ │ │ │ ├──\r\rinstance1.state.json\n│ │ │ │ │ ├──\r\rdata\n│ │ │ │ │ │ ├──\r\rdata-id1\n│ │ │ │ │ │ │ ├──\r\rdata-id1.xml\n│ │ │ │ │ │ ├──\r\rdata-id\u0026hellip;\n│ │ ├── \rWorkflow\n│ │ │ └── \rworkflow.bpmn (BPMN)\n│ │ ├── \rAltinnService.csproj\n│ │ ├── \rconfig.json\n│ │ ├── .gitignore\n│ │ ├── LICENSE\n│ │ └── README.md\n│ │\n│ └── \rtjeneste-2 \u0026hellip;\n│\n├── \rorg-y\n│ ├── \rorg-y \u0026hellip;\n│ └── \r\u0026hellip;\n│\n├── \rbruker-a\n│ └── \rtjeneste-1 (fork av org-x/tjeneste-1)\n├── \rbruker-b \u0026hellip;\n│\n├── \rAlle organisasjoner\n├── \rAlle repos\n└── \rAlle brukere\n\rServiceConfigurations.json\rBeskrivelse av format for tjeneste konfigurasjons filen\n\r\rRuleHandler.js\rBeskrivelse av format for rule handler js filen\n\r\rAltinnService.csproj\rDescription for AltinnService.csproj file\n\r\rCalculationHandler.cs\rBeskrivelse av format for calculation handler\n\r\rFormLayout.json\rBeskrivelse av format for skjema-layout\n\r\rInstansiationHandler.cs\rBeskrivelse av format for InstansiationHandler\n\r\rServiceImplementation.cs\rBeskrivelse av format for tjenesteimplementasjonen\n\r\rServiceMetadata.json\rBeskrivelse av format for ServiceMetadata\n\r\rServiceModel.cs\rBeskrivelse av ServiceModel.cs\n\r\rServiceModel.xsd\rBeskrivelse av ServiceModel.xsd\n\r\rValidationHandler.cs\rBeskrivelse av format for ValidationHandler\n\r\rapplicationmetadata.json\rDescription of format for application metadata\n\r\rreact-app.js\rBeskrivelse av React-App.js\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/styling/",
	"title": "Styling (css)",
	"tags": ["development", "front-end", "styling"],
	"description": "Guidelines for styling components in Altinn Studio",
	"content": " Summary Styling in React is done per component using a combination of Material-UI and compatible JSS.\n Components shall not be styled with CSS classes in .CSS files.\n Different component types should use different styling methods, or a combination.\nProposed order of styling methods The following order is proposed when considering styling methods:\n Styled Components (Accepts props, logic, theming) Material-UI\u0026rsquo;s JSS (Accepts theming) Inline Styling, the React way (Accepts props, logic, theming. Not directly compatible with Material-UI)  Shared Components Shared components should utilize \u0026ldquo;Styled Components\u0026rdquo; which can write Props directly in the CSS styling. The alternative way is handling styling via props is leveraging \u0026ldquo;inline styling\u0026rdquo; combined with Material-UI\u0026rsquo;s JSS. When using inline styling, the component\u0026rsquo;s styling will be configured in two different places. Inline style example\n\u0026lt;FormControl fullWidth={true} style={{ width: this.props.width ? this.props.width : null, }} \u0026gt;  Styled Components example\nconst theme = createMuiTheme(altinnTheme); const StyledPopper = styled(({ ...otherProps }) =\u0026gt; ( \u0026lt;Popper {...otherProps} /\u0026gt; ))` color: ${theme.altinnPalette.primary.black}; background: ${theme.altinnPalette.primary.redLight}; border-radius: 0; box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.25); font-size: 16px; padding: 24px; max-width: 550px; margin-top: 10px; z-index: ${(props) =\u0026gt; props.zIndex || 1} `; class AltinnPopper extends React.Component\u0026lt;IAltinnPopperComponentProvidedProps, IAltinnPopperComponentState\u0026gt; { public render() { const open = Boolean(this.props.anchorEl); return ( \u0026lt;StyledPopper open={open} anchorEl={this.props.anchorEl} placement={'bottom-start'} \u0026gt; {this.props.message} \u0026lt;/StyledPopper\u0026gt; ); } } export default AltinnPopper;  Exception There will be examples where \u0026ldquo;Styled Components\u0026rdquo; are hard to configure using some of Material-UI\u0026rsquo;s components where \u0026ldquo;Props\u0026rdquo; with styling needs to be passed down to sub-components. Then the regular CreateStyles method from Material-UI needs to be leveraged and can be used in a combination with Styled Components.\nStyled object example\nconst styles = { searchBoxInput: { fontSize: '16px', color: '#000000', padding: '6px', }, searchBoxIcon: { color: '#000000', fontSize: '30px', marginRight: '10px', }, };  React component, with Styled Component AND \u0026lsquo;classes.searchBoxInput\u0026rsquo; from Styled Object example above.\nclass AltinnSearchInput extends React.Component\u0026lt;IAltinnSearchInputComponentProvidedProps, IAltinnSearchInputComponentState\u0026gt; { public render() { const { classes } = this.props; return ( \u0026lt;StyledFormControl id='StyledForm' fullWidth={true} \u0026gt; \u0026lt;TextField id={this.props.id} placeholder={this.props.placeholder} onChange={this.props.onChangeFunction} InputProps={{ disableUnderline: true, startAdornment: \u0026lt;InputAdornment position={'end'} classes={{ root: classNames(classes.searchBoxIcon) }} \u0026gt; \u0026lt;i className={'ai ai-search'} /\u0026gt; \u0026lt;/InputAdornment\u0026gt;, classes: { root: classNames(classes.searchBoxInput) }, }} /\u0026gt; \u0026lt;/StyledFormControl\u0026gt; ); } } export default withStyles(styles)(AltinnSearchInput);  Contained Components Contained components are React components which are not shared in other parts of the React application. It\u0026rsquo;s encouraged to consider the styling order above.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/traefik/tls-configuration/",
	"title": "TLS in Traefik 2.0",
	"tags": ["development", "routing", "traefik", "tls"],
	"description": "How to set up TLS",
	"content": " TLS sertificates stored as secrets on the cluster apiVersion: v1 kind: Secret metadata: name: altinn-tls-secret data: tls.crt: [[BASE 64 ENCODED CERTIFICATE]] tls.key: [[BASE 64 ENCODED PRIVATE KEY]]  TLS Options To set up TLS options we need to use the custom resource TLSOption. A basic set up of this is:\napiVersion: traefik.containo.us/v1alpha1 kind: TLSOption metadata: name: altinn-tls-options namespace: default spec: minVersion: VersionTLS12  Adding TLS to an Ingress Route Add a tls attribute to the spec if the ingress route, with secretName (secret that contains the TLS certificate and private key) and optionally a options-attribute with the name of the TLSOption we made and the namespace (if nothing is specified when creating the secret it would be in the default namespace).\napiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: altinn-runtime spec: entryPoints: - web - websecure routes: - match: Host(`dev.altinn.studio`) # priority: 25 kind: Rule services: - name: altinn-runtime port: 5005 tls: secretName: altinn-tls-secret options: #Optional name: altinn-tls-options namespace: default  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/terms/",
	"title": "Terms",
	"tags": [],
	"description": "Description of the most common terms used in the documentation for Altinn Studio.",
	"content": " Actor A actor is organisation or person that a user/system is acting on behalf of. As an example User A can fill out a form on behalf of Organisation B.\ndeprecated term: Reportee\nActor List The Actor list is a list over person and organisation that a user can act on behalf of. This right is given through roles or rights delegations.\ndeprecated term: ReporteeList\nActor Type The type a Actor can be. Typical a person or organisation but also sub types of organisations.\ndeprecated term: Reportee Type\nActor Type Requirement The requirent a app has for the Actor. Typical checked when a app is instantiated\ndeprecated term: Reportee Type Requirement\nAltinn Norways E-Governement plattform. Launched december 4. 2003. Read more on altinn.no\nAltinn Apps Altinn Apps is the infrastructures for running apps developed in Altinn Studio. Each organisation that is using Altinn Studio will have their own Altinn Apps Kubernetes cluster, isolated from other organisations.\nSee Altinn Apps application architecture or deployment architecture.\nAltinn CLI The command-line interface for the new APIs in Altinn.\nIs used by service owners for retrieving data submitted by users, for instantiating and for updating status.\nhttps://github.com/altinn/alinn-cli/\nAltinn Platform Altinn Platform contains reusable microservices with functionality that can be used by apps. Platform can also be used directly by service owner systems using Altinn CLI and Maskinporten.\nCurrently these microservices are part of Platform: Authorization, Authentication, PDF, Profile, Register, and Storage.\nAltinn Platform is running in its own Kubernetes cluster.\nSee Altinn Platform solution architecture, application architecture and [deployment architecture]\nAltinn environment An Altinn environment is a isolated group of several Altinn solutions functioning together.\n AT - Acceptance testing of Altinn Studio, Altinn Apps, Altinn Platform and SBL. TT02 - App/service test environment used by the app and service owners. Production - The production environment.  Altinn Studio Altinn Studio are our tools for app development.\nConsists of Altinn Studio Designer, Altinn Studio Repos and a local code editor / development tool (e.g. Visual Studio Code).\nLets the developers create, edit, test and deploy applications. The apps are deployed as containers to a seperate infrastructure called Altinn Apps.\nhttps://altinn.studio\nAltinn Studio Designer Altinn Studio Designer is a web-based tool for creating, editing and deploying apps.\nIn Designer, it should be easy to create apps by re-using and configuring pre-made components.\nAltinn Studio Repos Altinn Studio Repos is the solution where each app is stored and versioned as a Git repository.\nNo matter which tool is used for development (Designer, Code, or something else), the app is stored in Repos.\nApi Application Programmers Interface.\nApp Short for Application. App is the name that is given for an app. It is used as repository name and as part of AppId and in different metadata. Inside an org the app needs to be a unique name. See also Application.\nDeprecated terms: AppName Service\nAppId A AppId identifies a given application. It is has the following pattern [org]/[app-name]. The app-name is the same as the name of the name of the app repo.\nApplication An applications created in Altinn Studio is called an app, short for application. Apps are deployed to a Altinn Apps environment. The app provides two things:\n an interactive user interface for users wishing to submit data to an organisation, e.g. to fill out a form manually, to read information or to sign an agreement; an api that client applications can interact with.  The application also has a metadata representation in the application repository (platform storage), which defines the various element types that an instance of an application can have.\ndeprecated term: Service\nApps Short for Altinn Apps. See Altinn Apps\nApplication Developer A user developing application in Altinn Studio.\nOrg Short for organisation. Organisation is the entity responsible for an app. Typically identified by an unique acronym, e.g. SKD, NAV, OSLK.\nDeprecated terms: Application Owner Service Owner\nData A representation of a data element which is stored in the Altinn Platform.\ndeprecated term: FormElement?\nEvent A record of activites on a specific instance.\nInstance An instance of an application for a specific instance owner is represented as an object. Is created by organisation or instance owner. It contains information of the formdata and attachments stored associated with the instance.\ndeprecated term: ReporteeElement\nInstance Owner The person or entity that is responsible for submitting an instance of an application to an organisation.\ndeprecated term: Reportee\nUser The user which is logged in in Altinn and performs actions for on behalf of an instance owner. A user and an instance owner can be the same entity.\nKubernetes A system for managing docker containers. See also: Relevant definitions within Kubernetes\nReact Teh framework used for developing UI components.\nPAP Policy Administration Point. See Authorization Architecture\nPDP Policy Administration Point. See Authorization Architecture\nPEP Policy Administration Point. See Authorization Architecture\nPIP Policy Information Point. See Authorization Architecture\nPRP Policy Retrieval Point. See Authorization Architecture\nSBL The current Altinn end user solution (SluttBrukerLøsning). See Solution Architecture\nSBL Bridge Applicaton that exposes SBL components as REST interface to Altinn Platform components. See all issues on GitHub related to SBL Bridge.\nStatefull App A statefull app uses Altinn Platform to store data\nStateless App A stateless app is a application where no data is store in in the platform. This could be a app acting like a proxy to som external APIS. State could potensial be stored in the external API, so term statless is limited to how the App not use any state in Altinn Platform.\nProcess The set of tasks a certain app is made of, i.e. data, signing, payment etc. In Altinn Studio we use a *.bpmn file for the process.\ndeprecated term: Workflow\nXACML XACML stands for \u0026ldquo;eXtensible Access Control Markup Language\u0026rdquo;. The standard defines a declarative fine-grained, attribute-based access control policy language,[2] an architecture, and a processing model describing how to evaluate access requests according to the rules defined in policies.\nAltinn Studio Apps uses the XACML standard for defining Policies for apps, the authorization architecture, and the request and response between PEP and PDP.\n\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/",
	"title": "Test",
	"tags": ["development", "testing"],
	"description": "Coding guidelines for tests",
	"content": " Coding guidelines for tests \rAutomated test app\rAn app used solely for automated testing in the browser\n\r\rPostman\rAPI Testing with postman\n\r\rTest Coverage\rAutomation testcases by area\n\r\rTest Strategy\rTest Strategy\n\r\rTestcafe\rTestcafe\n\r\rUnit testing\rHow to write jest test in altinn studio, what we know so far\n\r\rWCAG testing in Altinn Studio\rCoding guidelines for tests\n\r\rXunit Testing\rXunit Testing\n\r\rk6\rPerformance and Functional Testing of API with K6\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/testcoverage/",
	"title": "Test Coverage",
	"tags": ["development", "testing"],
	"description": "Automation testcases by area",
	"content": " Testcafe tests    Sl.No. Testcase name Area of Solution     1. Login to altinn studio All areas   2. Cannot create new app, as app name already exists Dashboard   3. Happy case; deploy an app to a test environment after a change Deploy to test   4. App cannot deploy due to compilation error Deploy to test   5. App cannot be deployed due to uncomitted local changes Deploy to test   6. User does not have write access to app, and cannot deploy Deploy to test   7. Navigating using the \u0026ldquo;about\u0026rdquo; tab UI-editor   8. Navigating using the \u0026ldquo;create\u0026rdquo; tab UI-editor   9. Navigating using the \u0026ldquo;Language\u0026rdquo; tab UI-editor   10. Navigating using the \u0026ldquo;Deploy\u0026rdquo; tab UI-editor   11. Drag and drop of components UI-editor   12. Add one of each component to the designer using keyboard UI-editor   13. Sync an app with master UI-editor   14. \u0026ldquo;About\u0026rdquo; page items, and editing of app data UI-editor   15. Clone modal functionality Deploy   16. Validation of missing datamodel in clone modal Deploy   17. Fill out Access control information on an app Designer   18. Configure and delete rules UI-editor   19. Links in App Logic menu UI-editor   20. Add and delete conditional rendering connections UI-editor   21. Error messages when app does not exist Dashboard   22. Open Gitea repository navigation UI-editor   23. User cannot clone an app that does not have a data model UI-editor    Postman tests Platform    Sl.No. Testcase name Area of Solution     1. GET Organization Platform-Register   2. GET Parties Platform-Register   3. GET Person information Platform-Register   4. GET Party id by SSN and Org number Platform-Register   5. GET Party information by SSN and Org number Platform-Register   6. GET User profile details Platform-Profile   7. GET Authentication ticket Platform-Authentication   8. GET Parties Platform-Authorization   9. GET Roles Platform-Authorization   10. Create, get with filter, edit and delete applications Storage   11. Create, get with filter, edit and delete app instances Storage   12. Create, get with filter, edit and delete app instance data Storage   13. Create, get with filter, delete app instance events Storage   14. Soft and Hard delete app instances Storage   15. Restore soft deleted app instance Storage   16. Restore hard deleted app instance - negative Storage   17. Get instances, by id and instance events Storage-SBL   18. Soft/hard delete and restore instances Storage-SBL   19. POST Generate PDF Platfrom - PDF    App    Sl.No. Testcase name Area of Solution     1. Create, Get, Edit app instance App   2. Start, get, get next, change next, complete Process App   3. Negative tests in process App   4. Add, Get, Edit Form data xml App   4. Add, Get, Edit, delete Form data attachment App   5. Delete a form data xml - negative App   7. Create app instance with multipart data App   8. Verify instance created with multipart App   9. Start process again - negative App   10. Get current, Get next, Move to next process App   11. Move process to active task again - negative App   12. Complete a compelted process - negative App   13. End to End test from starting an instance to Archiving it App    Negative Tests    Sl.No. Testcase name Area of Solution     1. Access Storage API without authentication token Storage   2. Access App API without authentication token App   3. Create App instance with low level security login than required App \u0026amp; Storage   4. Create App instance without allowed roles App \u0026amp; Storage   5. Access App instance without allowed roles App \u0026amp; Storage   6. Access App instance with low level security login than required Storage   7. Create App instance allowed only for AppOwner App    Manual API Test    Sl.No. Testcase name Area of Solution     1. GET instances as app Owner Storage   2. Download instance data as app Owner Storage   3. Confirm the download of instance data Storage    "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/test-strategy/",
	"title": "Test Strategy",
	"tags": ["development", "testing"],
	"description": "Test Strategy",
	"content": " What should be tested? In tjenester 3.0, there is a need for both testing Altinn Studio, the app designer, as well as testing apps that are developed by an app developer in Altinn Studio Runtime. Testing these two areas of Altinn Studio requires different approaches.\nTesting of Altinn Studio is to be tested automatically at the unit and integration levels of testing. Unit testing of the system involves, for example, the testing of individual javascript functions, and individual pieces of logic relating to react/UI components. At the integrasion level of test, API\u0026rsquo;s and smaller modules are typically tested: Effective unit and integration testing demands good testing frameworks that tjenester 3.0 developrs can easily pick up and use, and that can be easily integrated in the current codebase and the current build toolchain.\nTesting of workflows, and the usage of ALtinn Studio, as well as testing of apps developed in Altinn Studio, is the primary responsibility of the test developer in the team. On a regression, or end-to-end, level of test, one tests that the users whole journey through the altinn studio system, or the developed app, works as expected in relation to stated acceptance criteria.\nA good end-to-end test tool has the same requirements as tooling and frameworks that is to be put to use for unit and integration testing. Additionally, the tool needs to be give the opportunity for less technically minded app developers to quickly develop UI tests for apps they develop and deploy to Altinn Studio. The end-to-end tool should also allow the test developer to easily run a full regression test suite, as well as reduce the amount of time to run such a set of regression tests accurately.\nTooling After a discussion internally in the tjenester 3.0 team, these tools and frameworks have been decided to be put to use for testing - Unit testing: Jest / Enzyme / xUnit - Integration testing: Jest / Sinon - Regression testing: Testcafe\nThe chosen tool set has been chosen for their ease of integration into the exisiting codebase, and also because they are all open source tools. Testcafe also gives the possibility of recording tests, with a paid license, the testcafe framework and UI test project will be the responsibility of the test developer in the team. Developers write unit and integration tests by using Jest and xUnit. See the other pages under test in this handbook for more information on how to effectively write unit tests or regression tests.\nDocumentation for the mentioned tools can be found below:\n- xUnit - Jest\n- Enzyme\n- Sinon\n- Testcafe\nTest in the first MVP delivery Testing in the first MVP delivery was primarily done thru unit testing with test written in xunit, and jest, as well as thru manual functional tests of user stories under development. The unit testing frameworks xunit and jest were integrated in the MVP01 delivery, and the tests are executed using pipeline definitions in azure devops. The unit test pipelines are automatically triggered both by pull requests to the altinn github repo, as well as when code is merged into master. The pipelines for unit tests can be found here for the xunit pipeline, and here for the jest test pipeline. At the end of MVP01, testcafe tests also began running in their own pipeline. The regression tests in the testcafe pipeline are run as a nightly build, and does not deploy on pull requests, to avoid slowing down and hindering the work of developers. The pipeline for testcafe can be found here\nTest in the second MVP delivery In the second MVP delivery, deploying apps created in the Altinn Studio designer to Altinn Studio runtime has been prioritized as a \u0026ldquo;hill\u0026rdquo;, or main deliverable. In this context, regression tests written with testcafe wil focus on the workflow the developer \u0026ldquo;Christian\u0026rdquo; will be using to be able to deploy on of his apps to a test environment. The goal of test automation is to reduce the time taken to run all test in the Altinn Studio regression test suite, to run these tests accurately, and free up the time of the test developer to write better test cases. Both automatic and manual regression tests are run against dev.altinn.studio to assure the quality of developed code that is to be deployed to production. Unit and system testing in MVP02 will work in much the same way as in the MVP01 delivery: Developers write unit and integration tests in their respective frameworks, and focus on testing business logic they have developed. Snapshot testing, which was begun in MVP01, is deprioritized in MVP02 as they were found to be brittle and not contributing to the overall quality of the code. \u0026ldquo;Look and feel\u0026rdquo; testing will be the responsibility of functional designers, and the test developer in the team.\nTest levels The pyramid figure below shows an overview of the different levels of test, the possible tools associated with the testing level, as well as which rle has the responsibilty for writing tests at that level.\nTestdata To be be able to easily and effectively test on all levels, it can be necessary to put a tool in place to easily retrieve or store different test data. The Tjenester 3.0 team must decide on whether to creat testdata classes that can be imported in the different test projects. Another possibility is to fetch spesific pre-made dataset (for example testdata set 164/5) from a json file or similar. In MVP02 the testcafe project uses a naive testdata class, that will be expanded as the new for more complex testdata grows: TestData.js contains a class for creating users in Altinn Studio at the moment. Refer to the Jest section under test for an overview on using data in unit tests.\n#Methodology During sprint planning, the product owner, the developers, and the test developer agree on an approach for teting on individual user stories that are pulled into the sprint. A plan is then created for how the responsible role will test the required functionality, and sub tasks are created on the different user stories. It is possible, and likely, that a user story will contain tasks to develop tests on all the testing levels specified above. When a test is written and completed, it can be integrated into a testing build.\nNaming convention for element ids\u0026rsquo; Testcafe\u0026rsquo;s test api has different methods of instantiating Selector objects that can be then used in tests. The easiest and most robust method of defining a selector in testcafe is with a css id selector. The idea behind using css id\u0026rsquo;s is to avoid finding elements by their relative location in the DOM, or by the element\u0026rsquo;s inner texts, as tests become brittle with these selectors due to design changs. The id\u0026rsquo;s must be unique, to ensure the uniqueness of a Selector, the following naming convention for element id\u0026rsquo;s is proposed: Id\u0026rsquo;s must be tekstbased and written in camelCase, id\u0026rsquo;s follow a logical location the Altinn Studio system, such as; \u0026ldquo;Pagelocation Submenu Elementtype Descriptiveword\u0026rdquo;. The text box element id under the GUI creator could then be assigned the following id: \u0026ldquo;designerSkjemakomponenterKnappTekstområde\u0026rdquo;.\nBuilding and deploying testcode See the pipeline hyperlinks above in this document.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/testcafe/",
	"title": "Testcafe",
	"tags": ["development", "testing"],
	"description": "Testcafe",
	"content": " This document describes how one can start working on a test cafe project from installtion of plugins, cloning the project to run tests and pipeline information.\nClone project in Visual Studio Code  Create account in github.com Get write access to AltinnStudio - https://github.com/Altinn/altinn-studio Use windows 10 image with docker. Create a folder - C:\\Repos Open Visual Studio Code Ctrl + Shift + P -\u0026gt; Create New Integrated Terminal Terminal opens down of Visual Studio Code. Navigate to the folder create in step 4 using “cd” Clone the project- git clone https://github.com/Altinn/altinn-studio.git File -\u0026gt; Add Folder to Workspace -\u0026gt; Select the cloned project: C:\\Altinn Studio Checkout branch: master  Code for Testcafe tests in altinn.studio\nInstall Tools  1. Open PowerShell -\u0026gt; Verify Node and Npm version npm -v (6.9.0) node -v (9.5.0) 2. Install npm a. npm install -g npm 3. Install npm in the Altinn Studio project a. Navigate to the folder - C:\\Altinn Studio\\altinn-studio\\src\\test\\Testcafe b. Run command – npm install 4. Ensure that the environment variables has the path of npm a. C:\\Users\\UserName\\AppData\\Roaming\\npm 5. Navigate to the folder of the testcafe tests in command line (altinn-studio\\src\\test\\Testcafe) a. Run command - npm install testcafe  Run a Test Locally from PowerShell  Open testRunner.js in Visual Studio Code Set the browser as: Chrome Speed controls the speed of the execution Open a test fixture .js file (e.x., designer_tests -\u0026gt; navigation-tests.js) ‘.only’ can be used to run a specific fixture or a test case Save the project Open PowerShell and navigate to C:\\Altinn Studio\\altinn-studio\\src\\test\\Testcafe Set password for the test users of Studio usin: set variable_name_of_password=\u0026ldquo;password\u0026rdquo; (the password should be in double quotes) Run the command – ‘node .\\testRunner.js \u0026ndash;env=dev’ to run general tests Run the command - \u0026lsquo;node .\\WCAGRunner.js \u0026ndash;env=dev\u0026rsquo; to run wcag tests  Branching  Create a new branch with addition or changing of a new test from master. Do necessary changes and commit the same to the new branch. Create a new pull request from Github with the commits created. Once PR is approved, merge the branch to master and delete the branch.  Test cafe pipeline in Azure Devops Azure Devops Pipeline\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/testcafe/testcafehowto/",
	"title": "Testcafe - Tests",
	"tags": ["development", "testing"],
	"description": "How to write and maintain testcafe tests",
	"content": " This document describes how one can start writing tests on a test cafe project , and debug of the tests.\nProcedure to write general testcafe test  Find a test case and area that has to be automated. Find the \u0026lsquo;-tests.js\u0026rsquo; file that the test case has to be added or create a new folder and new .js file for the test under src/test/Testcafe. Identify and add the page objects with the selectors information under respective file under src/test/Testcafe/page-objects. Identify the need for methods that can be reused by other tests and add it under the page object file. Each \u0026lsquo;-tests.js\u0026rsquo; file has headers that import the necessary page objects. Fixtures innholds URL, before and aftereach test procedures. Test cafe tests has a basic format as below.   Debug Tests  Use \u0026rsquo;t.debug()\u0026rsquo; in a testcafe test to start debugging of the test. Use breakpoints for the steps to be debugged. Use \u0026lsquo;console.log(variable_name)\u0026rsquo; to find the runtime value of an variable - which will be logged in VS Code Terminal.  Rename the test to “test.only” - this will only run the specific test case. in testRunner.js, Set “chrome” as browser, Reduce the speed to 0.8 (percentage), debugOnFail : True, stopOnFirstFail: True Use \u0026lsquo;\u0026ndash;inspect \u0026ndash;debug-brk\u0026rsquo; in the command line when starting the tests. Check for the logs in junit.xml. Testcafe continues to work towards implementing a method to debug an application interactively. Refer: https://github.com/DevExpress/testcafe/issues/3244  Basics on POM and Selectors 1. config.json has the URLs 2. Use of objects from POM i. Import page – 'import page_name from path_to_the_file ii. Declare an object for the page - let object_name = new page_name(); 4. Selectors a. Id – starts with ‘#’ b. Class – starts with ‘.’ c. Html -\u0026gt; “ul \u0026gt; li” 5. test.skip – to skip a test in a test run (The results for the tests goes to Others)  More about Selectors\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/traefik/custom-resources/",
	"title": "Traefik custom resources",
	"tags": ["development", "routing", "traefik", "custom resources", "crds"],
	"description": "Definitions for traefik 2.0 custom resources in kubernetes",
	"content": "IMPORTANT These resources have to be installed before creating any of the resources they describe. They are most likely installed with helm when installing traefik 2.0.\nTo support new features in routing and middlewares with IngressRoutes and dynamic tls options, traefik supplies it\u0026rsquo;s own kubernetes custom resources defined in the traefik docs. These are:\napiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: ingressroutes.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: IngressRoute plural: ingressroutes singular: ingressroute scope: Namespaced --- apiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: middlewares.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: Middleware plural: middlewares singular: middleware scope: Namespaced --- apiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: tlsoptions.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: TLSOption plural: tlsoptions singular: tlsoption scope: Namespaced --- apiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: ingressroutetcps.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: IngressRouteTCP plural: ingressroutetcps singular: ingressroutetcp scope: Namespaced  They will extend the types of resources you can have on your cluster.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/traefik/ingress-routes/",
	"title": "Traefik ingress routes",
	"tags": ["development", "routing", "traefik", "ingress routes", "ingress"],
	"description": "How to set up an ingress route and route trafic based on rules and middlewares",
	"content": " Before traefik 2.0 the only supported way of routing in kubernetes was through the Kubernetes Ingress prodvider, which limited the functionality traefik could offer.\nAs a result of introducing the custom resource IngressRoutes in traefik 2.0 we don\u0026rsquo;t need to write many annotations on the ingress. And it is easier to configure access to a kubernetes cluster.\nResource configuration apiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: altinn-runtime spec: entryPoints: - web - websecure routes: - match: Host(`dev.altinn.studio`) # priority: 25 kind: Rule services: - name: altinn-runtime port: 5005  This is the simplest service to port over to traefik 2.0 within Altinn Studio. Since it is the \u0026ldquo;default\u0026rdquo; route if nothing else matches (routes for /repos or /designer).\nPay close attencion to the priority-field. If nothing is specified it will be the length of the string in the match-field. So longer rules are higher prioritized.\nRouting Middlewares In the earlier example we can hook up middlewares. You can define middlewares in this format:\napiVersion: traefik.containo.us/v1alpha1 kind: Middleware metadata: name: fetch-cookie-and-redirect spec: replacePath: path: /Redirect/FetchCookieAndRedirectHome/  This example is for when the designer fetches cookies and redirects to \u0026ldquo;/home\u0026rdquo;.\nThe different specs can be found in the traefik docs.\nSo first create a middleware resource in kubernetes and then you can use it in the ingressRoute like this\nname: altinn-designer-root namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; Path(`/`) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; Path(`/`) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; Path(`/`) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; Path(`/`) kind: Rule strategy: RoundRobin middlewares: [] - name: altinn-designer-home namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; PathPrefix(`/Home`) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/Home`) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/Home`) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/Home`) kind: Rule strategy: RoundRobin middlewares: [] - name: altinn-designer-designer namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; PathPrefix(`/designer`) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/designer`) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/designer`) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/designer`) kind: Rule strategy: RoundRobin middlewares: [] - name: altinn-designer-repos namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) kind: Rule strategy: RoundRobin middlewares: - name: fetch-cookie-and-redirect  At the last entry in the routes element uses the middleware. It references the middleware by name.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/traefik/",
	"title": "Traefik routing",
	"tags": ["development", "traefik", "routing"],
	"description": "",
	"content": "In Altinn Tjenester 3.0 we are migrating from nginx to traefik for routing.\n\rInstallation of Traefik 2.0\rHow to install traefik\n\r\rTLS in Traefik 2.0\rHow to set up TLS\n\r\rTraefik custom resources\rDefinitions for traefik 2.0 custom resources in kubernetes\n\r\rTraefik ingress routes\rHow to set up an ingress route and route trafic based on rules and middlewares\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/troubleshooting/",
	"title": "Troubleshooting",
	"tags": ["development"],
	"description": "Troubleshooting for altinn.studio",
	"content": " Troubleshooting Altinn.studio is under heavy development and errors are most likely to come with it. \rIf the error is not covered here, please submit a bug.\n Check out Flight Rules for Altinn.studio. Check out Known Issues.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/unit-testing/",
	"title": "Unit testing",
	"tags": ["development", "front-end", "testing"],
	"description": "How to write jest test in altinn studio, what we know so far",
	"content": " Introduction to unit testing with Jest This page summarizes how UI testing is performed with Jest and related libraries for Altinn Studio.\n\r Introduction to unit testing with Jest  When should you write tests? Exporting and importing your component Methods in your component User Interface and Methods Networked functions (get, post, put) Rejecting Promises / Error testing / Negative tests Using Router Example #1, positive test Example #2, negative test (Error handling)   \r When should you write tests? Unit testing includes testing of javascript functions and react/UI components. Listing of the highest priority of unit-testing:\n API calls with the correct formatted parameters Rendering of isolated components. Functions in general.\n  Exporting and importing your component A quick way to get started testing your component is first to export the React Component:\nexport class CloneServiceComponent extends React.Component\u0026lt;ICloneServiceComponentProps \u0026amp; RouteChildrenProps, ICloneServiceComponentState\u0026gt; {  and then reference it in your test the following way:\nimport { CloneServiceComponent } from '../../../src/dashboardServices/cloneService/cloneServices'; it('+++ this is the test', async () =\u0026gt; { const mountedComponent = mount( \u0026lt;CloneServiceComponent language={mockLanguage} services={mockServices} classes={mockClasses} location={mockLocation} history={mockHistory} match={mockMatch} /\u0026gt;, ); const instance = mountedComponent.instance() as CloneServiceComponent; }  This will test the component without state, router or styles (read Material UI), so values usually passed in by Redux store, by means of routing or styles/Material UI needs to be reference as if they are props passed into the component (match={mockMatch}).\nMethods in your component Methods can be called directly from your test, or executed when clicked on UI elements (See own section). Calling methods is done like this:\ninstance.getCurrentRepositoryInfo(); instance.componentDidMount();   If you call networked functions in componentDidMount() you need to mock the networked functions before mounting.\n If you have one function that calls another function, and you want to be sure that both functions ran at the end of the test, you can use jest\u0026rsquo;s spyOn functionality described here:\nconst spy = jest.spyOn(instance, 'funcitonTwoCalledWithinFunctionOne'); instance.functionOne(); expect(spy).toHaveBeenCalled();   You can read more about Jest.expect() here: Jest.expect()\n User Interface and Methods In the example above, testing the actual interface is excluded. Simulating a click on an element might need to be performed twice in some cases. Simulating a click can be done using the elements ID and the simulate method from Enzyme:\nmountedComponent.find('button#editService').simulate('click');   ReactWrapper will pass a SyntheticEvent object to the event handler in your code. If the code you are testing uses properties that are not included in the SyntheticEvent, for instance event.target.value, you will need to provide a mock event for it to work. Read more at Enzyme\u0026rsquo;s Simulate documentation here.\n Networked functions (get, post, put) If you are using get, post or put from the shared networking.ts component you need to mock the actual call to be able to test functions that calls either get, post or put. This can be done in the following way:\n// Add this to the import statements in you test file: import * as networking from '../../../../shared/src/utils/networking'; // To resolve the promise and and to return the value, first make sure your test is async: it('should handle successfully returned data from API', async () =\u0026gt; { /* Mounting goes here, commented to get markdown colors correctly const mountedComponent = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); */ // Creating the instance so you can spy or call methods directly const instance = mountedComponent.instance() as HandleMergeConflictAbort; // Spies for regular methods const spyOnClickFunctionHandler = jest.spyOn(instance, 'clickFunctionHandler'); // Before you call the methods which use netowrking, you must create the spy and mock: const mockData = { isSuccessStatusCode: true, }; const getStub = jest.fn(); const mockGet = jest.spyOn(networking, 'get').mockImplementation(getStub); getStub.mockReturnValue(Promise.resolve(mockData)); // Simulate clicks mountedComponent.find('button#editService').simulate('click'); // OR call methods instance.clickFunctionHandler(); // Expect functions to be called, both handler and networking expect(spyOnClickFunctionHandler).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Resolve mocked networking await Promise.resolve(); // Expect something to happen expect(instance.state.networkingRes.isSuccessStatusCode).toEqual(true); });  Rejecting Promises / Error testing / Negative tests If you want to test how your component handles rejected Promises / errors, for example in your Try/Catch you can use the following modification:\n// This is the rejected version of the mock gode const mockError = Error('mocked error'); const getStub = jest.fn(); const mockGet = jest.spyOn(networking, 'get').mockImplementation(getStub); getStub.mockReturnValue(Promise.reject(mockError)); // You \u0026quot;execute\u0026quot; the network function the same way as a resolved promise await Promise.resolve();  You can spy on the console.error with the following code:\nlet consoleError: any; beforeAll(() =\u0026gt; { consoleError = jest.spyOn(console, 'error').mockImplementation(() =\u0026gt; { return {}; }); }); // And the following inside your test: expect(consoleError).toHaveBeenCalled();   See example #2, for more detailed test\n Using Router If you are testing a component that uses React Router, you might have to build router props and pass them to the component you are testing. Here is an example on how this can be done:\nmockLocation = { pathname: 'pathname', search: 'search', state: {}, hash: 'hash', }; mockHistory = { length: 1, action: 'PUSH' as Action, location, push: () =\u0026gt; false, replace: () =\u0026gt; false, go: () =\u0026gt; false, goBack: () =\u0026gt; false, goForward: () =\u0026gt; false, block: () =\u0026gt; (null) as any, listen: () =\u0026gt; (null) as any, createHref: () =\u0026gt; '', }; mockMatch = { params: {}, isExact: false, path: '', url: '', };  Example #1, positive test import { mount } from 'enzyme'; import 'jest'; import * as React from 'react'; import * as networking from '../../shared/src/utils/networking'; import { HandleMergeConflictAbort } from '../src/features/handleMergeConflict/components/HandleMergeConflictAbort'; describe('HandleMergeConflictAbort', () =\u0026gt; { let mockLanguage: any; beforeEach(() =\u0026gt; { mockLanguage = {}; }); it('should handle successfully returned data from API', async () =\u0026gt; { const wrapper = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); const instance = wrapper.instance() as HandleMergeConflictAbort; // Spies const spyOnAbortPopover = jest.spyOn(instance, 'AbortPopover'); const spyOnAbortConfirmed = jest.spyOn(instance, 'AbortConfirmed'); // Mocks const mockData = { isSuccessStatusCode: true, }; const getStub = jest.fn(); const mockGet = jest.spyOn(networking, 'get').mockImplementation(getStub); getStub.mockReturnValue(Promise.resolve(mockData)); // Expected no result from networking yet expect(instance.state.networkingRes).toEqual(null); // Expect discard button to exist expect(wrapper.exists('#abortMergeBtn')).toEqual(true); // workaround, have to click twice the first time wrapper.find('button#abortMergeBtn').simulate('click'); // Click the discard button wrapper.find('button#abortMergeBtn').simulate('click'); expect(spyOnAbortPopover).toHaveBeenCalled(); // Expect the button inside the popover to exist expect(wrapper.exists('#abortMergeConfirmBtn')).toEqual(true); // Click the confirm button wrapper.find('button#abortMergeConfirmBtn').simulate('click'); // Expect functions to be called expect(spyOnAbortConfirmed).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Expect state to change expect(instance.state.popoverState.isLoading).toEqual(true); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(false); // Resolve mocked networking await Promise.resolve(); // Expect state to change expect(instance.state.popoverState.isLoading).toEqual(false); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(true); expect(instance.state.networkingRes.isSuccessStatusCode).toEqual(true); }); });  Example #2, negative test (Error handling) import { mount } from 'enzyme'; import 'jest'; import * as React from 'react'; import * as networking from '../../shared/src/utils/networking'; import { HandleMergeConflictAbort } from '../src/features/handleMergeConflict/components/HandleMergeConflictAbort'; describe('HandleMergeConflictAbort', () =\u0026gt; { let mockLanguage: any; let consoleError: any; beforeAll(() =\u0026gt; { consoleError = jest.spyOn(console, 'error').mockImplementation(() =\u0026gt; { return {}; }); }); beforeEach(() =\u0026gt; { mockLanguage = {}; }); it('should catch error from networked function', async () =\u0026gt; { const wrapper = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); const instance = wrapper.instance() as HandleMergeConflictAbort; // Spies const spyOnAbortPopover = jest.spyOn(instance, 'AbortPopover'); const spyOnAbortConfirmed = jest.spyOn(instance, 'AbortConfirmed'); // Mocks const mockError = Error('mocked error'); const getStub = jest.fn(); const mockGet = jest.spyOn(networking, 'get').mockImplementation(getStub); getStub.mockReturnValue(Promise.reject(mockError)); // Expected no result from networking yet expect(instance.state.networkingRes).toEqual(null); // Expect discard button to exist expect(wrapper.exists('#abortMergeBtn')).toEqual(true); // workaround, have to click twice the first time wrapper.find('button#abortMergeBtn').simulate('click'); // Click the discard button wrapper.find('button#abortMergeBtn').simulate('click'); expect(spyOnAbortPopover).toHaveBeenCalled(); // Expect the button inside the popover to exist expect(wrapper.exists('#abortMergeConfirmBtn')).toEqual(true); // Click the confirm button wrapper.find('button#abortMergeConfirmBtn').simulate('click'); // Expect functions to be called expect(spyOnAbortConfirmed).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Error is thrown await Promise.resolve(); // Expect state to change, and error to be saved to state expect(instance.state.popoverState.isLoading).toEqual(false); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(false); expect(instance.state.errorObj).toMatchObject(Error('mocked error')); expect(instance.state.networkingRes).toEqual('error'); // Expect console.error to be called. expect(consoleError).toHaveBeenCalled(); }); });  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/validationhandler/",
	"title": "ValidationHandler.cs",
	"tags": ["app-structure"],
	"description": "Beskrivelse av format for ValidationHandler",
	"content": " Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes videre med i MVP.\n\rOverordnet \u0026lsquo;ValidationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som gjør valideringer\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom ValidationnHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/versioning/",
	"title": "Versioning",
	"tags": ["development", "front-end", "versioning"],
	"description": "Guidelines for versioning of front-end",
	"content": "The frontends, both for Altinn Studio and Apps are set up as node modules, using a package.json to import external dependencies. In package.json for each package we can specify the version of the package. In this context, package refers to the different applications we are bulding, such as altinn-app-frontend, receipt, etc.\nEach time we make a change to a package, we need to update the version of the package to reflect the change. This is especially important in the packages related to Altinn.Apps - whenever changes are merged into the master branch, the compiled javascript is uploaded to a CDN where it can be used by the app, and the CDN supports versioning. So an app can refer to a specific version of f.ex. the app frontend.\nThe packages use semantic versioning:\n Given a version number MAJOR.MINOR.PATCH, increment the:\n MAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards compatible manner, and PATCH version when you make backwards compatible bug fixes. Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.   Each time a change is made to any frontend applications, the version in the corresponding package.json must be updated according to the rules above.\nThe default is for a new app to refer to the latest MAJOR version of the app frontend. If any changes are made that cause us to update the MAJOR version, remember to also update the app template, so that any new apps will refer to the newest MAJOR version.\n\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/wcag/",
	"title": "WCAG testing in Altinn Studio",
	"tags": ["development", "testing"],
	"description": "Coding guidelines for tests",
	"content": " This document describes how to see results of testcafe wcag tests, and how to write new wcag tests in testcafe. See the general testcafe documentation for a recipe on how to set up a development environment for writing testcafe test.\nTesting Altinn studio for accesibility with testcafe and axe-core WCAG tests run in Altinn Studio using the testcafe UI test project, with some additional plug-ins: axe-testcafe is the plug-in used for Altinn studio, see documentation here. The accessibility engine aXe allows the tester to configure which wcag rules to run, elements to include or ignore, and to format a report that can be generated automatically.\nThe Altinn studio wcag tests are run automatically each night in azure devops. Link to the build can be found here, the wcag tests are run as a task in the build definition altinn-studio-test-testcafe. To inspect a run of the wcag tests, open the build definition:\nThe \u0026ldquo;Tests\u0026rdquo; tab contains the the general UI test report. WCAG tests use a seperate reporter (called \u0026ldquo;spec\u0026rdquo;) to allow the user see which elements break with accesibility rules. Open the npm wcag task to inspect the wcag test results:\nLine 40 describes the title of the test. In this case, the testcase for the deployment page. Line 43 displays the number of A and AA rules violated on the specific page. The list under this line describes which specific rules were violated, a list of wcag rules can be found here, as well as which element on the page caused the violation.\nWriting new wcag tests in testcafe Writing new wcag tests will become necessary as new functionality and pages are added to Altinn Studio. New wcag tests are added to the wcag js file in the testcafe project: src/test/Testcafe/wcag/wcag.js\nTo write a new wcag test, add the following code to the file\ntest('My new wcag test for ACME page', async t =\u0026gt; { const { error, violations } = await axeCheck(t); await t.expect(violations.length === 0).ok(createReport(violations)); });  Add the required testcafe code to navigate to the page under test, for example the dashboard page:\ntest('My new wcag test for altinn studio dashboard', async t =\u0026gt; { await t.navigateTo(app.baseUrl) const { error, violations } = await axeCheck(t); await t.expect(violations.length === 0).ok(createReport(violations)); });  The object app is a part of the page object model of the testcafe project, baseUrl points to the dashboard url for the selected altinn studio environment to be tested.\nAxe can also allow the tester to specify the context, what elements of the test should included or excluded, as well as which rules should be run:\ntest('Accessibility testing for dashboard page', async t =\u0026gt; { await t.navigateTo(app.baseUrl); const axeContext = { exclude: [['img']] }; const axeOptions = { runOnly: ['wcag2a', 'wcag2aa'] }; const { error, violations } = await axeCheck(t, axeContext, axeOptions); await t.expect(violations.length === 0).ok(createReport(violations)); });  More on the axe context and options can be found in the axe documentation To debug the new test, append test with the only keyword: test.only\nThe new test can now be run from the command line using the package.json wcag script.\nnpm run wcag\nThe test report is then generated displayed in the console:\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/xacml/",
	"title": "XACML - Altinn Studio",
	"tags": ["architecture", "security", "XACML"],
	"description": "Description of XACML use in Altinn Studio",
	"content": " XACML stands for \u0026ldquo;eXtensible Access Control Markup Language\u0026rdquo;. The standard defines a declarative fine-grained, attribute-based access control policy language,[2] an architecture, and a processing model describing how to evaluate access requests according to the rules defined in policies.\nThe Altinn Studio and Altinn Studio Apps solution uses the XACML standard for the following\n XACML Reference Architecture: Used as input for defining the Altinn Studio Apps authorization architecture XACML Policy: Used to define the authorization rules for apps XACML Request: Format used for PEP to call PDP XACML Response: Format used for response from PDP to PEP.  XACML Policy The Policy Document describes the rules for a App. This policy is imported to the Policy Retrieval Point.\nSee details about the XACML Policy for Apps\nXACML Request The XACML Request will follow XACML 3.0 JSON profile. See documentation\nSingle request The below example show how a request try to verify that a user is allowed to read a given instance\n{ \u0026quot;Request\u0026quot;: { \u0026quot;ReturnPolicyIdList\u0026quot;: true, \u0026quot;AccessSubject\u0026quot;: [ { \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:user-id\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;1\u0026quot; } ] } ], \u0026quot;Action\u0026quot;: [ { \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;read\u0026quot;, \u0026quot;DataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot; } ] } ], \u0026quot;Resource\u0026quot;: [ { \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:instance-id\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026quot; } ] } ] } }  Request for Multiple Decisions Policy Decision Point supports Request for Multiple Decisions. The below request show how you can request decision for both read an write for the same resource.\n{ \u0026quot;Request\u0026quot;: { \u0026quot;ReturnPolicyIdList\u0026quot;: true, \u0026quot;AccessSubject\u0026quot;: [ { \u0026quot;Id\u0026quot;: \u0026quot;s1\u0026quot;, \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:user-id\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;1\u0026quot; } ] } ], \u0026quot;Action\u0026quot;: [ { \u0026quot;Id\u0026quot;: \u0026quot;a1\u0026quot;, \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;read\u0026quot;, \u0026quot;DataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;, \u0026quot;IncludeInResult\u0026quot;: true } ] }, { \u0026quot;Id\u0026quot;: \u0026quot;a2\u0026quot;, \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;write\u0026quot;, \u0026quot;DataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;, \u0026quot;IncludeInResult\u0026quot;: true } ] } ], \u0026quot;Resource\u0026quot;: [ { \u0026quot;Id\u0026quot;: \u0026quot;r1\u0026quot;, \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:instance-id\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026quot;, \u0026quot;IncludeInResult\u0026quot;: true }, { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:org\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;skd\u0026quot; }, { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:app\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;taxreport\u0026quot; }, { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:partyid\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;1000\u0026quot; }, { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:task\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;formfilling\u0026quot; } ] } ], \u0026quot;MultiRequests\u0026quot;: { \u0026quot;RequestReference\u0026quot;: [ { \u0026quot;ReferenceId\u0026quot;: [ \u0026quot;s1\u0026quot;, \u0026quot;a1\u0026quot;, \u0026quot;r1\u0026quot; ] }, { \u0026quot;ReferenceId\u0026quot;: [ \u0026quot;s1\u0026quot;, \u0026quot;a2\u0026quot;, \u0026quot;r1\u0026quot; ] } ] } } }  XACML Response The XACML Response will follow XACML 3.0 JSON profile. See documentation\nResponse for single decision request { \u0026quot;Response\u0026quot;: [ { \u0026quot;Decision\u0026quot;: \u0026quot;Permit\u0026quot;, \u0026quot;Status\u0026quot;: { \u0026quot;StatusCode\u0026quot;: { \u0026quot;Value\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:1.0:status:ok\u0026quot; } }, \u0026quot;Obligations\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;urn:altinn:obligation:authenticationLevel1\u0026quot;, \u0026quot;attributeAssignment\u0026quot;: [ { \u0026quot;attributeId\u0026quot;: \u0026quot;urn:altinn:obligation1-assignment1\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2\u0026quot;, \u0026quot;category\u0026quot;: \u0026quot;urn:altinn:minimum-authenticationlevel\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#integer\u0026quot;, \u0026quot;issuer\u0026quot;: null } ] } ], \u0026quot;Category\u0026quot;: [ { \u0026quot;CategoryId\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026quot;, \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:partyid\u0026quot;, \u0026quot;DataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;1000\u0026quot; } ] } ] } ] }  Response for multipe decision { \u0026quot;Response\u0026quot;: [ { \u0026quot;Decision\u0026quot;: \u0026quot;Permit\u0026quot;, \u0026quot;Status\u0026quot;: { \u0026quot;StatusCode\u0026quot;: { \u0026quot;Value\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:1.0:status:ok\u0026quot; } }, \u0026quot;Obligations\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;urn:altinn:obligation:authenticationLevel1\u0026quot;, \u0026quot;attributeAssignment\u0026quot;: [ { \u0026quot;attributeId\u0026quot;: \u0026quot;urn:altinn:obligation1-assignment1\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2\u0026quot;, \u0026quot;category\u0026quot;: \u0026quot;urn:altinn:minimum-authenticationlevel\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#integer\u0026quot;, \u0026quot;issuer\u0026quot;: null } ] } ], \u0026quot;Category\u0026quot;: [ { \u0026quot;CategoryId\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026quot;, \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026quot;, \u0026quot;DataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;read\u0026quot; } ] }, { \u0026quot;CategoryId\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026quot;, \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:instance-id\u0026quot;, \u0026quot;DataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026quot; } ] } ] }, { \u0026quot;Decision\u0026quot;: \u0026quot;Permit\u0026quot;, \u0026quot;Status\u0026quot;: { \u0026quot;StatusCode\u0026quot;: { \u0026quot;Value\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:1.0:status:ok\u0026quot; } }, \u0026quot;Obligations\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;urn:altinn:obligation:authenticationLevel1\u0026quot;, \u0026quot;attributeAssignment\u0026quot;: [ { \u0026quot;attributeId\u0026quot;: \u0026quot;urn:altinn:obligation1-assignment1\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2\u0026quot;, \u0026quot;category\u0026quot;: \u0026quot;urn:altinn:minimum-authenticationlevel\u0026quot;, \u0026quot;dataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#integer\u0026quot;, \u0026quot;issuer\u0026quot;: null } ] } ], \u0026quot;Category\u0026quot;: [ { \u0026quot;CategoryId\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026quot;, \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026quot;, \u0026quot;DataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;write\u0026quot; } ] }, { \u0026quot;CategoryId\u0026quot;: \u0026quot;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026quot;, \u0026quot;Attribute\u0026quot;: [ { \u0026quot;AttributeId\u0026quot;: \u0026quot;urn:altinn:instance-id\u0026quot;, \u0026quot;DataType\u0026quot;: \u0026quot;http://www.w3.org/2001/XMLSchema#string\u0026quot;, \u0026quot;Value\u0026quot;: \u0026quot;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026quot; } ] } ] } ] }  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/xunit-testing/",
	"title": "Xunit Testing",
	"tags": ["development", "testing"],
	"description": "Xunit Testing",
	"content": "Find code on xunit tests here\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/application-metadata/",
	"title": "applicationmetadata.json",
	"tags": ["app-structure"],
	"description": "Description of format for application metadata",
	"content": " Overview \u0026lsquo;applicationmetadata.json\u0026rsquo; describes meta information of an application. This is automatically generated on creation of a new application. This is located at \u0026lt;organisation name\u0026gt;\u0026lt;applicationname\u0026gt;\\Metadata\\applciationmetadata.json\nFormat \u0026lsquo;applicationmetadata.json\u0026rsquo; has the application information such as application id, version information, organisation that owns the application, workflow information, form and attachment information.\nApplication Metadata Format Below is an example of application metadata json format\n{ \u0026quot;id\u0026quot;: \u0026quot;Brreg-testappmetaattachment\u0026quot;, \u0026quot;versionId\u0026quot;: \u0026quot;1.0\u0026quot;, \u0026quot;applicationOwnerId\u0026quot;: \u0026quot;Brreg\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-05-23T20:26:29.2001617Z\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;user\u0026quot;, \u0026quot;lastChangedDateTime\u0026quot;: \u0026quot;2019-05-23T20:26:29.2002739Z\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;user\u0026quot;, \u0026quot;title\u0026quot;: { \u0026quot;nb-no\u0026quot;: \u0026quot;RF-1134 Test form title\u0026quot; }, \u0026quot;validFrom\u0026quot;: \u0026quot;2019-05-23T20:26:29.2001617Z\u0026quot;, \u0026quot;validTo\u0026quot;: \u0026quot;2020-05-23T20:26:29.2001617Z\u0026quot;, \u0026quot;WorkflowId\u0026quot;: null, \u0026quot;maxSize\u0026quot;: 0, \u0026quot;forms\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;description\u0026quot;: null, \u0026quot;allowedContentType\u0026quot;: [ \u0026quot;application/xml\u0026quot; ], \u0026quot;maxSize\u0026quot;: 0, \u0026quot;maxCount\u0026quot;: 0, \u0026quot;shouldSign\u0026quot;: false, \u0026quot;shouldEncrypt\u0026quot;: true }, { \u0026quot;id\u0026quot;: \u0026quot;74696338-540e-47e3-8f04-0996cc2bb239\u0026quot;, \u0026quot;description\u0026quot;: null, \u0026quot;allowedContentType\u0026quot;: [ \u0026quot;application/octet-stream\u0026quot; ], \u0026quot;maxSize\u0026quot;: 3, \u0026quot;maxCount\u0026quot;: 3, \u0026quot;shouldSign\u0026quot;: false, \u0026quot;shouldEncrypt\u0026quot;: false }, { \u0026quot;id\u0026quot;: \u0026quot;0cc6ee16-7fbf-45b3-9e00-2fda8668ab31\u0026quot;, \u0026quot;description\u0026quot;: null, \u0026quot;allowedContentType\u0026quot;: [ \u0026quot;application/pdf\u0026quot;, \u0026quot;text/plain\u0026quot;, \u0026quot;text/css\u0026quot; ], \u0026quot;maxSize\u0026quot;: 5, \u0026quot;maxCount\u0026quot;: 2, \u0026quot;shouldSign\u0026quot;: false, \u0026quot;shouldEncrypt\u0026quot;: false } ] }  The meta data for attachment is updated in the application metadata when a fileupload component is dragged in the ui editor. When an application is deployed to a selected environment, the application metadata is read from the applicationmetadata.json and populated in the cosmos database.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/k6/",
	"title": "k6",
	"tags": ["development", "testing", "api"],
	"description": "Performance and Functional Testing of API with K6",
	"content": " k6 is a developer-centric, free and open-source load testing tool built for making performance testing a productive and enjoyable experience. read more about K6 here\nSet up k6 tests  Clone the k6 tests from GitHub Repo Install docker and make sure the drive having the k6 tests is shared. Open cmd and download the latest k6 docker image docker pull loadimpact/k6  How to write k6 tests  Find the area/collection where the new test has to be added. k6 test project is divided into three basic folders.  tests - includes all the .js test files that send data to methods in api and validated response data - includes all the testdata ex., attachments, formdata, appmetadata, etc., api - includes the api calls to platform/app apis by getting data from the tests and returns the response of the http requests. (post, get, put, delete)  Begin by adding the endpoint to config.json Create a new method for the actual api in a .js file under folder K6/src/api which gets in data from the tests and returns response. Refer below picture for a sample method calling an api with endpoint and headers and returning the response.  Create a test .js file under K6/src/tests. Refer below picture for a sample test file. More about k6 test scripts One test can call many api endpoints with appropriate data, the result output of the test is determined by the checks in a tests and the thresholds defined in a test. More about k6 test checks and thresholds  Run k6 tests locally with a k6 docker image and visualize results in grafana  Before a test can be run, the files mentioned under .gitignore has to be created under the data folder. In cmd, change directory to \\altinn-studio\\src\\test\\K6 Download and run docker containers of influxdb and grafana  docker-compose up -d influxdb grafana   Open http://localhost:3000/ in a browser and import the grafana-dashboard.json from K6/src and select appropriate settings. Run the below example command where pdf.js testscript is run for 1 minute with a maximum of 20 virtual users and with a ramp up and ramp down of virtual users. The testscript targets 5 vus for first 10 seconds, targets 20 vus for next 40 seconds and ramps down to 5 vus for the last 10 seconds.  docker-compose run k6 run --vus=20 --stage 10s:5,40s:20,10s:5 /src/tests/platform/pdf/pdf.js -e env=value   Once the above script it run, one could see results in grafana similar to the below image.   Environment variables required for different test files    Tests/env variables env username userpwd org level2app testapp     platform/pdf/pdf.js X        platform/authorization/authorization.js X X X X X X   platform/register/register.js X X X X X    platform/profile/profile.js X X X X X    platform/storage/instances.js X X X X X    platform/storage/data.js X X X X X    platform/storage/events.js X X X X X    platform/storage/messageboxinstances.js X X X X X    platform/storage/process.js X X X X X    platform/storage/applications.js X X X X X X   app/instances.js X X X X X    app/data.js X X X X X    app/process.js X X X X X    app/end2end.js X X X X X    app/e2erf0002.js X   X X    app/rf0002withattachment.js X   X X     k6 test pipeline in Azure Devops Azure Devops Pipeline\nVisualizing k6 results k6 by default outputs in stdout format while running a test. Below is described various methods to visualise results.\n To get a junit.xml output from k6 tests, pipe the results to a k6-to-junit npm package with file name. (use npm install -g k6-to-junit to install the package globally). This comes in handy to view test results in CI/CD pipelines.  docker run -i -v C:/Repos/altinn-studio/src/test/K6/src/:/src loadimpact/k6 run src/tests/platform/pdf/pdf.js -e env=value | k6-to-junit results.xml   k6 performance test results can be visualised with the help of a influxdb and grafana instance that stores and reads the test results and displays as graph. More about influxdb and grafana results  Initial results from a sample tests against performance test environment.  Test case: Login - Build test data - Create instance - Upload formdata - validate and archive instance Http-requests: 14 Iteration: 1 Iteration duration: ~27 seconds Average http_req_duration : 1.9s  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/structure/reactapp/",
	"title": "react-app.js",
	"tags": ["app-structure"],
	"description": "Beskrivelse av React-App.js",
	"content": " Overordnet \u0026lsquo;React-App.js\u0026rsquo; er selve React applikasjonen som blir generert av Altinn Studio som del av tjenestutviklingen. Den inneholder all logikk for å rendre GUI samt å gjøre nødvendige kall mot API i Altinn Tjenester 3.0\nFor øyeblikket er den statisk og lik for alle tjenester. Målet er at den blir tilpasset de komponentene som er i bruk. Dette slik at javascript koden ikke i inneholder referanser til komponenter ikke brukt i tjenesten.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/altinn-studio-repos/",
	"title": "Altinn Studio Repos",
	"tags": ["altinn-repos"],
	"description": "The Git repository solution for storing and versioning apps developed with Altinn Studio.",
	"content": "\r\rFunctionality in Repos\rFunksjonalitet for lagring og versjonering av tjenester i Git-repositories samt funksjonalitet for application lifecycle management.\n\r\rData Structure for Repos\rStruktur for repositories og filer i Gitea.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/",
	"title": "Building and configuring app",
	"tags": [],
	"description": "Altinn Studio can been seen as a collection of different editors or applications specialized to create and edit different aspects of an Altinn Studio app.",
	"content": "To support building apps Altinn Studio have different functionality to building and configuring different aspects of the app.\n\rApp Parameters\rThe application contain different parameters that controlls the behaviour.\n\r\rConfigure API use\rTo be able to support \u0026#34;once-only\u0026#34; it is essensial that it is easy to do API-call from an app to other systems APIs.\n\r\rConfigure Prefill\rAltinn Studio will let the developer define prefill for datamodel from register and profile\n\r\rConfigure helptext\rHelp developer configure help texts for components\n\r\rCreate AppLogic with code\rApp behavoir can be controlled by code\n\r\rData modeling\rDefining the data model(s) for an app is important. Altinn Studio will support importing existing data models and creating new data models.\n\r\rDefine process\rAs part of the development one must define a process for the app that end user needs to follow.\n\r\rExposing API\rApps created in Altinn Studio can be exposed as API together with GI, or only as API without any UI.\n\r\rSet Authorization Rules\rAltinn Studio let the developer set the authorization requirements for a App\n\r\rText and translations\rUsing texts when designing UI, defining workflow, other settings, deploy, and more.\n\r\rUI Design\rThe UI-designer is the part of Altinn Studio where the developer can create UI for the app.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/data/",
	"title": "Data Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Data is the most important part of the solutions in Altinn.",
	"content": "Altinn Studio, Altinn Apps and Altinn Platform is created to give the government, the citizens and the businesses of Norway a effective way to share data and retrieve data.\n\rConceptual\rThe conceptual data model describes the data entities in the solutions and their relatiohip.\n\r\rLogical datamodel\rThe logcical datamodel describes the different data entities that is stored\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/logicexecution/",
	"title": "Logic Executions Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Logic execution components are in charge of modeling the application behavior, in terms of data processing and flow control, according to the application specifications",
	"content": " Code Execution Server Software Application Servers For Altinn Studio, Altinn Apps and Altinn Platform we use Kestrel as the web server/ application server for dot.net applications. Read more about Kestrel at Microsoft\nFor Java Applications we use Tomcat.\nLanguage Virtual Machines \u0026amp; Code Containers Applicatons in Altinn Studio, Altinn Apps and Altinn Platform that is based on .Net Core uses Common Language Runetime as a virual machine\nApplications in Altinn Apps and Altinn Platform that is based on Java runs on Java Virtual Machine.\nRun-time Frameworks \u0026amp; Libraries E2E Run-time Frameworks Most of the applications created in Altinn Studio, Altinn Apps and Altinn Platform is based on ASP.Net Core / .Net Core programmed with C# programming language\nThis is open source, multi platform and popular.\nFor PDF component we use Spring Boot /Java Open JDK This is because the lack of open source PDF frameworks on .Net.\nUtility \u0026amp; Security Libraries We use serveral utility libraries in Altinn Studio, Altinn Platform and Altinn Apps.\nTypical this is configured in each of the application projects. For .Net applications we use NUGET to manage the libraries we use and you find a list over them in each project configuration files.\nExamples are\n Newtonsoft.Json StyleCop.Analyzers Microsoft.Azure.DocumentDB.Core  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/infrastructure/network/",
	"title": "Network componentens",
	"tags": ["architecture", "infrastructure"],
	"description": "Computing components gives processor power to applications and software",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/nonsolutionspecific/",
	"title": "Non-Solution-Specific",
	"tags": ["solution", "architecture"],
	"description": "Non-Solution-Specific Application components refer to all components other than the core solution or solution-specific Application typical used for devops",
	"content": "\r\rDevelopment Applications\rDevelopment Applications are used by the devops team to support the different development capabilities required\n\r\rOperations Application\rOperations Applications are used by the devops team for supporting the different operation and management capabilities required\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/quality/",
	"title": "Quality Management Capabilities",
	"tags": ["architecture"],
	"description": "Quality Management Capabilities covers the different capabilities to mange the project.",
	"content": " Quality Managmenet Quality Assurance \u0026amp; Reviews All pull request in GitHub requires approved reviews of the changes before it can be merged in to the master branch.\nSee current and earlier pull request.\nFor infrastructure changes the pull request is done in Azure Devops with the same type of reviews.\nDefect Tracking \u0026amp; Management Defects are tracked in Gitub as bugs. See active and closed bugs.\nStatic SW Analysis Enablement Every pull requsts needs to adhere to code quality standard verifyed with static code analysis.\nThe build pipline in Azure Devops runs LGTM for static code analysis with focus on security and SonarCloud for general static code analysis.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/",
	"title": "Security Enforcement Capabilities",
	"tags": ["architecture"],
	"description": "Security Enforcement Capabilities are capabilities typical provided by common architecture components",
	"content": " Identification \u0026amp; Authentication Capabilities Authentication The solutions can authenticate different types of users and systems\nSingle Sign-on A user signed in to one app is able to navigate freely to another app hosted in Altinn Apps or to Altinn Platform Components without needing to log in again.\nIdentity \u0026amp; Access Management Capabilities Authorization The solution can authorize access to data for users and systems\nIdentity \u0026amp; Access Management User can be created in Altinn Studio and it is possible to give them access to organizations\nConfidentiality \u0026amp; Compliance Capabilities Encryption (Transport \u0026amp; Storage) Data is encrypted during transport.\nWhen stored the data is encrypted at rest.\nDigital Signatures In backlog: In the future the platform will suport digital signatures of data.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/integration/",
	"title": "Integration Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Integration components are in charge of enabling communications between systems",
	"content": " Integration Software Gateway Software The gateway used is Azure Application Gateway. This is responsible for forwarding traffic to Api management or direct to the different Kubernetes Clusters\nRead more about Azure Application Gateway.\nApi Management \u0026amp; Gateway Sw Azure API managmenet is used as API management. This is a managed service.\nRead more about Azure API Management\nIntegration Frameworks \u0026amp; Libraries Data Access Libraries We use various libraries to interact with different data stores\nIntegration Libraries We use integration libraries to interact with different external and internal components.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/",
	"title": "Platform Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Platform components are a mix of managed services and standard sofware/frameworks used to created the needed capabilties.",
	"content": "The platform components can be structured in to different areas. The diagram below show the different areas and the platform components involved in Altinn Studio, Altinn Apps and Altinn Platform solutions.\nFull screen | Visio\n\n\rPresentation Components\rPresentation Components are in charge of processing information and making it accessible to users.\n\r\rLogic Executions Components\rLogic execution components are in charge of modeling the application behavior, in terms of data processing and flow control, according to the application specifications\n\r\rIntegration Components\rIntegration components are in charge of enabling communications between systems\n\r\rData \u0026amp; Reporting Components\rData and Reporting Components hold the functionalities to manage data and create business reports.\n\r\rOperating Systems \u0026amp; Cloud Platform\rOperating Systems \u0026amp; Cloud Platform defines the operating systems for containers and how the container are deployed to the cloud\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/platformoperations/",
	"title": "Platform Operations Management Capabilities",
	"tags": ["architecture"],
	"description": "Platform Operations Management Capabilities describes the capabilities needed to operate the platform.",
	"content": " PaaS \u0026amp; IaaS Management Capabilities Automation \u0026amp; Scheduling (batch, scripts) This include running scripts for infrastructure and jobs both manual and scheduled.\nSee operations application components for details about tools and applications used.\nPaas \u0026amp; IaaS Configuration \u0026amp; Management This include the capability to configure all pass and Iaas in the cloud.\nSee operations application components for details about tools and applications used.\nBackup \u0026amp; Recovery It is important to reduce the risk of losing data on the platform. The risks that are identified are\n Data is deleted by accident by DevOps team or by wrongly configured jobs Data is corrupted by bugs in platform or application code Data is accidentally corrupted or deleted by end-users or systems A storage account is deleted Blob storage is deleted Cosmos DB collection is accidentally deleted  In Altinn Platform different types of data is stored\nCosmos DB  Instances: Metadata about instances created InstanceEvents DataElements Applications  Blob Storage  Data for data elements (structured and unstructured data, small to potential gigabytes of data) XACML Policy for applications  The requirement is that we are able to restore data up to 90 days. The platform support this requirement for all types of data listed above.\nSee all details about the backup and recovery components\nPerformance \u0026amp; Availability Management Capabilities Performance Profiling See operations application components for details about tools and applications used.\nPerformance Tuning The performance tuning capability for includes tuning of code and architecture to increase performance and capacity. This is typical done based on metrix that indicates slow performance from\nAvailability and Performance Monitoring This capability include automatic and manuel monitoring of the availability, healt and performance of the different components deployed to the cloud.\nSee operations application components for details about tools and applications used.\nCloud Capacity Management The devops team uses differen tools to manage capacity in cloud.\nSee operations application components for details about tools and applications used.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/processing/",
	"title": "Processing &amp; Execution Capabilities",
	"tags": ["architecture"],
	"description": "Processing &amp; Execution Capabilities includes everthing from processing a defined business processes to loadbalancing and failover",
	"content": " Processing Capabilities BPMN Process Execution As part of the Application design and build in Altinn Studio the application developer will define a BPMN Process for the given App.\nThe application framework used in the app template support reading and processing the process file.\nRead the details about BPMN processing capabilities.\nExecution Control \u0026amp; Failure Mgmt Capabilities Auditing, Logging \u0026amp; Tracing Altinn Studio, The applications created in Altinn Studio and Altinn Platform perform auditing, logging and tracing of events that happens.\nException Management Altinn Studio, applications created in Altinn Studio and deployed to Altinn Apps and Altinn Platform has exception management.\nExecution Profiling With help of tools the platform support execution profiling.\nProcess Timing Capabilities Synchronous Processing MOST API\u0026rsquo;s in the platform is synchronous.\nScheduled Processing (incl. Batch) The solutions has the capabilitiy for scheduled processing.\nTODO: Describe user scenario.\nQueued \u0026amp; Asynchronous Processing The solutions do support asynchronous processing.\nExecution Partitioning Capabilities Clustering The solutions has clustering capabilities.\nLoad-balancing The technical architecture has load balancing capabiltiies\nFail over The technical architecture has fail over capabilties.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/infrastructure/storage/",
	"title": "Storage componentens",
	"tags": ["architecture", "infrastructure"],
	"description": "Storage component provide the physical storage of data",
	"content": " Storage Disks The Kubernetes Cluster uses disks for volumes\nWe use Azure Disk for storage in Kubernetes Cluster\nSAN Other data stores are based on Managed Services from Azure.\n Azure Cosmos DB Azure File Share Azure Blob Storage  We dont have control how the data is physical stored in Azure by this services.\nRead a technical overview of Cosmos DB that talks some about how storage is handled.\nRead more about the data store components used\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/thirdpartytools/",
	"title": "Third Party Tools",
	"tags": ["third party tools"],
	"description": "One important aspect of the Altinn Studio is that we encourage to use third party development tools to create and modify applications.",
	"content": " Since application code and config is versioned in Altinn Studio Repos and that is a GIT based source control any development tool with GIT support can clone application repository to local develoment machine.\nIn addition the application is based on a asp.net core web application that is supported in tools like Visual Studio Code.\nSuggested tools The following tools are examples on tools that you as a developer can install and use for application development.\nGit Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Altinn Studio Repository uses a git based source control system.\nYou can download a git client here\nVisual Studio Code Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity)\nThe application repos created in Altinn Studio contains workspace configuration for Visual Studio Code.\nYou can download Visual Studio Code here.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/data/",
	"title": "Data management Capabilities",
	"tags": ["architecture"],
	"description": "Data management capabilities range from handling data to defining data models for applications in Altinn Studio",
	"content": " Data Processing Capabilities Data Access The technical architecture for the different solutions has the capability to access data from different types of data stores\nData Validation The platform has the capability to validate data according to the data model or to custom rules defined in code\nReport generation It is possible to generate reports based on data\nTODO: Add scenario where relevant\nData Enrichment \u0026amp; Aggregation A application developer can define data enrichment logic that enrich data\nData Storage capabilities Data Caching The technical architecture has the capability to support caching.\nData persistency The techincal architecture has serverel differen data persistence capabilities through different storage technologies\nData partitioning \u0026amp; Segregation The data infrastructure has the capabiltity to partion data\nReplication \u0026amp; Synchronization The data infrastructure has the capabilitiy to replicate \u0026amp; synchronize data\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/datareporting/",
	"title": "Data &amp; Reporting Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Data and Reporting Components hold the functionalities to manage data and create business reports.",
	"content": " Reporting Software Dashboard and reporting server software Application Insights is used for dashboard and reporting services for the platform solutions.\nData visualization software Application Insights is used for visualization\nData Stores Multi model database service Altinn Platform uses Azure Cosmos as a Multi model database service.\nRead more about Azure Cosmos DB\nRelational DBMs We use Azure Database for PostgreSQL as a relational database for Gitea.\nRead more about Azure Database for PostgreSQL\nDirectory Services We use Azure Directory Services\nFile Share We use Azure File Storage\nObject Storage We use Azure Blob Storage to store both structured and unstructured data for applications in Altinn Platform\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/infrastructure/",
	"title": "Infrastructure components",
	"tags": ["architecture", "infrastructure"],
	"description": "This documentation contains details about infrastructure components used in the different solutions.",
	"content": "Full screen | Visio\n\nAltinn Studio consists of three different technical solutions to make a complete application development platform.\nFull screen | Visio\n\n\rComputing componentens\rComputing components gives processor power to applications and software\n\r\rNetwork componentens\rComputing components gives processor power to applications and software\n\r\rStorage componentens\rStorage component provide the physical storage of data\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/analysisanddesign/",
	"title": "Analysis &amp; Design Capabilities",
	"tags": ["architecture"],
	"description": "Analysis &amp; Design Capabilities is the capabiltiy needed to analyse needs and design solutions for the project.",
	"content": " Analysis Enablement Capabilities Requirement Capture Requirements are gathered through: - input on Github - talks with organization\nSee development application components to get a overview over tools and application we use.\nUse Case/Story Definition The devopsteam has the capability to define uses cases and user stories.\nSee development application components to get a overview over tools and application we use.\nRequirement Validation Product owners and architects together with the teams are responsible for validation of requirements.\nRequirement Traceability Github keeps a full history on the different issues.\nProtoypes, Mock-Ups \u0026amp; Storyboarding The devopsteam has the capability to create prototypes.\nSee development application components for tools used.\nDesign Enablement Capabilities UI Design Enablement We use Figma to design the UI elements.\nData Modeling \u0026amp; Design Capability The devops team has the capability for data modelling and design.\nSee development application components to get a overview over tools and application we use.\nArchitecture Design Enablement Architecture design is presented on this site using Markdown and Visio.\nApplication Design Enablement Application design is presented on this site using Markdown and Visio.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/appdevelopment/",
	"title": "Application development capabilities",
	"tags": ["architecture"],
	"description": "Application development capabilities are capabilites that is used for developing applications in Altinn Studio",
	"content": " Code Creation Altinn Studio lets the application developer create custom code in the Application.\nWith help of third party IDE like Visual Studio Code , the developer can create code from local development machine.\nProcess definition The process defintion is defined in a BPMN 2.0 file located in the app repository\nTo change the process the app developer need to modify the BPNM file manually.\nLater Altinn Studio will support creating and updating process through GUI.\nSource control In Altinn Repository the app developer can check in their source code for the different apps.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/oscloudplatform/",
	"title": "Operating Systems &amp; Cloud Platform",
	"tags": ["architecture", "infrastructure"],
	"description": "Operating Systems &amp; Cloud Platform defines the operating systems for containers and how the container are deployed to the cloud",
	"content": " Operating systems Container Operation Systems All containers are running on Alpine Linux, which includes apps created in Altinn Studio and the Altinn Platform components.\nCloud Platform Orchestrating \u0026amp; Sceduling We use Kubernetes to manage the application containers for the different solutions.\nWe use Azure Kubernetes Services that is a managed Kubernetes administration in Azure.\nRead more about our Kubernetes Clusters\nService Mesh \u0026amp; Proxy We use Traefik as Proxy in the Kubernetes.\nCurrently we dont use Service Mest technolgies\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/",
	"title": "Altinn Platform",
	"tags": ["altinn-apps"],
	"description": "Altinn Platform contains components with central functionality that can be used by apps. Currently, this is storage, authentication, authorization, profile, register, receipt, and pdf.",
	"content": "The components are deployed as microservices.\nSee below for details about each component.\n\rAuthentication\rThe authentication component provides functionality to authenticate users and systems accessing Altinn Apps and Altinn platform.\n\r\rAuthorization\rThe authorization component contains a highly flexible policy decision point and policy retrieval point to authorize access to applications and Altinn platform components.\n\r\rPDF\rThe PDF component is responsible for generating PDF printouts for submitted instances of an app.\n\r\rProfile\rThe Profile component gives profile information for users in Altinn.\n\r\rReceipt\rThe Receipt component in Altinn Platform presents a receipt for apps\n\r\rRegister\rThe Register micro service gives register information to Apps.\n\r\rStorage\rThe Storage component gives storage capabilities to the apps.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/appdeploy/",
	"title": "Application build &amp; deploy capabilties",
	"tags": ["architecture"],
	"description": "Application developers using Altinn Studio to create Applications have access to build &amp; deploy capabilties",
	"content": " Code compilation Container build Service developers have access to container build capabilities using build pipelines.\nApp deployment Service developers have access to app deployment to all available environments using deploy pipeline.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/build_and_test/",
	"title": "Build &amp; Test Capabilities",
	"tags": ["architecture"],
	"description": "Build &amp; Test Capabilties involves everything from the capability to write and building code to the different types of testing of th ecode",
	"content": " Below list the capabilities with a short description and possible link to the different components providing that capability.\nSoftware Generation Capabilties Code \u0026amp; Config Writing Capability Most of our code is written manually.\nSee development application components to get a overview over tools and application we use.\nBuild \u0026amp; Integration Enablement Capabilities Software Compilation \u0026amp; Validation The project uses .Net, Java or Typescript compilers\nSofware Linking \u0026amp; Packaging The project has the capability to build packages.\nSee development application components for details how we do this.\nBuild Orchestration We use Auzure Pipelines to build the source code.\nSee development application components to get a overview over tools and application we use.\nContinuous Integration Capabilities Azure Piplines are used for Continuous Integration. When a pull request is created a build is triggered that builds the code and run unit and integration tests\nTest Management Capabilities Test Case \u0026amp; Script Creation \u0026amp; Management  Test scripts are collected in Github.  Test Execution Tracking \u0026amp; Reporting The team\nTest Data Creation \u0026amp; Management  Test data for local testing and integration testing is kept in Github.  Test Execution \u0026amp; Automation Capabilities Functional Test The devopsteam has the capability to perform functional testing\nUnit Test As part of the development unit test are created. They are run for every pull request\nService \u0026amp; API Test Performance Testing \u0026amp; Profiling "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/softwareconfiguration/",
	"title": "Software Configuration &amp; Release Management Capabilities",
	"tags": ["architecture"],
	"description": "Software Configuration &amp; Release Management Capabilities process of tracking changes and handle new releases for a application",
	"content": " Version, Release \u0026amp; Artefact Management Capabilities Version Management Artefact Management Software Configuration Management Release Management Continuous Del. Pipeline Management The goal is to deliver continously.\nDeployment Capabilities Deployment Orchestration Capabilites The devopsteam has the capability to orhecstrate deployes. Both autmatic and manual deploy is supported.\nSee development application components to get a overview over tools and application we use.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/theming/",
	"title": "Theming and styling",
	"tags": [],
	"description": "Solution for theming and styling conventions.",
	"content": " Altinn Studio is based on Material-UI, a UI components library that focus exclusively on the React library. At this point the SBL-forms are based on Bootstrap. This might change in the future in order to support more sophisticated forms and the possibilty to write forms in other languages than React + Bootstrap.\nBoth the forms that are produced and the editor will have the possibilty to change theme. By default Altinn Studio will use the Altinn theme. The theme will at this point only change colors and fonts in Altinn Studio. The colors are base on the altinn color palette.\nCSS Components are devided into two groups. Shared components that is used several times and should be accessible for several apps. And components that are specific for one app or view. CSS for a component is set in its representative tsx-file with paramethers linking to the theme.\nHow to change theme Changing the theme without having to do alot of changes to the code is post-MVP.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/",
	"title": "Altinn Apps",
	"tags": ["solution", "apps"],
	"description": "Altinn Apps is a flexible, scalable and isolated hosting solution where apps created in Altinn Studio is deployed. The applications has a web native architecture and is deployed to Kubernetes Clusters as docker containers.",
	"content": "The Kubernetes clusters are isolated between the different applications owners and hosted in a public cloud solution making it highly scalable.\n\rApp\rDescription of the app created in Altinn Studio and that is deployed to Altinn Apps.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/environments/",
	"title": "Environments",
	"tags": ["architecture"],
	"description": "Description of the environments",
	"content": " Altinn Studio, Altinn Apps and Altinn Platform is deployed in serveral environments for different usage.\nDevelopment Environments This is a dedicated devlopment environent\nTest environment Pre Production Environemnt Production Environment "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/known-issues/",
	"title": "Known issues",
	"tags": ["issues"],
	"description": "Description of errors and weaknesses in Altinn Studio that developers should know about.",
	"content": "   let content = document.getElementById('knownIssuesContent'); if (content.innerHTML === '') { content.innerHTML = 'Loading from github...'; } axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://github.com/Altinn/altinn-studio/blob/master/KNOWNISSUES.md`) .then((res) = { const doc = new DOMParser().parseFromString(res.data, \"text/html\"); content.innerHTML = doc.getElementById('readme').innerHTML; });  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/local-dev/",
	"title": "Solution-specific application components local deveolopment",
	"tags": [],
	"description": "As part of the platform it is created a solution to develop and test applications",
	"content": " Localtest loadbalancer We use NGINX as loadbalancer for local development. Based on rules it redirect traffic between localtest platform and the app.\nCall between apps and localtest goes directly.\nApp The app is of course same as it is in Altinn Apps. The difference is that it does not run as a container.\nSee Altinn Apps for details about the construction components on a App.\nLocaltest platform Localtest platform is a application that have the same webApis that are available to apps from Altinn.Platform in test and production environments\n\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/apptemplates/asp.net/",
	"title": "ASP.NET Web Application Template",
	"tags": ["altinn-apps"],
	"description": "Description of ASP.NET Web based App template for Altinn Apps",
	"content": "This template is based on a ASP.NET Core Web application with Rest APIs\nIt is integrated with Altinn Platform making it easy to utilize the functionality provided in Altinn Platform like storage, authentication, authorization and other components.\nFor web applications that need a web based UI, it has a React based frontend that can be configured in Altinn Studio.\nASP.Net Core is a cross-platform, high performance, open-source framework for building modern cloud-based, Internet-connected application.\nTogether with the added Altinn functionality in the template, it is a effective platform to build applications powered by Altinn Platform.\nApplications based on this templates are buildt as Docker Containers and hosted in Kubernetes.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/",
	"title": "App",
	"tags": ["altinn-apps"],
	"description": "Description of the app created in Altinn Studio and that is deployed to Altinn Apps.",
	"content": "The App is created, designed and build in Altinn Studio and deployed to Altinn Apps.\nCurrently there is only one \u0026ldquo;App Template\u0026rdquo; that is used, but in future the App could be based on different types of templates and even different types of frameworks.\nThe App template contains functionality for API, process handling, GUI, and many other features making it easy for the developers to create a Apps to support different types of functional needs.\nThe current version contains support for simple user needs, but the platform and the app templates will get more functionality in the future.\n\rApp templates\rThe Altinn Apps architecture support that applications can be buildt based on many different framworks/templates. These are the current supported templates\n\r\rApp API\rDescription of the API available in an app created in Altinn Studio.\n\r\rFeatures\rDescription of features in App\n\r\rFrontend\rDescription of the optional app frontend created in Altinn Studio and that is deployed to Altinn Apps.\n\r\rProcess handling\rDescription of the process handling capability of Apps created in Altinn Studio\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/app-api/",
	"title": "App API",
	"tags": ["altinn-apps"],
	"description": "Description of the API available in an app created in Altinn Studio.",
	"content": "NOTE: Work in progress. Stuff will change.\n\rAPI\u0026rsquo;s have always been important to the Altinn platform. About 50% of all data going throug Altinn to organisations are coming from end user systems implementing Altinn Apis\u0026rsquo;s (SOAP and REST). More than 100 different vendors of different types of applications integrates with Altinns appi and submits data for different apps.\nIn addition mobile apps and external governmental portal consumes Altinn Apis to allow users to use services outside the Altinn Portal.\nOrganisations also have seperate APIs to interact with the apps. The below figure shows the different consumers of the API\u0026rsquo;s and show that consumers both interact with the App Apis and the shared platform Api\u0026rsquo;s.\n\n\rREST-API for End User Systems\rDescription of the Rest API for end user systems\n\r\rREST-API for orgs\rDescription of the API for organisations (orgs).\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/authentication/",
	"title": "Authentication",
	"tags": ["platform", "authentication"],
	"description": "The authentication component provides functionality to authenticate users and systems accessing Altinn Apps and Altinn platform.",
	"content": " The authentication component is not an ID-provider and only create authentication sessions based on external ID-providers.\nThe authentication component creates JWT tokens with claims about user and system. The claims are based on the authentication information coming from the ID-providers.\nToken exchange for Altinn Portal When a user logs in to the Altinn Portal (Legacy Solution) it gets a Cookie containing information about the logged-in user. This cookie is a propiaritary format for ASP.Net (Full Framework) and can only be understood with application based on .Net full framework having access to the symmetric encryption key. The Altinn Platform is based on .ASP.Net core I cant understand the cookie.\nTo allow for a user accessing an App in Altinn Apps or a component in Altinn Platform the current platform will expose an API that can decrypt an ASP.Net cookie and return user information to the Authentication component in Altinn Platform.\nToken exchange for maskinporten Organizations authenticated in maskinporten can exchange their JWT token for a valid Altinn Platform JWT token to be used against Altinn Apps and Altinn Platform.\nToken exchange for ID-porten End users authenticated through ID-porten can exchange their JWT token for a valid Altinn Platform JWT token to be used agains Altinn Apps and Altinn Platform.\nArchitecture See the application solution components for details about the functional components in authentication.\nThe application construction components for details how this component is constructued.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/authorization/",
	"title": "Authorization",
	"tags": ["platform", "authorization"],
	"description": "The authorization component contains a highly flexible policy decision point and policy retrieval point to authorize access to applications and Altinn platform components.",
	"content": "The authorization component as based on XACML 3.0 and support both simple and complex policies defined for applications.\nThe Policy Decision Point\nThe Policy Retriavel Point identifes the correct policy for a request\nThe context handler get all information needed to authorize the request.\nThe authorization component consist of a Policy Decision Point (PDP), Policy Retriaval Point (PRP) and is integrated with other external Policy Information Points.\nApps integrated with PDP to authorize access to applications.\nIt also provides list for possible parties that a user or organization could represent.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/apptemplates/asp.net/configuration/",
	"title": "Configuration of Application",
	"tags": ["altinn-apps"],
	"description": "Description of the different configuration of the",
	"content": " Configuring Process The App process is controlled by a BPMN 2.0 process file located in the app repository.\nSee architecture for supported types of steps.\nConfiguration of Authorization Policy The authorization policy is defined as a XACML 3.0 policy file.\nConfiguration of allowed data elements "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/apptemplates/asp.net/customizing/",
	"title": "Customzing Application",
	"tags": ["altinn-apps"],
	"description": "Description of you can customize the app based on this template",
	"content": " Adding custom API\u0026rsquo;s It is possible to add custom API\u0026rsquo;s to the app. The need to be added as web-api controllers in the app project.\nSee development handbook for a step to step guideline for adding custom API\u0026rsquo;s to the application.\nConsuming custom API\u0026rsquo;s A app can consume any REST-API avaiable on the Internet.\nSee development handbook for a step to step guideline for consuming external API\u0026rsquo;s.\nCustom frontend If the standard UI-editor is to limited it is possible to build a custom frontend with the single page application (SPA) framework of your choice. (React, Angular, Vue etc ++). You need to compile the SPA application and add it to the wwroot folder of the app. In addition you would need to modive the index.cshtml file to\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/features/",
	"title": "Features",
	"tags": ["altinn-apps"],
	"description": "Description of features in App",
	"content": " Prefill The App can prefill data in the datamodels for the app based on standard configuration for profile and register data, but can also prefill data based on data from organisation or prefill based on logic define in the custom app logic defined by the application developer.\nData validation The App can validate the datamodel based on the datamodel itself and based on custom app logic defined by the application developer.\nData Calculation The App can calculate data in the datamodels based on custom applogic defined by the application developer.\nInstansiation Hooks The App can perform instansiations checks based on custom app logic defined by the application developer.\nPolicy Enforcment The App has built in Policy Enforcments Points at the different API endpoints to make sure that the user / system is authorized to perform operation on the app / data. This includes checks on\n Roles Rights Authentication level  Formset In the future the App will support multiple datamodels.\nPDF of data The App will be able to present at PDF of the data.\n\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/apptemplates/asp.net/files/",
	"title": "Filestructure in template",
	"tags": ["altinn-apps"],
	"description": "Description of the files in the ASP.Net template",
	"content": " The template contains serveral standard files that is added to the repository when app is created.\nProcess The Process.xml defines the business process of the app and is based om BPMN 2.0. The app supports differen types of processes.\nSee standard BPMN file in template\nXACML The Polixy.xml defines the authorization policy with rules. Is based on XACML 3.0.\nThe XACML is imported in to authorization component.\nSee standard XACML file in template\nUI The Formlayout.json defines the rendering of the UI based on Altinn Studio UI designer. For Apps without frontend this is not needed.\nText Resources The App can be breated with multiple langauges at the same time. The different texts are put in language files for each language.\nPrefill Prefill.json defines the prefill for a app\nDockerfile Defines the docker image\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/frontend/",
	"title": "Frontend",
	"tags": ["altinn-apps"],
	"description": "Description of the optional app frontend created in Altinn Studio and that is deployed to Altinn Apps.",
	"content": " A App created in Altinn Studio can have a optional frontend to allow end user use API from web browser.\nThis frontend is a React based SPA (Singe Page Application) that uses configuration to render based settings for a given application.\nUI rendering The UI-Render functionality in App Frontend render the UI based on configuration set in Altinn Studio.\nUI-Components The supported UI-components can be seen here\nTheming In the future Altinn Apps will support theming making it possible to have different style on the App.\nSee epic for this issue on Github.\nUI Layout In the future Altinn Apps will support different types of layout. Now the support is limited to one page UI that is mobile friendly.\nSee epic for this issue on Github\nUI logic As part of designing UI, there can be defined UI-logic that do stuff dynamic rendering (hide or show parts of ui based on input or other parameters) or update data.\nCustom Navigation In the future the App will support different types of navigation to See epic for this issue on Github\nTranslation In the future the App will support having multiple languages in a App See issue for this on Github\nPages In the future the App will support having ui over multiple pages See issue for this on Github\nOn Github you can find all issues related to App-Frontend.\nCustom Frontend In the future it is possible that Altinn Studio will support having a frontend that is costum application created by the developer. This could be a frontend based on any javascript based frameworks like Angular,\nSee Github for issue\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/pdf/",
	"title": "PDF",
	"tags": ["platform", "pdf"],
	"description": "The PDF component is responsible for generating PDF printouts for submitted instances of an app.",
	"content": "The endpoints available in the pdf component is documented here.\nSee all open issues for pdf on Github\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/processhandling/",
	"title": "Process handling",
	"tags": ["altinn-apps"],
	"description": "Description of the process handling capability of Apps created in Altinn Studio",
	"content": " A app have a defined business process. The business process can consist of serveral type of task in different orders.\nIf you want details about the business process architechture see Business Process Architecture\nTasks Formfilling Signing Payment Events \r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/profile/",
	"title": "Profile",
	"tags": ["platform", "profile"],
	"description": "The Profile component gives profile information for users in Altinn.",
	"content": "Apps uses it to present information about logged in user or other user information.\nSee all open issues for Profile on Github\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/app-api/eus-rest/",
	"title": "REST-API for End User Systems",
	"tags": ["altinn-apps"],
	"description": "Description of the Rest API for end user systems",
	"content": " NOTE: Work in progress. Stuff will change\n\rThe main API\u0026rsquo;channel for data in the platform is REST for apps created in Altinn Studio.\nThe end user system needs to call different APIS based on the need. The below figure show the different components relevant for an end user System calling Altinn through REST.\n\nAPI to authenticate end user systems For new API\u0026rsquo;s the goal is to use JWT Tokens to authenticate against the API.\nAltinn Apps will expose apis to authenticate end user systems and user of end user systems and return JWT Tokens that can be used against the other API\u0026rsquo;s.\nAPI to create new data instance for an app From end user systems it will be possible to create a instance of an App from a end user system. This is a URL directly to the app and unique\nSee Application Users API\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/app-api/org-rest/",
	"title": "REST-API for orgs",
	"tags": ["altinn-apps"],
	"description": "Description of the  API for organisations (orgs).",
	"content": " NOTE: Work in progress. Stuff will change.\n\rFor apps created in Altinn Studio and hosted in Altinn Apps, REST-API are the main channel to interact with the App / Altinn Platform.\nAPI to authenticate end agency systems In the current Altinn Platform SOAP is used for most of the agencies API\u0026rsquo;s. Altinn support both username/password for agencies.\nAPI to instansiate a new instance of an app with prefill See Application Users API\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/receipt/",
	"title": "Receipt",
	"tags": ["platform", "register"],
	"description": "The Receipt component in Altinn Platform presents a receipt for apps",
	"content": "The Receipt component is build to present receipt for all apps. Since apps over time will be removed from Altinn Apps, but the data will live forever the Receipt component is responsible for presenting a generic receipt view.\nThe endpoints available in the receipt component is documented here.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/register/",
	"title": "Register",
	"tags": ["platform", "register"],
	"description": "The Register micro service gives register information to Apps.",
	"content": "  ER - Enhetsregisteret - Information about organisations in Norway DSF - Det Sentrale Folkeregisteret - Information about citizens in Norway.  ER - Enhetsregisteret ER registeret can be used to prefill information, retrieve information based on user input or for validation of input of users.\nAltinn Platform does not have a own copy of ER. It currently uses Altinn II plaform as source for register.\nSee Application architecture for details.\nSee all open issues for Register on Github\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/storage/",
	"title": "Storage",
	"tags": ["platform", "storage"],
	"description": "The Storage component gives storage capabilities to the apps.",
	"content": " Storage support storage of structured and unstructured data for apps. Apps that need the cabability to store data uses the storage service in the Altinn platform to store both metadata and actual data.\nMetadata Stored in Azure Cosmos Db.\nFormdata and attachments Stored in Azure Blob Storage. One storage account for each application owner.\nAdditional details See Application Architecture for details about the solutions components in Storage.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/cli/",
	"title": "Altinn CLI",
	"tags": [],
	"description": "ALtinn CLI is a command line application that can be used by service owneres to access Altinn Api&#39;s. The application has as standard implemented functions for creating Altinn Applications and insatnces, functions for fetch and store application data. ALtinn CLI can be found on the GIT repo https://github.com/Altinn/altinn-cli. The application can be used as standrad or extended with custom function devloped by the service owners themselves.",
	"content": " Concepts The consepts of the CLI application is releated to the different parts og a command line command.\nExample: Storage GetData appId=ttd/how-to-name-it processIsComplete=true\nCommand is \u0026ldquo;Storage\u0026rdquo; SubCommand is \u0026ldquo;GetData\u0026rdquo; Option is \u0026ldquo;appId=ttd/how-to-name-it\u0026rdquo; \u0026ldquo;processIsComplete=true\u0026rdquo;\nCommand The name of the cammand shall give an indication of which system component that shall be accessed.\nSubCommand A sub command defines the operation to be performed on the Command component\nOption Options are often used as filter criterias that can be a part op the API call.\nStandard Commands Login To use the CLI Application a successfull login is required. The Login operation requires a valid Service Owner Ceritificat. The command will use the ceritication to generate a jwt-token which is autenticated by Maskinporten. A successfull autentication gives a \u0026ldquo;converted\u0026rdquo; as response. The response token will then be used as a part of the header in all API calls.\nHelp The Help command displays help information that is registered on commands, subcommands and options according command line options.\nExample : Help Storage displays the available Storage subcommands. Help Storage GetData displays help information registred on the GetData subcommand which shall a command description and a list with description on all options that can be used.\nStorage The Storage command is used to fetch and upload instance data.\nStorage SubCommands GetData GetData fetches data elements from Storage. Data can be fetched for an Applikation with different filter criterias or data can be fetch for a spesific owner and instance.\nExamples:\nStorage GetData ownerId= instanceId= dataId= fetches a speicifc data element\nStorage GetData appId=  fetchs all data elements for an application whoose status processing is set to completed\nGetInstance UploadData Upload uploads a data element to storage, for instance a receipt.\nExample:\nStorage UploadData ownerId= instanceId= elementType= file= The command options defines application owner and to which instance the data shall attached and the full path to the file that shall be uploaded.\nApplication The Application command is used to create application and application instances. It is also possible to upload when creating an instance. Data is attached by specifying file option with path to a file. .\nCreateInstance Software Implementasjon The main goal for how the software is build is that adding new commands, subcommands and options shall be simple. This is solved by implementing a generic command interpreter that does not require changes when new commmands,subcommands and options are added. The generic implementation is based on software Interfaces. This requires that new software classes implements propriate interfaces so they can be found when matching command line values against commands, subcommands and options. The second important implementation detail is that the commands with definitions is defined in a json file, CommandDefs.json. The file is part of the project as an embedded resource but can be modified and saved at the location defined in the Application setting parameters CommandDefinitionFile. The CLI Application searches for the file at startup, the CommandDefinitionFile is search first.\nApplication settings Setting which is required for the CLI Application is defined in the appsettings.json file. Initial content of this file is:\n{ \u0026quot;APIBaseAddress\u0026quot;: \u0026quot;https://platform.at21.altinn.cloud/storage/api/v1\u0026quot;, \u0026quot;AppAPIBaseAddress\u0026quot;: \u0026quot;https://{org}.apps.at21.altinn.cloud\u0026quot;, \u0026quot;UseLiveClient\u0026quot;: \u0026quot;True\u0026quot;, \u0026quot;StorageOutputFolder\u0026quot;: \u0026quot;c:/storage/Output\u0026quot;, \u0026quot;StorageInputFolder\u0026quot;: \u0026quot;c:/storage/Input\u0026quot;, \u0026quot;CommandDefinitionFile\u0026quot;: \u0026quot;C:/storage/CommandDefs/Commands.json\u0026quot;, \u0026quot;MaskinportenBaseAddress\u0026quot;: \u0026quot;https://oidc-ver2.difi.no/idporten-oidc-provider\u0026quot;, \u0026quot;AuthBaseAddress\u0026quot;: \u0026quot;https://platform.at21.altinn.cloud/authentication/api/v1\u0026quot;, \u0026quot;tokenSettings\u0026quot;: { }     Setting Description     Addresse Defines the base part of API\u0026rsquo; Url. The specific address to be used is selected by dedicated ClinetWrapper which forwards it to the HttpClientWrapper which computes a complete URL.   UseLiveClient Used to swithc between type of ClientWrappers accessing either the API or a wrapper used by unit tests or testing without accessing the actual API.   StorageInputFolder Defines folder for storing fetched files   StorageOutputFolder Defines folder for where files to send shall be fetched   CommandDefinitionFile Defines in which folder the command definition file CommandDefs.json is located.    Kommando Definisjon The command definition file, CommandDefs.json defines all commands with subcommands and options which can be \u0026ldquo;executed\u0026rdquo; i the CLI application. The file is initially a resource is the development project. New commands can be added following this format:\n{ \u0026quot;Name\u0026quot;: \u0026quot;Login\u0026quot;, \u0026quot;SubCommands\u0026quot;: [ { \u0026quot;Name\u0026quot;: \u0026quot;Maskinporten\u0026quot;, \u0026quot;Options\u0026quot;: [ { \u0026quot;Name\u0026quot;: \u0026quot;clientId\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;Guid\u0026quot;, \u0026quot;valuerange\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;client guid id\u0026quot;, \u0026quot;apiname\u0026quot;: \u0026quot;clientid\u0026quot; }, ] } ] }  First element Name: defines the command name, next Name defines the subcommand name. No other parameters can be defined on this level. Options is an array with following elements:\n   Element name Description     Name name of the option, the same must be used on the command line, not case sensitive   type option datatype. See list below for valid types, type is case sensitive   valuerange valid range   description description of the parameter to be used in Help   apiname name of the option in the API that is accessed, name is case sensitive    Valid Data typers    Option Type System Type Opsjons klasse     bool System.Boolean NumberOption   byte System.Byte NumberOption   sbyte System.Decimal NumberOption   double System.Double NumberOption   float System.Single NumberOption   int System.Int32 NumberOption   uint System.UInt32 NumberOption   long System.Int64 NumberOption   ulong System.UInt64 NumberOption   object System.Object NumberOption   short System.Int16 NumberOption   ushort System.UInt16 NumberOption   string System.String NumberOption   datetime System.DateTime NumberOption   guid System.Guid NumberOption   file System.IO.FileStream FileOption   thumbprint System.String ThumbPrintOption    Class Overview \nProgram Program is the startup \u0026ldquo;class\u0026rdquo; in the CLI Application. It’s main purpose it to implement CLI functionality and register classes that handles commands and subcommands. Register means in this context to scan the application for classes that implements interfaces that shall be searchable in the generic code.\nICommand Must be implemented by all command classes ISubCommandHandler Must be implemented by all subcommand classes IHelp Implemented on all classes that have info to be display by the help command\nThe actual CLI implementation consist in reading the keyboard and forward it to the ApplicationManager\nLogging Logger is injected to the registered command and is configured as a part of the service registration. Logging is default configured to output on console and file for all log levels.\nLog.Logger = new LoggerConfiguration() .MinimumLevel.Debug() .WriteTo.File(\u0026quot;log.txt\u0026quot;, LogEventLevel.Information) .WriteTo.Console(restrictedToMinimumLevel: LogEventLevel.Information) .CreateLogger();  ApplicationManager The ApplicationManager instantiates command and eventually subcommand from the two first console input parameters. The parameters are used as search criteria’s for finding relevant command/subcommand classes. If a match is found command line input option parameters will be matched and validated against selectable options. Not found or illegal value will terminate the command and a proper log message will be displayed in the consol.\nCommand A command class must implement the ICommand interface to be registered in Program. That makes the command available for the generic code which is selecting a command based on the command line input. The selection is based on the implementation of the ICommand interface and the Name property which must match the command name on the command line. The command itself is executed by calling any of the the command class Run methods. There exist two Run commands, one with the SubCommand as parameter and one with a list of command line input parameters that is called if no subcommand is specified.\npublic interface ICommand { /// \u0026lt;summary\u0026gt; /// Run the supported command handler /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;commandHandler\u0026quot;\u0026gt;the command handler to execute\u0026lt;/param\u0026gt; void Run(ISubCommandHandler commandHandler = null); /// \u0026lt;summary\u0026gt; /// Parses the dictionary and run command. Used mainly by Help /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;input\u0026quot;\u0026gt;Dictionary with the cli input paramters\u0026lt;/param\u0026gt; void Run(Dictionary\u0026lt;string, string\u0026gt; input); /// \u0026lt;summary\u0026gt; /// Gets the name of the service /// \u0026lt;/summary\u0026gt; string Name { get; } }  SubCommand public interface ISubCommandHandler : IValidate { /// \u0026lt;summary\u0026gt; /// /// \u0026lt;/summary\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt; bool Run(); /// \u0026lt;summary\u0026gt; /// Name of the command handler /// \u0026lt;/summary\u0026gt; string Name { get; } /// \u0026lt;summary\u0026gt; /// Name of the command for which the command is implemented /// \u0026lt;/summary\u0026gt; string CommandProvider { get; } /// \u0026lt;summary\u0026gt; /// Dictionary with cli input options /// \u0026lt;/summary\u0026gt; Dictionary\u0026lt;string,string\u0026gt; DictOptions { get; set; } /// \u0026lt;summary\u0026gt; /// /// \u0026lt;/summary\u0026gt; public List\u0026lt;IOption\u0026gt; SelectableCliOptions { get; set; } /// \u0026lt;summary\u0026gt; /// Dictionary with cli input options /// \u0026lt;/summary\u0026gt; List\u0026lt;IOption\u0026gt; CliOptions { get; set; } /// \u0026lt;summary\u0026gt; /// Dictionary with cli input options /// \u0026lt;/summary\u0026gt; IFileWrapper CliFileWrapper { get; set; } /// \u0026lt;summary\u0026gt; /// Builds the options that can control the command. /// \u0026lt;/summary\u0026gt; void BuildSelectableCommands();  Option An Option binds the definitions specified at the command line to a definition defined in the CommandDefinition file. The handling of the option is as described in the ApplicationManager description partly done by generic code. Partly means here creation of correct option type based on the option\u0026rsquo;s type definition property and the activation of validation. The actual validation is implemented in the option class itself. An Option base class is implemented with basic functionality like the TryParse method that is used as a part of the validation of the NumberOption type.\n/// \u0026lt;summary\u0026gt; /// Interface that defines the propertioes and methods that /// shall be implemented by an Option class /// \u0026lt;/summary\u0026gt; public interface IOption : IValidate { /// \u0026lt;summary\u0026gt; /// The Name og the oprtion that must match the Name /// of the otion in the CommandDefinition file /// \u0026lt;/summary\u0026gt; public string Name { get; set; } /// \u0026lt;summary\u0026gt; /// The name of the opsjon in ther API. /// \u0026lt;/summary\u0026gt; public string ApiName { get; set; } /// \u0026lt;summary\u0026gt; /// The value of the option as a string /// \u0026lt;/summary\u0026gt; string Value { get; set; } /// \u0026lt;summary\u0026gt; /// Defines if the option is defined with a vlue in /// the command line /// \u0026lt;/summary\u0026gt; bool IsAssigned { get; set; } /// \u0026lt;summary\u0026gt; /// The description of the option that will be used by help /// \u0026lt;/summary\u0026gt; string Description { get; set; } /// \u0026lt;summary\u0026gt; /// Valid range for the paramtere. /// \u0026lt;/summary\u0026gt; string Range { get; set; } /// \u0026lt;summary\u0026gt; /// Gets the typed value of the option as defined /// in the option definition /// \u0026lt;/summary\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt; object GetValue(); }  A set of Option classes is implemented to cover the most used system types. Mapping from the type set in the definition file to a C# class is shown in the table in the subchapter Valid Data Types. The main reasons for implementing dedicated classes is the possibility to implement generic handling of them together with the advantage of implementing separate code in them like validation.\nNumberOption - represent all simple System Data Types FileOption - represent a file, the value of the option shall contain full path to the file. The validation verifies that the file exists. ThumbPrintOption - This option is used as to represent the *thumbprint\u0026rdquo; value in the ceritificat that is used in Login.\nOptionBuilder Much of the handling of Options is done by the Singleton class OptionBuilder. Main reason for making it as a Singleton is to avoid reading the CommandDefs file for each command. The file is read initially and save in the class member CfgCommands.\nThere are two public methods in the OptionBuilder, BuildAvailableOptions andAssignValueToCliOptions.\nBuildAvailableOptions BuildAvailableOptions finds command/subcommand in the list of available commands defined in the CommandDefs.json and according to defined type instantiates classes with options of correct type.\nAssignValueToCliOptions AssignValueToCliOptions is responsible for validation and assignment of input options. Not valid options/option values are logged, and command is terminated.\nValidation NumberOption\nValidation is done by the generic method TryParse which is call in the Validate method.\nFileOption\nThe FileOption class overrides the Base class defined Validate method. The actual validation consist in a check for the existence of the specified file.\nThumbPrintOption\nThe ThumbPrintOption class overrides the Base class defined Validate method. The actual validation consist is a check for the existence of a certificate in the \u0026ldquo;LocalStore\u0026rdquo; with same thumbprint as the specified thumbprint.\nClientWrapper The construction of the URL is done in dedicated ClientWrapper classes. A dedicated wrapper shall be made for each command. An Interface that defines all public methods in the wrapper shall be made. The interface shall be implemented in a test wrapper that shall be used in unit testing.\nTest Wrapper The test wrapper shall be coded and configures to make verification of command execution possible without connecting to the actual API. The class will mainly be used in unit testing but can also be used to test with real data. That is best done by catching \u0026ldquo;responses\u0026rdquo;, saving the respons and use it in the test that can load the response file(s).\nHttpClientWrapper The HttpClientWrapper make the HHP(s) requests. The wrapper builds the URL based on input parameter. In addition header with required parameters and tokens is build and attached to the requests that is required for authorization on the server side.\nExtensions Command Adding a new command requires following addtions:\n Command definition on the CommandDefs.json, must include subcommand and options. Command name must be unique. Folder in the development project named with the command name. C# class with name on the command. The class must implement ICommand and IHelp interface Interface which define the methods in the ClientWrapper that will be used by the SubCommandHandler. C# ClientWrapper and a ClientFileWrapper class which implements the ClientWrapper interface. Folder SubCommandHandlers as a subfolder to the new Command folder. C# class for the subcommand which inherits SubCommandHandlerBase and implements ISubCommandHandler and IHelp interface.  SubKommando  Extend command definition with new subcommand definition in CommandDefs.json, include Option definitions Eventually extend ClientWrapper interface with new method(s) which will be used by the new SubCommandHandler Eventually extend C# ClientWrapper and ClientFileWrapper with new methods defined in the interface C# class for the new subcommand which inherits SubCommandHandlerBase and implements ISubCommandHandler and IHelp interface.  Option  Extend subcommand with new option definition in CommandDefs.json Eventuelt utvide ClientWrapper Interface med ny(e) method(s) which will be used by the SubCommandoHandle for å få med nye opsjoner Eventually extend ClientWrapper interface with new methode(s) which will be used by the new SubCommandHandler Eventually extend C# ClientWrapper and ClientFileWrapper with new methods defined in the interface Add handling of the new options, if required, to the SubCommandHandler  None of the extensions shall require changes in the HttpClientWrapp\u0026rsquo;s. New methods shall be added if changes is required to avoid breaking existing code\n"
},
{
	"uri": "https://docs.altinn.studio/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "docs  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/dotnet-core/",
	"title": ".NET Core",
	"tags": ["tech", "programming"],
	"description": "Server side development framework.",
	"content": " .NET Core is the server side development framework used in Altinn Studio.\nLinks  https://dot.net https://dotnetfoundation.org https://github.com/dotnet https://github.com/aspnet  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/analysis/api/",
	"title": "API",
	"tags": ["analysis"],
	"description": "Analysis of the API area in Altinn Studio.",
	"content": "\r\rAgency APIs - analysis\rAn analysis of the agency API compatibility with Altinn Studio Apps.\n\r\r\r\rExternal APIs - analysis\rAn analysis of the SBL external API forward compatibility with Altinn Studio Apps.\n\r\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/analysis/api/agency/",
	"title": "Agency APIs - analysis",
	"tags": ["development", "analysis", "api"],
	"description": "An analysis of the agency API compatibility with Altinn Studio Apps.",
	"content": "#957\nAn analysis of the agency API compatibility with Altinn Studio Apps.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/presentation/altinn-cdn/",
	"title": "Altinn CDN",
	"tags": [],
	"description": "Description of Altinn Content Delivery Network",
	"content": "Altinn CDN is a safe place for hosting static resources that can be reused and cached client side.\n across Altinn solutions across all apps created in Altinn Studio across apps belonging to one organisation  These resources are defined in a repo on GitHub: https://github.com/Altinn/altinn-cdn\nThe files and folder structure in this repo is mirrored to https://altinncdn.no, and can be use by different solutions and apps.\nEach organisation (org) in Altinn has their own area for resources that they reuse across their apps. For example logo files. This means that organisations can, if they want to, easily change logo for all apps at once without deploying updates to each app.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-platform/",
	"title": "Altinn Platform",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/",
	"title": "Altinn Studio",
	"tags": [],
	"description": "System documentation for Altinn Studio, Altinn Apps and Altinn Platform.",
	"content": "\rDevelop digital applications using our tools and APIs\nLooking for technical guidance on how to build your own apps with our products? See the Altinn Studio user guide. (Partially in Norwegian.)\n\r\rAltinn Studio is the next generation Altinn application development solution. All you need for testing the preview is to register an account.\nAltinn Studio have an open backlog on GitHub and the code is open source. Everybody can create bugs, request features or ask questions.\nContributing to Altinn Studio   We love your input! We want to make contributing to this project as easy as possible.   Architecture   Description of the Altinn Studio architecture, build process, infrastructure and security.\n  Development handbook   The development handbook should provide the information needed to contribute to the development of Altinn Studio.\n  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/analysis/",
	"title": "Analysis",
	"tags": ["analysis"],
	"description": "Analysis of areas in Altinn Studio. Typically linked to a corresponding GitHub issue.",
	"content": "\r\rAPI\rAnalysis of the API area in Altinn Studio.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/deployment/",
	"title": "App Deployment",
	"tags": [],
	"description": "Altinn Studio will let the developer deploy apps to test enviroments and production without any manuel steps.",
	"content": "An app developer can build and deploy apps to all test and production environments available for that org.\nBuilds is based on the latest source code checked in to master branc for a given app. Each build can have a description. When build is complete the build can be deployed to a given environment.\nSee issues related to app-deployment on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/app-parameters/",
	"title": "App Parameters",
	"tags": ["process"],
	"description": "The application contain different parameters that controlls the behaviour.",
	"content": " The different parameters can be configured either in Altinn Studio UI or through modifying the configuration files in the application repository.\nSupported App Parameters  party type requirements  Not (yet) supported App parameters  Valid to Valid from  See all issues related to App-Parameters on Github\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/swagger/authentication/",
	"title": "Authentication",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Authentication.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/swagger/authorization/",
	"title": "Authorization",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Authorization.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/bmpn/",
	"title": "BMPN",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/bpmn/",
	"title": "BPMN",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/branching/",
	"title": "Branching",
	"tags": ["development", "git", "branching"],
	"description": "Branching information for Altinn Studio",
	"content": " Principles  Altinn Studio uses trunk-based development  This ensures the codebase is always releasable on demand and helps to make Continuous Delivery a reality.  Code is checked in using short living feature branches  naming standard for feature branches are feature/\u0026lt;issueNumber\u0026gt;-\u0026lt;description\u0026gt; , for instance: feature/1028-text-component naming standard for bug branches are bug/\u0026lt;issueNumber\u0026gt;-\u0026lt;description\u0026gt; , for instance: bug/877-performance-leak-ui-editor   Trunk Based Development Read more about trunk based development here.\n A source-control branching model, where developers collaborate on code in a single branch called “trunk” (master), resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after.\n Feature Branches Development is done on feature branches with short lifespans before PR is requested against the master branch.\nThe figure below illustrates\n A feature branch with three commits Pull request is create with QA and merge back to master A new commit (forth green circle) based on feedback from QA Merge back to master  Pull Requests A pull request (PR) is created to perform quality assurance (QA) and to merge a feature branch into master. You create a pull request after you have pushed your branch to our github repo.\n Include a reference to the issue that triggered the pull request (Fixes #issuenumber)  Once a pull request is submitted against our master branch it triggers various pipelines, such as builds, tests, static code analysis to ensure that code that breaks builds is not merged into master. These tests are triggered manually. Now that a PR has been submitted others may review your code and leave comments if they have feedback.\nOnce all the tests and QA have been completed we are ready to merge the new code into master. This is done using squash such that the history of the master branch is simple and understandable.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/c-sharp/",
	"title": "C#",
	"tags": ["tech", "programming"],
	"description": "Server side programming language.",
	"content": " C# is the server-side development language used in Altinn Studio.\nLinks  https://docs.microsoft.com/en-us/dotnet/csharp/ https://github.com/dotnet/csharplang  "
},
{
	"uri": "https://docs.altinn.studio/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/api-use/",
	"title": "Configure API use",
	"tags": ["api"],
	"description": "To be able to support &#34;once-only&#34; it is essensial that it is easy to do API-call from an app to other systems APIs.",
	"content": "For å forenkle dette kan en mulig løsning være å støtte en type gjenbrukbar asset av type \u0026ldquo;API-plugins\u0026rdquo;, som gjør det enkelt å gjøre kall.\nEn ukjent faktor er den kommende \u0026ldquo;API-katalogen\u0026rdquo;, og hvilke egenskaper den vil tilby.\n Enkel bruk av API\u0026rsquo;er. Se på det som gjøres i eBevis. Må bort fra dagens mappere.  Dette er et område som ikke ble sett på i PoC.\nSee all issues related to API-Usage on Github\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/prefill/",
	"title": "Configure Prefill",
	"tags": [],
	"description": "Altinn Studio will let the developer define prefill for datamodel from register and profile",
	"content": "The prefill configuration is handled by a json file where source values are linked to fields in the app data model. In order to add prefill to your application this file needs to be added to the repository alongside the datamodel under the models folder, with the same name as the data model it is connected to, and a prefill extension. So, if you have a data model named ServiceModel.xsd, the file should be named ServiceModel.prefill.json\nThe prefill comes with a json-schema and which gives auto complete on the source fields. In order to use this auto-complete feature you need to use an IDE or text editor that supports json-schema (such as Visual Studio, Visual Studio Code, IntelliJ etc). As of now there is no auto complete on the target fields.\nThe target fields are case insensitve, so writing Skattyterinforgrp5801.Infogrp5802.OppgavegiverNavnPreutfyltdatadef25795.value is the same as skattyterinforgrp5801.infogrp5802.oppgavegiverNavnPreutfyltdatadef25795.value.\nTo get started using prefill you can copy the following template into your repository:\n{ \u0026quot;$schema\u0026quot;: \u0026quot;https://altinncdn.no/schemas/json/prefill/prefill.schema.v1.json\u0026quot;, \u0026quot;allowOverwrite\u0026quot;: false, \u0026quot;ER\u0026quot;: { }, \u0026quot;DSF\u0026quot;: { }, \u0026quot;UserProfile\u0026quot;: { } }  The easiest way to work on the configuration file is to clone your repository locally, and edit the file in your preferred editor. To do this open a terminal and run - git clone https://altinn.studio/repos/[ORG]/[APP].git\nThen you can create the prefill config file under the models folder.\nThere are three sources you can prefill from as of now\n ER (enhetsregisteret) DSF (det sentrale folkeregisteret) UserProfile  All availiable source fields can bee seen here.\nThe allowOverwrite field is a flag to determine if existing values in the app data model can be overwritten by prefill data.\nBelow is an example of a prefill where two fields are connected to the name from DFS and user name from the user profile, and we have allowed prefill values to overwrite values in the data model:\n{ \u0026quot;$schema\u0026quot;: \u0026quot;https://altinncdn.no/schemas/json/prefill/prefill.schema.v1.json\u0026quot;, \u0026quot;allowOverwrite\u0026quot;: true, \u0026quot;ER\u0026quot;: { }, \u0026quot;DSF\u0026quot;: { \u0026quot;Name\u0026quot;: \u0026quot;Skattyterinforgrp5801.infogrp5802.OppgavegiverNavnPreutfyltdatadef25795.value\u0026quot; }, \u0026quot;UserProfile\u0026quot;: { \u0026quot;UserName\u0026quot;: \u0026quot;Skattyterinforgrp5801.infogrp5802.OppgavegiverAdressePreutfyltdatadef25796.value\u0026quot; } }  See issues related to prefill on Github\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/helptext/",
	"title": "Configure helptext",
	"tags": [],
	"description": "Help developer configure help texts for components",
	"content": "Help texts are small text snippets that provide a brief explaination of what the users are supposed to fill in to the fields that they describe.\nThe language-keys that point to the help text is defined in the form layout json file.\nIn your repo under the folder App/ui there is a FormLayout.json-file. The contents might be:\n{ \u0026quot;data\u0026quot;: { \u0026quot;layout\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;616071dc-90b1-4ce5-8d18-492844828a41\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;Header\u0026quot;, \u0026quot;componentType\u0026quot;: 0, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;ServiceName\u0026quot; }, \u0026quot;dataModelBindings\u0026quot;: {} }, { \u0026quot;id\u0026quot;: \u0026quot;fac3c047-efe1-49da-8189-da7c536a4edd\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;Input\u0026quot;, \u0026quot;componentType\u0026quot;: 2, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;21771.RapporteringsenhetNavndatadef21771.Label\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;21771.RapporteringsenhetNavndatadef21771.Label\u0026quot; }, \u0026quot;dataModelBindings\u0026quot;: { \u0026quot;simpleBinding\u0026quot;: \u0026quot;generellInformasjongrp2581.avgiftspliktiggrp50.rapporteringsenhetNavndatadef21771.value\u0026quot; }, \u0026quot;required\u0026quot;: true, \u0026quot;readOnly\u0026quot;: false }, { \u0026quot;id\u0026quot;: \u0026quot;08d707a9-2475-4d23-bf76-f209fb434ec2\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;TextArea\u0026quot;, \u0026quot;componentType\u0026quot;: 7, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026quot;, }, \u0026quot;dataModelBindings\u0026quot;: { \u0026quot;simpleBinding\u0026quot;: \u0026quot;avgiftspostergrp2577.posteneIOppgavengrp5639.tilleggsopplysningergrp197.omsetningsoppgaverTilleggsopplysningerdatadef19684.value\u0026quot; }, \u0026quot;required\u0026quot;: false, \u0026quot;readOnly\u0026quot;: false }, { \u0026quot;id\u0026quot;: \u0026quot;bd6589b6-e2ab-49ba-b39a-dd3f8b63e5de\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;Button\u0026quot;, \u0026quot;componentType\u0026quot;: 9, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;Send inn\u0026quot; }, \u0026quot;dataModelBindings\u0026quot;: {}, \u0026quot;textResourceId\u0026quot;: \u0026quot;Standard.Button.Button\u0026quot;, \u0026quot;customType\u0026quot;: \u0026quot;Standard\u0026quot; } ] } }  If you would like one of these components to have a help text you will need to\n Insert a key into text resources, under the tab \u0026ldquo;Language\u0026rdquo;  Remember to fill out all the fields, it will not let you save if you have fields that are empty.  Open the FormLayout.json-file Insert a new text resource binding with the key \u0026ldquo;help\u0026rdquo; and the value to be the name of the Language resource.  Example of how it looks after adding help text:\n{ \u0026quot;data\u0026quot;: { \u0026quot;layout\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;616071dc-90b1-4ce5-8d18-492844828a41\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;Header\u0026quot;, \u0026quot;componentType\u0026quot;: 0, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;ServiceName\u0026quot; }, \u0026quot;dataModelBindings\u0026quot;: {} }, { \u0026quot;id\u0026quot;: \u0026quot;fac3c047-efe1-49da-8189-da7c536a4edd\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;Input\u0026quot;, \u0026quot;componentType\u0026quot;: 2, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;21771.RapporteringsenhetNavndatadef21771.Label\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;21771.RapporteringsenhetNavndatadef21771.Label\u0026quot; }, \u0026quot;dataModelBindings\u0026quot;: { \u0026quot;simpleBinding\u0026quot;: \u0026quot;generellInformasjongrp2581.avgiftspliktiggrp50.rapporteringsenhetNavndatadef21771.value\u0026quot; }, \u0026quot;required\u0026quot;: true, \u0026quot;readOnly\u0026quot;: false }, { \u0026quot;id\u0026quot;: \u0026quot;08d707a9-2475-4d23-bf76-f209fb434ec2\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;TextArea\u0026quot;, \u0026quot;componentType\u0026quot;: 7, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;Skjema.TilleggsOpplysninger.Hjelpetext\u0026quot; }, \u0026quot;dataModelBindings\u0026quot;: { \u0026quot;simpleBinding\u0026quot;: \u0026quot;avgiftspostergrp2577.posteneIOppgavengrp5639.tilleggsopplysningergrp197.omsetningsoppgaverTilleggsopplysningerdatadef19684.value\u0026quot; }, \u0026quot;required\u0026quot;: false, \u0026quot;readOnly\u0026quot;: false }, { \u0026quot;id\u0026quot;: \u0026quot;bd6589b6-e2ab-49ba-b39a-dd3f8b63e5de\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;Button\u0026quot;, \u0026quot;componentType\u0026quot;: 9, \u0026quot;textResourceBindings\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;Send inn\u0026quot; }, \u0026quot;dataModelBindings\u0026quot;: {}, \u0026quot;textResourceId\u0026quot;: \u0026quot;Standard.Button.Button\u0026quot;, \u0026quot;customType\u0026quot;: \u0026quot;Standard\u0026quot; } ] } }  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/code-editor/",
	"title": "Create AppLogic with code",
	"tags": ["process"],
	"description": "App behavoir can be controlled by code",
	"content": " Code Editor for back-end logic A developer can edit logic that will be part of app-backend when application is running in Altinn Apps.\nSee Getting started to se how to do that.\nCode Editor for front-end logic A developer can edit logic that will run in the browser for a given app.\nSee Getting started to se how to do that.\nSee github issues related to logic \u0026amp; rules.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/data-modeling/",
	"title": "Data modeling",
	"tags": ["data-modeling"],
	"description": "Defining the data model(s) for an app is important. Altinn Studio will support importing existing data models and creating new data models.",
	"content": "The data model for an app typical defines the format of the data either sent to the app owner or presented in the app for the user. The data model is important for a consistent and formal definition of the data. It will be used for validation both from UI and for external systems.\nAltinn Studio will support both importing existing data model as XSD or creating a data modell. In MVP only import is in scope.\nSome requirements for Altinn Studio is:\n It should be easy to model data. Built in replacment for SERES (current tool). Need to support more formats.  See all issues related to Altinn Studio and data modeling on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/define-process/",
	"title": "Define process",
	"tags": ["process"],
	"description": "As part of the development one must define a process for the app that end user needs to follow.",
	"content": " A app will typical have a process that a end user / or system needs to follow. It could be anything from a single task process where the app is used to retrieve data from some external api, to long living processes with many tasks involving.\nIn Altinn Studio the developer will need to define the process for the app.\nIn current version of Altinn Studio the only support for process definition is to upload a BPMN process file and the only task type we support are FormFilling\n[See Process Architecture for more details how process is defined)(https://docs.altinn.studio/architecture/application/altinn-apps/app/app-backend/process/)\nSee all issues related to Altinn Studio and workflow on Github.\nInstansiations hooks Instansiation is the event that triggers a new instance of a App and starts the process for that instance.\nRelated to this event a developer can set instansiations hooks that are triggered when a new process is started.\nSee Github for issues related to instansiation\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/docker/",
	"title": "Docker",
	"tags": ["tech", "containers"],
	"description": "Docker is the container technology used in Altinn Studio and for Altinn Studio Apps",
	"content": " Docker is used as the container technology for hosting Altinn Studio and Altinn Studio Repos.\nIn Altinn Studio Apps it is used to host the different apps created in Altinn Studio as seperate containers.\nLinks  https://www.docker.com https://hub.docker.com https://github.com/docker/docker-ce  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/api-expose/",
	"title": "Exposing API",
	"tags": ["api"],
	"description": "Apps created in Altinn Studio can be exposed as API together with GI, or only as API without any UI.",
	"content": "Each app will have its unique set of APIs. Compared to current API it makes it possible to create APIs that have documentation that is target for the specific app.\nFor more details, see https://docs.altinn.studio/altinn-api.\nSee all issues for API-Expose on Github\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/analysis/api/external/",
	"title": "External APIs - analysis",
	"tags": ["development", "analysis", "api"],
	"description": "An analysis of the SBL external API forward compatibility with Altinn Studio Apps.",
	"content": " #956\nAn analysis of the SBL external API forward compatibility with Altinn Studio Apps.\nLegend    Icon Status     ✅ No changes needed, will work as before.   🔢 Needs to handle ServiceCode / ServiceEditionCode.   🆔 Identifiers will change.   👽 Not part of the Altinn Studio concept, so this API can\u0026rsquo;t be used.   ⛔️ Not relevant or will be replaced by something better.    REST Token ✅ POST authorization/token/{authCode}/loguse 🛈\n✅ GET authorization/token/{authCode} 🛈\n✅ DELETE authorization/token/{authCode} 🛈\nRoleDefinitions 🔢 GET {who}/authorization/RoleDefinitions/{roleTypeID}?language={language} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n✅ DELETE {who}/authorization/RoleDefinitions/{roleTypeID} 🛈\n🔢 PUT {who}/authorization/RoleDefinitions/{roleTypeID}?language={language} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n🔢 GET {who}/authorization/RoleDefinitions?language={language} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n🔢 POST {who}/authorization/RoleDefinitions?language={language} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\nRights 🔢 GET {who}/authorization/rights 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n✅ DELETE {who}/authorization/rights/{rightID} 🛈\n✅ DELETE {who}/authorization/Rights/{receiverId}/rights/{authzRuleID}?rightID={rightID} 🛈\nRoles ✅ GET {who}/authorization/roles?language={language} 🛈\n✅ DELETE {who}/authorization/roles/{roleID} 🛈\nReportee ✅ GET reportees?showConsentReportees={showConsentReportees}\u0026amp;includeInactiveReportees={includeInactiveReportees} 🛈\n✅ GET reportees/{reporteeId} 🛈\n🔢 GET reportees?serviceCode={serviceCode}\u0026amp;serviceEdition={serviceEdition}\u0026amp;showConsentReportees={showConsentReportees} 🛈 ServiceCode/ServiceEditionCode is part of the input parameters.\n✅ GET {who}/authorization/Reportee/{receiverId}?reporteeId={reporteeId} 🛈\nAuthentication ✅ POST authentication/authenticatewithpassword 🛈\nProfile ✅ GET my/profile 🛈\n✅ GET {orgno}/profile 🛈\n✅ GET {orgno}/profile/contactinformation 🛈\n✅ POST {orgno}/profile/contactinformation 🛈\n✅ GET {orgno}/profile/contactinformation/{id} 🛈\n✅ DELETE {orgno}/profile/contactinformation/{id} 🛈\nLookUp 🔢 👽 GET {who}/lookup/{serviceCode}/{serviceEdition}?authorizationCode={authorizationCode} 🛈 \u0026ldquo;LookUp\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide APIs directly themselves. This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of the input parameters.\nMetadata 🔢 GET metadata?language={language} 🛈 ServiceCode/ServiceEditionCode is part of metadata-list.\n✅ GET metadata/correspondence/{serviceCode}/{serviceEditionCode}?language={language} 🛈 \u0026ldquo;Correspondence\u0026rdquo; will live on, so this API is not relevant for Altinn Studio.\n🔢 👽 GET metadata/formtask/{serviceCode}/{serviceEditionCode}?language={language} 🛈 \u0026ldquo;FormTask\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide forms. This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of input parameters and the returned metadata-list.\n🔢 👽 GET metadata/lookup/{serviceCode}/{serviceEditionCode}?language={language} 🛈 \u0026ldquo;LookUp\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide APIs directly themselves. This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of input parameters and the returned metadata-list.\n🔢 👽 GET metadata/formtask/{serviceCode}/{serviceEditionCode}/forms/{dataFormatId}/{dataFormatVersion}/xsd 🛈 \u0026ldquo;FormTask\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide forms and data models. This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of input parameters.\n🔢 👽 GET metadata/lookup/{serviceCode}/{serviceEditionCode}/schemas/{schema} 🛈 \u0026ldquo;LookUp\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide APIs directly themselves. This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of input parameters.\n🔢 👽 GET metadata/formtask/{serviceCode}/{serviceEditionCode}/attachmentrules/{ruleId}/xsd 🛈 \u0026ldquo;FormTask\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide metadata and data models (XSDs). This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of input parameters.\n⛔️ GET metadata/codelists?language={language} 🛈 Altinn Studio will provide a better solution (and APIs) for code lists.\n⛔️ GET metadata/codelists/{name}/{version}?language={language} 🛈 Altinn Studio will provide a better solution (and APIs) for code lists.\nOrganizations ✅ GET s?showConsentReportees={showConsentReportees}\u0026amp;includeInactiveReportees={includeInactiveReportees} 🛈\n✅ GET organizations/{organizationId} 🛈\nAttachments 🆔 POST {who}/messages/{messageId}/attachments/streamedattachment?fileName={fileName}\u0026amp;attachmentType={attachmentType}\u0026amp;language={language} 🛈 MessageId will probably change to GUID.\n🆔 DELETE {who}/messages/{messageId}/attachments/{attachmentId} 🛈 MessageId and attachmentId will probably change to GUID.\n🆔 POST {who}/messages/{messageId}/attachments/{attachmentId}?language={language} 🛈 MessageId and attachmentId will probably change to GUID.\n🆔 POST {who}/messages/{messageId}/attachments/{attachmentId}?fileName={fileName}\u0026amp;attachmentType={attachmentType}\u0026amp;language={language} 🛈 MessageId and attachmentId will probably change to GUID.\n🆔 GET {who}/messages/{messageId}/attachments 🛈 MessageId will probably change to GUID.\n🆔 POST {who}/messages/{messageId}/attachments?language={language} 🛈 MessageId will probably change to GUID.\n🆔 GET {who}/authorization/Attachments/{receiverId}?messageId={messageId}\u0026amp;attachmentId={attachmentId} 🛈 MessageId and attachmentId will probably change to GUID.\nMessages 🆔 🔢 GET {who}/Messages/{messageId}?language={language} 🛈 MessageId will probably change to GUID. Message contains ServiceCode/ServiceEditionCode.\n🆔 🔢 👽 PUT {who}/Messages/{messageId}?language={language}\u0026amp;complete={complete}\u0026amp;sign={sign} 🛈 MessageId will probably change to GUID. Message contains ServiceCode/ServiceEditionCode.\nMainForm/SubForm is not part of Altinn Studio concept. Same with DataFormatId/DataFormatVersion.\n🆔 DELETE {who}/Messages/{messageId} 🛈 MessageId will probably change to GUID.\n🆔 🔢 GET {who}/Messages?language={language} 🛈 MessageId will probably change to GUID. Message contains ServiceCode/ServiceEditionCode.\n🔢 👽 POST {who}/Messages?language={language}\u0026amp;complete={complete}\u0026amp;sign={sign} 🛈 Message contains ServiceCode/ServiceEditionCode.\nMainForm/SubForm is not part of Altinn Studio concept. Same with DataFormatId/DataFormatVersion.\n🆔 👽 GET {who}/Messages/{messageId}/Print?language={language}\u0026amp;dataFormatId={dataFormatId}\u0026amp;dataFormatVersion={dataFormatVersion} 🛈 MessageId will probably change to GUID.\nDataFormatId/DataFormatVersion is not part of Altinn Studio concept.\n✅ PUT {who}/Messages/{messageId}/Archive?language={language} 🛈\n✅ PUT {who}/Messages/{messageId}/Confirm?language={language} 🛈\n🆔 GET {who}/Messages/{messageId}/Validate?language={language} 🛈 MessageId will probably change to GUID.\n🆔 👽 GET {who}/Messages/{messageId}/signingtext?language={language} 🛈 MessageId will probably change to GUID.\nWorkflow metadata must be much more powerful and less hardcoded for Altinn Studio.\n🆔 👽 GET {who}/messages/{messageId}/custommessagedata 🛈 MessageId will probably change to GUID.\nWorkflow metadata must be much more powerful and less hardcoded for Altinn Studio.\n🔢 GET {who}/Messages/trashbin?language={language} 🛈 Message contains ServiceCode/ServiceEditionCode.\nForms 🆔 👽 GET {who}/messages/{messageId}/forms?language={language} 🛈 MessageId will probably change to GUID.\nDataFormatId/DataFormatVersion and MainForm/SubForm is not part of Altinn Studio concept.\n🆔 👽 POST {who}/messages/{messageId}/forms 🛈 MessageId will probably change to GUID.\nDataFormatId/DataFormatVersion and MainForm/SubForm is not part of Altinn Studio concept.\n🆔 👽 GET {who}/messages/{messageId}/forms/{formId}?language={language} 🛈 MessageId and formId will probably change to GUID.\nDataFormatId/DataFormatVersion and MainForm/SubForm is not part of Altinn Studio concept.\n🆔 👽 PUT {who}/messages/{messageId}/forms/{formId} 🛈 MessageId and formId will probably change to GUID.\nDataFormatId/DataFormatVersion and MainForm/SubForm is not part of Altinn Studio concept.\n🆔 DELETE {who}/messages/{messageId}/forms/{formId} 🛈 MessageId and formId will probably change to GUID.\n🆔 GET {who}/messages/{messageId}/forms/{formId}/formdata?language={language} 🛈 MessageId and formId will probably change to GUID.\nDelegations 🔢 GET {who}/authorization/Delegations/{receiverId}/rights 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n✅ GET {who}/authorization/Delegations/{receiverId}/roles?language={language} 🛈\n🔢 GET {who}/authorization/Delegations/{receiverId}?language={language} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n🔢 GET {who}/authorization/Delegations?serviceCode={serviceCode}\u0026amp;serviceEdition={serviceEdition} 🛈 ServiceCode/ServiceEditionCode is part of input parameters and the returned rights-list.\n🔢 POST {who}/authorization/Delegations 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n🔢 GET {who}/authorization/Delegations?receiverId={receiverId} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n✅ DELETE {who}/authorization/Delegations?receiverId={receiverId}\u0026amp;roleId={roleId} 🛈\n✅ DELETE {who}/authorization/Delegations?receiverId={receiverId}\u0026amp;authzRuleId={authzRuleId} 🛈\n✅ DELETE {who}/authorization/Delegations/{receiverId}/roles/{roleId} 🛈\n✅ DELETE {who}/authorization/Delegations/{receiverId}/rights/{authzRuleId} 🛈\nBrokerService ✅ GET {reportee}/BrokerService/files/{fileReference} 🛈\nWeb Services TODO\n"
},
{
	"uri": "https://docs.altinn.studio/design/farger/",
	"title": "Farger",
	"tags": [],
	"description": "I utgangspunktet skal kun de fargene som er presentert her brukes. Hvis nye farger blir implementert skal dette gås opp med ansvarlig designer.",
	"content": "  Kontrast Følgende fargekombinasjoner som er brukt på Altinn oppfyller kravene til kontrast i liten tekst. AA er minstekravet, mens AAA er anbefalt, særlig for løpende tekst.\n AA AAA AAA  AA AA  AAA  AA AAA AAA  AAA  AA  AA AAA  AA AA AAA AAA  Interaksjon Fargen $blue er dedikert til elementer som brukeren kan interagere med på altinn.no, f.eks lenker, knapper og navigasjon. Denne fargen skal ikke bli brukt i andre sammenhenger (unntatt illustrasjoner).\n$blue: #1eaef7;\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/flight-rules/",
	"title": "Flight Rules",
	"tags": ["development"],
	"description": "Flight rules for Altinn Studio",
	"content": " What are flight rules?\nFlight rules is originally a compendium of step-by-step manuals, what to do when X occurs and why.\nEssentially, they are extremely detailed, scenario-specific standard operating procedures\n\rLoadbalancer is responding with HTTP Error 502 - bad gateway This occurs when the loadbalancer could not find any of the services in it\u0026rsquo;s configuration.\nCan be triggerd by these issues:\n Some of the kubernetes services are not existing Some of the kubernetes pods are not existing Kubernetes mapping between deployments and services are incorrect.  Loadbalancer is responding with HTTP Error 504 - timeout This occurs when the loadbalancer is not getting a response from the other services running in kubernetes. Because the loadbalancer is not updated when the deployment of new versions or altinn-designer, altinn-runtime or altinn-repositories. To delete a pod, first find the name of the running pod:\nkubectl get pods  Then use the whole name, and run the following command:\nkubectl delete pod [POD_NAME]  sonarqube-code-analysis pipeline fails on pull request This occurs when there exists double line shifts in the code that is being analyzed. This somehow crashes the sonarqube code analysis tool. To solve this issue you need to identify and remove the double line shift is in the code:\n Navigate to the pipeline logs, open \u0026lsquo;Run Code Analysis\u0026rsquo; Scroll to the bottom Look for error message looking like \u0026lsquo;ERROR: 1 is not a valid line offset for pointer\u0026rsquo; The error should contain info at where the double line shift is Remove the double line shift and update PR  react-app not updating in Runtime when testing locally The react application for Runtime is fetched from Runtime/wwwroot/runtime/js/react. To see these changes locally one has to:\n Make any required changes in the runtime application\n Build the runtime application. This can be done either of the following ways:\n By running\nnpm run gulp-develop npm run gulp copy-files  from ./src/AltinnCore/Runtime folder, which will build and run the Runtime back end and build the runtime runtime.js when it detects that changes have been made. The copy is necessary to copy the files to the wwwroot folder so changes can be visible in runtime\n or, by running\nnpm run gulp  from ./src/AltinnCore/Runtime folder, which will build the Runtime back end and build the runtime runtime.js and copy the files to the wwwroot folder so changes can be visible in runtime\n or, you could trigger a build of the runtime react app manually by running\nnpm run build-develop  from .src/react-apps/applications/runtime folder. This will build the runtime runtime.js but you will still need to copy the files to the wwwroot folder in runtime, for this you can do:\nnpm run gulp copy-files  from ./src/AltinnCore/Runtime folder,\n   Manual Copy is done the following way:\n Copy runtime.js (and runtime.css if you have made changes to css styling) from the runtime dist folder (./src/react-apps/applications/runtime/dist) into the the wwwroot folder of runtime (./src/AltinCore/Runtime/wwwroot/runtime). The runtime.js file should be placed under /js/runtime.js and the runtime.css is placed under /css/runtime.css  \u0026ndash;\u0026gt; Reload the manual testing page and start new/run existing instance from there\nPod is stuck in status ContainerCreating and has warning \u0026ldquo;Unable to mount volumes for pod XXX: timeout expired waiting for volumes to attach or mount for pod XXX\u0026rdquo; The storage we use today don\u0026rsquo;t support two pods accessing it at the same time, so on deploy if the first pod don\u0026rsquo;t release the storage before the other one tries to connect to it the second pod will get stuck in ContainerCreating status. If you then run kubectl get pods and get the name of the pod you can then run\nkubectl describe [POD_NAME]  then you see the message \u0026ldquo;Unable to mount volumes for pod XXX: timeout expired waiting for volumes to attach or mount for pod XXX\u0026rdquo;\nTo fix this you need to delete the deployment to that pod and start a new release:\nkubectl delete deployment [DEPLOYMENT_NAME]  To start a new release go to release pipeline\nI got assigned to update altinn.studio with new code Prerequirements: you need build rights to our release pipeline To deploy latest code to altinn.studio do the following:\n To start a new release go to release pipeline Locate and click on Deploy to production Click Create a new release Select versions of the different solutions to deploy (latest is preselected) Click on Create A green info message will appear with the link to the release just create, click on the link Click Deploy and select deploy multiple Select which of the pods to deploy and click Deploy  \u0026ndash;\u0026gt; A deploy to production has been started use kubectl get pods -w on the altinn.studio cluster to see if pods are updated correctly\nmultiple compilation errors for a newly generated app without form components Two different causes have resulted in this error.\nThe first cause and resolution of the .NET code not compiling is that the incorrect version of the SDK is being used. Either the wrong version is installed, or the project is referencing the SDK in your user directory rather than the one installed in program files.\nThere are two steps to solving this issue\n Make sure you have the following versions of the .NET SDK and Runtime installed:  Runtime 2.1.0 SDK 2.1.300  Ensure that the path of all .NET Core references in the Visual Studio solution are in the C:\\Program Files\\dotnet directory. This can be checked by going to Dependencies -\u0026gt; NuGet / SDK for each project in the AltinnCore solution. If this is not the case, remove the reference and re-install it using NuGet package manager or a tool of your own choice.  The second cause and resolution of the .NET code not compiling is that the application user in Altinn Studio has a hyphen in it\u0026rsquo;s username. The username is included as a part of the namespace for all code files related to the project, and .NET does not accept hyphens in namespace declarations. The solution is to create an organisation under the application user and creating the application with the organisation as the app owner.\nI try to pull master from github and get error \u0026ldquo;Cannot lock ref\u0026rdquo; This happens from time to time, still unsure why. To fix it run the command:\ngit gc --prune=now\nNuget package update for stylecop analyzer doesn\u0026rsquo;t update the analyzer reference On updating the style cop nuget package version, the project failed to reference to the ruleset and the analyzers pointed to old version path.\nFor example, the screenshot below shows that the project points to the stylecop version 1.1.118.\nSuppose, a new package 1.1.119 is available and you update it. But the analyzers will still points to the 118 version in visual studio. So building the project will throw stylecop errors. To fix this, close and reopen the visual studio to get the reference to the updated nuget version.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/",
	"title": "Front-end designsystem",
	"tags": [],
	"description": "Altinns designsystem, som er bygget med Pattern Lab, fungerer som et hjem for våre UI-komponenter og deres tilhørende front-end kode. Designsystemet er i bruk av infoportal, portal og altinn digitalisering.",
	"content": " Siden vi er flere ulike team som jobber med ulike løsninger (men med samme brukergrensesnitt), trenger vi et felles sted for frontend. Dette er for å sikre at vi kun lager komponentene èn gang og at de fremtrer konsistent i brukergrensesnittet selv om de er implementert i ulike løsninger.\nPattern Lab For å bygge designsystemet har vi brukt «Pattern Lab», som er et verktøy for å lage atomiske designsystem. Pattern Lab fungerer som et arbeidsverktøy der frontend-utviklere lager alle UI-komponentene i HTML, CSS og Javasript. Komponentene kan settes sammen til sider, og deretter til en klikkbar prototype som kan brukertestes. Pattern Lab sørger for enkel prototyping og overlevering av CSS, JavaScript og HTML-kode til backend-utviklere.\nPattern Lab brukes i hovedsak til to formål:\n Pattern Lab skal være et hjem for alle UI-komponenter med deres styling og retningslinjer. CSS og javascript for komponentene skal kun eksistere og vedlikeholdes her. Pattern Lab skal fungere som prototypeverktøy. Alle maler skal i de fleste tilfeller prototypes og brukertestes før implementering.  \rKom i gang\rHer finner du veiledning for hvordan du bruker designsystemet i andre løsninger, og hvordan du jobber med videreutvikling av nye komponenter i designsystemet.\n\r\rFrontend retningslinjer\rFor å få en felles forståelse av \u0026#34;best practice\u0026#34; for frontend-utvikling i Altinn har vi samlet noen regler for Javascript og CSS, samt utilities-klassene vi opererer med\n\r\rCSS Utilities\rI utgangspunktet skal kun de fargene som er presentert her brukes. Hvis nye farger blir implementert skal dette gås opp med ansvarlig designer.\n\r\rFont og tekststørrelser\rAll tekst på Altinn er satt med fonten ‘DIN’ i fire ulike varianter: Light, Regular, Medium og Bold. \r\rGrid og layout\rAltinn’s responsive brukergrensesnitt er basert på en 12-kolonners grid layout, samt et sett definerte avstander som tar utgangspunkt i 12px som base.\n\r\rIkonbruk\rIkonene er satt sammen til en font ved hjelp av verktøyet \u0026#34;FortAwesome\u0026#34;.\n\r\rUniversell utforming\rGod tilgjengelighet kan hjelpe mennesker med funksjonshemninger å oppfatte innholdet vårt på en meningsfull måte. Det er flere ting vi kan gjøre, men det første og viktigste er å skrive semantisk god HTML.\n\r\rNettleserstøtte\rAltinn støtter de nettleserne og operativsystemene som er mest anvendt av våre brukere. Vi tester ikke utdaterte eller ikke-supporterte versjoner av nettlesere.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/gitea/",
	"title": "Gitea",
	"tags": ["tech", "gitea", "git", "repos"],
	"description": "Gitea is a self-hosted Git service similar to GitHub. It is used as the repository solution in Altinn Studio Repos.",
	"content": " Gitea is the product that is powering Altinn Studio Repos.\nCustomize The documentation on how to customize gitea can be found here.\nTemplates The user interface of gitea can be customized to match your application needs. You can copy the templates from gitea\u0026rsquo;s github.\nFor example the default login page looks like this\nIt\u0026rsquo;s customized to look like this\nFollow these steps to change any user interface of gitea. Here example is given for login\n Copy the login template from gitea\u0026rsquo;s github Paste it in your application in the same folder structure as gitea. Edit the file. You can change the html tags and introduce new css or add new text or image without affecting the logic. Update the docker image to use these templates.  Now, the new login template will be taken in use.\nLinks  https://gitea.io https://github.com/go-gitea/gitea  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/go/",
	"title": "Go",
	"tags": ["tech", "programming"],
	"description": "Server side programming language.",
	"content": " Go is the programming language that has been used for developing many of the products we use in Altinn Studio, such as Gitea, Kubernetes, Docker, Traefik, Helm, Grafana, Prometheus and Hugo.\nLinks  https://golang.org https://github.com/golang/go  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/grafana/",
	"title": "Grafana",
	"tags": ["tech", "monitoring"],
	"description": "Grafana is an open platform for analytics and monitoring.",
	"content": " Grafana is an open platform for analytics and monitoring that we use when monitoring Altinn Studio.\nLinks  https://grafana.com https://github.com/grafana/grafana  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/",
	"title": "Handbook",
	"tags": ["development"],
	"description": "Development handbook for Altinn Studio",
	"content": "WARNING: The development handbook is currently being written, and is as such not complete or final.\n\rThe development handbook should provide all basic information needed to get started with development on Altinn Studio. It should alto contain the information needed to make sure all developers write their code in a consistent way. The development handbook should work as reference material, but it should also be possible to read throught the whole handbook in a logical order so that new developers quickly get up and running.\nThe development handbook is a dynamic material and everybody should feel free to extend or correct articles when needed.\n\rAzure Dev Spaces\rGuidelines for deploying storage\n\r\r\r\rAzure DevOps\rGuidelines for working with resources in Azure DevOps\n\r\r\rPipelines\rQuality checklist and overview of pipelines in Azure DevOps\n\r\r\r\r\rBack-end\rCoding guidelines for back-end\n\r\r\rAsync programming\rGuidelines for asynchronous programming\n\r\r\r\rError handling and Error logging\rGuidelines for error handling and error logging in backend\n\r\r\r\rNuget Package\rOverview of nuget package usage in altinn studio\n\r\r\r\r\rCheat Sheet\rQucik guide for different commands\n\r\r\r\rDeployment\rGuidelines for deploying\n\r\r\r\rFront-end\rCoding guidelines for front-end\n\r\r\rBest practices\rBest practices for altinn.studio frontend\n\r\r\r\rBuild\rBuild documentation for altinn.studio frontend\n\r\r\r\rComponent Library\rComponent documentation for altinn.studio\n\r\r\r\rDebug\rDebug documentation for altinn.studio frontend\n\r\r\r\rError handling\rGuidelines for error handling front-end\n\r\r\r\rPost Message\rGuidelines for using post message functionality in Altinn Studio\n\r\r\r\rReact\rGuidelines for using React in Altinn Studio\n\r\r\r\rRedux\rGuidelines for using Redux in Altinn Studio\n\r\r\r\rStyling (css)\rGuidelines for styling components in Altinn Studio\n\r\r\r\rVersioning\rGuidelines for versioning of front-end\n\r\r\r\r\rGeneral\rGeneral coding guidelines\n\r\r\r\rGetting started\rInformation about how to get started\n\r\r\r\rGit\rInformation about version control with Git\n\r\r\r\rGitea\rGitea documentation for altinn.studio\n\r\r\r\rNaming Conventions\rNaming guidelines for Altinn Studio development\n\r\r\r\rNginx loadbalancing in studio\rInformation about routing with nginx\n\r\r\rNginx SSL/TLS certificate\rInformation about SSL/TLS certificates with nginx\n\r\r\r\r\rRESTful APIs (Representation State Transfer)\rGuidelines for designing REST apis for microservices in Altinn\n\r\r\r\rRouting\rInformation about routing\n\r\r\rNginx routing\rInformation about routing with nginx\n\r\r\r\rTraefik routing\r\n\r\r\rInstallation of Traefik 2.0\rHow to install traefik\n\r\rTLS in Traefik 2.0\rHow to set up TLS\n\r\rTraefik custom resources\rDefinitions for traefik 2.0 custom resources in kubernetes\n\r\rTraefik ingress routes\rHow to set up an ingress route and route trafic based on rules and middlewares\n\r\r\r\rSecurity Checklist\rChecklist for security OWASP.\n\r\r\r\rTest\rCoding guidelines for tests\n\r\r\rAutomated test app\rAn app used solely for automated testing in the browser\n\r\r\r\rPostman\rAPI Testing with postman\n\r\r\r\rTest Coverage\rAutomation testcases by area\n\r\r\r\rTest Strategy\rTest Strategy\n\r\r\r\rTestcafe\rTestcafe\n\r\r\rTestcafe - Tests\rHow to write and maintain testcafe tests\n\r\r\rUnit testing\rHow to write jest test in altinn studio, what we know so far\n\r\r\r\rWCAG testing in Altinn Studio\rCoding guidelines for tests\n\r\r\r\rXunit Testing\rXunit Testing\n\r\r\r\rk6\rPerformance and Functional Testing of API with K6\n\r\r\r\r\rTroubleshooting\rTroubleshooting for altinn.studio\n\r\r\r\rTheming and styling\rSolution for theming and styling conventions.\n\r\r\r\rReusable resources\rA important feature with Altinn Studio is that it should promote developers to create reusable resources that can be reused by other developers.\n\r\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/helm/",
	"title": "Helm",
	"tags": ["tech", "containers"],
	"description": "The Kubernetes Package Manager.",
	"content": " The Kubernetes Package Manager.\nWhat is helm? Helm is a kubernetes resource templating tool. Where all the defined kubernetes resources are deployed with combinations of templates and values. Therefore it is called the kubernetes package manager.\nA helm-package, or a helm-chart is a folder with a set file-structure.\n. +\u0026ndash; altinn-designer | +\u0026ndash; templates | | +\u0026ndash; tests | | | +\u0026ndash; test-connection.yaml | | +\u0026ndash; NOTES.txt | | +\u0026ndash; _helpers.tpl | | +\u0026ndash; deployment.yaml | | +\u0026ndash; service.yaml | | +\u0026ndash; ingress.yaml (deleted in altinn studio, since we don\u0026rsquo;t use ingress. But an ingress template is included in a default helm-chart) | +\u0026ndash; .helmignore | +\u0026ndash; Chart.yaml | +\u0026ndash; values.yaml\nThe Chart.yaml-file contains information about the chart, like the name, version and maintainers. The values.yaml-file contains different values. These values are accessable in the templates. So different environment variables can be defined in the values. Values can also be overwritten when running a upgrade or install of the chart.\nThe files in the templates-folder becomes populated with the values, and sent to the kubernetes clusters as the name of the files. So deployment.yaml should create a deployment in kubernetes. The same fore service.yaml and ingress.yaml.\n_helpers.tpl can be used to define functions to get release names, concatinated with other info. NOTES.txt is the info printed in the cli after an install or upgrade of an release, usually used to give usefull commands the user can run to access the pods.\nHelm usage in altinn studio We use helm to deploy our builds to the kubernetes cluster, both in development-, production- and SBL-cluster. Azure Dev Ops pipelines have support for helm, so this makes deploying to development trigger everytime we merge some code into master.\nLinks  https://helm.sh https://github.com/helm/helm  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/hugo/",
	"title": "Hugo",
	"tags": ["tech", "docs", "markdown"],
	"description": "Static site generator used for the documentation.",
	"content": " Hugo is a static site generator that we use for generating https://docs.altinn.studio.\nLinks  https://gohugo.io/ https://github.com/gohugoio/hugo https://github.com/altinn/altinn-studio-docs  "
},
{
	"uri": "https://docs.altinn.studio/",
	"title": "Håndbok",
	"tags": [],
	"description": "Lær om hvordan vi lager Altinn",
	"content": " Håndbok "
},
{
	"uri": "https://docs.altinn.studio/design/illustrasjoner/",
	"title": "Illustrasjoner",
	"tags": [],
	"description": "Illustrasjonene er tegnet av illustratør Sandra Blikås. De er spesialtilpasset grid, layout og fargepalett. Motivene viser hverdagssituasjoner som er tolkninger av sentrale tema i Altinns innhold.",
	"content": " Retningslinjer for illustrasjonsbruk:  Illustrasjonene på Altinn er en vesentlig del av altinns visuelle identitet på nett. Illustrasjonene skal brukes sparsomt og kun der de gir verdi. Det skal ikke brukes andre «redaksjonelle» illustrasjoner enn disse på altinn.no. Der det gir vesentlig verdi kan det utvikles mer funksjonelle illustrasjoner som infografikk el. Slik illustrasjoner skal bygge på vår visuelle identitet og utviklingen bør skje i samråd med UX-ansvarlig. De store illustrasjonene brukes på forsider og fremhevede artikler. Mindre illustrasjoner brukes primært på navigasjonssider og informasjonssider for å myke opp innholdet. All endring av eksisterende illustrasjoner, bruksendring eller utvikling av nye illustrasjoner skal skje gjennom UX-ansvarlig i Altinn.  Eksempel på bruk Illustrasjoner på Altinn skal brukes enten som bakgrunnsillustrasjon, eller som illustrasjoner ved siden av tekst\nTilgjengelige illustrasjoner Foreløpig har vi følgende illustrasjoner tilgjengelig:\nForside / Logg inn Hjelpesenter Starte og drive Arbeidsforhold Regnskap og revisjon Skatt og avgift "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/jest/",
	"title": "Jest",
	"tags": ["tech", "frontend", "test"],
	"description": "",
	"content": "\u0026ldquo;Jest is a delightful JavaScript Testing Framework with a focus on simplicity.\u0026rdquo; - https://jestjs.io/\nJest testing framework is used for front-end testing in Altinn Studio.\nYou can read more about how to test with Jest here\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/react/architecture/",
	"title": "Kodearkitektur",
	"tags": ["tech", "frontend", "react"],
	"description": "Kodearkitektur for React og tilhørende teknologi",
	"content": " Bruk av Redux Store i Containere og Components. Kort oppsummert (TL;DR) Send \u0026ldquo;ID\u0026rdquo; eller andre identifikatorer via Props til komponenten og la komponenten hente data fra Redux Store.\nUtfordring (Why?) Hvis en del av Redux Store sendes som Props så vil komponenten re-rendres ved endringer av denne Prop/Store. Det er ønskelig at komponenter ikke rendrer unødvendig.\nRe-rendring trigges av…  Endring av Props. Endring av State som endrer Props.  Kilder  Redux best practices Common pitfalls  Filtrering av Redux Store i mapStateToProps() ved help av Selector Kort oppsummert (TL;DR) Bruk Memoized Selector for å filtrere Redux Store til Props når Redux Store er stor.\nUtfordring (Why?) Hver gang (en del av) Redux Store endrer seg vil funksjoner som filtrerer ut deler av Redux Store kjøres. Hvis Redux Store (state tree) er stor (mange endringer) eller funksjonen er krevende kan det føre til ytelsesproblemer.\nLøsningen En Selector funksjon, med bruk av \u0026ldquo;reduxjs/reselect\u0026rdquo; vil kun kjøres når en definert del av Redux Store endres (eks \u0026ldquo;state.del.underdel\u0026rdquo;).\nKilder  Reselect Comparing shouldComponentUpdate() and Reselect  Eksempel Selector Dette er en enkel Selector uten mye logikk og filtrering. Jo større logikk i \u0026ldquo;filtreringen\u0026rdquo; jo mer \u0026ldquo;sparer\u0026rdquo; man i ytelse.\nimport { createSelector } from 'reselect'; /** * Reselect version */ const formDataSelector = (state: any, providedProps: any) =\u0026gt; { console.log('formdata selector', providedProps.id); return state.formFiller.formData; }; const dataModelBindingSelector = (state: any, providedProps: any) =\u0026gt; { console.log('datamodelBindingSelector'); return state.formDesigner.layout.components[providedProps.id].dataModelBinding; }; const getFormData = () =\u0026gt; { console.log('getFormData() is trigggered, selector is created'); return createSelector( [formDataSelector, dataModelBindingSelector], (formData: any, dataModelBinding: any) =\u0026gt; { console.log('ouput selector running', formData); if (!formData) return ''; if (!formData[dataModelBinding]) return ''; return formData[dataModelBinding]; }, ); }; export const makeGetFormDataSelector = getFormData; // Alternativt en enda enklere variant, som er implementert p.t. import { createSelector } from 'reselect'; const formDataSelector = (state: any, providedProps: any) =\u0026gt; { return state.formFiller.formData[state.formDesigner.layout.components[providedProps.id].dataModelBinding]; }; const getFormData = () =\u0026gt; { return createSelector( [formDataSelector], (formData: any) =\u0026gt; { if (!formData) return ''; return formData; }, ); }; export const makeGetFormDataSelector = getFormData;  Implementasjon i mapStateToProps const makeMapStateToProps = () =\u0026gt; { const GetFormDataSelector = makeGetFormDataSelector(); const mapStateToProps = (state: IAppState, props: IProvidedProps): IFormElementProps =\u0026gt; ({ id: props.id, formData: GetFormDataSelector(state, props), }); return mapStateToProps; }; export const FormComponentWrapper = connect(makeMapStateToProps)(FormComponent);  makeMapStateToProps implementeres slik at Selectoren kan gjenbrukes på tvers av flere komponenter.\nHigher-Order Components Higher-Order component er en funksjon som tar imot en component og returnerer et nytt komponent med ekstra funksjoner, eller ekstra data. Et eksempel på dette er connect-funksjonen fra \u0026ldquo;redux\u0026rdquo;, som tar imot en funksjon som velger redux-state data, og en komponent som disse dataene skal sendes til.\nHvorfor? Ved å wrappe induviduelle komponenter i en higher-order component, vil vi få enklere kode mtp. at en funksjon håndterer endringer i skjemaet på kun en komponent, i motsetning til å ha en funksjon som håndterer alle endringer i skjemaet. Dette vil også gi tredjeparts-utviklere en enklere måte å skrive egne funksjoner for håndtering av endringer i deres komponenter.\nEksempel på bruk i Altinn Studio Når bruker lager en tjeneste med 3. parts komponenter vil vi wrappe disse komponentene i en Higher Order Component som gir den en callback funksjon som tar imot data som komponenten har, og kjøre en redux-action som oppdaterer data i redux-state. Uten at utvikleren av 3. parts komponenten må sette seg inn i hvilke actions som skal kjøres. Dette gir også bedre mulighet for å gjennbruke 3. parts komponenter.\nEksempel på Higher Order Component const FormComponentWrapper = (WrappedComponent, ...) =\u0026gt; { // Feel free to do anything that will enhance the components properties // Return a react component return class extends React.Component { // Add functions for handling changing of data handleDataChange = (dataModelBinding, data) =\u0026gt; { // fire off an action for adding the changed data to redux state } render() { return( \u0026lt;WrappedComponent onFormDataChange={this.handleDataChange} {...props}/\u0026gt; ); } } }  Kilder  Higher-Order component  Normalized Redux Store Kort oppsummert (TL;DR)  Hver datatype får sin egen \u0026ldquo;tabell\u0026rdquo; i State. Hver \u0026ldquo;tabell\u0026rdquo; skal lagre individuelle \u0026ldquo;data\u0026rdquo; som objekter, med IDer som nøkler og \u0026ldquo;dataen\u0026rdquo; som verdi. Referansene til de individuelle \u0026ldquo;dataene\u0026rdquo; lagres ved å lagre IDene. Array med IDene brukes for å indikere sortering.  Utfordring (Why?)  Kompliserte reducers for å oppdatere nøstet state struktur. Unødvendig re-rendering grunnet oppdatering av nøstede objekter.  Eksempel { posts : { byId : { \u0026quot;post1\u0026quot; : { id : \u0026quot;post1\u0026quot;, author : \u0026quot;user1\u0026quot;, body : \u0026quot;......\u0026quot;, comments : [\u0026quot;comment1\u0026quot;, \u0026quot;comment2\u0026quot;] }, \u0026quot;post2\u0026quot; : { id : \u0026quot;post2\u0026quot;, author : \u0026quot;user2\u0026quot;, body : \u0026quot;......\u0026quot;, comments : [\u0026quot;comment3\u0026quot;, \u0026quot;comment4\u0026quot;, \u0026quot;comment5\u0026quot;] } }, allIds : [\u0026quot;post1\u0026quot;, \u0026quot;post2\u0026quot;] }, comments : { byId : { \u0026quot;comment1\u0026quot; : { id : \u0026quot;comment1\u0026quot;, author : \u0026quot;user2\u0026quot;, comment : \u0026quot;.....\u0026quot;, }, \u0026quot;comment2\u0026quot; : { id : \u0026quot;comment2\u0026quot;, author : \u0026quot;user3\u0026quot;, comment : \u0026quot;.....\u0026quot;, }, \u0026quot;comment3\u0026quot; : { id : \u0026quot;comment3\u0026quot;, author : \u0026quot;user3\u0026quot;, comment : \u0026quot;.....\u0026quot;, }, \u0026quot;comment4\u0026quot; : { id : \u0026quot;comment4\u0026quot;, author : \u0026quot;user1\u0026quot;, comment : \u0026quot;.....\u0026quot;, }, \u0026quot;comment5\u0026quot; : { id : \u0026quot;comment5\u0026quot;, author : \u0026quot;user3\u0026quot;, comment : \u0026quot;.....\u0026quot;, }, }, allIds : [\u0026quot;comment1\u0026quot;, \u0026quot;comment2\u0026quot;, \u0026quot;comment3\u0026quot;, \u0026quot;commment4\u0026quot;, \u0026quot;comment5\u0026quot;] }, users : { byId : { \u0026quot;user1\u0026quot; : { username : \u0026quot;user1\u0026quot;, name : \u0026quot;User 1\u0026quot;, }, \u0026quot;user2\u0026quot; : { username : \u0026quot;user2\u0026quot;, name : \u0026quot;User 2\u0026quot;, }, \u0026quot;user3\u0026quot; : { username : \u0026quot;user3\u0026quot;, name : \u0026quot;User 3\u0026quot;, } }, allIds : [\u0026quot;user1\u0026quot;, \u0026quot;user2\u0026quot;, \u0026quot;user3\u0026quot;] } }  Kilder  Normalizing State Shape  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/kubernetes/",
	"title": "Kubernetes",
	"tags": ["tech", "containers"],
	"description": "Kubernetes is used to manage the docker containers.",
	"content": " Kubernetes is described as container orchitrastion. That means how containers are run, exposed and all other operations that might be done on a container.\nBoth Altinn Studio and Altinn Studio Apps consists of many different applications running in docker containers. For the Altinn Studio Apps solution this could possible over time be many thousands containers running different end user apps.\nKubernetes is used to manage the containers.\nKubernetes definitions Kubernetes contains definitions for most of the usecases for containers and can easily be extended with custom resource definitions.\nPods Pods are the building blocks of kubernetes. They will crash, be deleted and started up again. But they will never be restored. After they either crash or get deleted, they will ble replaced with a new pod, with it\u0026rsquo;s own configuration of IP adresses.\nReplicaSet A replicaset defines how many copies of a pod is desired to run at any time.\nDeployments Deployments are controllers for pods, they declare different properties a pod should have, and how many replicas of the pod should be running.\nProperties a pod can have is:\n Environment variables and values Image and image-tag What names the pods should have (they will inherrit the name from the deployment and then a ID that makes the unique) Volume mounts, if they are from secrets or persistent volume claims  Services Services are an abstraction of a set of pods and how to access them. There are various methods of exposing a pod, here are the different types of services:\n ClusterIP (Internal) - Default service definition NodePort (External) - Exposes the nodes static ip LoadBalancer (External) - Exposes the service through a cloud-providers loadbalancer ip ExternalName (External) - Exposes the service through a cloud-providers loadbalancer ip with a CNAME entry  Ingress An ingress almost like a service, but not. A ingress exposes an entrypoint to your cluster through domains. Imagine it as a layer between external traffic coming in and services routing trafic to services and down the line to the pods. An ingress needs an ingress controller (i.e. traefik) which extends functionality such as rules for routing, middlewares and authorization. More on this in the documentation about traefik and how we use it in altinn tjenester 3.0.\nSecrets A secret is one or more key-value pairs that is stored on in the cluster and can be access from within the cluster.\nSecrets are base64 encrypted so it is possible to store binary files as secrets aswell.\nPersistent Volumes Persistent volumes, as the name suggests it is used to manage persistent storage volumes. In altinn.studio we use persistent volume claims,\nand since we\u0026rsquo;re using a Azure managaged kubernetes cluster, azure sets up virtual disks in the kubernetes cluster resource group.\nNamespaces Namespaces are intended for use in environments with multiple users spread across multiple teams or project.\nNamespaces provide a scope for names.\nNode A node is either a physical machine or a virtual one. They are used as workers for hosting different kubernetes resources.\nCluster A cluster is a set of virtual machines with various hardware setup.\nLinks  https://kubernetes.io https://github.com/kubernetes/kubernetes  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/material-ui/",
	"title": "Material UI",
	"tags": ["tech", "ui", "react"],
	"description": "A popular React UI library used in Altinn Studio",
	"content": " Material UI is used in Altinn Studio as the React UI library. Material UI was chosen because\n It is based on the Google\u0026rsquo;s material design. It focuses exclusively on the React components Can use responsive components provided by the library Can override the style to customize the component to match the application requirements Can save time by using the components in the library instead of creating it from scratch (for example, the navigation drawers, application bar) It uses JSS as a styling solution that exposes a low-level API which helps in advanced overriding and theming mechanism  Material UI links  https://material-ui.com https://github.com/mui-org/material-ui  React Router React router is a third party routing library used in Altinn Studio to trigger navigation within the application.\nReact router links  https://reacttraining.com/react-router https://github.com/ReactTraining/react-router/tree/master/packages/react-router-dom  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/nginx/",
	"title": "Nginx",
	"tags": ["tech", "load-balancer"],
	"description": "Load balancer currently used for routing traffic between Repos and Designer.",
	"content": " Nginx is used as the load balancer in the Altinn Studio solution. It routes traffic between Repos and Designer. Running in a docker container. You find details on routing on Gitub\nLinks  https://www.nginx.org https://github.com/nginx/nginx  "
},
{
	"uri": "https://docs.altinn.studio/tags/owasp/",
	"title": "OWASP",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/swagger/pdf/",
	"title": "PDF",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform PDF.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/swagger/profile/",
	"title": "Profile",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Profile.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/prometheus/",
	"title": "Prometheus",
	"tags": ["tech", "monitoring"],
	"description": "Prometheus is an open-source systems monitoring and alerting toolkit.",
	"content": " Prometheus is an open-source systems monitoring and alerting toolkit that we use for monitoring.\nLinks  https://prometheus.io https://github.com/prometheus  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/react/",
	"title": "React",
	"tags": ["tech", "frontend", "react"],
	"description": "Modulært rammeverk for å utvikle UI komponenter",
	"content": "  Modulært rammeverk for å utvikle UI komponenter som kan gjenbrukes flere steder i løsningen. Hvert React komponent har en tilstand som gir den data i henhold til hvor i applikasjonen brukeren er og hvilke handlinger som foretas. Vedlikeholdt av Facebook, under MIT lisens.  Slik React blir brukt Uten redux  Ved bruk av higher order components kan tilstand sendes fra rot-komponenten nedover i komponent-hierarkiet. Rot-komponenten håndterer alt av state, og sender callbacks ned i komponentene, slik at det er mulig og legge til, fjerne og endre komponeter.  Med redux  Ved bruk av redux vil vi ikke være like avhengig av higher order components, da alle komponenenter kan kobles til redux-state av appen, og kunne håndtere det å legge til, fjerne eller endre komponenter selv. Håndtering av state skjer igjennom Actions og Reducers, som Redux arkitektur anbefaler.  Links  https://reactjs.org https://github.com/facebook/react  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/react/redux/",
	"title": "Redux",
	"tags": ["tech", "frontend", "react"],
	"description": "Redux is used for handling state in React applications",
	"content": "  Applikasjonstilstandshåndtering En felles tilstand for hele applikasjonen Tilstanden styres av Actions som håndteres av Reducere som igjen populerer tilstanden.\n En Action kan f.eks. være \u0026ldquo;FETCH_POSTNUMMER\u0026rdquo; Når en slik actions kjøres, så vil en Reducer ta imot og oppdatere tilstanden slik at det er i tilstanden at applikasjonen nå henter postnummer. Når er hentingen er fullført, vil man f.eks. sende en action \u0026ldquo;FETCH_POSTNUMMER_FULFILLED\u0026rdquo; som har postnummer-data med som parameter. Reducer håndterer denne handlingen og setter postnummer-data i applikasjonens tilstand.   Vedlikeholdt av Facebook, under MIT lisens.\n  Fordeler ved å bruke redux  En felles state for alle komponenter Komponenter kan kobles direkte mot state og kan oppdatere denne uavhengig av andre komponenter Gir en stor frihet til valg av struktur på state. Enkelt å eksportere til json og importere fra json (hvis strukturen er lik)  Links  https://redux.js.org https://github.com/reactjs/redux  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/swagger/register/",
	"title": "Register",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Register.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/reusable-resources/",
	"title": "Reusable resources",
	"tags": [],
	"description": "A important feature with Altinn Studio is that it should promote developers to create reusable resources that can be reused by other developers.",
	"content": " Reusable resource is typical created by technical developers using code editors.\nWeb component When building UI, you will use and configure premade web components. The components will be based on React, and vil vary in size and complexity. Web components are developed in code editors.\nSome basic requirements:\n The component should be flexible and configurable The component should be able to be connected to the data model, and use the metadata from the data model. The component should be able to connect to text resources The component should support responsive design and WCAG 2 AA It should be simple for service owners to add more components  Overall layout When building UI it will be possible to select a overall layout (aka \u0026ldquo;look\u0026amp;feel\u0026rdquo;). This could bee neded because of the complexity of the service or a wish for branding of the service.\n Create reuasable artifacts\n Look\u0026amp;feel Texts and translations Code lists Logic (C#? TypeScript? WebAssembly?) Data models (Seres?) API calls  Reuse these artifacts\n  F.eks. det å lage nye web componenter og layouts vil typisk være noe som tekniske utviklere gjør i kode-editorer.\nDet å sette disse sammen og konfigurere dem, er noe alle skal kunne gjøre.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/authorization-rules/",
	"title": "Set Authorization Rules",
	"tags": [],
	"description": "Altinn Studio let the developer set the authorization requirements for a App",
	"content": "The authorization rules are controlled by a XACML 3.0 Policy that is part of the repository.\nThe rules in policy can be configured with a regulard text editor.\nSee issues related to authorization on Github\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/shared/",
	"title": "Shared",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/swagger/storage/",
	"title": "Storage",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Storage.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/swagger/studio/",
	"title": "Studio",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Studio Repos.",
	"content": "See https://altinn.studio/repos/api/swagger\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/stylecop/",
	"title": "StyleCop",
	"tags": ["tech", "code-quality"],
	"description": "Stylecop analyzer is a code analysis tool for C#",
	"content": " StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule. In altinn studio application, we have turned set this \u0026ldquo;warning\u0026rdquo; action to \u0026ldquo;Error\u0026rdquo; to enforce the use of rules.\nLinks  Rule Documentation Configuring Stylecop Analyzer Github  Nuget Package Instructions to install the stylecop analyzer in your project can be found here.\nRuleset A solution wide stylecop ruleset and configuration(stylecop.json) is set for altinn studio application. This can be linked to the projects by linking these files like below in the project. It is set to only work when building in Debug mode\n\u0026lt;ItemGroup Condition=\u0026quot;'$(Configuration)'=='Debug'\u0026quot;\u0026gt; \u0026lt;PackageReference Include=\u0026quot;StyleCop.Analyzers.Unstable\u0026quot; Version=\u0026quot;1.1.1.61\u0026quot; /\u0026gt; \u0026lt;AdditionalFiles Include=\u0026quot;$(SolutionDir)stylecop.json\u0026quot;\u0026gt; \u0026lt;Link\u0026gt;stylecop.json\u0026lt;/Link\u0026gt; \u0026lt;/AdditionalFiles\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;PropertyGroup Condition=\u0026quot;'$(Configuration)'=='Debug'\u0026quot;\u0026gt; \u0026lt;CodeAnalysisRuleSet\u0026gt;$(SolutionDir)Altinn3.ruleset\u0026lt;/CodeAnalysisRuleSet\u0026gt; \u0026lt;/PropertyGroup\u0026gt;  We have turn on the rules that will improve the code quality and maintainability.\nTurn off/Turn on a rule To turn on/off a rule from the ruleset,\n Click on Altinn3.ruleset file in the solution explorer Expand the Stylecop.Analyzers Check/uncheck the rule you want to turn on/off If you are turning on a rule, select the action to be \u0026ldquo;Error\u0026rdquo;  Implemented rules in Altinn Studio The list of rules that are implemented (and not implemented) in altinn studio can be found here.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/swagger/",
	"title": "Swagger",
	"tags": [],
	"description": "Open API Specifications for Altinn 3.",
	"content": "\r\rAuthentication\rAPI documentation for Altinn Platform Authentication.\n\r\rAuthorization\rAPI documentation for Altinn Platform Authorization.\n\r\rPDF\rAPI documentation for Altinn Platform PDF.\n\r\rProfile\rAPI documentation for Altinn Platform Profile.\n\r\rRegister\rAPI documentation for Altinn Platform Register.\n\r\rStorage\rAPI documentation for Altinn Platform Storage.\n\r\rStudio\rAPI documentation for Altinn Studio Repos.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/text/",
	"title": "Text and translations",
	"tags": [],
	"description": "Using texts when designing UI, defining workflow, other settings, deploy, and more.",
	"content": " Text editing and translations Easy and efficient text processing and translation are important in an app development solution. The possibility to reuse texts across multiple apps are especially important.\nTexts in the editor are written in a ini-file that is converted to a simple JSON-file and presented as an API. In that way the user could work directly in the code editor or convert the text into other formats supported by external translation tools. Meaning that Altinn Studio supports any language that is added, not just languages supported by the Altinn portal.\n Definition of texts using hierarchical and readable keys Reusable texts, internal across different pages and on the levels above the solution Possibility to add other languages  Using lanuage keys in the solution Lanuage keys are references in the react-code with the help of a the language method getLanguageFromKey found in src/react-apps/applications/shared/src/utils/lanauge.ts. This method is called in the following way:\ngetLanguageFromKey('universal_key.lanuage_key', this.props.language)  Where the first param is the language key and the second is the language element. If you call this.props.language.universal_key.lanuage_key you should get the key value\nHow to add a new language:\n Make a new ini-file and place it in AltinnCore \u0026gt; Common \u0026gt; Languages \u0026gt; ini Change the parameter \u0026ldquo;languageCode\u0026rdquo; in the API call to whatever name your ini file is called.  Example for Norweigan bokmål (nb):  http://altinn3.no/designer/y/types/Language/getLanguageAsJSON?languageCode=nb  Guides for language files:\n Keys are sorted by which app they belong to Universal keys ([general]) are placed at the top of the file Keys are sorted alphabetically Keys are written in lowercase with underscores (example_key)  Language best practice Summary  Name should describe the content of the value. Section should describe the context (might be page, container or component). If your name also describes the page, container or component, you might want to create a new section.  Keys (properties) Every key, or property, has a name and a value.\n Names should be short and not context based (context should be in section) Names should not describe presentational functionality like modal or popover.  Example:\n[good_example_1] ready_to_deploy_title_false = Text... [bad_example_1] app_is_ready_to_deploy_title_false = Text... [good_example_2] repo_changes_is_invisible = Text... [bad_example_2] changes_made_by_others_in_your_organisation_is_not_visible_in_altinn_studio = Text...  Text parts If your text has several parts, suffix with \u0026ldquo;part1\u0026rdquo;, \u0026ldquo;part2\u0026rdquo;, \u0026ldquo;partN\u0026rdquo;.\n It is currently not possible to use variables or HTML code in text.\n Example:\n[deploy_to_test] error_environment_failure_part1 = Det er noe galt med ditt error_environment_failture_part2 = -miljø. Vennligst kontakt support.  Titles, subtitles and bodies If your title has associated text you should use suffixes like: \u0026ldquo;heading/title\u0026rdquo;, \u0026ldquo;subheading/subtitle\u0026rdquo;, and \u0026ldquo;body\u0026rdquo;.\nExample:\n[great_component] welcome_body = Welcome to this great component welcome_heading = Hello world welcome_subheading = Small text below the title  Sorting Naming should be used so that related keys/properties are grouped when sorted alphabetically.\nTrue / false If your text has positive or negative text related to logic, suffix with true/false. This will group keys when sorting.\nExample:\n[section] ;Grouping category_repo_read_true = Andre tjenester category_repo_read_false = Du har ikke rettigheter til... ready_to_deploy_title_false = Tjenesten er IKKE klar til å legges ut i testmiljø ready_to_deploy_title_true = Tjenesten er klar til å legges ut i testmiljø [section] ;No grouping category_repo_read = Andre apps category_repo_write = Du har rettigheter til å endre disse appene main_header = Tjenesteoversikt no_category_repo_read = Du har ikke rettigheter til... no_category_repo_write = Du har ikke skriverettigheter til...  Errors If there is an error, you should prefix or suffix the key with \u0026ldquo;error\u0026rdquo;. If grouping when alphabetizing is important, use suffix.\nExample:\n[no_grouping] error_a_problem_has_occured = Det har oppstått et problem [grouping] file_uploader_validation_error_delete = Noe gikk galt under slettingen av filen, prøv igjen senere. file_uploader_validation_error_file_ending = er ikke blant de tillatte filtypene. file_uploader_validation_error_file_size = overskrider tillatt filstørrelse.  Sections [sections] Sections are used to categorize keys (properties) that belong together. It may be a page, container or component.\nExamples [general] [dashboard] [sync_header]\n[general] [dashboard] [sync_header]   Try to not use application wide sections that might need container or component reference in the key name.\n See all issues related to text and language on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/",
	"title": "Tools and frameworks",
	"tags": ["tech"],
	"description": "The technology used in Altinn Studio, Altinn Apps and Altinn Platform.",
	"content": "\rBPMN 2.0\rBusiness Process Model and Notation (BMN) - Workflow\n\r\r.NET Core\rServer side development framework.\n\r\rC#\rServer side programming language.\n\r\rDocker\rDocker is the container technology used in Altinn Studio and for Altinn Studio Apps\n\r\rGitea\rGitea is a self-hosted Git service similar to GitHub. It is used as the repository solution in Altinn Studio Repos.\n\r\rGo\rServer side programming language.\n\r\rGrafana\rGrafana is an open platform for analytics and monitoring.\n\r\rHelm\rThe Kubernetes Package Manager.\n\r\rHugo\rStatic site generator used for the documentation.\n\r\rJest\r\n\r\rKubernetes\rKubernetes is used to manage the docker containers.\n\r\rMaterial UI\rA popular React UI library used in Altinn Studio\n\r\rNginx\rLoad balancer currently used for routing traffic between Repos and Designer.\n\r\rPrometheus\rPrometheus is an open-source systems monitoring and alerting toolkit.\n\r\rReact\rModulært rammeverk for å utvikle UI komponenter\n\r\rStyleCop\rStylecop analyzer is a code analysis tool for C#\n\r\rTraefik\rContainer load balancer\n\r\rTypeScript\rTypeScript is a superset of JavaScript that compiles to clean JavaScript output\n\r\rVisual Studio Code\rVisual Studio Code is a lightweight source code editor which runs on your desktop.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/traefik/",
	"title": "Traefik",
	"tags": ["tech", "containers", "load-balancer"],
	"description": "Container load balancer",
	"content": " Traefik is used for load balancing in Altinn Studio Apps. It routes traffic based on tags on the service containers. Details on config can be found on github.\nLinks  https://traefik.io https://github.com/containous/traefik  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/react/third-party-components/",
	"title": "Tredjeparts komponenter",
	"tags": ["tech", "react"],
	"description": "Tredjeparts komponenter",
	"content": " Det er ønskelig at tredjeparter skal kunne utvikle komponenter som en tjenesteeier skal kunne bruke i sine løsninger\nHvordan utvikle 3. parts komponenter Når du som en bruker ønsker å utvikle tredjeparts-komponenter så er det anbefalt å bruke rollup.js som kompilerer til cjs (CommonJS).\nBasert på dette repoet i altinn.studio\nEksempel på et komponent som i et fiktivt git repo (basert på Gitea Repo) ligger i src/components/BalloonCounter/index.js :\nimport React from 'react'; export class BalloonCounter extends React.Component { constructor(_props, _state) { super(_props, _state); this.state = { count: 0, } } handleIncrement = () =\u0026gt; { let {count} = this.state; count += 1; this.setState({ count, }, () =\u0026gt; { this.handleSubmitData(); }); } handleDecrement = () =\u0026gt; { if(this.state.count !== 0) { let {count} = this.state; count -= 1; this.setState({ count, }, () =\u0026gt; { this.handleSubmitData(); }) } } handleSubmitData = () =\u0026gt; { this.props.onHandleDataUpdate(this.state.count); } render() { return ( \u0026lt;div\u0026gt; Number of ballons you want {this.state.count} \u0026lt;button onClick={this.handleIncrement}\u0026gt; + \u0026lt;/button\u0026gt; \u0026lt;button onClick={this.handleDecrement}\u0026gt; - \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } }  Viktig: Komponentens this.props.onHandleDataUpdate(...) er en funksjon som returnerer dataene komponenten har til skjema-appen, som håndterer lagring i datamodell.\nHusk å exportere denne classen i src/components/index.js slik:\nexport * from './BallonCounter.js';  Når npm run build blir kjørt vil dette lage en mappe med navn dist, med en fil som heter index.js. Denne filen må være med i git push for at altinn.studio skal kunne hente komponentene.\nHvordan bruke 3. parts komponenter I tjenester du ønsker å bruke 3. parts komponenter må det ligge en ThirdPartyComponents.json-fil. Plasseringen av denne er viktig, den må ligge under [Tjeneste navn]/editions/[utgave]/Resources. Innholdet av denne filen er som følger:\n{ \u0026quot;packages\u0026quot;: [{ \u0026quot;packageName\u0026quot;: \u0026quot;[navn på pakken]\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;[Link til raw format av index.js i git-repoet]\u0026quot; }] }  Eksempel på en slik json-fil finner du her.\nHvis alt ble satt opp riktig, vil pakkene med prefiksen til pakkenavnet komme opp i toolbaren på venstre side av Skjema designeren. F.eks. SuperCoolPackage.SuperCoolComponent.\nAlternative løsninger  Webpack med treeshaking  Positivt:  Webpack er allerede brukt i applikasjonen  Negativt:  Slik webpack er konfigurert idag vil det bli bygget en react-applikasjonsfil med alle komponenter, dette vil kreve en separering av react-skjemadesigner og react-runtime.  Runtime bygget må skje med formLayout, som vi henter i oppstarts-fasen av applikasjonen. Slik at alle kompoenter (brukte og ubrukte komponenter) blir med i bygget.  Bygget må skje fra kommando-linje/scripts som kjører i filstrukturen   Next.js SSR (server side rendering)  Positivt:  Gjøre initiell rendering på server, la klienten slippe å hente data som tekstressurser, datamodell, formLayout Dynamisk henting av komponenter som ikke er standard i react-applikasjonen  Negativt:  Introdusere flere tjenester og mye endring av allerede eksisterende react-kode   HTTP API som starter webpack-build  Ved å ha et api som f.eks. Express.js, som håndterer kompilering av applikasjon (bruker allerede kompilerte filer hvis de finnes) og blir kun brukt til å fetche javascript filen som inneholder react. Eller kun bygge da tjenesteeier klikker på \u0026ldquo;Migrer tjeneste\u0026rdquo;. Positivt:  Dynamisk kompilering av kun nødvending react applikasjon og 3. parts komponenter (kan både kompileres da tjenesten migreres, eller hver gang et en bruker starter å fylle ut et skjema (antar at første alternativ er mest gunstig))  Negativt:  Introdusere ny tjeneste (med mindre endringer av eksisterende kode enn \u0026ldquo;Next.js SSR\u0026rdquo;-alternativet)    Ressurser  Webpack tree-shaking  Webpack tree-shaking Webpack module concatenation plugin  Next.js  Offisiell nettside Github Docs  Express  Offisiell nettside Github side   "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/typescript/",
	"title": "TypeScript",
	"tags": ["tech", "programming"],
	"description": "TypeScript is a superset of JavaScript that compiles to clean JavaScript output",
	"content": " TypeScript is a superset of JavaScript that compiles to clean JavaScript output.\n Med javascript er følgende en lovlig handling:\nvar foo = false; foo = \u0026quot;bar\u0026quot;;  Dette ville gitt en TypeError i TypeScript, og koden ville ikke blitt kompilert til JavaScript.\n Typescript kompileres til JavaScript, så klienten kjører aldri TypeScript koden. Typescript er kun til for at utvikleren ikke skal lage bugs ved å endre typer på variabler.\n  Links  http://www.typescriptlang.org https://github.com/Microsoft/TypeScript  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/ui-designer/",
	"title": "UI Design",
	"tags": [],
	"description": "The UI-designer is the part of Altinn Studio where the developer can create UI for the app.",
	"content": " The possibility to effectly build a user friendly user interface for an app, is an essential feature for Altinn Studio. This is one of the more complex functionalities developed as part of Altinn Studio.\nThe UI-designer has the following functionality:\n Define a detailed layout (responsive design)  Add reusable form components Configure form components  Connection to data model Connection to texts/translations   Define/configure connections to external API Define/configure rules for validation, calculation and dynamics  Form components The form components are reusable components that are used to build the user interface of the app. Examples include input fields and title components. See a list of all available form components here.\nIt is also possible to define custom components and use this in the app.\nMultiple form layouts In the future Altinn Studio will support creating different UI for seperate datamodels for sub forms or forms in seperate form filling task in a process.\nSee all Github issues for UI-editor.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/version-control/",
	"title": "Version Control",
	"tags": ["todo"],
	"description": "In Altinn Studio a developer can perform version control operation on the source code for the app",
	"content": " Clone Push \u0026amp; Commit Pull Handle Merge conflict See all issues on Github for Version Control\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/vs-code/",
	"title": "Visual Studio Code",
	"tags": ["tech", "git", "programming"],
	"description": "Visual Studio Code is a lightweight source code editor which runs on your desktop.",
	"content": " Visual Studio Code is a lightweight and extendable code editor which runs on your desktop and is available for Windows, macOS and Linux.\nWe use it when developing altinn-studio, and it can be used for editing files from Altinn Studio Repos locally using the built-in git support.\nVS Code comes with support for hundreds of languages and technologies, including all the ones that are relevant in Altinn Studio:\n C# CSS Docker Go HTML JavaScript JSON Kubernetes Markdown .NET Core Node.js React and JSX TypeScript  Links  https://code.visualstudio.com/docs https://github.com/Microsoft/vscode  "
},
{
	"uri": "https://docs.altinn.studio/tags/xacml/",
	"title": "XACML",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-apps/",
	"title": "altinn-apps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-repos/",
	"title": "altinn-repos",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/analysis/",
	"title": "analysis",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/api/",
	"title": "api",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/app-backend/",
	"title": "app-backend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/app-structure/",
	"title": "app-structure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/apps/",
	"title": "apps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/architecture/",
	"title": "architecture",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/arkitektur/",
	"title": "arkitektur",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/asynchronous-programming/",
	"title": "asynchronous-programming",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/authentication/",
	"title": "authentication",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/authorization/",
	"title": "authorization",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/branching/",
	"title": "branching",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/build/",
	"title": "build",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/certificate/",
	"title": "certificate",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/checklist/",
	"title": "checklist",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ci/",
	"title": "ci",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/code-quality/",
	"title": "code-quality",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/containers/",
	"title": "containers",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/crds/",
	"title": "crds",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/custom-resources/",
	"title": "custom resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/data-modeling/",
	"title": "data-modeling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/debug/",
	"title": "debug",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/deploy/",
	"title": "deploy",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/deployment/",
	"title": "deployment",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/development/",
	"title": "development",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/docs/",
	"title": "docs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/encryption/",
	"title": "encryption",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/error-handling/",
	"title": "error-handling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/front-end/",
	"title": "front-end",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/frontend/",
	"title": "frontend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/gitea/",
	"title": "gitea",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/infrastructure/",
	"title": "infrastructure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ingress/",
	"title": "ingress",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ingress-routes/",
	"title": "ingress routes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/installation/",
	"title": "installation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/issues/",
	"title": "issues",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/load-balancer/",
	"title": "load-balancer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/markdown/",
	"title": "markdown",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/monitoring/",
	"title": "monitoring",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/nginx/",
	"title": "nginx",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/nuget/",
	"title": "nuget",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/pdf/",
	"title": "pdf",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/platform/",
	"title": "platform",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/process/",
	"title": "process",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/profile/",
	"title": "profile",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/programming/",
	"title": "programming",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/react/",
	"title": "react",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/receipt/",
	"title": "receipt",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/register/",
	"title": "register",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/repos/",
	"title": "repos",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/routing/",
	"title": "routing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/runtime-capabilities/",
	"title": "runtime capabilities",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/security/",
	"title": "security",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/solution/",
	"title": "solution",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ssl/",
	"title": "ssl",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/storage/",
	"title": "storage",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/styling/",
	"title": "styling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/swagger/",
	"title": "swagger",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/tech/",
	"title": "tech",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/test/",
	"title": "test",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/testing/",
	"title": "testing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/third-party-tools/",
	"title": "third party tools",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/tls/",
	"title": "tls",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/todo/",
	"title": "todo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/traefik/",
	"title": "traefik",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ui/",
	"title": "ui",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ui-components/",
	"title": "ui-components",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ui-designer/",
	"title": "ui-designer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/versioning/",
	"title": "versioning",
	"tags": [],
	"description": "",
	"content": ""
}]