[
{
	"uri": "https://docs.altinn.studio/getting-started/",
	"title": "Getting started",
	"tags": ["guide", "intro"],
	"description": "Getting started with Altinn Studio",
	"content": "An early preview of Altinn Studio is available for testing here: https://altinn.studio\n\rFirst-time setup of Altinn Studio\r\rSet up your user in altinn.studio for the first time.\n\r\r\rCreate or edit applications\r\rInformation on how to create or edit apps in Altinn Studio\n\r\rCreate new app\r\rInformation on how to create a new apps\n\rNavigation\r\rInformation on how to navigate to and within a service\n\rData model\r\rInformation on how to import/view data model\n\rText resources\r\rInformation on how to add or edit text resources for a service in Altinn Studio\n\rGUI editor\r\rInformation on how to create a form using the GUI editor\n\rCode lists\r\rInformation on how to add/edit and configure code lists\n\rExternal APIs\r\rInformation on how to configure calls to external APIs to fetch data\n\rService logic\r\rInformation on how to add/edit and configure service logic\n\r\rTest\r\rInformation about testing an app\n\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/about/goals/",
	"title": "Goals",
	"tags": [],
	"description": "Goals for the Altinn Studio platform",
	"content": " This summarizes the high level goals for Altinn Studio\nUserfriendly and responsive services  User interface that is userfriendly, effective and modern. Support for Responsive Design both for forms and the development tool. Built in accessability with support for WCAG 2 Good performance and low response time  Effective and self-service service development  As a service developer you can do everthing yourself (including deployment to production) whenever you want, without need for orders, training ++. Bottlenecks is eliminated. Effective and real testing, where unit test works like in a test environment and produiction. Support for creating automated tests of services Rules and logic is defined once for all channels (portal/web service / rest), and are more robust than current plattform Built inn data modelling in web based tool (and support for XSD import from external tools like SERES, OR, etc. ) Not nescessery with Citrix for access to Altinn Studio Service Development Ikke nødvendig med Citrix for tilgang til utviklingsmiljø  Simple for non-technical developers, flexible for technical developers  Non-technical service developers have access to needed functionality in browser You can reuse good and testet components/widgets It is easy to do call against API\u0026rsquo;s in other systems (retrieve data, run external logic) Techincal skilled deveopers can configure all aspect of the service, as an example make a reusable widgets, stylesheets ++ Reuse of text and other resources on the desired level (platform, service owner, service), all languages supported Git (version control) are used for source control for the service developed, both from browser and code editior.  Open Source, cross-platform  Altinn Studio will be based on open source Altinn Studio will be open source Altinn Studio can run on your own computer, own serwers on Windows, macOS or Linux Everything is based on open web-standardes and regulaer development knowledge.  "
},
{
	"uri": "https://docs.altinn.studio/solutions/",
	"title": "Solutions",
	"tags": ["solution", "studio", "apps", "repos"],
	"description": "Description of the Altinn Studio solution",
	"content": "Altinn Studio consists of three different technical solutions to make a complete application development and hosting platform.\n\n\rAltinn Studio\r\rThe design-time solution for developing, testing and maintaining Altinn Studio applications.\n\rAltinn Apps\r\rThe runtime and infrastructure solution for applications developed with Altinn Studio.\n\rAltinn Platform\r\rAltinn Platform is the solution where the supporting platform functionality resides\n\r"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/service-configurations/",
	"title": "ServiceConfigurations.json",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av format for tjeneste konfigurasjons filen",
	"content": " Overordnet ServiceConfiguration.json filen spesifiserer ulike konfigurasjoner lagt til i design prosessen. Nå består den av api koblinger, kalkuleringer og dynamikk regler.\nFormat API connections Strukturen under beskriver api koblinger til et skjema. Objektet inneholder koblingene og informajson knyttet til api\u0026rsquo;ene som er i bruk. ClientParams og apiResponseMapping viser mapping til datamodellen. externalApiId viser kobling til api\u0026rsquo;er som kan brukes.\n \u0026quot;data\u0026quot;: { \u0026quot;externalApi\u0026quot;: { \u0026quot;APIs\u0026quot;: { \u0026quot;connections\u0026quot;: { \u0026quot;c5dadba0-9707-11e8-9c4d-6f48d2b86ea7\u0026quot;: { \u0026quot;externalApiId\u0026quot;: \u0026quot;id1\u0026quot;, \u0026quot;clientParams\u0026quot;: { \u0026quot;pnr\u0026quot;: \u0026quot;skattyterinfor.kontakt.kontaktpersonPostnummer.value\u0026quot; }, \u0026quot;metaParams\u0026quot;: { \u0026quot;clientUrl\u0026quot;: \u0026quot;fgdb\u0026quot; }, \u0026quot;apiResponseMapping\u0026quot;: { \u0026quot;skattyterinfor.kontakt.kontaktpersonPoststed.value\u0026quot;: \u0026quot;result\u0026quot; } } }, \u0026quot;externalApisById\u0026quot;: { \u0026quot;id1\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;id1\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Bring postnummer API\u0026quot;, \u0026quot;shortname\u0026quot;: \u0026quot;Postnummer\u0026quot;, \u0026quot;uri\u0026quot;: \u0026quot;https://api.bring.com/shippingguide/api/postalCode.json?\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Api for å hente poststed basert på postnummer\u0026quot;, \u0026quot;clientParams\u0026quot;: { \u0026quot;pnr\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;queryString\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;pnr\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;required\u0026quot;: true, \u0026quot;example\u0026quot;: \u0026quot;Example: 2050\u0026quot; } }, \u0026quot;metaParams\u0026quot;: { \u0026quot;clientUrl\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;queryString\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;clientUrl\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;required\u0026quot;: true, \u0026quot;example\u0026quot;: \u0026quot;Example: http://www.sitename.com\u0026quot;, \u0026quot;urlEncode\u0026quot;: true } } } }, \u0026quot;externalApisIds\u0026quot;: [ \u0026quot;id1\u0026quot; ] } },  Rule connections Strukturen under beskriver regler lagt til i et skjema. Objektet inneholder koblingene til regler som finnes på et skjema. I objektet er det spesifisert hvilken metode som skal brukes, hvilke felter i datamodellen som skal knyttes til input objektet til metoden og hvilke felt i datamodellen som skal knyttes til funsjonens output verdi.\n \u0026quot;ruleConnection\u0026quot;: { \u0026quot;d180e210-9707-11e8-9c4d-6f48d2b86ea7\u0026quot;: { \u0026quot;selectedFunction\u0026quot;: \u0026quot;ruleFunctionName\u0026quot;, \u0026quot;inputParams\u0026quot;: { \u0026quot;inputParam1\u0026quot;: \u0026quot;skattyterinfor.info.enhetOrganisasjonsnummer.value\u0026quot;, \u0026quot;inputParam2\u0026quot;: \u0026quot;skattyterinfor.kontakt.kontaktpersonEPost.value\u0026quot; }, \u0026quot;outParams\u0026quot;: { \u0026quot;outParam0\u0026quot;: \u0026quot;klage.spesifisering.klageSpesifisering.value\u0026quot; } } }  Conditional rendering connections Strukturen under beskriver dynamikk lagt til i et skjema. Objektet inneholder koblingene mellom skjema og dynamiske regler som finnes på et skjema. I objektet er det spesifisert hvilken metode som skal brukes, hvilke felter i datamodellen som skal knyttes til input objektet til metoden og mapping mellom regelen og elementer i skjemaet.\n \u0026quot;conditionalRendering\u0026quot;: { \u0026quot;d841b430-9707-11e8-9c4d-6f48d2b86ea7\u0026quot;: { \u0026quot;selectedFunction\u0026quot;: \u0026quot;conditionalFunctionName\u0026quot;, \u0026quot;inputParams\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026quot; }, \u0026quot;selectedAction\u0026quot;: \u0026quot;Hide\u0026quot;, \u0026quot;selectedFields\u0026quot;: { \u0026quot;d8416610-9707-11e8-9c4d-6f48d2b86ea7\u0026quot;: \u0026quot;94bb4f87-3428-4f2e-9b6a-6ff358ebd173\u0026quot; } } }  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/rule-handler/",
	"title": "RuleHandler.js",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av format for rule handler js filen",
	"content": " Overordnet Filen RuleHandler.js brukes til å lage metoder som skal benyttes for til kalkuleringer/regler på felter i datamodellen eller for å skape dynamikk i et skjema.\nFormat Filen består av 4 objekter, 2 av de benyttes for til kalkuleringer/regler i skjema og de 2 andre benyttes til dynamikk i skjema. ruleHandlerObject og conditionalRuleHandlerObject skal benyttes til å definere metoder som kan brukes til kalkuleringer/regler i skjema. Alle metodene har et objekt som input parameter og en output verdi, strukturen på input objektet er beskrevet i ruleHandlerHelper og conditionalRuleHandlerHelper. Filen har følgende struktur:\n var ruleHandlerObject = { ruleFunctionName: (obj) =\u0026gt; { return obj.inputParam1 + \u0026quot; \u0026quot; + obj.inputParam2; }, } var ruleHandlerHelper = { ruleFunctionName: () =\u0026gt; { return { inputParam1: \u0026quot;inputParam1\u0026quot;, inputParam2: \u0026quot;inputParam2\u0026quot; }; }, } var conditionalRuleHandlerObject = { conditionalFunctionName: (obj) =\u0026gt; { return obj.input1 \u0026gt; 10; }, } var conditionalRuleHandlerHelper = { conditionalFunctionName: () =\u0026gt; { return { input1: \u0026quot;input1\u0026quot; }; }, }  Ved innlasting i skjemadesigneren vil filen lastes inn i window elementet og kalles ved hjelp av window.conditionalRuleHandlerObject.conditionalFunctionName. Kalkuleringer/regler kjøres når skjema fylles ut. Så regler kan testes både i desinger, preview og i runtime. Kalkuleringer/regler input objekt sine parameter og output parameteret kobles til felter i datamodellen.\nDynamikk regler manipulerer skjema ved å skjule eller vise felter. Input objektet kobles til datamodelfelter. Deretter må brukeren spesifisere hva som skal skje hvis metoden returnerer true. Per nå er det kun mulig å velge å skjule eller vise felter. Deretter knytter man \u0026lsquo;action\u0026rsquo; til felter som er lagt inn i skjema. Man kan knytte så mange felter man vil til en dynamisk regler.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-studio/api/",
	"title": "API Catalogue",
	"tags": ["tjenester 3.0"],
	"description": "Description of the API in Altinn Studio",
	"content": " NOTE: Work in progress. Stuff will change\n\rThe Altinn Studio Designer and Altinn Studio Repository exposes API.\nDesigner API The designer API is implemented as Controllers in the MVC\nCodeList This exposes functionality related to code lists\nSee code\nMethods:\nCodeLists Returns a list over codelist in a service\nDelete Deletes a given codelist\nEdit Saves the codelist\nConfig This exposes functionality related to config\nSee code\nSaveConfig Saves configuration TODO: Need to verify use and c\nGetConfig GetServiceConfig SetServiceConfig DataSource TODO: Should be deleted\nDeploy Api responsible for deployment functionality See code\nStart deployment Starts a new deployment\nFetchDeploymentStatus Returns deployment status\nModel API responsible for data model\n"
},
{
	"uri": "https://docs.altinn.studio/about/",
	"title": "About",
	"tags": ["about"],
	"description": "Description of the Altinn Studio and Altinn Studio Apps solution",
	"content": " What is Altinn Studio? Altinn Studio is the third-generation service development solution from Altinn. Norway\u0026rsquo;s public platform for E-Government. The current service development solution and hosting platform (launched 2010) is considered by Gartner as one of the five leading digital government technology platforms in the world. The current platform is used by over 90% of the Norwegian population and almost 100% of the businesses. Over 43 agencies host services in the Altinn platform.\n  Gartner   Altinn Studio gives the service owner a way to build services as applications. This application can have GUI for web access for end users and/or API for api usage of the service. A service can almost be any type of functionality targeted for user and systems. Examples on services in the current platform is: Tax reporting, aircraft incident reporting, correspondence services from health department, lookup service in to the business register and many many more. Current platform has between 500 and 1000 active services that support different user scenarios.\nWhat is Altinn Apps? Altinn Apps is the solution where services (apps) developed in Altinn Studio is deployed. This will be a highly scalable platform with isolated service applications and seperate Kubernetes Clusters for each org owning apps.\nWhat is Altinn Platform? The Altinn platform is a platform with supporting services that support the Apps created in Altinn Studio and hosted in Altinn Apps. Altinn Platform have services for storage of data, authorization, authentication, userprofile+++. This platform is highly scalable\nWhat types of services can be built with Altinn Studio and hosted in Altinn Apps? The first version will support services where the use case is to submit data from the end user or the system to the service owner.\nWhy Altinn studio? There are many reasons to use Altinn Studio instead of building everything from scratch. - Easy to develop services - A known platform for end users` - Highly scalable infrastructure. ++++\nWhen will it be released First version is planned to be launched 2019\nPresentations Below a list over presentations\nPresentation Mars 2019 Norwegian\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-apps/",
	"title": "Application Architecture Altinn Apps",
	"tags": ["tjenester 3.0"],
	"description": "Description of the application architecture for Altinn Apps",
	"content": " NOTE: Work in progress. Stuff will change\n\rThe Altinn Apps application architecture is the same as the Application Architecture for the apps developed in Altinn Studio and deployed in Altinn Apps.\n\nSee fullscreen or download as visio\nService App The Service App consist of plattform code (AltinnCore.Runtime) and\nThis is deployed as a Docker container in a Kubernetes Pod. See deployment architecture for deployment details.\nFront-end Service App The Service App have two different types of front.end. * Front-end configured by the service developer in Altinn Studio ui-designer * Front-end that is part of the plattform and can\u0026rsquo;t be changed by the service developer\nFront-end configured by the service developer The front-end developed as part of the service development in Altinn Studio is based on REACT.\nAltinn Studio Generates a REACT app based on the selected components in the service UI.\nThis app uses the backend APIS for creating, updating, deleting data in the service datamodell.\nSee details for REACT App architecture\nFor services with requirements that is not supported with the WYSIWYG REACT editor the service developer could build theire own client based frontend on REACT or other frameworks hosted in runtime.\nIt will also be possible to build a GUI hosted elsewhere and just use the service APIs to handle data updates\nFront-end for platform As part of the platform there is some standard pages presented during the workflow for a service that the service developer does not need to create GUI for. * Instansiation * Send in * Signing * Payment\nThe assumption is that these will be React apps. They are currently Razor.\nBackend Backend is based on ASP.Net Core and is a MVC application that uses defined interfaces to run the specific service logic implemented in Altinn Studio.\nThis backend exposes API to front-end react applications and external systems.\nThe MVC backend application loads service specific code from container disk.\nService Implementation. The service implementation is C# code generated/created as part of the service development process in Altinn Studio.\nThe Service Implementation implement a defined interface that backend uses to be able to interact with the service implementation.\nThe service implementation contains all backend code for logic and rules.\nDatamodel The data model in a service is defined as an XSD. From the XSD it is generated a C# representation of that model.\nIn runtime all data is deserialized/serialized from/to this model when communication with frontend/external systems.\nAll logic in the service will typical be related to the datamodel.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/infrastructure/deployment/altinn-apps/",
	"title": "Altinn Apps - Deployment Architecture",
	"tags": ["tjenester 3.0"],
	"description": "Description of the deployment architecture for Altinn Apps",
	"content": " NOTE: Work in progress. Stuff will change\n\rAltinn Apps is the solution where all the apps developed in Altinn Studio is deployed. The following diagram shows the deployment architecture for Altinn Studio together \u0026amp; Altinn Apps\n\nSee fullscreen or download as visio\nContainer Orchestration by Kubernetes Each \u0026ldquo;App\u0026rdquo; created in Altinn Studio is deployed to Altinn Apps as separate applications running in Docker Containers. The containers will be orchestrated by Kubernetes.\nThe Altinn App is deployed as sets of Docker Containers defined as Kubernetes Deployment. The deployment will be in the organisation\u0026rsquo;s own Kubernetes Cluster.\n All organisations will have their own Kubernetes Cluster.\n Each set of Kubernetes Deployment will be scaled based on the usage of the app. Scaling of the Deployment will be configurable in the Kubernetes Deployment and automatically scaled using Kubernetes Replicaset.\n Kubernetes Clusters and Altinn Apps can do horizontal autoscaling. It is currently not decided if and how autoscaling will be used.\n The Altinn App in Kubernetes will be configured as a Kubernetes Service which consist of the latest runtime application available when building the Altinn App and the Altinn App with related code and configuration.\nKubernetes Clusters per Organisation In Altinn Apps, every organisation will have their separate Kubernetes Cluster in each environment. The Kubernetes Cluster architecture will be the same in test and production environment This will support scaling tailored each organisations needs and separation of each organisation\u0026rsquo;s app.\nSecrets Pods, where the Altinn App are delpoyed, gets access to secrets during deployment via HELM charts.\nKubernetes Namespace It\u0026rsquo;s not planned to use namespaces.\nKubernetes Service Each Altinn App will be a Kubernetes Service.\nNetworking Sub domains Each organisation will have their own sub domain.\n org.apps.altinn.no\n Path for the Altinn App  org.apps.altinn.no/appname\n Encrypted traffic and network policy There is ongoing analysis related to this topic. Click here to find more information on Github.\nRouting / Ingress-Controller Routing in Kubernetes is handled by an Ingress-Controller called Traefik.\nTo be able to route traffic to the correct Kubernetes Service (Altinn App), each container is tagged to a specific Altinn App. The routing mecahnism routes to the correct Kubernetes Service based on the url containing the Altinn App parameter.\nAPI Proxy API Proxy is needed for controlling credentials and outbound firewall rules from the platform. This might be handled by the API Managment software. Needs Analyzis\nAPI Management The platform requires API management software to handle SLA ++. Needs Analyzis\nAltinn App build and deploy process   Service Runtime docker image bundling process.   Building the Altinn App with \u0026ldquo;app specific\u0026rdquo; files from Gitea, creating a \u0026ldquo;App Image\u0026rdquo;, deploying to Azure Container Registry and telling Kubernetes to deploy app.\nBuild process (Pipeline)  This process har more details in the Dockerfile. This is a summary.\n  Downloading files from app repository in Gitea Building Docker base image with Dockerfile. This includes \u0026ldquo;Dotnet build\u0026rdquo; for C# files from Gitea. \u0026ldquo;Dotnet build\u0026rdquo; is executed on the Runtime Base Image reusing previous.  Docker Pull: Altinn/Runtime Base Image with SDK from ACR. This makes the AltinnApp build faster. Clone and build code from Gitea inside Altinn-Runtime Base Image. Docker Pull: Microsoft/DotNet AspNetCore. Copy Altinn Runtime, AltinnApp Build files and App Metadata/Resources from Gitea.  Publish to ACR.  The build and deploy app pipeline is controlled by different flags :\n APP_COMMIT_ID - used as id for the app image and should be used to reference the repository at that commit state APP_DEPLOY_TOKEN - used to identify user when cloning repository (is only really necessary for private repositorys but is mandetory) APP_ENVIRONMENT - represent which environment to deploy to (not yet used) APP_OWNER - the owner of the repository APP_REPO - the name of the repository to clone and use to create the app GITEA_ENVIRONMENT - the gitea environment to clone the repository from should_build - flag that can be used if one only wishes to deploy a app and not build it (default set to true) should_deploy - flag that can be used if one wishes to deploy an app (default set to false)  Triggered by:\n \u0026ldquo;Deploy\u0026rdquo;-button in Altinn Studio.  Manual deployment of Altinn App A manual deployment of the Altinn App requires access to you Kubernetes Cluster and knowledge about Helm.\nIf you want to configure the Helm chart and do a manual deployment you can find the Helm chart in your repo in the \u0026ldquo;deployment\u0026rdquo; folder.\nPlatform Cluster The platform cluster in Altinn Studio Apps will host common application like DataServices.\nPlatform integration The platform integration is a new application hosted in the existing infrastructure. It exposes REST-APIs for Profile, Register, Authorization, Intermediary and Authentication. These are services not part of the Altinn Platform (yet) and everyone planning to run the Altinn Platform would need to implement their own components that support. (?)\nData services The data services application is the application responsible exposing data related functionality to the Altinn App. This container will be scaled based on need.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-apps/",
	"title": "Authorization - Altinn Apps",
	"tags": ["architecture", "security"],
	"description": "Description of the Authorization Architecture for Altinn Studio Apps",
	"content": " NOTE: Work in progress. See Github Issue\n\rAltinn Apps has attribute based access control (ABAC). In short, request is authorized based on attributes for the request. Eg what data element is the user accessing, who owns it, what type of data element and so on.\nThe opposite is Role Based access control where all user in a given role is allowed to access a operation and access all data. This would not work in the scenarios that Altinn Studio Apps support.\nAuthorization Components The authorization architecture for Altinn Studio Apps are based on the XACML reference architecture.\nThis architecture defines the following components.\nPolicy Decision Point (PDP) The Policy Decision Point is responsible for deciding if the requested operation is allowed. PDP looks at the rules defined for a given resource, and based on roles or other claims it decides if user or system is allowed to perform the request. Altinn Apps used Policy Decision Point in Altinn Platform solution\nLearn about Policy Decision Point in Altinn Platform\nPolicy Information Point The Policy Information Point is used by PDP to gather information needed to perform the decision. Altinn Apps uses Policy Information Point in Altinn Platform\nLearn about Policy Information Point in Altinn Studio Apps\nPolicy Administration Point The policy administration point is where the rules are defined. Altinn Apps used PAP from Altinn Platform\nLearn about Policy Administration Point in Altinn Platform\nPolicy Enforcment Point The Policy Enforcment Point is where the user or system is actual stopped or allowed to perform a requested operation on a resource.\nLearn about Policy Enforcment Point in Altinn Studio Apps\nPolicy Retrival Point The policy retrieval point is where PDP can request the policies for a given resource. Altinn Apps uses PRP in Altinn Platform Learn about Policy Enforcment Point in Altinn Platform\nContext handler The context handler is responsible for converting the resource ID to something that PDP can understand. Altinn Apps uses Context Handler in Altinn Platform\nLearn about Policy Enforcment Point in Altinn Studio Apps\nThe diagram below show the solution architecture where the different authorization functionality is located.\n\nThe Authorization Model The authorization model is flexible.\nLearn about authorization model in Altinn Studio Apps\nThe Overall Authorization flow The sequence diagram below show how request are authorized\n\nExample process The following flow describes in detail the authorization processs when the REACT frontend calls a API to store form data\n User press save in the REACT application. REACT application makes a http post request against the ServiceAPIController in The configured Policy Enforcment Point for the API, the Service Access Handler, triggers to verify that user is authorized The PEP identifies the authenticated user from authorizationhandler context and find the relevant resource ID from request The PEP calls the PDP functionality in AltinnCore.Authorization application   "
},
{
	"uri": "https://docs.altinn.studio/architecture/solution/altinn-apps/",
	"title": "Solution Architecture Altinn Apps",
	"tags": ["solution", "architecture"],
	"description": "Description of the Altinn Studio solution",
	"content": "Functionality in Altinn Studio is distributed between different applications.\nThe diagram below shows where the different functionality i located in the different applications.\n\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-platform/",
	"title": "Application architecture Altinn Platform",
	"tags": ["solution", "architecture"],
	"description": "Description of the Altinn Platform application architecture",
	"content": "Altinn Platform consist of serveral reusable and isolated components.\nThe application architecture for each component is described below.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-platform/",
	"title": "Authorization - Altinn Platform",
	"tags": ["architecture", "security"],
	"description": "Description of the Authorization Architecture for Altinn Platform",
	"content": " NOTE: Work in progress. See Github Issue\n\rAltinn Platform has attribute based access control (ABAC). In short, request is authorized based on attributes for the request. Eg what data element is the user accessing, who owns it, what type of data element and so on.\nThe Authorization architecture in Altinn Platform are used as important components in authorization Architecture form Altinn Apps\nAuthorization Components The authorization architecture for Altinn Platform are based on the XACML reference architecture.\nThis architecture defines the following components.\nPolicy Decision Point (PDP) The Policy Decision Point is responsible for deciding if the requested operation is allowed. PDP looks at the rules defined for a given resource, and based on roles or other claims it decides if user or system is allowed to perform the request Learn about Policy Decision Point in Altinn Platform\nPolicy Information Point The Policy Information Point is used by PDP to gather information needed to perform the decision.\nLearn about Policy Information Point in Altinn Platform\nPolicy Administration Point The policy administration point is where the rules are defined\nLearn about Policy Administration Point in Altinn Platform\nPolicy Enforcment Point The Policy Enforcment Point is where the user or system is actual stopped or allowed to perform a requested operation on a resource.\nLearn about Policy Enforcment Point in Altinn Platform\nPolicy Retrival Point The policy retrieval point is where PDP can request the policies for a given resource. Learn about Policy Enforcment Point in Altinn Studio Apps\nContext handler The context handler is responsible for converting the resource ID to something that PDP can understand.\nLearn about Policy Enforcment Point in Altinn Studio Apps\nThe diagram below show the solution architecture where the different authorization functionality is located.\n\nThe Authorization Model The authorization model is flexible.\nLearn about authorization model in Altinn Platform\nThe Overall Authorization flow The sequence diagram below show how request are authorized\n\nExample process The following flow describes in detail the authorization processs when the REACT frontend calls a API to store form data\n User press save in the REACT application. REACT application makes a http post request against the ServiceAPIController in The configured Policy Enforcment Point for the API, the Service Access Handler, triggers to verify that user is authorized The PEP identifies the authenticated user from authorizationhandler context and find the relevant resource ID from request The PEP calls the PDP functionality in AltinnCore.Authorization application   "
},
{
	"uri": "https://docs.altinn.studio/architecture/solution/altinn-platform/",
	"title": "Solution Architecture Altinn Platform",
	"tags": ["solution", "architecture"],
	"description": "Description of the Altinn Platform solution",
	"content": "Functionality in Altinn Platform is distributed between different reusable components.\nThe diagram below shows where the different functionality i located in the components.\n\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-studio/",
	"title": "Application Architecture Altinn Studio",
	"tags": ["tjenester 3.0"],
	"description": "Description of the application architecture for runtime applicationz",
	"content": " NOTE: Work in progress. Stuff will change\n\rThe following diagram shows the application architecture for Altinn Studio solution\n\nSee fullscreen or download as visio\nDesigner Frontend designer The frontend for the designer application is based on REACT. It is split into different REACT applications and components for the different functional areas of the designer. Take a look at the front-end architecture for more details.\nBackend designer Backend of designer is based on .Net Core and ASP.Net Core. It exposes API to the REACT applications\nRepository The repository application is based on GITEA. This is a open source product created in GO. Take a look at the [Customize Gitea]() for more details on how to customize gitea.\nRuntime Runtime is both part of the Altinn Studio and the Altinn Studio Apps solution.\nFor Altinn Studio the Runtime is shared between all services and all\nFrontend runtime The runtime application will have two different types of frontend.\n Frontend developed by the service developer in Altinn Studio designer Frontend that is part of the plattform.  Frontend for Altinn Studio service The frontend developed as part of the service development in Altinn Studio is based on REACT.\nAltinn Studio Generates a REACT app based on the selected components in the service UI.\nThis app uses the backend APIS for creating, updating, deleting data in the service datamodell.\nSee details for REACT App architecture\nFor services with requirements that is not supported with the WYSIWYG REACT editor the service developer could build theire own client based frontend on REACT or other frameworks hosted in runtime.\nIt will also be possible to build a GUI hosted elsewhere and just use the service APIs to handle data updates\nFrontend for platform views As part of the platform there is some standard pages presented during the workflow for a service that the service developer does not need to create GUI for. * Instansiation * Payment\nThese are all using Razor as frontend framework.\nBackend Backend is based on ASP.Net Core and is a MVC application that uses defined interfaces to run the specific service logic implemented in Altinn Studio.\nAltinn Studio Mode In Altinn Studio mode the runtime instances will be shared between different end user services.\nBased on the logged in service developer and URL parames the correct service implementation will be compiled and loaded in to memory for backend.\nTesting in Altinn Studio An application that is developed in altinn studio can be tested in studio evnvironment. It is a simulation of how the application will work when it is deployed in different environments. It will store data in disk instead of database. To test the application inside altinn studio\n Click on \u0026ldquo;Test\u0026rdquo; menu Choose an user (user list is preloaded for testing) You will see an interface with a list of existing instance elements and an option to instantiate new instance  When a new instance of the application is instantiated, it creates the following files and folder structure under \u0026ldquo;Testdataforparty\u0026rdquo; folder\n│ │ ├── \rTestdataforparty (used for runtime)\n│ │ │ ├──\r\ruser1\n│ │ │ │ ├──\r\rinstance1\n│ │ │ │ │ ├──\r\rinstance1.json\n│ │ │ │ │ ├──\r\rinstance1.state.json\n│ │ │ │ │ ├──\r\rdata\n│ │ │ │ │ │ ├──\r\rdata-id1\n│ │ │ │ │ │ │ ├──\r\rdata-id1.xml\n│ │ │ │ │ │ ├──\r\rdata-id\u0026hellip;\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/infrastructure/deployment/altinn-studio/",
	"title": "Altinn Studio - Deployment Architecture",
	"tags": ["tjenester 3.0"],
	"description": "Description of the deployment architecture for runtime application",
	"content": " NOTE: Work in progress. Stuff will change\n\rThe Altinn Studio Service Development solution is deployed to a Kubernetes Cluster. The diagram below show the different applications that is part this.\n\nRepository GITEA is used as Repository in Altinn Studio Service Development solution. There is one instance of GITEA running in a docker container in the solution. It uses cloud service database and cloud file share for configuration and remote repos. The Repository is accessed both from the designer application and from code IDE\u0026rsquo;s from service developers computers.\nDesigner Designer is the web based editor for anything related to the service development. (UI, workflow, rules ++) It runs in Docker Containers. (Linux) (how many needed will be analyzed at a later stage).\nRuntime Runtime is used for integration testing of services as part of Altinn Studio Service Development solution. The same runtime application is shared between all service developers. The service code/configuration is copied from local repo of the service developers testing the service.\nRouting NGINX is used for routing between the different applications.\nLocal Developer Service Developers can use locally installed IDE and other tools and communicate directly with the repository. This is targeted for the more experienced developers.\nLocal Developer with Altinn Studio For developers that is required to develop custom widgets (REACT) they can install Altinn Studio Service Development solution locally on their computer. (Altinn studio support both Windows, Linxu and MacOS)\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/solution/altinn-studio/",
	"title": "Solution Architecture Altinn Studio",
	"tags": ["solution", "architecture"],
	"description": "Description of the Altinn Studio solution architecture",
	"content": "Functionality in Altinn Studio is distributed between different applications.\nThe diagram below shows where the different functionality i located in the different applications.\n\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/",
	"title": "Altinn Studio",
	"tags": ["solution", "studio"],
	"description": "The design-time solution for developing, testing and maintaining Altinn Studio applications.",
	"content": "Altinn Studio is a user friendly solution where non-technical and technical service developers can create services based on reuse and configuration of existing building blocks.\nExamples on building blocks can be layouts, theme, web-components, texts, API-calls, codelist and workflow steps.\nIn the background Altinn Studio use git against Repos to store the files created as part of the service, the same way a technical service developer can use Visual Studio Code or other IDE to do the same.\n\rFunctionality in Altinn Studio\r\rFunctional areas in the Altinn Studio design-time solution.\n\rAltinn Studio Repos\r\rThe Git repository solution for storing and versioning apps developed with Altinn Studio.\n\r"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authentication/altinn-apps/",
	"title": "Authentication - Altinn Studio Apps",
	"tags": ["architecture", "security"],
	"description": "Description of the Authentication architecture for Altinn Studio and Altinn Studio Apps",
	"content": "Description of the Altinn Studio Security architecture.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-studio/",
	"title": "Authorization - Altinn Studio",
	"tags": ["architecture", "security"],
	"description": "Description of the Authorization Architecture for Altinn Studio",
	"content": " NOTE: Work in progress. See Github Issue\n\rAltinn Studio has Role Based access control where all user in a given role is allowed to access a operation and access all data. This would not work in the scenarios that Altinn Studio Apps support.\nAuthorization Components The authorization architecture for Altinn Studio Apps are based on the XACML reference architecture.\nThis architecture defines the following components.\nPolicy Decision Point (PDP) The Policy Decision Point is responsible for deciding if the requested operation is allowed. PDP looks at the rules defined for a given resource, and based on roles or other claims it decides if user or system is allowed to perform the request Learn about Policy Decision Point in Altinn Studio Apps\nPolicy Information Point The Policy Information Point is used by PDP to gather information needed to perform the decision.\nLearn about Policy Information Point in Altinn Studio Apps\nPolicy Administration Point The policy administration point is where the rules are defined\nLearn about Policy Administration Point in Altinn Studio Apps\nPolicy Enforcment Point The Policy Enforcment Point is where the user or system is actual stopped or allowed to perform a requested operation on a resource.\nLearn about Policy Enforcment Point in Altinn Studio Apps\nPolicy Retrival Point The policy retrieval point is where PDP can request the policies for a given resource. Learn about Policy Enforcment Point in Altinn Studio Apps\nContext handler The context handler is responsible for converting the resource ID to something that PDP can understand.\nLearn about Policy Enforcment Point in Altinn Studio Apps\nThe diagram below show the solution architecture where the different authorization functionality is located.\n\nThe Authorization Model The authorization model is flexible.\nLearn about authorization model in Altinn Studio Apps\nThe Overall Authorization flow The sequence diagram below show how request are authorized\n\nExample process The following flow describes in detail the authorization processs when the REACT frontend calls a API to store form data\n User press save in the REACT application. REACT application makes a http post request against the ServiceAPIController in The configured Policy Enforcment Point for the API, the Service Access Handler, triggers to verify that user is authorized The PEP identifies the authenticated user from authorizationhandler context and find the relevant resource ID from request The PEP calls the PDP functionality in AltinnCore.Authorization application   "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/altinnservice-projectfile/",
	"title": "AltinnService.csproj",
	"tags": ["tjenester 3.0", "projectfile", "csproj"],
	"description": "Description for AltinnService.csproj file",
	"content": " Summary This is a c# project file that is generated when a new service is created. This project file is placed in the root of the service folder. This project file helps in compiling the service.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/application/",
	"title": "Application",
	"tags": ["architecture"],
	"description": "Description of the Altinn Studio application architecture",
	"content": "Description of the Altinn Studio application architecture.\n\rApplication Architecture Altinn Apps\r\rDescription of the application architecture for Altinn Apps\n\rApplication architecture Altinn Platform\r\rDescription of the Altinn Platform application architecture\n\rApplication Architecture Altinn Studio\r\rDescription of the application architecture for runtime applicationz\n\r"
},
{
	"uri": "https://docs.altinn.studio/architecture/",
	"title": "Architecture",
	"tags": ["architecture"],
	"description": "Description of the Altinn Studio architecture.",
	"content": " Altinn Studio, Altinn Apps and Altinn Platform has a modern architecture.\nArchitecture Goals \u0026amp; Guidelines The following guidlines and goals have been important to define the architecture.\nFree and open-source software Guideline: Frameworks and applications used in Altinn Studio will need to be Open Source.\nResult: Possibility to share the platform as Open Source. The possibility to create a Open Source community around the platform.\nWeb Standards \u0026amp; Modern frameworks Guideline: Use Web Standards and modern frameworks\nResult: Non proprietary standards will be used. Can use standard tools and developers does not need to have special skills.\nCloud Native Guideline: The architecture should follow cloud native principles\nResult\n Containers - Isolation (resources, framework) Microservice architecture - Upgrade components seperate. APIs - Reuse Independent of operating system - Can develop and run on any platform  Architectural overview The figure below shows the relation between the different types of architecture defined.\n\n\rApplication\r\rDescription of the Altinn Studio application architecture\n\r\rApplication Architecture Altinn Apps\r\rDescription of the application architecture for Altinn Apps\n\rApplication architecture Altinn Platform\r\rDescription of the Altinn Platform application architecture\n\rApplication Architecture Altinn Studio\r\rDescription of the application architecture for runtime applicationz\n\r\rInformation\r\rDescription of the Information Architecture\n\r\r\rInfrastructure\r\rDescription of the Altinn Studio infrastructure\n\r\rDeployment\r\rDescription of the Altinn Studio solution\n\rAltinn CDN\r\rDescription of Altinn Content Delivery Network\n\r\rIntegration\r\rDescription of the Integration Architecture\n\r\r\rSecurity\r\rDescription of the Altinn Studio security architecture.\n\r\rAuthentication\r\rDescription of the Authentication architecture for Altinn Apps\n\rAuthorization\r\rDescription of the Authorization architecture\n\r\rDevelopment\r\r\n\r\rBuild process\r\rAltinn Studio Build Processes\n\r\rSolution Architecture\r\rDescription of the Altinn Studio solution architecture\n\r\rSolution Architecture Altinn Apps\r\rDescription of the Altinn Studio solution\n\rSolution Architecture Altinn Platform\r\rDescription of the Altinn Platform solution\n\rSolution Architecture Altinn Studio\r\rDescription of the Altinn Studio solution architecture\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-platform/authentication/",
	"title": "Application arhicture authentication component - Altinn Platform",
	"tags": ["solution", "architecture"],
	"description": "Description of authentication component",
	"content": "The Authentication component will be a ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authentication/",
	"title": "Authentication",
	"tags": ["architecture", "security"],
	"description": "Description of the Authentication architecture for Altinn Apps",
	"content": "Description of the Altinn Studio Security architecture.\n\rAuthentication - Altinn Studio Apps\r\rDescription of the Authentication architecture for Altinn Studio and Altinn Studio Apps\n\r\r\rGeneral Altinn Apps and Altinn Platform will be part of a Altinn Environment\nAuthentication for end users using web browser Authentication for end users using systems "
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-platform/authorization/",
	"title": "Application arhicture authorization component - Altinn Platform",
	"tags": ["solution", "architecture"],
	"description": "Description of authentication component",
	"content": "The Authentication component will be a ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/",
	"title": "Authorization",
	"tags": ["architecture", "security"],
	"description": "Description of the Authorization architecture",
	"content": "Description of the Altinn Studio Authorization architecture.\n\rAuthorization - Altinn Apps\r\rDescription of the Authorization Architecture for Altinn Studio Apps\n\r\rAuthorization model\r\rThe authorization model\n\rPolicy Enforcment Point\r\rDescription of Policy Enforcment Point for Altinn Apps\n\r\rAuthorization - Altinn Platform\r\rDescription of the Authorization Architecture for Altinn Platform\n\r\rAuthorization model\r\rThe authorization model\n\rContext Handler\r\rDescription of Context Handler in Altinn Studio Apps\n\rPolicy Administration Point\r\rDescription of Policy Enforcment Point for Altinn Studio Apps\n\rPolicy Decision Point\r\rDescription of the Authoirzation architecture\n\rPolicy Enforcment Point\r\rDescription of Policy Enforcment Point for Altinn Studio Apps\n\rPolicy Information Point\r\rDescription of Policy Information Point for\n\rPolicy Retrieval Point\r\rDescription of Policy Information Point for Altinn Platform\n\rXACML - Altinn Studio\r\rDescription of XACML use in Altinn Studio\n\r\rAuthorization - Altinn Studio\r\rDescription of the Authorization Architecture for Altinn Studio\n\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-apps/model/",
	"title": "Authorization model",
	"tags": ["architecture", "security"],
	"description": "The authorization model",
	"content": " The authorization model in Altinn Studio Apps is flexible and supports different needs.\nRights In Altinn Studio Apps a right is a permission to perform a action on a given resource. The action can be one of some predfined option like Read, Write, Sign, ArchiveRead, ArchiveDelete and ServiceOwnerArchiveRead. The resource is typical a service instance or part of it hver data belongs to a given reportee (person or organization).\nA user or system gets a right based on rules that describes permissions based on being a specific user or having a specific role.\nRules A authorization rule in Altinn Studio defines who has been given the right to perform actions on a given resource. A rule in Altinn Studio consist of 4 elements\nResource This desribe which resource the rule applies for. Altinn Studio Apps currently support the following resource types in rules.\n Org - The service owner of the app App - The app id Task - A specific task in the process defined for a app Reportee - A owner of InstanceId  Some of the resourcetypes is meant to be used in combination. As an exemple you can have been given the right for a service for a given reportee\nSubject The subject in a authorization rule identifies who the rules applies for. In Altinn Studio the resource can be the following.\n User Party RoleType  Action The Action part of the rule define what type of action that the subject can perform on the resource. In Altinn Studio we have the following actions\n Read Write Sign ArchiveRead ArchiveDelete  Condition The condition part of the rule is extra conditions needed to be fulfilled for the rule to be valid. In Altinn Studio we have the following types of conditions.\n Authentication level Valid To  The figure below shows how rules are defined\n\nCreation of rules The rules in Altinn Studio Apps is defined when the service developer defines the rules for the service. The rules are deployed together with the Service App to a given Altinn Studio App environment.\nIn Altinn II end user can also create rules. This happens when: - When user creates a local role that contains rights that user have through other roles - When delegating single rights to a user or organization.\nRoles Altinn Studio Apps will retrieve roles from Altinn II Administration. This will later could be expanded to other sources for roles.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-platform/model/",
	"title": "Authorization model",
	"tags": ["architecture", "security"],
	"description": "The authorization model",
	"content": " The authorization model in Altinn Studio Apps is flexible and supports different needs.\nRights In Altinn Studio Apps a right is a permission to perform a action on a given resource. The action can be one of some predfined option like Read, Write, Sign, ArchiveRead, ArchiveDelete and ServiceOwnerArchiveRead. The resource is typical a service instance or part of it hver data belongs to a given reportee (person or organization).\nA user or system gets a right based on rules that describes permissions based on being a specific user or having a specific role.\nRules A authorization rule in Altinn Studio defines who has been given the right to perform actions on a given resource. A rule in Altinn Studio consist of 4 elements\nResource This desribe which resource the rule applies for. Altinn Studio Apps currently support the following resource types in rules.\n Org - The service owner of the app App - The app id Task - A specific task in the process defined for a app Reportee - A owner of InstanceId  Some of the resourcetypes is meant to be used in combination. As an exemple you can have been given the right for a service for a given reportee\nSubject The subject in a authorization rule identifies who the rules applies for. In Altinn Studio the resource can be the following.\n User Party RoleType  Action The Action part of the rule define what type of action that the subject can perform on the resource. In Altinn Studio we have the following actions\n Read Write Sign ArchiveRead ArchiveDelete  Condition The condition part of the rule is extra conditions needed to be fulfilled for the rule to be valid. In Altinn Studio we have the following types of conditions.\n Authentication level Valid To  The figure below shows how rules are defined\n\nCreation of rules The rules in Altinn Studio Apps is defined when the service developer defines the rules for the service. The rules are deployed together with the Service App to a given Altinn Studio App environment.\nIn Altinn II end user can also create rules. This happens when: - When user creates a local role that contains rights that user have through other roles - When delegating single rights to a user or organization.\nRoles Altinn Studio Apps will retrieve roles from Altinn II Administration. This will later could be expanded to other sources for roles.\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/ui-designer/components/",
	"title": "Available form components",
	"tags": ["ui-designer", "ui-components"],
	"description": "Overview of the form components that are available for use",
	"content": " Text components    Component name Available properties Properties editor Default look   Title   Title text Title type (H2, H3, H4)      Paragraph   Paragraph text       Basic form components    Component name Available properties Properties editor Default look   Input   Link to data model Label text Description text      Checkboxes   Link to data model Label text Description text Method to add options (codelist/manual) Codelist name Manual option  Label Value  Pre-selected choice   Manual adding of options   Adding options via codelist      Radio buttons   Link to data model Label text Description text Method to add options (codelist/manual) Codelist name Manual option  Label Value  Pre-selected choice   Manual adding of options   Adding options via codelist       File Upload   Component mode Label text Description text Accepted attachment types, see html input accept parameter Max number of attachments Max file size in mb       Text Area   Link to data model Label text Description text Read only       In addition to the above components, the following basic form components are under development. These are not ready to be used, they will be added to the overview when they are ready to use:\n Dropdown Container  Advanced form components Advanced form components are components that potentially contain multiple fields that each need to be mapped to a field in the data model. They will typically contain fields that are functionally related, ex. fields related to address, see below.\nNOTE: The address component is a proof of concept. The content/design of this component and its configuration is under development. The component is available for use, but might undergo major changes in the future.\n\r   Component name Available properties Properties editor Default look   Address component (simple mode)   Link to data model for field:  Address Postal code Postal area  Label text for Address field      Address component (advanced mode)   Link to data model for field:  Address Postal code Postal area C/O Housing number  Label text for Address field       Custom / third party components If there is a need for specialized/custom components, it is possible to use components that are not part of the Altinn Studio component library. These components need to be written in React, and imported to the service. See [here]() for instructions on how to create a custom component using React.\nAdding a custom component to a service The custom component needs to be defined in a index.js-file. This file can then be included in the service repository. To make the component available to the service, create a file called ThirdPartyComponents.json in the service repository, under the Resources folder.\nNOTE: It is important that the name and location of the file ThirdPartyComponents.json is correct, otherwise the component will not be available for the service.\n\rThe content of this file should be as follows:\n{ \u0026quot;packages\u0026quot;: [{ \u0026quot;packageName\u0026quot;: \u0026quot;[name of the component]\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;[Link to raw format of index.js in service repository]\u0026quot; }] }   [name of the component] should be replaced with the name that will be shown in the Altinn Studio UI editor. [Link to raw format of index.js in service repository] should be replaced with the full url to the file in the git repo (can be found by navigating to the file in the [Repositories] solution and copying the url).  Once this is done, the UI editor in Altinn Studio should be re-loaded, and the custom component will appear in the component menu on the left.\nNOTE: Editing properties for custom components in the UI editor is currently not supported. As such, and properties for the component should be set directly in the code for the component. The documentation will be updated once this functionality is made available through the UI editor.\n\r"
},
{
	"uri": "https://docs.altinn.studio/technology/bpmn/",
	"title": "BPMN 2.0",
	"tags": ["bpmn", "workflow", "arbeidsflyt"],
	"description": "Business Process Model and Notation (BMN) - Workflow",
	"content": " Needs/Background  Support for visually creating and editing a workflow. Standardized workflow format (XML/JSON). Step parameters.  BPMN 2.0 Business Process Model and Notation (BPMN) is a standard for business process modeling that provides a graphical notation for specifying business processes in a Business Process Diagram, based on a flowcharting technique very similar to activity diagrams from Unified Modeling Language (UML) -*Wikipedia.\n BPMN 2.0 has a standardized XML format for exchanging BPMN 2.0 processes between different parties and software. BPMN 2.0 supports defining collaboartion between two or more collaborators.  BPMN 2.0 XML Extensibility In the formal specifications chapter 8.2.3 the following is described:\n The BPMN metamodel is aimed to be extensible. This allows BPMN adopters to extend the specified metamodel in a way that allows them to be still BPMN-compliant.\nIt provides a set of extension elements, which allows BPMN adopters to attach additional attributes and elements to standard and existing BPMN elements.\nThis approach results in more interchangeable models, because the standard elements are still intact and can still be understood by other BPMN adopters. It’s only the additional attributes and elements that MAY be lost during interchange.\n When extended the BPMN XML is still understood by other BPMN adopters, but the additional attributes and elements MAY be lost during interchange.\n Testing different BPMN software packages shows that the extended attributes in the XML does not show up as configurable properties in other software. Modifying the \u0026ldquo;default template\u0026rdquo; in the BeeBPMN editor did not remove the default Altinn properties.  XML / XSD https://www.omg.org/spec/BPMN/2.0/About-BPMN/\nBPNM.io - bpnm-js Homepage\nBMPN.io modeler\n bpmn-js uses BPMN 2.0 XML standard. bpmn-js is an open source BPMN 2.0 web-based rendering toolkit and modeler. bpmn-js can be extended with rules and custom elements.  Custom elements Nyan  bpmn-js has parameter sidebar link  "
},
{
	"uri": "https://docs.altinn.studio/development/handbook/back-end/",
	"title": "Back-end",
	"tags": ["development", "handbook", "back-end"],
	"description": "Coding guidelines for back-end",
	"content": "TODO\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/front-end/best-practices/",
	"title": "Best practices",
	"tags": ["development", "frontend", "best practices"],
	"description": "Best practices for altinn.studio frontend",
	"content": " Altinn.studio best practices will be updated with more and better practices ;)\n\rBest practices  Simple lists should be sorted alphabetically  "
},
{
	"uri": "https://docs.altinn.studio/development/handbook/front-end/build/",
	"title": "Build",
	"tags": ["development", "frontend", "build"],
	"description": "Build documentation for altinn.studio frontend",
	"content": " Building of react apps in altinn.studio The building of react apps are done in dockerfiles which then again are used in the build of altinn-core docker-image.\nApps are compiled and copied.\nAdding new packages to react-applications Adding of a new package in an app is done with lerna in the lerna-folder (/src/react-apps/). Command syntax for this will be:\nlerna add [package-name] --scope=[app-name] --exact\nIf you are going to add react to a new app called Foo:\nlerna add react --scope=Foo --exact\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/development/build/",
	"title": "Build process",
	"tags": ["ci", "build", "devops", "pipeline", "pipelines"],
	"description": "Altinn Studio Build Processes",
	"content": "  For information regarding Altinn App build process, see Architecture/Infrastructure/Deployment.\n Build Pipelines Quality Build When creating a Pull Request a pipeline is building the applications, running tests and style check/linting. TSLint, SonarCloud (for Typescript) and Stylecop (C#) is used for style check/linting.\nTriggered by:\n Pull Request  Altinn Studio and Runtime Docker Images Separate pipelines will build and deploy the Altinn Studio Docker Image and the Runtime Docker Image to Azure Container Registry. The different Altinn Studio applications (React Apps) is built in seperate Docker images to utilize Docker\u0026rsquo;s cache technique and minimize unnecessary rebuilding.\nDocker-Compose is used when developing and running Altinn Studio locally, building several Docker images and using the same caching technique used in the Pipeline.\nTriggered by:\n Git Merge to Master  Altinn Studio Release Build When the build for either Altinn Studio or Runtime is successfully ran a release build will start. The Release Build will update the Kubernetes cluster with the images created in the Altinn Studio and the Runtime build pipelines.\nTriggered by:\n Successfull build of either/both Altinn Studio and Runtime.  Generating Altinn Pipelines Images Summary  The Altinn Azure Pipelines Image (image) is built with Packer. The Packer JSON configuration is based on the same configuration used by Microsoft to build their own Hosted Agent images. The image is built in Azure Pipelines passing in \u0026ldquo;secrets\u0026rdquo; to the Packer configuration with Environment Variables not visibly available during the build process.  Usage  Create a Virtual Machine in Azure using the pre built image found under \u0026ldquo;browse all images and disks\u0026rdquo;. Create a username and password (should be stored in Azure Vault).  Installing Agent Host The script for installing the Agent Host is found at: Maintenance/azure-pipelines-image/scripts/agent/agent-install.sh (Currently a manual job)\nA computer can have one or several Agent Hosts installed. Several Agents, on one or several servers, can connect to one Agent Pool.\nCreating Pipelines Image with Packer.io The process of creating an Image with Packer is described here: https://docs.microsoft.com/en-us/azure/virtual-machines/linux/build-image-with-packer\nSome steps might already be performed in Azure.\nThe repo for creating the Pipelines Image for Altinn is hosted in this branch: https://github.com/Altinn/altinn-studio/tree/Maintenance/azure-pipelines-image and is based on the Microsoft Packer scripts from this repo: https://github.com/Microsoft/azure-pipelines-image-generation\nThe variables used in the Packer JSON configuration file is passed in via hidden Pipelines environment variables.\nUbuntu1604-full The \u0026ldquo;full\u0026rdquo; image contains components for building Dotnet and NodeJS applications, running JavaScript based headless tests and running Docker Images. See the JSON file for specifications.\nUbuntu1604-light The \u0026ldquo;light\u0026rdquo; image only contains Git and Docker and is created for only running Docker images.\nClean-up Packer creates Resource Groups in Azure keeping the image build for history and debuggind purposes. To remove this Resource Group run AZ Cli:\n az group delete -n PackerResourceGroup  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/calculationhandler/",
	"title": "CalculationHandler.cs",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av format for calculation handler",
	"content": " Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes videre med i MVP.\n\rOverordnet \u0026lsquo;CalculationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som gjør kalkuleringer.\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom CalculationHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/front-end/component-library/",
	"title": "Component Library",
	"tags": ["development", "component library"],
	"description": "Component documentation for altinn.studio",
	"content": " WARNING: Component library will be documented when the task is done.\n\rComponent library To be continued\u0026hellip;\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-platform/contexthandler/",
	"title": "Context Handler",
	"tags": ["architecture", "security"],
	"description": "Description of Context Handler in Altinn Studio Apps",
	"content": "The responsibility for the Context Handler is to convert the resource ID to something that PDP can use to base a authorization decision for a authorization request.\nInput to Context Handler will be AppID, InstanceId or DataId\nOutput will be - AppId - ReporteeId - TaskId - InstanceId\n"
},
{
	"uri": "https://docs.altinn.studio/getting-started/service-creation/create-app/",
	"title": "Create new app",
	"tags": ["guide", "external-api"],
	"description": "Information on how to create a new apps",
	"content": " Create a new app Altinn Studio is used to create applications (apps). An app can be everything from simple forms to full-blown applications with both APIs and UX, and everything in between.\nA new app is created from the dashboard.\n  Dashboard - overview    Click on the \u0026ldquo;ny tjeneste\u0026rdquo; button in the top right corner of the dashboard. Select the organization to create the app for Enter the display name for the app  This is the name that will be shown to the end user, and can be changed later  The identifier name of the app will automatically be populated based on the display name. This can not be changed once the service has been created. This name is only used to identify the service in the solution. The identifier must start with a letter, and can only contain alphanumeric characters or underscore. Create the app by clicking \u0026ldquo;Opprett\u0026rdquo;    Dashboard - create a new service   Once the app is created you will be redirected to the newly created app.\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/front-end/debug/",
	"title": "Debug",
	"tags": ["development", "frontend", "debug"],
	"description": "Debug documentation for altinn.studio frontend",
	"content": " Debugging Google Chrome has many debugging tools, but most used in altinn.studio is breakpoints in the react-code.\nThis allows for code to run, and pause at the desired codeline, so the developer can then inspect different values that is present when the desired code is ran.\nDebugging tools  Google Chrome React Devtools Google Chrome Redux Devtools  "
},
{
	"uri": "https://docs.altinn.studio/architecture/infrastructure/deployment/",
	"title": "Deployment",
	"tags": ["deployment", "architecture"],
	"description": "Description of the Altinn Studio solution",
	"content": "The Altinn Studio components are deployed as two different solutions.\n Altinn Studio - The complete Development solution Altinn Studio Apps - Where services are hosted and accessed by end users.  In this section you will find details about the deployment architecture for these solutions.\nIn addition there is a seperate article on how End Users Services developed in Altinn Studio Service Development solution are deployed to the runtime solution\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/deployment/",
	"title": "Deployment",
	"tags": ["development", "handbook", "deploy"],
	"description": "Guidelines for deploying",
	"content": " ci build devops pipeline pipelines Build process Build Pipelines Quality Build Building the docker image, running tests and checking code. Triggered by:\nGit Push Pull Request Altinn Studio and Runtime Docker Images Separate pipelines are made for Altinn Studio and Runtime. The pipeline will build and deploy the Altinn Studio Docker Image and the Runtime Docker Image to Azure Container Registry.\nTriggered by:\nGit Merge to Master Altinn Studio Release Build When the build for either Altinn Studio or Runtime is successfully ran a release build will start. The release build will update the kubernetes cluster with the images created in the Altinn Studio and the Runtime builds\nTriggered by:\nSuccessfull build of either/both Altinn Studio and Runtime Altinn Service Deploy\nService Runtime docker image bundling process. Building the Altinn Service with “service specific” files from Gitea, creating a “Service Image”, deploying to Azure Container Registry and telling Kubernetes to deploy service.\nBuild process (Pipeline):\nThis process have more details in the Dockerfile. This is a summary.\nDownloading files from service repo in Gitea Building Docker base image with Dockerfile. This includes “Dotnet build” for C# files from Gitea. “Dotnet build” is executed on the Runtime Base Image reusing previous. Docker Pull: Altinn/Runtime Base Image with SDK from ACR. This makes the AltinnService build faster. Clone and build code from Gitea inside Altinn-Runtime Base Image. Docker Pull: Microsoft/DotNet AspNetCore. Copy Altinn Runtime, AltinnService Build files and Service Metadata/Resources from Gitea. Publish to ACR. Triggered by:\n“Publish Service”-button in Altinn Studio. Generating Altinn Pipelines Images Summary The Altinn Azure Pipelines Image (image) is built with Packer. The Packer JSON configuration is based on the same configuration used by Microsoft to build their own Hosted Agent images. The image is built in Azure Pipelines passing in “secrets” to the Packer configuration with Environment Variables not visibly available during the build process. Usage Create a Virtual Machine in Azure using the pre built image found under “browse all images and disks”. Create a username and password (should be stored in Azure Vault). Installing Agent Host The script for installing the Agent Host is found at: Maintenance/azure-pipelines-image/scripts/agent/agent-install.sh (Currently a manual job)\nA computer can have one or several Agent Hosts installed. Several Agents, on one or several servers, can connect to one Agent Pool.\nCreating Pipelines Image with Packer.io The process of creating an Image with Packer is described here\nSome steps might already be performed in Azure.\nThe repo for creating the Pipelines Image for Altinn is hosted in this branch and is based on the Microsoft Packer scripts from this repo\nThe variables used in the Packer JSON configuration file is passed in via hidden Pipelines environment variables.\nUbuntu1604-full The “full” image contains components for building Dotnet and NodeJS applications, running JavaScript based headless tests and running Docker Images. See the JSON file for specifications.\nUbuntu1604-light The “light” image only contains Git and Docker and is created for only running Docker images.\nClean-up Packer creates Resource Groups in Azure keeping the image build for history and debuggind purposes. To remove this Resource Group run AZ Cli:\naz group delete -n PackerResourceGroup\n"
},
{
	"uri": "https://docs.altinn.studio/development/",
	"title": "Development",
	"tags": ["development", "architecture"],
	"description": "Information about developing the Altinn Studio solution",
	"content": "Altinn Studio is an open source project.\nSee the projects Github page.\n\rAnalysis\r\rAnalysis of areas in Altinn Studio. Typically linked to a corresponding GitHub issue.\n\rBranching\r\rBranching information for Altinn Studio\n\rFlight Rules\r\rFlight rules for Altinn Studio\n\rHandbook\r\rDevelopment handbook for Altinn Studio\n\r"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/front-end/error-handling/",
	"title": "Error handling",
	"tags": ["development", "handbook", "front-end", "error-handling"],
	"description": "Guidelines for error handling front-end",
	"content": " This page is a work-in-progress. Because we do not have details on how potential errors should be shown to the users, this is only a general overview currently. More details will be added once we have a functional understanding of how users should experience errors.\n\rReact components Error boundaries Error boundaries are React\u0026rsquo;s official way of handling errors that occur in a component. This functionality is available from React 16. Using this allows a component to fail without unmounting the whole application, and allows us to control how the user is exposed to unexpected errors.\nSee the official React documentation or this official blog post for more information about error boundaries and how to implement them.\nWe need a generic error boundary component that can be configured and reused for all of the sub-applications. Each sub-application should be wrapped in this error boundary component. This will allow the main applications (service-development and dashboard) to keep functioning even though any sub-applications throw an error.\nIn addition we should have a generic \u0026ldquo;something went wrong\u0026rdquo; error boundary for the main applications.\nWithin the sub-applications, it may be beneficial to implement error boundaries around key components. This will typically be relevant for components that act as containers for other components. An example could be the preview-component in the UI-editor, which shows the working surface of the forms designer.\nEvent handlers Error boundaries do not catch errors that occur within event handlers, as mentioned in the official React documentation. Thus, any direct API calls from within an event handler in a React component should be wrapped in a try/catch block.\nOptional props Any use of props that have been defined as optional should be done together with a null/undefined-check, to make sure that the prop is actually available.\nRedux Actions All actions should have sibling actions for success and error. See naming conventions for actions. The success action is triggered when everything is ok, while the error action is triggered if something goes wrong.\nSagas If a saga needs to make an API call (or uses logic/utils that make API calls), this should be wrapped in a try/catch block. If an error occurs, this should be logged and the corresponding error action should be triggered. If no error occurs then the corresponding success action should be triggered. See here for more information on actions and sagas.\nReducers If an error handling action is triggered, the reducer should update the corresponding error object in the state to reflect that an error has occured.\nLogging errors We need to decide if all errors should be logged on the server or not. If all front-end errors should be logged on the server, we need to create an API we can call from the front-end to to the logging.\n\rAll errors that are caught should be logged to the console using console.error.\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/back-end/error-handling/",
	"title": "Error handling and Error logging",
	"tags": ["development", "handbook", "back-end", "error-handling", "error-logging"],
	"description": "Guidelines for error handling and error logging in backend",
	"content": " This page is a work-in-progress. Because we do not have details on how potential errors should be shown to the users, this is only a general overview currently. More details will be added once we have a functional understanding of how users should experience errors.\n\rException Handling .Net core provides a default middleware \u0026ldquo;UseExceptionHandler\u0026rdquo; that will catch exceptions and log them. You can read more about it here. In addition to the default exception middleware, a custom exception middleware can be added to customize the error handling to suit application needs. Custom exception middleware will be implemented once we have a functional understanding of how users should experience errors.\nAPI Exception in API is handled by sending response message to users. The response messages are sent based on\n Request validation Input validation Exceptions that is thrown due to bug in code  The repsonse messages usually are returned with a status code. It is recommended to start with the basic status codes below\n 200 - Ok (Success) 400 - Bad request (input validation, request validation (basically problems at client side)) 401 - Unauthorized 403 - Forbidden 404 - Not found 500 - Internal server error (other type of server errors) By limiting the usage of status codes, we could also ease the handling of different status codes at client side.  Web Services The exceptions rising from internal web services will bubble up and will be handled in API that requested the service.\nLogging .Net core provides a standard logging framework that can be used to log exceptions or events to a desired logging provider (console, eventlog, azure app service, application insights). You can read more about logging in asp.net core from here.\nWhat to log? Context is very important to any warning message or error that is logged. Without context, it can be difficult to relate applicaiton failures to logs. So it is important to include the following details in the log\n Where in the code did the application fail? Who was using the system when it failed? What was the system doing when it failed? Specify a log level that can be used to filter logs when needed  Where do we log? The idea is to send the logs to the console and collect them using Application Insights (Note: Application Insights involves data limitation and costs vary based on needs). It is also possible to log to different log providers by configuring it in the config file. F.ex It is possible log only error and warning message to appinsights and information logs to console.\nThird Party Logging Frameworks There are a bunch of third party logging frameworks available for .net core. Serilog is one of them and Altinn studio will use it to log. There are many advantages of using serilog\n It\u0026rsquo;s open source Allows logging to many sinks like slack, azure, etc. It has support for logging to files (Microsfot basic logging doesn\u0026rsquo;t have support for logging in file at this point) It allows to define a custom message template for logging. Provides prebuilt enrichers through nuget. These add more value and information to the log events. This can be used to filter events in Application Insights.  Read more on serilog\n"
},
{
	"uri": "https://docs.altinn.studio/getting-started/first-time-setup/",
	"title": "First-time setup of Altinn Studio",
	"tags": ["guide"],
	"description": "Set up your user in altinn.studio for the first time.",
	"content": " ONLY necessary if you have not already created a user in Altinn Studio.\n\rHow to up your user in altinn.studio for the first time.\nCreate a user linked to GitHub  Choose to log in. If you have a Github account, select \u0026ldquo;Har du en github konto? Register deg med den her\u0026rdquo;.  If you are not already logged in at Github, login with your Github credentials.  Authorize that Altinn Studio can use your Github account for login.  Register your new local Altinn Studio user by filling in the registration form. When done you are already logged in.   Create a user without GitHub  Choose to log in. If you do not want to use your Github user, select \u0026ldquo;Behov for en konto? Registrer deg nå.\u0026rdquo;  Fill in your user information to register your user. When done you are already logged in.   "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/form-layout/",
	"title": "FormLayout.json",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av format for skjema-layout",
	"content": " Overordnet \u0026lsquo;FormLayout.json\u0026rsquo; beskriver strukturen til et skjema.\nFormat \u0026lsquo;FormLayout.json\u0026rsquo; er oppdelt i tre objekter:\n Components: beskriver komponentene skjema består av og konfigurasjoner tilknyttet den komponenten som feks binding til datamodel. Containers: beskriver layout-containere som brukes i skjema, og konfigurasjoner tilknyttet disse som f.eks. om den representerer en repeterende gruppe Order: spesifiserer rekkefølgen containere og komponentenene inne i containerne skal ligge i.  Eksempel Under er et eksempel på hvordan layout filen kan se ut:\n \u0026quot;components\u0026quot;: { \u0026quot;a3569c64-2a54-493c-a2a2-213034ed9207\u0026quot;: { \u0026quot;component\u0026quot;: \u0026quot;Input\u0026quot;, \u0026quot;itemType\u0026quot;: \u0026quot;COMPONENT\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;25795.OppgavegiverNavnPreutfylt.Label\u0026quot;, \u0026quot;dataModelBinding\u0026quot;: \u0026quot;skattyterinfor.info.oppgavegiverNavnPreutfylt.value\u0026quot; }, \u0026quot;74b7ff77-a80b-45d4-8f4a-81d7a52e69c6\u0026quot;: { \u0026quot;component\u0026quot;: \u0026quot;Input\u0026quot;, \u0026quot;itemType\u0026quot;: \u0026quot;COMPONENT\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;25796.OppgavegiverAdressePreutfylt.Label\u0026quot;, \u0026quot;dataModelBinding\u0026quot;: \u0026quot;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026quot;, \u0026quot;hidden\u0026quot;: false }, \u0026quot;95ddc03a-282a-4ed3-b854-18a3921eec0f\u0026quot;: { \u0026quot;component\u0026quot;: \u0026quot;Input\u0026quot;, \u0026quot;itemType\u0026quot;: \u0026quot;COMPONENT\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;2.KontaktpersonNavn.Label\u0026quot;, \u0026quot;dataModelBinding\u0026quot;: \u0026quot;skattyterinfor.kontakt.kontaktpersonNavn.value\u0026quot; } }, \u0026quot;containers\u0026quot;: { \u0026quot;6eb99041-1ecc-4e83-9312-596a0802e728\u0026quot;: { \u0026quot;repeating\u0026quot;: false, \u0026quot;dataModelGroup\u0026quot;: null }, \u0026quot;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026quot;: { \u0026quot;repeating\u0026quot;: false, \u0026quot;dataModelGroup\u0026quot;: null, \u0026quot;index\u0026quot;: 0 } }, \u0026quot;order\u0026quot;: { \u0026quot;6eb99041-1ecc-4e83-9312-596a0802e728\u0026quot;: [ \u0026quot;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026quot;, \u0026quot;95ddc03a-282a-4ed3-b854-18a3921eec0f\u0026quot; ], \u0026quot;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026quot;: [ \u0026quot;a3569c64-2a54-493c-a2a2-213034ed9207\u0026quot;, \u0026quot;74b7ff77-a80b-45d4-8f4a-81d7a52e69c6\u0026quot; ] }  "
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-studio/react-app/",
	"title": "Application Architecture Altinn Studio - Front-end",
	"tags": ["tjenester 3.0"],
	"description": "Description of the application architecture for Altinn Studio Front-end",
	"content": " React architecture NOTE: Parts of the front-end is currently built in .NET Core. This will gradually be ported over to React as we work with the different functional areas.\rThe front-end of Altinn Studio is build using React and Redux. Each functional area has its own React application, complete with Redux store/reducer when needed.\nNavigation/administration of the different applications is done from top-level applications, which import the applications for the different functional areas.\nThe React front-end for Altinn Studio is split into two top level applications: dashboard and service-developpent. In addition to these top level application, each feature/functional area will have its own React application which will be imported to the relevant top level application as a subapp (see https://redux.js.org/recipes/isolatingsubapps ).\n Remember: New subapps must be configured in the top level application\u0026rsquo;s Dockerfile and in the Designer\u0026rsquo;s gulpfile.\nThis is not necessary for shared components.\n In addition to feature applications there is also a component library of shared components, that can be reused by all the applications. An example is navigation components.\nSee below diagram for an overview of the different applications.\nNOTE: Runtime applications are part of Altinn Studio Apps, and will not be described here.\r\nservice-development This is a top-level application, and will only handle simple operations like navigation to the different subapps. It will not have access to the store of any of the subapps.\nHeader and Navigation Material UI (applicatiopn bar and drawer) components are customized with altinn studio styles for the header and navigation in Altinn Studio. A third party library \u0026ldquo;React Routing\u0026rdquo; is used together with Material UI to handle navigation. When the user clicks on a header/side navigation link, the route changes and the subapp specific to the route is rendered.\nHeader Menu (Application bar) Application bar component is the Altinn Studio\u0026rsquo;s header menu(navigation links at the top). React router library is used to handle those navigations. Header menu has different user interface on desktop and tablet. The display text and the links for navigation are built as object in a configuration file appbarconfig. The configuration object in the file is iterated and the application bar is rendered. The styles specific to the component are placed inside the component file. In addition to the navigation menu, a breadcrumb is also rendered in tablet view.\nSide Menu (Drawer Menu) Drawer menu component is the Altinn Studio\u0026rsquo;s side menu which can be found on the left. It displays a list of Icons by default and on hover expands the menu and lists text by the side of the icon. It will render a list of navigation links based on the selected header menu. Side menu has different user interfaces in desktop and tablet. In tablet, only text is displayed and it slides in from left when \u0026ldquo;Menu\u0026rdquo; button is clicked. So 2 different components are created to acheive this (LeftDrawerMenu, TabletDrawerMenu)\nThe styles specific to the side menu is added in a separate style file. Similar to the header menu, the side menu is also rendered by looping over the menu settings object which is available in a separate configuration file\nservice-overview Implementation not started. Details will be made available once this application is created.\nux-editor The general concept is that there is a JSON file (FormLayout.json) where the components that are to be part of a form are specified. This includes the component types, texts, order, etc. This file is then parsed to display the form.\nThe ux-editor application is used to create/change this file. The components specified in the file are rendered to visually display the result.\nThe components All the components that can be added in the ux-editor are React components, and when they are added, the FormLayout-file is updated and the component is rendered. Currently, available components are:\n HeaderComponent InputComponent CheckboxContainerComponent TextAreaComponent RadioButtonContainerComponent DropdownComponent FileUploadComponent ThirdPartyComponent (imported from outside Altinn Studio)  Each component has a defined set of props that it expects as input. It\u0026rsquo;s up to the parent component to provide these. In addition, props can be mapped directly from the Redux store.\nWhen an end user makes changes in a form (for example type something in a text box), an event is triggered which triggers an action, handled by a dispatcher.\n/** * This is the event handler that triggers the Redux Actions * that is sendt to the different Action dispatcher. * This event handler is used for all form components rendered from this */ public handleComponentDataUpdate = (callbackValue: any): void =\u0026gt; { if (!this.props.component.dataModelBinding) { return; } FormFillerActionDispatchers.updateFormData( this.props.id, callbackValue, this.props.dataModelElement, ); ExternalApiActionDispatchers.checkIfApiShouldFetch(this.props.id, this.props.dataModelElement, callbackValue); RuleConnectionActionDispatchers.checkIfRuleShouldRun(this.props.id, this.props.dataModelElement, callbackValue); }  Containers Components are rendered within containers. There is a base container which is always available, and unless otherwise specified, components are rendered within the base container. Any other containers that are defined in FormLayout.json are also rendered inside the base container. When a service developer first creates a form, the base container is automatically generated with the first component added.\nA service developer can add new containers to group together fields in a form. These groups may be repeating if the data model allows for this. If a group is defined as repeating, it must be connected to the relevant repeating group in the data model.\nRedux Redux is used to manage the states of the ux-editor.\nAppConfigState\nWhich mode is the application in.\nexport interface IAppConfigState { designMode: boolean; }  DataModelState\nInformation about the data model elements. Based on JSON file generated from XSD data model.\nexport interface IDataModelState { model: IDataModelFieldElement[]; fetching: boolean; fetched: boolean; error: Error; }  RuleModelState\nInformation about the rules defined for the service.\nexport interface IRuleModelState { model: IRuleModelFieldElement[]; fetching: boolean; fetched: boolean; error: Error; }  TextResourceState\nAll text resources for the service.\nexport interface ITextResourcesState { resources: ITextResource[]; language: string; fetching: boolean; fetched: boolean; error: Error; }  FormFillerState\nAll form data and any validation errors on this form data.\nexport interface IFormFillerState { formData: any; validationErrors: any; }  Form data format\nThe form data is stored in the state as key-value pairs with data model element as the key. For example, a field connected to melding.adresse.postnummer in the data model will be stored as:\nformData: { melding.adresse.postnummer : \u0026quot;1234\u0026quot; }  If a field is inside a repeating group, an index will be added in the key to specify which instance of the group the data belongs to. For example, if the group melding.adresse is defined as repeating and the end user has added 3 instances of this group, it would result in the following form data being stored.\nformData: { melding.adresse[0].postnummer : \u0026quot;1234\u0026quot;, melding.adresse[1].postnummer : \u0026quot;2345\u0026quot;, melding.adresse[2].postnummer : \u0026quot;4567\u0026quot; }  Reducer Redux reducers are used to update the different states in the store. There is one reduer per state. The reducers listen to the actions that are dispatched when changes are made.\nAction types Action types are type definitions for events that trigger an update of the store. For example:\n// All update form data actions export const UPDATE_FORM_DATA: string = `${moduleName}.UPDATE_FORM_DATA`; export const UPDATE_FORM_DATA_FULFILLED: string = `${moduleName}.UPDATE_FORM_DATA_FULFILLED`; export const UPDATE_FORM_DATA_REJECTED: string = `${moduleName}.UPDATE_FORM_DATA_REJECTED`;  Actions Actions are the events that are triggered when a change is made. An action contains the action type, and any metadata needed to complete the action. For example:\nexport interface IUpdateFormDataAction extends Action { formData: any; componentID: string; dataModelElement: IDataModelFieldElement; }  Action creators create the actions, based on the interfaces defined for the action. For example:\nexport function updateFormDataAction( componentID: string, formData: any, dataModelElement: IDataModelFieldElement, ): IUpdateFormDataAction { return { type: ActionTypes.UPDATE_FORM_DATA, formData, componentID, dataModelElement }; }  The actions are dispatched by an action dispatcher.\nRedux saga Redux saga is the middleware used to process information before the store is updated. All logic used in a saga should be an exported function in the utils-folder. This is decided since we need to split up the logic from the fetching of data, so we have a more testable codebase. The saga only fetches data from the state, and sends the appropriate data to utils-functions.\nAn example is asyncronous calls to backend APIs to get data, or submit data.\nEach saga defines methods that complete different tasks, connected to actions. These methods are called via listeners that listen to the actions that are being dispatched. There are different sagas for all the different functional areas.\n/** * Define the saga for the UPDATE_FORM_DATA event */ function* updateFormDataSaga(action: ActionType) { try { const relevantData = yield selectRelevantStateObjects(...); ... doRelevantLogic(relevantData); ... yield call(updateFormDataSagaFulfilled, ... ); } catch (err) { yield call(updateFormDataSagaRejected, err); } } /** * Define a listener for the UPDATE_FORM_DATA event */ export function* watchUpdateFormDataSaga(): SagaIterator { yield takeLatest(FormFillerActionTypes.UPDATE_FORM_DATA, updateFormDataSaga); }  datamodel Implementation not started. Details will be made available once this application is created.\nlogic-rules Implementation not started. Details will be made available once this application is created.\nworkflow Implementation not started. Details will be made available once this application is created.\ntranslations Implementation not started. Details will be made available once this application is created.\nautosave If you make changes to the form, the app should auto-save. This is done by triggering a new save-action after the addition, update or delete of: - components - containers - api-connections - dynamic rules - conditonal rendering rules The auto-save also triggers when you update the order of the components inside the form.\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/front-end/",
	"title": "Front-end",
	"tags": ["development", "handbook", "front-end"],
	"description": "Coding guidelines for front-end",
	"content": " Coding guidelines for front-end \rBest practices\r\rBest practices for altinn.studio frontend\n\rBuild\r\rBuild documentation for altinn.studio frontend\n\rComponent Library\r\rComponent documentation for altinn.studio\n\rDebug\r\rDebug documentation for altinn.studio frontend\n\rError handling\r\rGuidelines for error handling front-end\n\rPost Message\r\rGuidelines for using post message functionality in Altinn Studio\n\rReact\r\rGuidelines for using React in Altinn Studio\n\rRedux\r\rGuidelines for using Redux in Altinn Studio\n\rStyling (css)\r\rGuidelines for styling components in Altinn Studio\n\r"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/functional/",
	"title": "Functionality in Repos",
	"tags": ["repos"],
	"description": "Funksjonalitet for lagring og versjonering av tjenester i Git-repositories samt funksjonalitet for application lifecycle management.",
	"content": "   Eksempel-repository for tjenesten \u0026#34;Starte Enkeltpersonforetak\u0026#34;   \u0026ldquo;Altinn Repositories\u0026rdquo; er en frittstående Git versjonskontroll og Application Lifecycle Management-løsning, som både Designer, kodeeditorer og andre eksterne verktøy vil benytte som back-end og felles sted for å lagre og versjonere tjenestene som utvikles.\nRepositories har et GitHub-lignende brukergrensesnitt og både Git og REST-baserte tekniske grensesnitt.\n  Git muliggjør at flere verktøy kan jobbe mot samme tjeneste-repository   Det vil være en omfattende jobb å forsøke å utvikle en Git + ALM løsning på egen hånd, ref. all funksjonaliteten som behøves.\nHeldigvis finnes det flere open source \u0026ldquo;GitHub-kloner\u0026rdquo; som vi kan benytte, og blant dem virker Gitea å være mest lovende (uttales som /ɡɪ’ti:/ - \u0026ldquo;gitty\u0026rdquo;). Bilder fra Gitea benyttes som eksempler videre i denne dokumentasjonen.\nKildekoden for Repositories ligger i VSTS\rhttps://altinn.visualstudio.com/tjenester3.0/_git/AltinnCore\r\rFunksjonalitet i \u0026ldquo;Repositories\u0026rdquo; Repositories inneholder et repository med versjonerte filer for hver 3.0-tjeneste. Eksempel på typer filer som en \u0026ldquo;3.0-tjeneste\u0026rdquo; vil kunne bestå av er kode, tester, web-komponenter, layouts og stiler, oversettinger, arbeidsflyt og konfigurasjon.\nRepositories vil tilby funksjonalitet rundt den enkelte 3.0-tjeneste, og eksponere funksjonaliteten via både brukergrensesnitt og et REST-API som er en klone av GitHub sitt v3 API-format. Dette er positivt da det finnes andre verktøy som også støtter dette API-formatet, og da det kan forenkle det å kunne erstatte Gitea som back-end med andre liknende Git-systemer.\n  3.0 Tjeneste Repository som representerer en \u0026ldquo;3.0-tjeneste\u0026rdquo;, og inneholder alle filer som tjenesten består av.\nHver utgave av en tjeneste vil leve i sin egen mappe, slik at ett repository kan inneholde èn eller flere utgaver av den samme tjenesten.\nRepository management Håndtering av repositories er en kjerneaktivitet, da hver tjeneste som utvikles vil lagres i sitt eget repository.\n Create/delete repository Link to repository Rename repository Fork repository  Muliggjør at man kan ha et \u0026ldquo;master\u0026rdquo;-repository med felles tjenester som flere andre kan benytte, slik som dagens \u0026ldquo;master-tjenester\u0026rdquo; bare mye kraftigere Muliggjør også at utviklere kan lage som egen kopi og teste ut nye muligheter og løsninger på sitt eget område uten å påvirke originalen  List repositories Download/upload files Download repo Create files and folders Read/edit files Rename files Delete files View raw file Link to file     Opprette et nytt repository     Enkelt å opprett fork     Ny fork (kopi) av en tjeneste   Dokumentering Det er viktig å ha god støtte for å dokumentere tjenestene man utvikler, slik at det vil være enkelt for andre personer på teamet å bidra. Det er derfor ønskelig å ha innebygd Wiki-funksjonalitet med støtte for å editere i markdown, slik som i Altinn docs og AltinnPedia.\n Wiki  Add/edit/delete pages Markdown editing Link to specific wiki page Support for other external wikis Emojis  Markdown editing  Preview Fullscreen Side-by-side     Wiki   Versjonering Hver eneste fil som en 3.0-tjeneste består av skal ha full versjonshistorikk, uavhengig av om man jobber mot filene via Designer eller eksternt og distribuert/lokalt i en kodeeditor på egen maskin. Repositories sitt versjonskontrollsystem, som er basert på Git, er laget nettopp med tanke på dette.\n Version history of all files, artifacts, code and configuration  Link to each change with a unique id Link to each changed file Link to who did the change Highlight the last change done in the repository Time of change Comments/messages  Diff between versions    Versjonshistorikk for hver eneste fil     Diff for hver eneste fil i nettleser     En utvikler kan se samme diff og versjonshistorikk lokalt i sin egen editor   Release management En svært viktig egenskap når man utvikler programvare (noe som 3.0-tjenester er) er å kunne tagge ulike versjoner, og kunne gå tilbake og teste eller patche en tidligere versjon hvis man ønsker det. Det er også viktig å kunne se alt som har endret seg mellom versjonene.\nSiden Git benyttes for versjonering, så vil en release/tag som opprettes peke på en eksakt versjon av hver eneste fil som en 3.0-tjeneste består av, og man kan enkelt se hva som er endret.\n Create tags for the 3.0 service Link to tags Create/delete releases Link to releases Marking of pre-releases Time of release creation User that triggered the release Download zipped files of release Browse content of a given tag/release    Releases som er opprettet for en 3.0-tjeneste     Man kan enkelt browse repository \u0026#34;tilbake i tid\u0026#34;   QA En QA-prosess for godkjenning av endringer basert på branching og pull requests, vil for større teams kunne være mulig. Dette er i tråd med hvordan programvare utvikles, inkludert selve Altinn.\nBacklog management Som for all annen programvareutvikling, så vil hver 3.0-tjeneste typisk ha en egen backlog med bugs, forbedringer, fremtidige features, etc. som tjenesteutviklerne vil jobbe mot. Dette er en sentral del av Application Lifecycle Management.\n Create/close issues pr. 3.0 service  Time of creation Who  Filter issues by open/closed Add labels  Filter issues by label  Assign to milestone  Filter issues by milestone  Assign to user  Filter issues by assignee  Markdown editing Discussions Add files to issue Notifications when issues change Issues search List issues     Backlog med issues     Issue eksempel     Milepæler er en fin måte å sette scope for fremtidige releaser, og se fremgang     Labels gjør det enkelt å kategorisere og filtrere issues   Org management Organisasjoner er tjenesteeiere, men i 3.0 er det ikke noe i veien for at brukere også kan utvikle tjenester. I en organisasjon så kan man gi tilganger til brukere, og man kan opprette teams med tilgang til en eller flere 3.0-tjenester.\nDet å håndtere organisasjonen, som alt annet, skal være 100% selvbetjent.\n Create/delete organizations  Name/shortname URL Logo  List organizations Link to organization Create repository for organization ref. repository management Add/remove teams in organization List teams in organization Add/remove users in organization List all users in organization Add/remove users in teams List users in teams     Liste over organisasjoner     Repositories tildelt team ENK     Innstillinger for team ENK   Brukerstyring Brukerne i denne sammenheng er tjenesteutvklerne. Det å håndtere organisasjonen skal være helt selvbetjent.\n Add/remove users Name Avatar Add/remove users to/from teams \u0026ldquo;Starring\u0026rdquo; of favorite repositories List of user repositories (including forks) Activity log for user Workspace for user (dette er veldig viktig, betyr at tjenesteutviklere kan \u0026ldquo;leke seg\u0026rdquo; på sitt eget område)  I første omgang (MVP) vil tjenesteeier (org-admin) legge til alle sine brukere i gruppen \u0026ldquo;owner\u0026rdquo; slik at de får tilgang til å opprette repositories (tjenester). Gruppen \u0026ldquo;owner\u0026rdquo; gir vide fullmakter på organisasjonsnivå (dvs tjenesteeiernivå), så på sikt vil det implementeres mer granulert tilgangsstyring.\n   En ny tjenesteutvikler har fått skrivetilgang     Tjenesteutviklere har egen profil og aktivitetslogg   Søke Søk er viktig for å finne frem, og skal være bygd inn i løsningen.\n Repositories Issues Edits Users Organizations    Søk med sortering   Tilgangsstyring Det skal være mulig å styre tilgang til repositories, les/skriv/admin, teams, brukere, samt opprette private repos.\n Access to 3.0 services (read/write) Access to orgs Users access Private/public service-repos Administrator AM/AD-integration API access    Gitea tilbyr API med swagger   Trigge hendelser I dagens hverdag, med bruk av Slack og andre systemer ifbm. utvikling, så er det viktig at \u0026ldquo;Repositories\u0026rdquo; kan trigge hendelser i andre systemer, f.eks. poste til en Slack-kanal når en endring skjer i en 3.0-tjeneste.\n Trigger events at org-level Trigger events at 3.0 service-level    WebHook mot Slack   Logge inn Tjenesteutviklere og andre interessenter skal kunne logge inn og få tilgang til organisasjoner og 3.0-tjenester.\n Login page CAPTCHA? Forgot password? 2-factor auth External authentication    Login   Sende varslinger  Send notifications to users based on events or mentions User can control the notifications to receive Users can follow other users and subscripe to issues    Login   "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/",
	"title": "Functionality in Altinn Studio",
	"tags": ["solution", "studio"],
	"description": "Functional areas in the Altinn Studio design-time solution.",
	"content": "Altinn Studio can been seen as a collection of different editors or application specialized to create and edit different aspects of a Altinn Studio service on a quick and effecit way.\nThe goal is to get a natural and effectiv flow between the different applications. The result from a application in Altinn Studio will be on more many file that will be version controlled in Repos.\n\rTheming and styling\r\rSolution for theming and styling conventions \u0026#43;\u0026#43;\n\rData modeling\r\rDefining the data model(s) for a service is important. Altinn studio will support importing existing data models and creating new datamodels.\n\rExposing API\r\rSolution for designing service UI, defining workflow, other settings, deploy \u0026#43;\u0026#43;\n\rLogic \u0026amp; Rules\r\rFor many services it is a need for logic and rules. Altinn Studio will have a flexible way to build logic\n\rReusable resources\r\rA important feature with Altinn Studio is that it should promote developers to create reusable resources that can be reused by other developers\n\rService Deployment\r\rAltinn Studio will let the developer deploy the service to test enviroments and production without any manuel steps\n\rTesting\r\rIn Altinn Studio there will different ways for service developers to test their services\n\rText and translations\r\rSolution for designing service UI, defining workflow, other settings, deploy \u0026#43;\u0026#43;\n\rUI Designer\r\rThe UI-designer is the part of Altinn Studio where the service developer can create a form\n\rUsing API\u0026#39;s\r\rFor many services it is required to call API\u0026#39;s. Altinn Studio will support building API connections with many types of API.\n\rWork in progress\r\rA work in progress information is displayed to users of altinn studio\n\rWorkflow\r\rAs part of the service development the developer would define a workflow for the service\n\r"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/general/",
	"title": "General",
	"tags": ["development", "handbook", "general"],
	"description": "General coding guidelines",
	"content": "TODO\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/getting-started/",
	"title": "Getting started",
	"tags": ["development", "handbook", "git"],
	"description": "Information about how to get started",
	"content": " .highlight-source-batchfile { color: #fff !important; }  \n  let content = document.getElementById('readmeContent'); if (content.innerHTML === '') { content.innerHTML = 'Loading from github...'; } axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://github.com/Altinn/altinn-studio/blob/master/README.md`) .then((res) = { const doc = new DOMParser().parseFromString(res.data, \"text/html\"); content.innerHTML = doc.getElementById('readme').innerHTML; });  "
},
{
	"uri": "https://docs.altinn.studio/development/handbook/git/",
	"title": "Git",
	"tags": ["development", "handbook", "git"],
	"description": "Information about version control with Git",
	"content": "   let content = document.getElementById('contributionContent'); if (content.innerHTML === '') { content.innerHTML = 'Loading from github...'; } axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://github.com/Altinn/altinn-studio/blob/master/CONTRIBUTING.md`) .then((res) = { const doc = new DOMParser().parseFromString(res.data, \"text/html\"); content.innerHTML = doc.getElementById('readme').innerHTML; });  "
},
{
	"uri": "https://docs.altinn.studio/development/handbook/gitea/",
	"title": "Gitea",
	"tags": ["development", "gitea"],
	"description": "Gitea documentation for altinn.studio",
	"content": " Gitea Gitea is used in altinn.studio as version control of the services developed in altinn.studio.\nLinks  Gitea docs  "
},
{
	"uri": "https://docs.altinn.studio/architecture/information/",
	"title": "Information",
	"tags": ["architecture", "information"],
	"description": "Description of the Information Architecture",
	"content": " Conceptual information model The following guidlines and goals have been important to define the architecture.\n\n\r"
},
{
	"uri": "https://docs.altinn.studio/architecture/infrastructure/",
	"title": "Infrastructure",
	"tags": ["infrastructure", "architecture", "studio", "apps", "platform"],
	"description": "Description of the Altinn Studio infrastructure",
	"content": "Altinn Studio consists of three different technical solutions to make a complete application development platform.\nFull screen | Visio\n\n\rDeployment\r\rDescription of the Altinn Studio solution\n\rAltinn CDN\r\rDescription of Altinn Content Delivery Network\n\r"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/instantiationhandler/",
	"title": "InstansiationHandler.cs",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av format for InstansiationHandler",
	"content": " Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes videre med i MVP.\n\rOverordnet \u0026lsquo;InstansiationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som hånderer instansiering av en tjeneste.\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom InstansiationHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/integration/",
	"title": "Integration",
	"tags": ["architecture", "information"],
	"description": "Description of the Integration Architecture",
	"content": " The integration architecture describes mechanismen and components that enables integration between components in Altinn Studio, Altinn Apps and Altinn Platform and integration against external solutions.\nThe architecture should give guidelines and constraints for how different types of integration should be implemented.\nIntegration types REST integration Altinn Apps - Altinn Platform Rest Integration End User Systems - Altinn Apps In this scenario a end user system call one of the defined standard REST API defines as part of AltinnCore.Runtime\nRest Integration End User System - Altinn Platform Rest Integration Agency System - Altinn Apps Rest Integration Agency System - Altinn Platform REST Integration Altinn Apps - External Rest Integration "
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-platform/intermediary/",
	"title": "Application arhicture intermediary component - Altinn Platform",
	"tags": ["solution", "architecture"],
	"description": "Description of intermediary component",
	"content": "The Authentication component will be a ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/loadbalancer/",
	"title": "Loadbalancer",
	"tags": ["development", "handbook", "loadbalancer"],
	"description": "Information about loadbalancer",
	"content": " Loadbalancer The loadbalancer config is stored as a configmap in our kubernetes cluster. When the config needs to be changed, the changes should be done in the loadbalancer-configmap for the correct environment (dev/prod).\nApply the changes, and restart the pod:\nOption 1: kill the pod and let the deployment spinn up a new pod.\nOption 2: open a shell into the pod kubectl exec -it [POD_NAME] -- sh and run the command nginx -s reload\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/naming/",
	"title": "Naming Conventions",
	"tags": ["development", "handbook", "naming"],
	"description": "Naming guidelines for Altinn Studio development",
	"content": " C# The Altinn project will use Microsoft’s coding conventions as a general guideline when no other guidelines are given.\nExceptions/additions to the general guideline:\nImplicit typing (var) should only be used when a variable is initialized with an anonymous type, which is a common scenario in LINQ query expressions. In general implicit typing makes the code more difficult to read and understand,and should be avoided. Altinn specific coding guidelines:\nMethods should not be more than 50 lines long When dealing with XML you should prefer XDocument to XmlDocument (especially in new methods) If/for/while/using and other structures should normally not be more than 2-3 levels deep All disposeable objects (proxies, DbCommand and so on) should be disposed by using a using block. Altinn specific naming guidelines:\nNames for classes, methods and variables should be describing, but not too long WCF-Artifact Naming TUL Naming Standard Namespace \u0026amp; Solution Structure\nReact Names of react-components should be descriptive and in pascal case\nActions Names of actions should be descriptive and in camel case.\nAn action should have the initial action, for instance fetchFormLayout, and an action if it succeeds and if it fails. For instance fetchFormLayoutFulfilled(succeed) and fetchFormLayoutRejected(failed).\nSagas Names of sagas should have the name of the action it listens to, and the word Saga appended to the end. For instance fetchFormLayoutSaga.\nAnd for saga-watchers, should have the watch-word appended to the start, and the saga name it watches. For instance watchFetchFormLayoutSaga.\nReducers Names of reducers should have a descriptive name of that it is responsible for updating in the redux-store, and the word Reducer appended to the end. For instace formLayoutReducer.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-platform/pap/",
	"title": "Policy Administration Point",
	"tags": ["architecture", "security"],
	"description": "Description of Policy Enforcment Point for Altinn Studio Apps",
	"content": "The rules for apps is defined in Altinn Studio when the service developer is developing the app (service). The rules for this is defined by XACML. See XACML for details.\nDelegation of rights is performed in Altinn II platform. When delegation is done through creation of new rules that gives user or organization new rights.\nAltinn Studio Apps will not have any administration of authorization rules.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-platform/pdp/",
	"title": "Policy Decision Point",
	"tags": ["architecture", "security"],
	"description": "Description of the Authoirzation architecture",
	"content": " The Policy Decision Point is implemented in the authorization application that is deployed Altinn Platform.\nPolicy Decision Point exposes a method that authorize request based on the following\n ResourceId (instanceId, dataId or appId) SubjectId (systemId, userId) ReporteeId (in case of appId) Action  If instanceID or dataID is used as Resource ID PDP will use Context Handler to identifiy the correct appId, the instance workflow state and the reporteId for the existing resource.\nFor request for non existing instances the appId will be used and the reportee is a required input\nThe diagram below show the detailed flow.\n\nFlow explained\n Context for the inputed resource is retrieved from database. This inlcude the correct reportee owning the app data instance Rules for the app is retrieved from PIP in Altinn Studio. Check if the operation requested by the user is a regular end user request or a service owner user request Check if request is comming from a end user system Check if owner of system is the reportee of app data instance Get roles the system (eg owner of the system) has for the reportee that owns app data instance from Altinn II platform. This need to be cached Validate to see if system is authorized based on the roles. If yes go to 10. If not go to 8. Get delegated rights system (eg owner) has for the reportee for the given app. This is retrieved from Altinn II platform. The delegation is described as XACML rules Verify if the delegated righs is enough for accessing. If not system is not authorized. If go to 10. Verify if it is a authenticated user that uses the end user system. If not go to 11. If go to 12. Verify if the action is allowed to be performed with only end user system credentials. Get the roles the user has for the given reportee Verify if the rules matches the roles user has for reportee. If not go to 14. If it has it is authorized Get the delegated rights from ALtinn II pip for the given app/reportee Verify if the delegated rights matches the request. If so, it is authoirzed, if not denied Get the IP rules for the given org. Verify if user is accessing service owner archive is accessing from a allowed IP range Get the reportee adress type Verify if the reportee has secret adress Get the org roles (user have for org that owns the org)(serice owner roles) Verify if user has needed service owner roles  Technical Considerations Caching The number of calls to external component should be kept at a minimum.\nWe need to implement caching of - Roles user/system has for a reportee - Policy for a app\nLogging "
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-apps/pep/",
	"title": "Policy Enforcment Point",
	"tags": ["architecture", "security"],
	"description": "Description of Policy Enforcment Point for Altinn Apps",
	"content": " There will be some different Policy Enforcment Points in Altinn Apps. This will be in Runtime Application.\nPEP for Runtime Application See Github\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-platform/pep/",
	"title": "Policy Enforcment Point",
	"tags": ["architecture", "security"],
	"description": "Description of Policy Enforcment Point for Altinn Studio Apps",
	"content": " There will be some different Policy Enforcement Points in Altinn Platform depending on the service in platform.\nPEP in Storage All data in storage will be related to instance data created for a specific App (service)\nPolicy Enforcment Point in Storage will identify the instanceId/dataid/appid that data and call PDP to authorize Access.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-platform/pip/",
	"title": "Policy Information Point",
	"tags": ["architecture", "security"],
	"description": "Description of Policy Information Point for",
	"content": "For Altinn Platform there is different type of policy information needed\n The rules defined by end user for a resource The roles a user have for a given resource owner. (reportee)  The roles a user or system has for a reportee is retrieved directly from Authorization component in Altinn II\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-platform/prp/",
	"title": "Policy Retrieval Point",
	"tags": ["architecture", "security"],
	"description": "Description of Policy Information Point for Altinn Platform",
	"content": "The Policy Retrieval Point is the functionality where Policy Decision Point (PDP) can retrieve the rules defined for a app resource.\nDuring deployment of a app the rules for the app is added to the Altinn Studio Apps database.\nThe rules are defined as XACML 3.0 Policy document.\nSee XACML for detailed description of Policy format\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/front-end/postmessage/",
	"title": "Post Message",
	"tags": ["development", "handbook", "front-end", "post", "post message"],
	"description": "Guidelines for using post message functionality in Altinn Studio",
	"content": " Window.postMessage() is introduced to handle communication between components that has no connection other then the need to communicate/trigger events. Eg. its used to communicate with the syncBar to get it to perform a new status check. To read more see: Window.postMessage\nUsage Dispatching a message event is done the following way:\n// variables should be used for messages var SAVED_EVENT = 'SAVED' window.postMessage(SAVED_EVENT, window.location.href);  Catching the event is done by adding an event listener to the component one needs to communicate with:\npublic componentDidMount() { window.addEventListener('message', this.eventThatShouldHappend); } public eventThatShouldHappend(){ if (event.data === SAVED_EVENT){ //Do necessary handling of correct message } }  When the commponent is unmounting the event listener should be removed:\npublic componentWillUnmount() { window.removeEventListener('message', this.eventThatShouldHappend); }   Remember to create \u0026ldquo;message variables\u0026rdquo; that make sense when comparing different messages. Example: \u0026ldquo;SAVED_IN_UI_EDITOR\u0026rdquo;, \u0026ldquo;SAVED_IN_OTHER_PLACE\u0026rdquo; or \u0026ldquo;FETCH_REPO_STATUS\u0026rdquo;.\n "
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-platform/profile/",
	"title": "Application arhicture profile component - Altinn Platform",
	"tags": ["solution", "architecture"],
	"description": "Description of profile component",
	"content": "The profile component will be a ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/rest/",
	"title": "RESTful APIs (Representation State Transfer)",
	"tags": ["development", "handbook", "back-end", "rest", "api"],
	"description": "Guidelines for designing REST apis for microservices in Altinn",
	"content": " This page is work-in-progress. This is a proposed api which most likely is going to change.\n\rREST REST is an architectural style for designing loosely coupled applications over HTTP which was coined by Rob Fielding in 2000. We will define services according to REST.\nAll REST APIs should be versioned.\n/api/v1/resource  Resources A resources is a thing that the client and server knows about. The API provides methods to ifind, create, update or delete a resource object. A resource in a system should have only one logical URI, which should provide a way to fetch related or additional data about the resource.\nPlatform Storage Data service to store instance data for applications, and metadata about applications\nResources: Instance, Application, ApplicationOwner, InstanceOwner, Schema\nInstance (Application instance) An application instance is created when a instance onwer starts a workflow in an Altinn application. An instance replaces Altinn2 Message. An instanceOwner is a person/company that reports information via Altinn. An applicationId refers to the application information element which defines the metadata about the application.\n{ \u0026quot;id\u0026quot;: \u0026quot;762011d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;applicationId\u0026quot;: \u0026quot;KNS/sailor\u0026quot;, \u0026quot;applicationOwnerId\u0026quot;: \u0026quot;KNS\u0026quot;, \u0026quot;instanceOwnerId\u0026quot;: \u0026quot;666\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-06T13:46:48.6882148+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;lastChangedDateTime\u0026quot;: \u0026quot;2019-03-07T23:59:49+01:00\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;dueDateTime\u0026quot;: null, \u0026quot;visibleDateTime\u0026quot;: null, \u0026quot;presentationField\u0026quot;: \u0026quot;Færder påmelding 2019\u0026quot;, \u0026quot;externalSystemReference\u0026quot;: null, \u0026quot;currentWorkflowStep\u0026quot;: \u0026quot;started\u0026quot;, \u0026quot;isCompleted\u0026quot;: true, \u0026quot;isDeleted\u0026quot;: [{ \u0026quot;deletionDateTime\u0026quot;: \u0026quot;2017-12-22\u0026quot;, \u0026quot;deletedBy\u0026quot;: \u0026quot;KNS\u0026quot; }], \u0026quot;applicationOwnerFeedback\u0026quot;: { \u0026quot;receivedDate\u0026quot;: \u0026quot;2019-05-11T03:00:23+01:00\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;OK\u0026quot; }, \u0026quot;data\u0026quot;: { \u0026quot;boatdata\u0026quot;: { \u0026quot;762011d1-d341-4c0a-8641-d8a104e83d30\u0026quot;: { \u0026quot;contentType\u0026quot;: \u0026quot;application/json\u0026quot;, \u0026quot;storageUrl\u0026quot;: \u0026quot;KNS/sailor/762011d1-d341-4c0a-8641-d8a104e83d30/data/boatdata/992011d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;fileName\u0026quot;: \u0026quot;davidsyacht.json\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-06T15:00:23+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;signature\u0026quot;: \u0026quot;oajviojoi2j3l23889yv8js909u293840zz092u3\u0026quot;, \u0026quot;fileSize\u0026quot;: 2003, \u0026quot;isLocked\u0026quot;: true }, \u0026quot;crewlist\u0026quot;: { \u0026quot;999911d1-d341-4c0a-8641-d8a104e83d30\u0026quot;: { \u0026quot;contentType\u0026quot;: \u0026quot;text/xml\u0026quot;, \u0026quot;storageUrl\u0026quot;: \u0026quot;KNS/sailor/762011d1-d341-4c0a-8641-d8a104e83d30/data/crewlist/999911d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;fileName\u0026quot;: \u0026quot;crewLIst.xml\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-07T23:59:49+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;lastChangedDateTime\u0026quot;: \u0026quot;2019-03-10T23:59:49+01:00\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;XXX\u0026quot; } } } }  Create a new instance. Post with params that identifies the application and the instance owner.\n/instances?applicationId=KNS/sailor\u0026amp;instanceOwnerId=1024  Get information about one instance.\n/instances/{instanceId}  Get (query) all instances that is instance owner has\n/instances\u0026amp;instanceOwnerId={instanceOwnerId}[\u0026amp;since=2017-01-01]  Get (query) all instances of a particular application that is completed\n/instances?applicationId={applicationId}\u0026amp;completed=true  Delete a specific instance (also deletes its data).\n/instances/{instanceId}  Data service A data element is a file that contains a specific form element of an instance. It may be structured file, e.g. json, xml, or it may be a binary file, e.g. pdf. The application metadata restricts the types of form elements that are allowed {formId}.\nGet a specific data element\n/instances/{instanceId}/data/{formId}/{dataId}  Post to create a specific data element. Content a file (as MultipartContent). After success the instance\u0026rsquo;s data section is updated, with the appropriate dataId guid that is used to identify the specific data element\n/instances/{instanceId}/data/{formId}  Put to replace a specific data element. Delete to remove data element.\n/instances/{instanceId}/data/{formId}/{dataId}  ApplicationOwner Get metadata about an application owner\n/owners/{applicationOwnerId}  Application (metadata) Resource: http://platform.altinn.no/applications/KNS/sailor\n{ \u0026quot;id\u0026quot;: \u0026quot;KNS/sailor\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-06T13:46:48.6882148+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Færder påmelding\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;innsending\u0026quot;, \u0026quot;applicationOwnerId\u0026quot;: \u0026quot;KNS\u0026quot;, \u0026quot;workflowId\u0026quot;: \u0026quot;standard\u0026quot;, \u0026quot;isDeleted\u0026quot;: false, \u0026quot;isArchived\u0026quot;: false, \u0026quot;validFrom\u0026quot;: null, \u0026quot;validTo\u0026quot;: null, \u0026quot;forms\u0026quot;: { \u0026quot;boatdata\u0026quot;: { \u0026quot;contentType\u0026quot;: \u0026quot;application/schema+json\u0026quot;, \u0026quot;storageUrl\u0026quot;: \u0026quot;sailor/schema/boatdata\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-04T12:01:00+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;M2\u0026quot;, \u0026quot;signatureRequired\u0026quot;: true, \u0026quot;shouldEncryptData\u0026quot;: true }, \u0026quot;crewlist\u0026quot;: { \u0026quot;contentType\u0026quot;: \u0026quot;application/xsd+xml\u0026quot;, \u0026quot;storageUrl\u0026quot;: \u0026quot;sailor/schema/crewlist\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-04T12:01:00+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;M2\u0026quot;, \u0026quot;lastChangedDateTime\u0026quot;: \u0026quot;2019-03-10T23:59:49+01:00\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;M42\u0026quot; } } }  Get a list of all Applications\n/applications  Get metadata about a specific application\n/applications/{applicationId}  Get the schema of a specific form element in an application\n/applications/{applicationId}/forms/{dataId}?format=jsonSchema  Altinn-studio \u0026hellip;\ntbd\nApp services (runtime) TBD\u0026hellip;\nOne cluster per application owner. An application owner can have many apps.\nhttps://{applicationOwnerNick}.apps.altinn.no  Resources: App, Application, Instance\nPut/post to change workflow step\n/instances/{instanceId}/workflow/{stepId}  Get receipt\n/instances/{instanceId}/receipt  Get validate model\n/instances/{instanceId}/forms/{formId}/validate  Get metadata about a specific application\n/applications/{applicationId}  Get schema for a specific form in the application\n/applications/{applicationId}/forms/{formId}  Get texts for a specific form in the application\n/texts  "
},
{
	"uri": "https://docs.altinn.studio/development/handbook/front-end/react/",
	"title": "React",
	"tags": ["development", "handbook", "front-end", "react"],
	"description": "Guidelines for using React in Altinn Studio",
	"content": " React React is a library for developing component based applications. It is done by having declared html as xml in javascript code, and that is again transpiled into vanilla javascript for the browser to render into a page.\nReact Components lifecycle There are sequences that are called when mounting, updated, unmounted and error-catching for every component in React. This is the order they are called:\nMounting  constructor() static getDerivedStateFromProps() render() componentDidMount()  Updating  static getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate()  Unmounting  componentWillUnmount()  Error handling  static getDerivedStateFromError() componentDidCatch()  Other React component APIs and properties APIs  setState() forceUpdate()  Class Properties  defaultProps displayName  Instance Properties  props state  Adding a new react-app to altinn.studio When adding a new react-app, use the template folder that is in the github repo. Create a new folder in the src/react-apps/applications-folder and copy the contents from the src/react-apps/templates/template-app-folder of that newly created folder.\nThen change the names in the package.json-file and start developing the new application.\nIn the templates folder, in the src/index.tsx-file, a function called run is commented out, if your application needs to have sagas, uncomment the run-function which should initialize the sagas.\nLinks  Documentation for react components  "
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-apps/react-app/",
	"title": "Tjenester 3.0 - Runtime - Arkitektur",
	"tags": ["tjenester 3.0"],
	"description": "Beskrivelse av arkitektur for React App i Runtime",
	"content": " Arkitektur Tjeneste React App React App vil i runtime være en React applikasjon som bygges/pakkes basert på valgene som ble gjort av tjenesteutvikler.\nArkitekturen vil i utgangspunktet være lik på tvers av sluttbrukertjenester, men det kan være forskjeller på hvilke versjoner av rammeverk som det er bygget på.\nEn viktig føring for denne appen er at oppdateringer i rammeverk ikke automatisk skal påvirke React App for den aktuelle tjenesten. Derfor vil den bygges designtime og legges med selve tjenesten sammen med nødvendige rammeverk/referanser til rammeverk med en gitt versjon.\nTODO: Det er foreløpig ikke laget bygg av dette.\nFiguren nedenfor viser den overordnede arkitekturen som er valgt for React App.\n\nOverordnet konsept Det overordnede konseptet er at man har en konfigurasjonsfil som definerer hvilke komponenter et skjema skal bestå av og rekkefølgen på disse. Denne konfigurasjonsfilen blir generert av UX Designern i Altinn Studio når tjenesteutvikleren designer tjenesten og blir en del av ressursfilene som inkluderes i tjenestepakken.\nFormLayout.json lastes inn av React Appen sammen med selve dataene og annen konfigurasjon til en tjeneste når applikasjonen starter.\nApplikasjonen rendrer komponentene som er definert i designer FormLayout.. Dette skjer ved at Preview komponenten løper gjennom design filen og kaller FormComponent for hver enkelt element i listen. FormComponent rendrer deretter komponenter som tekstbokser eller nedtrekkliste avhengig av hvilken type komponent.\nReact komponentene React komponentene som kan velges i UX-designer er alle React komponenter som vil rendes basert input til FormComponenten.\nDisse er for øyeblikket\n HeaderComponent InputComponent CheckboxContainerComponent TextAreaComponent RadioButtonContainerComponent DropdownComponent FileUploadComponent  Disse er alle basert på Reactstrap rammeverket. TODO: Her skal vi skrive ut Reactstrap\nHver enkel komponent har definert et sett med input data (props) som den forventer som input. Det er opp til den overliggende komponenten å skaffe tilveie disse. Dette kan være verdier fra state eller egne input data.\nReact legger opp til React komponetene har en metode for å mappe verdier fra state til props for de komponentene som krever.\nNår sluttbruker gjør endringer i skjema (f.eks fyller inn noe i en tekstboks) vil den trigge en event som igjen trigger Actions som håndteres av forskjellige dispatchers\n /** * This is the event handler that triggers the Redux Actions * that is sendt to the different Action dispatcher. * This event handler is used for all form components rendered from this */ public handleComponentDataUpdate = (callbackValue: any): void =\u0026gt; { if (!this.props.component.dataModelBinding) { return; } FormFillerActionDispatchers.updateFormData( this.props.id, callbackValue, this.props.dataModelElement, ); ExternalApiActionDispatchers.checkIfApiShouldFetch(this.props.id, this.props.dataModelElement, callbackValue); RuleConnectionActionDispatchers.checkIfRuleShouldRun(this.props.id, this.props.dataModelElement, callbackValue); }  Redux Redux benyttes for å lagre state i applikasjonen. I tjenester 3.0 finnes det flere data store.\nFor runtime er det følgende Redux store som benyttes\nAppConfigState Inneholder informasjon om hvilken modus applikasjonen har.\nexport interface IAppConfigState { designMode: boolean; }  DataModelState Inneholder informasjon om alle elementene i datamodellen. Basert på JSON generert fra XSD\nexport interface IDataModelState { model: IDataModelFieldElement[]; fetching: boolean; fetched: boolean; error: Error; }  RuleModelState Inneholder definerte regler\nexport interface IRuleModelState { model: IRuleModelFieldElement[]; fetching: boolean; fetched: boolean; error: Error; }  TextResourceState Inneholder alle tekstressurser.\nexport interface ITextResourcesState { resources: ITextResource[]; language: string; fetching: boolean; fetched: boolean; error: Error; }  FormFillerState Inneholder all skjemadata og eventuelle valideringsfeil.\nexport interface IFormFillerState { formData: any; validationErrors: any; }  Reducer Redux reducers har til oppgave å oppdatere de forskjellige stores. Det er en reducer for hver enkel store. Følgende er definert\n formFillerReducer - Ansvarlig for å oppdatere FormFillerState errorReducer - Ansvarlig for å oppdatere *  Reducerne lytter etter Actions som blir dispatchet\nAction Types Action Types er type definisjoner på hendelser\nEksempler:\n// All update form data actions export const UPDATE_FORM_DATA: string = `${moduleName}.UPDATE_FORM_DATA`; export const UPDATE_FORM_DATA_FULFILLED: string = `${moduleName}.UPDATE_FORM_DATA_FULFILLED`; export const UPDATE_FORM_DATA_REJECTED: string = `${moduleName}.UPDATE_FORM_DATA_REJECTED`;  Action Actions er hendelser som kan bli trigget av de forskjellige komponentene. En Action inneholder minimum typen av en Action, men kan også inneholde andre metadata rundt hendelsen.\nEksempel:\nexport interface IUpdateFormDataAction extends Action { formData: any; componentID: string; dataModelElement: IDataModelFieldElement; }  Action Creators Action Creators lager actions\nEksempel:\nexport function updateFormDataAction( componentID: string, formData: any, dataModelElement: IDataModelFieldElement, ): IUpdateFormDataAction { return { type: ActionTypes.UPDATE_FORM_DATA, formData, componentID, dataModelElement }; }  Action Dispatcher Action dispatcher\nRedux-Saga Redux-Saga er Middleware rammeverk som benyttes for å gjøre asynkrone kall mot API i løsningen. Dette er f.eks uthenting av skjemdata og lagring av skjemadata.\nHver enkel Saga som defineres definerer metoder som utfører forskjellige typer oppgaver. Dette kan f.eks være lagring av skjemdata eller uthenting av skjemadata.\nDet er definert forskjellige Saga for de forskjellige funksjonelle områdene. Sagaene er\n appData - Ansvarlig for å hente ut regler, tekstressurser og datamodell externalApiSaga - Funksjonalitet rundt externe APi formFillerSagas - funksjonalitet knyttet til uthenting og lagring av skjemadata  For hver Saga metode knyttes det lytttere som lytter til Actions. Det er dette som trigger at de nødvendige kallene skjer.\n/** * Define a listener for the UPDATE_FORM_DATA event */ export function* watchUpdateFormDataSaga(): SagaIterator { yield takeLatest(FormFillerActionTypes.UPDATE_FORM_DATA, updateFormDataSaga); }  "
},
{
	"uri": "https://docs.altinn.studio/development/handbook/front-end/redux/",
	"title": "Redux",
	"tags": ["development", "handbook", "front-end", "redux"],
	"description": "Guidelines for using Redux in Altinn Studio",
	"content": " Redux is used to manage the states of the ux-editor.\nActions Actions are the events that are triggered when a change is made. An action contains the action type, and any metadata needed to complete the action. For example:\nexport interface IUpdateFormDataAction extends Action { formData: any; componentID: string; dataModelElement: IDataModelFieldElement; }  Sagas Redux saga is the middleware used to process information before the store is updated. All logic used in a saga should be an exported function in the utils-folder. This is decided since we need to split up the logic from the fetching of data, so we have a more testable codebase. The saga only fetches data from the state, and sends the appropriate data to utils-functions.\nAn example is asyncronous calls to backend APIs to get data, or submit data.\nEach saga defines methods that complete different tasks, connected to actions. These methods are called via listeners that listen to the actions that are being dispatched. There are different sagas for all the different functional areas.\n/** * Define the saga for the UPDATE_FORM_DATA event */ function* updateFormDataSaga(action: ActionType) { try { const relevantData = yield selectRelevantStateObjects(...); ... doRelevantLogic(relevantData); ... yield call(updateFormDataSagaFulfilled, ... ); } catch (err) { yield call(updateFormDataSagaRejected, err); } } /** * Define a listener for the UPDATE_FORM_DATA event */ export function* watchUpdateFormDataSaga(): SagaIterator { yield takeLatest(FormFillerActionTypes.UPDATE_FORM_DATA, updateFormDataSaga); }  Reducers Redux reducers are used to update the different states in the store. There is one reduer per state. The reducers listen to the actions that are dispatched when changes are made\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-platform/register/",
	"title": "Application arhicture register component - Altinn Platform",
	"tags": ["solution", "architecture"],
	"description": "Description of register component",
	"content": "The register component will be a ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/",
	"title": "Security",
	"tags": ["architecture", "security"],
	"description": "Description of the Altinn Studio security architecture.",
	"content": "Description of the Altinn Studio Security architecture.\n\rAuthentication\r\rDescription of the Authentication architecture for Altinn Apps\n\r\rAuthentication - Altinn Studio Apps\r\rDescription of the Authentication architecture for Altinn Studio and Altinn Studio Apps\n\r\rAuthorization\r\rDescription of the Authorization architecture\n\r\rAuthorization - Altinn Apps\r\rDescription of the Authorization Architecture for Altinn Studio Apps\n\rAuthorization - Altinn Platform\r\rDescription of the Authorization Architecture for Altinn Platform\n\rAuthorization - Altinn Studio\r\rDescription of the Authorization Architecture for Altinn Studio\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/securecoding/checklist/",
	"title": "Security Checklist",
	"tags": ["checklist", "OWASP", "security"],
	"description": "Checklist for security OWASP.",
	"content": " Design General    # Title Description     1 Do the design use the security architecture correct? Are the mechanismen like authentication and authorization used correctly?.   2 Sikrer designet    3 Vil designet gi økt fare for DOS angrep? Eksponerer funksjonalitet tunge operasjoner som kan gjentas mange ganger   4 Is it performed a treath assessment for the change? Hvilke nye risikoer introdusereres ved hjelp av endringen Muligheter for tilgang til data? Manipulering av data     "
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-apps/serviceevents/",
	"title": "Service events",
	"tags": ["tjenester 3.0"],
	"description": "Description of service events",
	"content": " NOTE: Work in progress. Stuff will change\n\rService Events The runtime has a defined event model that can be used by the service developer to controll when logic in the service implementation will run.\nThese events are mapped to functional events triggered by end users or systems.\nInstansiation Instansiation is when the end user or system instansiates a new service instance. Events connected to instansiation can contain logic that can prefill the datamodell or validate if the user or system is allowed to instansiate that service.\n\nLoad form data (GET) Loading of form data can be performed by the frontend (REACT) or an end user system that needs to get the latest updated form data.\nThe following events will be performed\n\nStoring of form data (POST) Update of form data can happen when frontend (REACT app) sends data to backend or a end user system does the same. When an update happend there is defined serveral events that is performed in a given ordern. The service developer can implement logic related to this event that could perform calculation, validation, API calls and much more.\nThe API for updating form data support different modes\n Create - Data should be stored as a new form instance Complete - Data is complete and the service should move ahead in the workflow Calculate - Logic in the calculation event should be performed and the updated form data should be returned Validate - Calculation will be performend and then validation logic is runned and any validation errors is returned. Update - Calculation is runned before data is stored in to the database.  The order of events are\n\nUpdate form data (PUT) Update of form data happens when the frontend or external end user systems/applications want to update a existing form connected to a service instance\nThe following events happens:\n\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/serviceimplementation/",
	"title": "ServiceImplementation.cs",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av format for tjenesteimplementasjonen",
	"content": " Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes videre med i MVP.\n\rOverordnet \u0026lsquo;ServiceImplementation.cs\u0026rsquo; er hovedgrensesnittet mellom Altinn Core runtime og foretningslogikken i tjenesten som kjører på server.\nFormat \u0026lsquo;ServiceImplementation.cs\u0026rsquo; implementerer grensesnittet IServiceImplementation som har følgende metoder definert.\nobject CreateNewServiceModel(); Metode som oppretter nytt datamodell objekt basert på den datamodellen som tjenesten definerer\nvoid SetServiceModel(object model); Metode som gjør at plattformen kan tilgjengeliggjøre en populert datamodell til tjenesteimplementasjonen\nvoid SetContext(RequestContext requestContext, dynamic viewBag); Metode som setter context informasjon til tjenesteimplementasjon\nvoid SetContext(RequestContext requestContext, dynamic viewBag, ServiceContext serviceContext, StartServiceModel startServiceModel, ModelStateDictionary modelState); Metode som setter context informasjon til tjenesteimplementasjon\nTask RunServiceEvent(ServiceEventType serviceEvent); Metode som trigger en tjeneste hendelse. Dette gjør plattformen ved spesielle tidspunkt og tjenesteutvikler kan da velge å kjøre forretningslogikk under dise hendelsene.\nHendelsene som er definert til nå er.\n BeforeRender Calculation Instantiation ValidateInstantiation Validation DataRetrieval  void SetPlatformServices(IPlatformServices platformServices); Tilgjengeligjør plattformtjenester.\nViewMetadata GetView(string viewID, UserActionType userAction); Henter view. TODO: Vurder å fjerne dette når man har konkludert om MVC Razor views skal støttes av plattformen.\nUtvikling Under opprettelse av en tjeneste vil en tom ServiceImplementasjonsklasse opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\nForretningslogikk Foretningslogikk implementeres i denne klassen eller andre relatert klasser som denne referer til. Det vil være opp til utvikler å eventuelt skille kode ut i flere andre klasser.\nTjenester 3.0 oppretter egne klasser for forretningslogikk tilknyttet kalkuleringer, valideringer og instansiering.\nEksempel på forretningslogikk\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/servicemetadata/",
	"title": "ServiceMetadata.json",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av format for ServiceMetadata",
	"content": " Overordnet \u0026lsquo;ServiceMetadata.json\u0026rsquo; beskriver datamodellen til et skjema. Den autogenereres fra XSD.\nFormat \u0026lsquo;ServiceMetadata.json\u0026rsquo; inneholder informasjon om alle felter i en datamodell. ServiceModell vil genereres fra denne. Hvis man ønsker å overstyre egenskaper fra XSD så kan det gjøres her.\nTODO: Det er en rekke ting som er uavklart om hva man vil kunne gjøre av endringer på denne.\nEksempel Under er et eksempel på hvordan ServiceMetadata kan se ut\n{ \u0026quot;Org\u0026quot;:\u0026quot;BR\u0026quot;, \u0026quot;Service\u0026quot;:\u0026quot;Tjeneste1\u0026quot;, \u0026quot;Edition\u0026quot;:\u0026quot;2019\u0026quot;, \u0026quot;Elements\u0026quot;:{ \u0026quot;Skjema.skjemanummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.skjemanummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;skjemanummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/skjemanummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;Integer\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;skjemanummer\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;1243\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.spesifikasjonsnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.spesifikasjonsnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;spesifikasjonsnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/spesifikasjonsnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;Integer\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;spesifikasjonsnummer\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;10702\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.blankettnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.blankettnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;blankettnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/blankettnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;blankettnummer\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;RF-1117\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.tittel\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.tittel\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;tittel\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/tittel\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;tittel\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;Klage p� likningen\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5800\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.etatid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.etatid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;etatid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/etatid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;etatid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5801\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5802\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25795\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverNavnPreutfylt.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;175\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25795.OppgavegiverNavnPreutfylt.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25795.OppgavegiverNavnPreutfylt.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;OppgavegiverNavnPreutfylt-datadef-25795\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25796\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;500\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25796.OppgavegiverAdressePreutfylt.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25796.OppgavegiverAdressePreutfylt.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;OppgavegiverAdressePreutfylt-datadef-25796\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25797\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverPostnummerPreutfylt.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;length\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;4\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;pattern\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;[0-9]{4}\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25797.OppgavegiverPostnummerPreutfylt.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25797.OppgavegiverPostnummerPreutfylt.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;OppgavegiverPostnummerPreutfylt-datadef-25797\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25798\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverPoststedPreutfylt.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;35\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25798.OppgavegiverPoststedPreutfylt.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25798.OppgavegiverPoststedPreutfylt.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;OppgavegiverPoststedPreutfylt-datadef-25798\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;26\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverFodselsnummer.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;length\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;11\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;26.OppgavegiverFodselsnummer.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;26.OppgavegiverFodselsnummer.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;OppgavegiverFodselsnummer\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;OppgavegiverFodselsnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.oppgavegiverFodselsnummer\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;OppgavegiverFodselsnummer-datadef-26\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;18\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.enhetOrganisasjonsnummer.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;length\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;9\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;18.EnhetOrganisasjonsnummer.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;18.EnhetOrganisasjonsnummer.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.enhetOrganisasjonsnummer\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;EnhetOrganisasjonsnummer-datadef-18\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetKommunenummer/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;17\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.enhetKommunenummer.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetKommunenummer/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;length\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;4\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;pattern\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;[0-9]{4}\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;17.EnhetKommunenummer.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;17.EnhetKommunenummer.Label\u0026quot;, \u0026quot;PlaceHolder\u0026quot;:\u0026quot;17.EnhetKommunenummer.PlaceHolder\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;EnhetKommunenummer\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;EnhetKommunenummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info.enhetKommunenummer\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info/EnhetKommunenummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;EnhetKommunenummer-datadef-17\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.info\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.info\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;info\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;info\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.info\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/info\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:3, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;info-grp-5802\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5803\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;2\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonNavn.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;150\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Label\u0026quot;:\u0026quot;2.KontaktpersonNavn.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonNavn\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonNavn\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonNavn\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonNavn-datadef-2\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;2751\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonAdresse.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;105\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;2751.KontaktpersonAdresse.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;2751.KontaktpersonAdresse.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonAdresse\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonAdresse\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonAdresse\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonAdresse-datadef-2751\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;10441\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonPostnummer.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;length\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;4\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;pattern\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;[0-9]{4}\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;10441.KontaktpersonPostnummer.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;10441.KontaktpersonPostnummer.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonPostnummer\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonPostnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonPostnummer\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonPostnummer-datadef-10441\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;10442\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonPoststed.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;35\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;10442.KontaktpersonPoststed.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;10442.KontaktpersonPoststed.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonPoststed\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonPoststed\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonPoststed\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonPoststed-datadef-10442\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;27688\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonEPost.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;45\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;27688.KontaktpersonEPost.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;27688.KontaktpersonEPost.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonEPost\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonEPost\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonEPost\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonEPost-datadef-27688\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;3\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonTelefonnummer.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;13\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;3.KontaktpersonTelefonnummer.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;3.KontaktpersonTelefonnummer.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KontaktpersonTelefonnummer\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KontaktpersonTelefonnummer\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt.kontaktpersonTelefonnummer\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KontaktpersonTelefonnummer-datadef-3\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.Kontakt\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;Kontakt\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;Kontakt\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.kontakt\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/Kontakt\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ \u0026quot;Label\u0026quot;:\u0026quot;5803.Kontakt.Label\u0026quot;, \u0026quot;Help\u0026quot;:\u0026quot;5803.Kontakt.Help\u0026quot;, \u0026quot;PlaceHolder\u0026quot;:\u0026quot;5803.Kontakt.PlaceHolder\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;Kontakt-grp-5803\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5804\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25455\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klageGjeldendeInntektsar.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;GYear\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25455.KlageGjeldendeInntektsar.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25455.KlageGjeldendeInntektsar.Label\u0026quot;, \u0026quot;PlaceHolder\u0026quot;:\u0026quot;25455.KlageGjeldendeInntektsar.PlaceHolder\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KlageGjeldendeInntektsar\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KlageGjeldendeInntektsar\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klageGjeldendeInntektsar\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KlageGjeldendeInntektsar-datadef-25455\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25454\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klagemeldingSendtInnenKlagefrist.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;3\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;enumeration\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;Ja;Nei;\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25454.KlagemeldingSendtInnenKlagefrist.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25454.KlagemeldingSendtInnenKlagefrist.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KlagemeldingSendtInnenKlagefrist-datadef-25454\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25456\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klageUtloptKlagefristBegrunnelse.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1000\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25456.KlageUtloptKlagefristBegrunnelse.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25456.KlageUtloptKlagefristBegrunnelse.Label\u0026quot;, \u0026quot;PlaceHolder\u0026quot;:\u0026quot;25456.KlageUtloptKlagefristBegrunnelse.PlaceHolder\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist.klageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KlageUtloptKlagefristBegrunnelse-datadef-25456\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor.klagefrist\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.Skattyterinfor\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;klagefrist\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;klagefrist\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor.klagefrist\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor/klagefrist\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ \u0026quot;Label\u0026quot;:\u0026quot;5804.klagefrist.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;klagefrist-grp-5804\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.Skattyterinfor\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.Skattyterinfor\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;Skattyterinfor\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;Skattyterinfor\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;skattyterinfor\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/Skattyterinfor\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ \u0026quot;Label\u0026quot;:\u0026quot;5801.Skattyterinfor.Label\u0026quot;, \u0026quot;Help\u0026quot;:\u0026quot;5801.Skattyterinfor.Help\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;Skattyterinfor-grp-5801\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5805\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.spesifisering.gruppeid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.spesifisering.gruppeid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage.spesifisering\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/spesifisering/gruppeid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;gruppeid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;5836\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.spesifisering.KlageSpesifisering.orid\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.spesifisering.KlageSpesifisering.orid\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage.spesifisering.KlageSpesifisering\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/spesifisering/KlageSpesifisering/orid\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Attribute\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;PositiveInteger\u0026quot;, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;orid\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:\u0026quot;25457\u0026quot;, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.spesifisering.KlageSpesifisering.Value\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.spesifisering.KlageSpesifisering.Value\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage.spesifisering.KlageSpesifisering\u0026quot;, \u0026quot;TypeName\u0026quot;:null, \u0026quot;Name\u0026quot;:\u0026quot;Value\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;klage.spesifisering.klageSpesifisering.value\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/spesifisering/KlageSpesifisering/Value\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ \u0026quot;minLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;ErrortText\u0026quot;:null }, \u0026quot;maxLength\u0026quot;:{ \u0026quot;Value\u0026quot;:\u0026quot;1000\u0026quot;, \u0026quot;ErrortText\u0026quot;:null } }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Field\u0026quot;, \u0026quot;XsdValueType\u0026quot;:\u0026quot;String\u0026quot;, \u0026quot;Texts\u0026quot;:{ \u0026quot;Help\u0026quot;:\u0026quot;25457.KlageSpesifisering.Help\u0026quot;, \u0026quot;Label\u0026quot;:\u0026quot;25457.KlageSpesifisering.Label\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:1, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:true, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.spesifisering.KlageSpesifisering\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.spesifisering.KlageSpesifisering\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage.spesifisering\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;KlageSpesifisering\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;KlageSpesifisering\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;klage.spesifisering.klageSpesifisering\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/spesifisering/KlageSpesifisering\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;KlageSpesifisering-datadef-25457\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage.spesifisering\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage.spesifisering\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema.klage\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;spesifisering\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;spesifisering\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;klage.spesifisering\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage/spesifisering\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;spesifisering-grp-5836\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema.klage\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema.klage\u0026quot;, \u0026quot;ParentElement\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;TypeName\u0026quot;:\u0026quot;klage\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;klage\u0026quot;, \u0026quot;DataBindingName\u0026quot;:\u0026quot;klage\u0026quot;, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema/klage\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ \u0026quot;Label\u0026quot;:\u0026quot;5805.klage.Label\u0026quot;, \u0026quot;Help\u0026quot;:\u0026quot;5805.klage.Help\u0026quot;, \u0026quot;PlaceHolder\u0026quot;:\u0026quot;5805.klage.PlaceHolder\u0026quot; }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:1, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:\u0026quot;klage-grp-5805\u0026quot;, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false }, \u0026quot;Skjema\u0026quot;:{ \u0026quot;ID\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;ParentElement\u0026quot;:null, \u0026quot;TypeName\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;Name\u0026quot;:\u0026quot;Skjema\u0026quot;, \u0026quot;DataBindingName\u0026quot;:null, \u0026quot;XPath\u0026quot;:\u0026quot;/Skjema\u0026quot;, \u0026quot;Restrictions\u0026quot;:{ }, \u0026quot;Choices\u0026quot;:null, \u0026quot;Type\u0026quot;:\u0026quot;Group\u0026quot;, \u0026quot;XsdValueType\u0026quot;:null, \u0026quot;Texts\u0026quot;:{ }, \u0026quot;CustomProperties\u0026quot;:{ }, \u0026quot;MaxOccurs\u0026quot;:0, \u0026quot;MinOccurs\u0026quot;:0, \u0026quot;XName\u0026quot;:null, \u0026quot;IsTagContent\u0026quot;:false, \u0026quot;FixedValue\u0026quot;:null, \u0026quot;IsReadOnly\u0026quot;:false } } }  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/servicemodel/",
	"title": "ServiceModel.cs",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av ServiceModel.cs",
	"content": " Overordnet \u0026lsquo;ServiceModel.cs\u0026rsquo; er tjenestemodellen som automatisk genereres fra datamodellen som er valgt på tjenesten. Denne kommer i utgangspunktet fra XSD, men tjenester 3.0 vil mest sannsynlig få støtte for å definere datamodell selv.\nRuntime vil populere datamodellen med data fra GUI og forretningsregler vil kunne jobbe mot denne modellen.\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/servicemodelxsd/",
	"title": "ServiceModel.xsd",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av ServiceModel.xsd",
	"content": " Overordnet \u0026lsquo;ServiceModel.xsd\u0026rsquo; er definasjonen på datamodellen på tjenesten. Dette er en XSD som typisk er definert i Seres eller OR i dagens Altinn løsning.\nFor tjenester 3.0 vil jobbes med å kunne definere XSD som en del av løsningen. (f.eks å definere skjema i GUI og få XSD basert på det). Dette vil avklares fremover.\n"
},
{
	"uri": "https://docs.altinn.studio/about/slide/",
	"title": "Slide NO",
	"tags": [],
	"description": "En presentasjon om målsettinger og konsepter for Tjenester 3.0",
	"content": " Altinn Studio Aka Tjenester 3.0 Dagens løsning  Produksjonsatt sommeren 2010 Basert på InfoPath og SharePoint 115.000.000 skjema fylt ut 404 aktive innsendingstjenester i 2018 Bakgrunn og mål Behov har vært kjent lenge\n POC utviklet i 2015 (men lagt på is grunnet manglende finansiering)\n Finansiering på Statsbudsjettet 2018\n Startet opp igjen våren 2018\n Hva er målet med prosjektet? En modern utviklingsplattform\n Et effektivt utviklingsverktøy\n En moderne infrastruktur\n En plattform for gjenbruk\n En platform for deling av data og erfaringer En moderne utviklingsplattform Altinn Studio er en åpen og modern utviklingsplattform\n Versjonering og samarbeid via Git\n Støtte for distribuert utvikling\n All programvare som benyttes er åpen kildekode. Også selve 3.0-plattformen.\n Funksjonalitet i Altinn tilgjengelig via API’er\n Moderne og populær teknologi, f.eks. React og Visual Studio Code\n Full selvbetjening Tekniske utviklere kan benytte best-of-breed utvikler-verktøy og teknologi, slik de er vant til.\n Et effektivt utviklingsverktøy Altinn Studio tilbyr enkel, effektiv og 100% selvbetjent utvikling og forvaltning av tjenester, også for ikke-teknologer.\n Brukergrensesnitt (GUI)\n API’er\n Arbeidsflyt\n Logikk og dynamikk\n Datamodellering\n Konfigurasjon og tilgangsstyring\n Automatisert testing\n… En moderne infrastruktur Altinn Studio (og tjenester som lages der) vil kjøre på en moderne infrastruktur.\n Docker containers for applikasjoner\n Kubernetes for orkestrering av containers\n  Dette gir isolering mellom applikasjoner (microservices), enklere skalering og understøtter “DevOps”.\n Hva kan jeg gjøre med MVP-01? Opprette bruker og logge inn i Altinn Studio Lage (og finne igjen) en tjeneste Finne tjenester fra andre organisasjoner Laste opp en datamodell som fungerer i tjenesten (Seres eller OR) Lage et skjemadesign med drag and drop av elementer (begrenset utvalg av komponenter) Legge inn tekster/tekstnøkler for tjeneste Gjøre manuell test av tjenesten i Altinn Studio for å teste design og forretningslogikk Legge inn regler for skjemalogikk (validering, kalkulering, dynamikk) Bruke API-oppslag i tjenesten (forutsetter Ajax kall kodet i GUI)\nEndre på standardfil for arbeidsflyt Endre på filer med versjonskontroll\n Hva kan man forvente av MVP på ulike tidspunkt? MVP-02: Runtime i test – April/Mai  Grunnleggende samhandling med SBL Autentisering Integrasjon med Profil Lagring og uthenting av tjenestedata Integrasjon med Register i SBL Integrasjon med Intermediary i SBL Integrasjon med innboks i SBL Deployment av tjeneste til Runtime-testmiljø Ikke sikret miljø, kun egnet for konstruerte testdata ___ Utvidet funksjonalitet i Designer og Runtime Utvidet støtte for tjenestedata Grunnleggende integrasjon med Autorisasjonsløsninger Utvidet støtte til API Sikkerhet mellom containere Shipment av brukerdata MVP-03: Klar for tjenesteproduksjon – Juni/Sept Fullverdig runtime med godkjent sikkerhet i sky\n Fullverdig vedleggshåndtering\n Fullverdig integrasjon med SBL\n Utvidet Designer GUI, Dashboard\n Utskriftsfunksjonalitet\n Analyseverktøy for brukeropptreden i Tjenester(?)\nMERK! Det er fortsatt en MVP – dvs. klare begrensninger på hva slags tjenester som kan realiseres Tjenster 3.0 vs Tjenester 2.0 Skjemaverktøy Egenutviklet vs InfoPath\n React vs SharPoint formserver\n Responsivt vs ikke responsivt\nArbeidsflyt BPMN vs Custom\nTjenester som API REST vs SOAP\n Individuell API vs Generelle\nRessurser Isolerte vs delte\n Raskt skalerbar vs lang leveringstid\nDataformat JSON/XML vs XML\nKontroll på logikk Full kontroll på når ting skjer i plattformen i motsetning til Infopath\nShipment Mest sannsynligvis færre muligheter i platform. (flatfil?, sftp?)\n  Videre arbeid i MVP  Fokus på infrastruktur Skyløsninger Sikkerhet Deploy av tjenester Integrasjon med tjenesteeier Understøtte piloter Detaljer løsning Tre nye løsninger\n Altinn Studio Altinn Apps Altinn Platform\nAltinn Studio   Altinn Apps Altinn Platform Status Du kan følge utviklingen på Github. Motivasjon Se Archimate arkitekturmodell. The End Tilbake\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/application/altinn-platform/storage/",
	"title": "Application arhicture Storage component - Altinn Platform",
	"tags": ["solution", "architecture"],
	"description": "Description of the application architecture for Storage component",
	"content": " The Storage component will be a ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\nSee Github for implementation details\nStorage provides persistent storage service for applications in Altinn. It is mostly used by the applications to store information about instances and their data elements. It provides a registry of all applications and their metadata.\nResources: Instance, Application, ApplicationOwner, InstanceOwner, Schema\n/instances An application instance is created when a instance onwer (reportee) starts a workflow in an Altinn application. An instance replaces Altinn2 Message. An instanceOwner is a person/company that reports information via Altinn. An applicationId refers to the application information element which defines the metadata about the application.\n{ \u0026quot;id\u0026quot;: \u0026quot;762011d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;applicationId\u0026quot;: \u0026quot;TEST/sailor\u0026quot;, \u0026quot;applicationOwnerId\u0026quot;: \u0026quot;TEST\u0026quot;, \u0026quot;instanceOwnerId\u0026quot;: \u0026quot;666\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-06T13:46:48.6882148+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;user32\u0026quot;, \u0026quot;lastChangedDateTime\u0026quot;: \u0026quot;2019-03-07T23:59:49+01:00\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;user34\u0026quot;, \u0026quot;dueDateTime\u0026quot;: null, \u0026quot;visibleDateTime\u0026quot;: null, \u0026quot;presentationField\u0026quot;: \u0026quot;Færder påmelding 2019\u0026quot;, \u0026quot;externalSystemReference\u0026quot;: null, \u0026quot;currentWorkflowStep\u0026quot;: \u0026quot;started\u0026quot;, \u0026quot;isCompleted\u0026quot;: true, \u0026quot;isDeleted\u0026quot;: [{ \u0026quot;deletionDateTime\u0026quot;: \u0026quot;2017-12-22\u0026quot;, \u0026quot;deletedBy\u0026quot;: \u0026quot;user34\u0026quot; }], \u0026quot;applicationOwnerFeedback\u0026quot;: { \u0026quot;receivedDate\u0026quot;: \u0026quot;2019-05-11T03:00:23+01:00\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;OK\u0026quot; }, \u0026quot;data\u0026quot;: { \u0026quot;762011d1-d341-4c0a-8641-d8a104e83d30\u0026quot;: { \u0026quot;formId\u0026quot;: \u0026quot;boatdata\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;application/json\u0026quot;, \u0026quot;storageUrl\u0026quot;: \u0026quot;TEST/sailor/762011d1-d341-4c0a-8641-d8a104e83d30/data/boatdata/992011d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;fileName\u0026quot;: \u0026quot;davidsyacht.json\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-06T15:00:23+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;signature\u0026quot;: \u0026quot;oajviojoi2j3l23889yv8js909u293840zz092u3\u0026quot;, \u0026quot;fileSize\u0026quot;: 2003, \u0026quot;isLocked\u0026quot;: true }, \u0026quot;999911d1-d341-4c0a-8641-d8a104e83d30\u0026quot;: { \u0026quot;formId\u0026quot;: \u0026quot;crewlist\u0026quot;, \u0026quot;contentType\u0026quot;: \u0026quot;text/xml\u0026quot;, \u0026quot;storageUrl\u0026quot;: \u0026quot;TEST/sailor/762011d1-d341-4c0a-8641-d8a104e83d30/data/crewlist/999911d1-d341-4c0a-8641-d8a104e83d30\u0026quot;, \u0026quot;fileName\u0026quot;: \u0026quot;crewLIst.xml\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-07T23:59:49+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;lastChangedDateTime\u0026quot;: \u0026quot;2019-03-10T23:59:49+01:00\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;XXX\u0026quot; } } }  Create a new instance. Post with params that identifies the application and the instance owner.\n/instances?applicationId=TEST/sailor\u0026amp;instanceOwnerId=1024  Get information about one instance.\n/instances/{instanceId}  Get (query) all instances that is instance owner has\n/instances\u0026amp;instanceOwnerId={instanceOwnerId}[\u0026amp;since=2017-01-01]  Get (query) all instances of a particular application that is completed\n/instances?applicationId={applicationId}\u0026amp;completed=true  Delete a specific instance (also deletes its data).\n/instances/{instanceId}  Data service A data element is a file that contains a specific form element of an instance. It may be structured file, e.g. json, xml, or it may be a binary file, e.g. pdf. The application metadata restricts the types of form elements that are allowed {formId}.\nGet a specific data element\n/instances/{instanceId}/data/{dataId}  Post to create a specific data element. Content a file (as MultipartContent). After success the instance\u0026rsquo;s data section is updated, with the appropriate dataId guid that is used to identify the specific data element\n/instances/{instanceId}/data?formId={formId}  Put to replace a specific data element. Delete to remove data element.\n/instances/{instanceId}/data/{dataId}  /applications Application metadata used to validate data elements in instances\nResource: http://platform.altinn.no/applications/TEST/sailor\n{ \u0026quot;id\u0026quot;: \u0026quot;TEST/sailor\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-06T13:46:48.6882148+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;XXX\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Færder påmelding\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;innsending\u0026quot;, \u0026quot;applicationOwnerId\u0026quot;: \u0026quot;TEST\u0026quot;, \u0026quot;workflowId\u0026quot;: \u0026quot;standard\u0026quot;, \u0026quot;isDeleted\u0026quot;: false, \u0026quot;isArchived\u0026quot;: false, \u0026quot;validFrom\u0026quot;: null, \u0026quot;validTo\u0026quot;: null, \u0026quot;forms\u0026quot;: { \u0026quot;boatdata\u0026quot;: { \u0026quot;contentType\u0026quot;: \u0026quot;application/schema+json\u0026quot;, \u0026quot;storageUrl\u0026quot;: \u0026quot;sailor/schema/boatdata\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-04T12:01:00+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;M2\u0026quot;, \u0026quot;signatureRequired\u0026quot;: true, \u0026quot;shouldEncryptData\u0026quot;: true }, \u0026quot;crewlist\u0026quot;: { \u0026quot;contentType\u0026quot;: \u0026quot;application/xsd+xml\u0026quot;, \u0026quot;storageUrl\u0026quot;: \u0026quot;sailor/schema/crewlist\u0026quot;, \u0026quot;createdDateTime\u0026quot;: \u0026quot;2019-03-04T12:01:00+01:00\u0026quot;, \u0026quot;createdBy\u0026quot;: \u0026quot;M2\u0026quot;, \u0026quot;lastChangedDateTime\u0026quot;: \u0026quot;2019-03-10T23:59:49+01:00\u0026quot;, \u0026quot;lastChangedBy\u0026quot;: \u0026quot;M42\u0026quot; } } }  Get a list of all Applications\n/applications  Get metadata about a specific application\n/applications/{applicationId}  Get the schema of a specific form element in an application\n/applications/{applicationId}/forms/{dataId}?format=jsonSchema  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/",
	"title": "Data Structure for Repos",
	"tags": ["repos", "arkitektur"],
	"description": "Struktur for repositories og filer i Gitea",
	"content": " Under arbeid\n\rOverordnet struktur Gitea\n├── \raltinn\n│ ├── \rcommon\n│ │ ├── \rtext \u0026hellip;\n│ │ └── \rwidgets \u0026hellip;\n│ │ └── README.md\n│ ├── \rcodelists\n│ │ ├── \rcountries.json\n│ │ └── \r\u0026hellip;\n│ │ └── README.md\n│ └── \r\u0026hellip;\n│\n├── \rorg-x\n│ ├── \rorg-x\n│ │ ├── \rsettings.json\n│ │ ├── \rtext \u0026hellip;\n│ │ └── \rwidgets \u0026hellip;\n│ │\n│ ├── \rcodelists\n│ │ ├── \rkodeliste1.json\n│ │ └── \r\u0026hellip;\n│ │\n│ ├── \rtjeneste-1\n│ │ ├── \rDeployment (helm)\n│ │ │ ├── \rtemplates\n│ │ │ │ ├── \r_helpers.tpl\n│ │ │ │ ├── \rdeployment.yaml\n│ │ │ │ ├── \ringress.yaml\n│ │ │ │ ├── \rNOTES\n│ │ │ │ └── \rservice.yaml\n│ │ │ ├── \r.helmignore\n│ │ │ ├── \rChart.yaml\n│ │ │ └── \rvalues.yaml\n│ │ ├── \rImplementation\n│ │ │ ├── \rCalculation\n│ │ │ │ └── \rCalculationHandler.cs\n│ │ │ ├── \rInstantiationHandler.cs\n│ │ │ ├── \rServiceImplementation.cs\n│ │ │ └── \rValidationHandler.cs\n│ │ ├── \rMetadata\n│ │ │ ├── \rServiceMetadata.json\n│ │ │ └── \rworkflow.json\n│ │ ├── \rModel\n│ │ │ ├── \rServiceModel.xsd\n│ │ │ └── \rServiceModel.cs\n│ │ ├── \rResources\n│ │ │ ├── \rDynamics\n│ │ │ │ └── \rRuleHandler.js\n│ │ │ ├── \rStyles.json\n│ │ │ ├── \rreact-app.css\n│ │ │ ├── \rreact-app.js\n│ │ │ ├── \rFormLayout.json\n│ │ │ ├── \rServiceConfigurations.json\n│ │ │ ├── \rresource.nb-NO.json\n│ │ │ └── \rresource.nn-NO.json\n│ │ ├── \rTest (used for runtime)\n│ │ ├── \rTestdataforparty (used for runtime)\n│ │ │ ├──\r\ruser1\n│ │ │ │ ├──\r\rinstance1\n│ │ │ │ │ ├──\r\rinstance1.json\n│ │ │ │ │ ├──\r\rinstance1.state.json\n│ │ │ │ │ ├──\r\rdata\n│ │ │ │ │ │ ├──\r\rdata-id1\n│ │ │ │ │ │ │ ├──\r\rdata-id1.xml\n│ │ │ │ │ │ ├──\r\rdata-id\u0026hellip;\n│ │ ├── \rWorkflow\n│ │ │ └── \rworkflow.bpmn (BPMN)\n│ │ ├── \rAltinnService.csproj\n│ │ ├── \rconfig.json\n│ │ ├── .gitignore\n│ │ ├── LICENSE\n│ │ └── README.md\n│ │\n│ └── \rtjeneste-2 \u0026hellip;\n│\n├── \rorg-y\n│ ├── \rorg-y \u0026hellip;\n│ └── \r\u0026hellip;\n│\n├── \rbruker-a\n│ └── \rtjeneste-1 (fork av org-x/tjeneste-1)\n├── \rbruker-b \u0026hellip;\n│\n├── \rAlle organisasjoner\n├── \rAlle repos\n└── \rAlle brukere\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/front-end/styling/",
	"title": "Styling (css)",
	"tags": ["development", "handbook", "front-end", "css", "material-ui", "styled components", "jss", "css-in-js"],
	"description": "Guidelines for styling components in Altinn Studio",
	"content": " Summary Styling in React is done per component using a combination of Material-UI and compatible JSS.\n Components shall not be styled with CSS classes in .CSS files.\n Different component types should use different styling methods, or a combination.\nProposed order of styling methods The following order is proposed when considering styling methods:\n Styled Components (Accepts props, logic, theming) Material-UI\u0026rsquo;s JSS (Accepts theming) Inline Styling, the React way (Accepts props, logic, theming. Not directly compatible with Material-UI)  Shared Components Shared components should utilize \u0026ldquo;Styled Components\u0026rdquo; which can write Props directly in the CSS styling. The alternative way is handling styling via props is leveraging \u0026ldquo;inline styling\u0026rdquo; combined with Material-UI\u0026rsquo;s JSS. When using inline styling, the component\u0026rsquo;s styling will be configured in two different places. Inline style example\n\u0026lt;FormControl fullWidth={true} style={{ width: this.props.width ? this.props.width : null, }} \u0026gt;  Styled Components example\nconst theme = createMuiTheme(altinnTheme); const StyledPopper = styled(({ ...otherProps }) =\u0026gt; ( \u0026lt;Popper {...otherProps} /\u0026gt; ))` color: ${theme.altinnPalette.primary.black}; background: ${theme.altinnPalette.primary.redLight}; border-radius: 0; box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.25); font-size: 16px; padding: 24px; max-width: 550px; margin-top: 10px; z-index: ${(props) =\u0026gt; props.zIndex || 1} `; class AltinnPopper extends React.Component\u0026lt;IAltinnPopperComponentProvidedProps, IAltinnPopperComponentState\u0026gt; { public render() { const open = Boolean(this.props.anchorEl); return ( \u0026lt;StyledPopper open={open} anchorEl={this.props.anchorEl} placement={'bottom-start'} \u0026gt; {this.props.message} \u0026lt;/StyledPopper\u0026gt; ); } } export default AltinnPopper;  Exception There will be examples where \u0026ldquo;Styled Components\u0026rdquo; are hard to configure using some of Material-UI\u0026rsquo;s components where \u0026ldquo;Props\u0026rdquo; with styling needs to be passed down to sub-components. Then the regular CreateStyles method from Material-UI needs to be leveraged and can be used in a combination with Styled Components.\nStyled object example\nconst styles = { searchBoxInput: { fontSize: '16px', color: '#000000', padding: '6px', }, searchBoxIcon: { color: '#000000', fontSize: '30px', marginRight: '10px', }, };  React component, with Styled Component AND \u0026lsquo;classes.searchBoxInput\u0026rsquo; from Styled Object example above.\nclass AltinnSearchInput extends React.Component\u0026lt;IAltinnSearchInputComponentProvidedProps, IAltinnSearchInputComponentState\u0026gt; { public render() { const { classes } = this.props; return ( \u0026lt;StyledFormControl id='StyledForm' fullWidth={true} \u0026gt; \u0026lt;TextField id={this.props.id} placeholder={this.props.placeholder} onChange={this.props.onChangeFunction} InputProps={{ disableUnderline: true, startAdornment: \u0026lt;InputAdornment position={'end'} classes={{ root: classNames(classes.searchBoxIcon) }} \u0026gt; \u0026lt;i className={'ai ai-search'} /\u0026gt; \u0026lt;/InputAdornment\u0026gt;, classes: { root: classNames(classes.searchBoxInput) }, }} /\u0026gt; \u0026lt;/StyledFormControl\u0026gt; ); } } export default withStyles(styles)(AltinnSearchInput);  Contained Components Contained components are React components which are not shared in other parts of the React application. It\u0026rsquo;s encouraged to consider the styling order above.\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/test/",
	"title": "Test",
	"tags": ["development", "handbook", "test"],
	"description": "Coding guidelines for tests",
	"content": " Coding guidelines for tests \rTest Strategy\r\rTest Strategy\n\rTestcafe\r\rTestcafe\n\rUnit testing\r\rHow to write jest test in altinn studio, what we know so far\n\rXunit Testing\r\rXunit Testing\n\r"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/test/test-strategy/",
	"title": "Test Strategy",
	"tags": ["development", "handbook", "test"],
	"description": "Test Strategy",
	"content": " What should be tested? In tjenester 3.0, there is a need for both testing Altinn Studio, the service designer, as well as testing services that are developed by a service developer in Altinn Studio Runtime. Testing these two areas of Altinn Studio requires different approaches.\nTesting of Altinn Studio is to be tested automatically at the unit and integration levels of testing. Unit testing of the system involves, for example, the testing of individual javascript functions, and individual pieces of logic relating to react/UI components. At the integrasion level of test, API\u0026rsquo;s and smaller modules are typically tested: Effective unit and integration testing demands good testing frameworks that tjenester 3.0 developrs can easily pick up and use, and that can be easily integrated in the current codebase and the current build toolchain.\nTesting of workflows, and the usage of ALtinn Studio, as well as testing of services developed in Altinn Studio, is the primary responsibility of the test developer in the team. On a regression, or end-to-end, level of test, one tests that the users whole journey through the altinn studio system, or the developed service, works as expected in relation to stated acceptance criteria.\nA good end-to-end test tool has the same requirements as tooling and frameworks that is to be put to use for unit and integration testing. Additionally, the tool needs to be give the opportunity for less technically minded service developers to quickly develop UI tests for services they develop and deploy to Altinn Studio. The end-to-end tool should also allow the test developer to easily run a full regression test suite, as well as reduce the amount of time to run such a set of regression tests accurately.\nTooling After a discussion internally in the tjenester 3.0 team, these tools and frameworks have been decided to be put to use for testing - Unit testing: Jest / Enzyme / xUnit - Integration testing: Jest / Sinon - Regression testing: Testcafe\nThe chosen tool set has been chosen for their ease of integration into the exisiting codebase, and also because they are all open source tools. Testcafe also gives the possibility of recording tests, with a paid license, the testcafe framework and UI test project will be the responsibility of the test developer in the team. Developers write unit and integration tests by using Jest and xUnit. See the other pages under test in this handbook for more information on how to effectively write unit tests or regression tests.\nDocumentation for the mentioned tools can be found below:\n- xUnit - Jest\n- Enzyme\n- Sinon\n- Testcafe\nTest in the first MVP delivery Testing in the first MVP delivery was primarily done thru unit testing with test written in xunit, and jest, as well as thru manual functional tests of user stories under development. The unit testing frameworks xunit and jest were integrated in the MVP01 delivery, and the tests are executed using pipeline definitions in azure devops. The unit test pipelines are automatically triggered both by pull requests to the altinn github repo, as well as when code is merged into master. The pipelines for unit tests can be found here for the xunit pipeline, and here for the jest test pipeline. At the end of MVP01, testcafe tests also began running in their own pipeline. The regression tests in the testcafe pipeline are run as a nightly build, and does not deploy on pull requests, to avoid slowing down and hindering the work of developers. The pipeline for testcafe can be found here\nTest in the second MVP delivery In the second MVP delivery, deploying services created in the Altinn Studio designer to Altinn Studio runtime has been prioritized as a \u0026ldquo;hill\u0026rdquo;, or main deliverable. In this context, regression tests written with testcafe wil focus on the workflow the developer \u0026ldquo;Christian\u0026rdquo; will be using to be able to deploy on of his services to a test environment. The goal of test automation is to reduce the time taken to run all test in the Altinn Studio regression test suite, to run these tests accurately, and free up the time of the test developer to write better test cases. Both automatic and manual regression tests are run against dev.altinn.studio to assure the quality of developed code that is to be deployed to production. Unit and system testing in MVP02 will work in much the same way as in the MVP01 delivery: Developers write unit and integration tests in their respective frameworks, and focus on testing business logic they have developed. Snapshot testing, which was begun in MVP01, is deprioritized in MVP02 as they were found to be brittle and not contributing to the overall quality of the code. \u0026ldquo;Look and feel\u0026rdquo; testing will be the responsibility of functional designers, and the test developer in the team.\nTest levels The pyramid figure below shows an overview of the different levels of test, the possible tools associated with the testing level, as well as which rle has the responsibilty for writing tests at that level.\n  Testpyramiden   Testdata To be be able to easily and effectively test on all levels, it can be necessary to put a tool in place to easily retrieve or store different test data. The Tjenester 3.0 team must decide on whether to creat testdata classes that can be imported in the different test projects. Another possibility is to fetch spesific pre-made dataset (for example testdata set 164/5) from a json file or similar. In MVP02 the testcafe project uses a naive testdata class, that will be expanded as the new for more complex testdata grows: TestData.js contains a class for creating users in Altinn Studio at the moment. Refer to the Jest section under test for an overview on using data in unit tests.\n#Methodology During sprint planning, the product owner, the developers, and the test developer agree on an approach for teting on individual user stories that are pulled into the sprint. A plan is then created for how the responsible role will test the required functionality, and sub tasks are created on the different user stories. It is possible, and likely, that a user story will contain tasks to develop tests on all the testing levels specified above. When a test is written and completed, it can be integrated into a testing build.\nNaming convention for element ids\u0026rsquo; Testcafe\u0026rsquo;s test api has different methods of instantiating Selector objects that can be then used in tests. The easiest and most robust method of defining a selector in testcafe is with a css id selector. The idea behind using css id\u0026rsquo;s is to avoid finding elements by their relative location in the DOM, or by the element\u0026rsquo;s inner texts, as tests become brittle with these selectors due to design changs. The id\u0026rsquo;s must be unique, to ensure the uniqueness of a Selector, the following naming convention for element id\u0026rsquo;s is proposed: Id\u0026rsquo;s must be tekstbased and written in camelCase, id\u0026rsquo;s follow a logical location the Altinn Studio system, such as; \u0026ldquo;Pagelocation Submenu Elementtype Descriptiveword\u0026rdquo;. The text box element id under the GUI creator could then be assigned the following id: \u0026ldquo;designerSkjemakomponenterKnappTekstområde\u0026rdquo;.\nBuilding and deploying testcode See the pipeline hyperlinks above in this document.\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/test/testcafe/",
	"title": "Testcafe",
	"tags": ["development", "handbook", "test", "testcafe"],
	"description": "Testcafe",
	"content": "Code for Testcafe tests in altinn.studio\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/troubleshooting/",
	"title": "Troubleshooting",
	"tags": ["development", "troubleshooting"],
	"description": "Troubleshooting for altinn.studio",
	"content": " Troubleshooting Altinn.studio is under heavy development and errors are most likely to come with it.\nIf the error is not covered here, please submit a bug\n\r Check out Flight Rules for Altinn.studio\n Check out Known Issues  "
},
{
	"uri": "https://docs.altinn.studio/development/handbook/test/unit-testing/",
	"title": "Unit testing",
	"tags": ["development", "handbook", "front-end", "frontend", "unit-testing", "jest", "enzyme", "mock", "stub"],
	"description": "How to write jest test in altinn studio, what we know so far",
	"content": " Introduction to unit testing with Jest This page summarizes how UI testing is performed with Jest and related libraries for Altinn Studio.\n\r Introduction to unit testing with Jest  When should you write tests? Exporting and importing your component Methods in your component User Interface and Methods Networked functions (get, post, put) Rejecting Promises / Error testing / Negative tests Using Router Example #1, positive test Example #2, negative test (Error handling)   \r When should you write tests? Unit testing includes testing of javascript functions and react/UI components. Listing of the highest priority of unit-testing:\n API calls with the correct formatted parameters Rendering of isolated components. Functions in general.\n  Exporting and importing your component A quick way to get started testing your component is first to export the React Component:\nexport class CloneServiceComponent extends React.Component\u0026lt;ICloneServiceComponentProps \u0026amp; RouteChildrenProps, ICloneServiceComponentState\u0026gt; {  and then reference it in your test the following way:\nimport { CloneServiceComponent } from '../../../src/dashboardServices/cloneService/cloneServices'; it('+++ this is the test', async () =\u0026gt; { const mountedComponent = mount( \u0026lt;CloneServiceComponent language={mockLanguage} services={mockServices} classes={mockClasses} location={mockLocation} history={mockHistory} match={mockMatch} /\u0026gt;, ); const instance = mountedComponent.instance() as CloneServiceComponent; }  This will test the component without state, router or styles (read Material UI), so values usually passed in by Redux store, by means of routing or styles/Material UI needs to be reference as if they are props passed into the component (match={mockMatch}).\nMethods in your component Methods can be called directly from your test, or executed when clicked on UI elements (See own section). Calling methods is done like this:\ninstance.getCurrentRepositoryInfo(); instance.componentDidMount();   If you call networked functions in componentDidMount() you need to mock the networked functions before mounting.\n If you have one function that calls another function, and you want to be sure that both functions ran at the end of the test, you can use jest\u0026rsquo;s spyOn functionality described here:\nconst spy = jest.spyOn(instance, 'funcitonTwoCalledWithinFunctionOne'); instance.functionOne(); expect(spy).toHaveBeenCalled();   You can read more about Jest.expect() here: Jest.expect()\n User Interface and Methods In the example above, testing the actual interface is excluded. Simulating a click on an element might need to be performed twice in some cases. Simulating a click can be done using the elements ID and the simulate method from Enzyme:\nmountedComponent.find('button#editService').simulate('click');   ReactWrapper will pass a SyntheticEvent object to the event handler in your code. If the code you are testing uses properties that are not included in the SyntheticEvent, for instance event.target.value, you will need to provide a mock event for it to work. Read more at Enzyme\u0026rsquo;s Simulate documentation here.\n Networked functions (get, post, put) If you are using get, post or put from the shared networking.ts component you need to mock the actual call to be able to test functions that calls either get, post or put. This can be done in the following way:\n// Add this to the import statements in you test file: import * as networking from '../../../../shared/src/utils/networking'; // To resolve the promise and and to return the value, first make sure your test is async: it('should handle successfully returned data from API', async () =\u0026gt; { /* Mounting goes here, commented to get markdown colors correctly const mountedComponent = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); */ // Creating the instance so you can spy or call methods directly const instance = mountedComponent.instance() as HandleMergeConflictAbort; // Spies for regular methods const spyOnClickFunctionHandler = jest.spyOn(instance, 'clickFunctionHandler'); // Before you call the methods which use netowrking, you must create the spy and mock: const mockData = { isSuccessStatusCode: true, }; const getStub = jest.fn(); const mockGet = jest.spyOn(networking, 'get').mockImplementation(getStub); getStub.mockReturnValue(Promise.resolve(mockData)); // Simulate clicks mountedComponent.find('button#editService').simulate('click'); // OR call methods instance.clickFunctionHandler(); // Expect functions to be called, both handler and networking expect(spyOnClickFunctionHandler).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Resolve mocked networking await Promise.resolve(); // Expect something to happen expect(instance.state.networkingRes.isSuccessStatusCode).toEqual(true); });  Rejecting Promises / Error testing / Negative tests If you want to test how your component handles rejected Promises / errors, for example in your Try/Catch you can use the following modification:\n// This is the rejected version of the mock gode const mockError = Error('mocked error'); const getStub = jest.fn(); const mockGet = jest.spyOn(networking, 'get').mockImplementation(getStub); getStub.mockReturnValue(Promise.reject(mockError)); // You \u0026quot;execute\u0026quot; the network function the same way as a resolved promise await Promise.resolve();  You can spy on the console.error with the following code:\nlet consoleError: any; beforeAll(() =\u0026gt; { consoleError = jest.spyOn(console, 'error').mockImplementation(() =\u0026gt; { return {}; }); }); // And the following inside your test: expect(consoleError).toHaveBeenCalled();   See example #2, for more detailed test\n Using Router If you are testing a component that uses React Router, you might have to build router props and pass them to the component you are testing. Here is an example on how this can be done:\nmockLocation = { pathname: 'pathname', search: 'search', state: {}, hash: 'hash', }; mockHistory = { length: 1, action: 'PUSH' as Action, location, push: () =\u0026gt; false, replace: () =\u0026gt; false, go: () =\u0026gt; false, goBack: () =\u0026gt; false, goForward: () =\u0026gt; false, block: () =\u0026gt; (null) as any, listen: () =\u0026gt; (null) as any, createHref: () =\u0026gt; '', }; mockMatch = { params: {}, isExact: false, path: '', url: '', };  Example #1, positive test import { mount } from 'enzyme'; import 'jest'; import * as React from 'react'; import * as networking from '../../shared/src/utils/networking'; import { HandleMergeConflictAbort } from '../src/features/handleMergeConflict/components/HandleMergeConflictAbort'; describe('HandleMergeConflictAbort', () =\u0026gt; { let mockLanguage: any; beforeEach(() =\u0026gt; { mockLanguage = {}; }); it('should handle successfully returned data from API', async () =\u0026gt; { const wrapper = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); const instance = wrapper.instance() as HandleMergeConflictAbort; // Spies const spyOnAbortPopover = jest.spyOn(instance, 'AbortPopover'); const spyOnAbortConfirmed = jest.spyOn(instance, 'AbortConfirmed'); // Mocks const mockData = { isSuccessStatusCode: true, }; const getStub = jest.fn(); const mockGet = jest.spyOn(networking, 'get').mockImplementation(getStub); getStub.mockReturnValue(Promise.resolve(mockData)); // Expected no result from networking yet expect(instance.state.networkingRes).toEqual(null); // Expect discard button to exist expect(wrapper.exists('#abortMergeBtn')).toEqual(true); // workaround, have to click twice the first time wrapper.find('button#abortMergeBtn').simulate('click'); // Click the discard button wrapper.find('button#abortMergeBtn').simulate('click'); expect(spyOnAbortPopover).toHaveBeenCalled(); // Expect the button inside the popover to exist expect(wrapper.exists('#abortMergeConfirmBtn')).toEqual(true); // Click the confirm button wrapper.find('button#abortMergeConfirmBtn').simulate('click'); // Expect functions to be called expect(spyOnAbortConfirmed).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Expect state to change expect(instance.state.popoverState.isLoading).toEqual(true); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(false); // Resolve mocked networking await Promise.resolve(); // Expect state to change expect(instance.state.popoverState.isLoading).toEqual(false); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(true); expect(instance.state.networkingRes.isSuccessStatusCode).toEqual(true); }); });  Example #2, negative test (Error handling) import { mount } from 'enzyme'; import 'jest'; import * as React from 'react'; import * as networking from '../../shared/src/utils/networking'; import { HandleMergeConflictAbort } from '../src/features/handleMergeConflict/components/HandleMergeConflictAbort'; describe('HandleMergeConflictAbort', () =\u0026gt; { let mockLanguage: any; let consoleError: any; beforeAll(() =\u0026gt; { consoleError = jest.spyOn(console, 'error').mockImplementation(() =\u0026gt; { return {}; }); }); beforeEach(() =\u0026gt; { mockLanguage = {}; }); it('should catch error from networked function', async () =\u0026gt; { const wrapper = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); const instance = wrapper.instance() as HandleMergeConflictAbort; // Spies const spyOnAbortPopover = jest.spyOn(instance, 'AbortPopover'); const spyOnAbortConfirmed = jest.spyOn(instance, 'AbortConfirmed'); // Mocks const mockError = Error('mocked error'); const getStub = jest.fn(); const mockGet = jest.spyOn(networking, 'get').mockImplementation(getStub); getStub.mockReturnValue(Promise.reject(mockError)); // Expected no result from networking yet expect(instance.state.networkingRes).toEqual(null); // Expect discard button to exist expect(wrapper.exists('#abortMergeBtn')).toEqual(true); // workaround, have to click twice the first time wrapper.find('button#abortMergeBtn').simulate('click'); // Click the discard button wrapper.find('button#abortMergeBtn').simulate('click'); expect(spyOnAbortPopover).toHaveBeenCalled(); // Expect the button inside the popover to exist expect(wrapper.exists('#abortMergeConfirmBtn')).toEqual(true); // Click the confirm button wrapper.find('button#abortMergeConfirmBtn').simulate('click'); // Expect functions to be called expect(spyOnAbortConfirmed).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Error is thrown await Promise.resolve(); // Expect state to change, and error to be saved to state expect(instance.state.popoverState.isLoading).toEqual(false); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(false); expect(instance.state.errorObj).toMatchObject(Error('mocked error')); expect(instance.state.networkingRes).toEqual('error'); // Expect console.error to be called. expect(consoleError).toHaveBeenCalled(); }); });  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/validationhandler/",
	"title": "ValidationHandler.cs",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av format for ValidationHandler",
	"content": " Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes videre med i MVP.\n\rOverordnet \u0026lsquo;ValidationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som gjør valideringer\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom ValidationnHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/about/wordlist/",
	"title": "Wordlist",
	"tags": ["wordlist"],
	"description": "A wordlist for Altinn Studio",
	"content": " Altinn Norways E-Governement plattform. Launched december 4. 2003. Read more on Altinn.no\nAltinn Apps Altinn Apps is the solution where the developed apps is deployed. It consist of isolated organization Kubernetes clusters and supporting functionality and infrastructure. See Altinn Apps application architecture or deployment architecture.\nAltinn Platform Altinn Platform consist of supporting components to Altinn Apps. Example services are Authorization, Authentication, Profile, Register, Intermediary The platform is based on microservices architecture and is highly scalable.\nSee Altinn Platform solution architecture, application architecture and [deployment architecture]\nAltinn Studio The web based development tool for end user services. Lets the service developer create services that are deployed like a seperate application (app).\nAltinn Apps environment A Altinn Apps environment is a isoleted setup of a Altinn Studio Apps solution. There will be 3 environments created in 2019 for Tjenester 3.0 project. AT: Testing of the platform, TT: Testing of apps created for the platform, Production: The production environment\nAltinn Studio Repos Altinn Studio Repos is the source control solution for Altinn Studio. All apps developed in Altinn Studio can\nApi App A end user service created in Altinn Studio is a seperate application (app). The app is deployed to a Altinn Studio Apps environment.\ndot.net Kubernetes React Kubernetes Service Kubernetes POD Kubernetes Deployment Kubernetes ReplicaSet PAP Policy Administration Point. See Authorization Architecture\nPDP Policy Administration Point. See Authorization Architecture\nPEP Policy Administration Point. See Authorization Architecture\nPIP Policy Information Point. See Authorization Architecture\nPRP Policy Retrieval Point. See Authorization Architecture\nSBL The current Altinn end user solution (SluttBrukerLøsning). See Solution Architecture\nSBL Bridge Applicaton that exposes SBL components as REST interface to Altinn Platform components. See Git Issues\nService App The Service App is the application created in Altinn Studio by the service developer. It consist of platform code (AltinnCore Runtime) and code and configuration created in Altinn Studio. See Application architecture for details.\nApp Developer A user developing apps in Altinn Studio.\nWorkflow XACML XACML stands for \u0026ldquo;eXtensible Access Control Markup Language\u0026rdquo;. The standard defines a declarative fine-grained, attribute-based access control policy language,[2] an architecture, and a processing model describing how to evaluate access requests according to the rules defined in policies.\nAltinn Studio Apps uses the XACML standard for defining Policies for apps, the authorization architecture, and the request and response between PEP and PDP.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/security/authorization/altinn-platform/xacml/",
	"title": "XACML - Altinn Studio",
	"tags": ["architecture", "security", "XACML"],
	"description": "Description of XACML use in Altinn Studio",
	"content": " XACML stands for \u0026ldquo;eXtensible Access Control Markup Language\u0026rdquo;. The standard defines a declarative fine-grained, attribute-based access control policy language,[2] an architecture, and a processing model describing how to evaluate access requests according to the rules defined in policies.\nThe Altinn Studio and Altinn Studio Apps solution uses the XACML standard for the following\n XACML Reference Architecture: Used as input for defining the Altinn Studio Apps authorization architecture XACML Policy: Used to define the authorization rules for apps XACML Request: Format used for PEP to call PDP XACML Response: Format used for response from PDP to PEP.  XACML Policy The Policy Document consist of one or many rules. Each rule has the following part\nResource The resource section defines the app resource the rule - org - The owner of the app - app - The app id - task/event - The task or identifier of the bpmn process. See example process.\nSubject This identifies who the rules applies for. For rules defined in Altinn Studio this is persons with a given role in Altinn. Later this can be expanded.\nAction The action defines the action that the rules allow for. This can be READ, WRITE, SIGN, ARCHIVEREAD, ARCHIVEDELETE\nSee example policy file\nXACML Request The XACML Request will follow XACML 3.0 JSON profile. See documentation\nXACML Response The XACML Response will follow XACML 3.0 JSON profile. See documentation\n"
},
{
	"uri": "https://docs.altinn.studio/development/handbook/test/xunit-testing/",
	"title": "Xunit Testing",
	"tags": ["development", "handbook", "test"],
	"description": "Xunit Testing",
	"content": "Find code on xunit tests here\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/structure/reactapp/",
	"title": "react-app.js",
	"tags": ["tjenester 3.0", "dataformat"],
	"description": "Beskrivelse av React-App.js",
	"content": " Overordnet \u0026lsquo;React-App.js\u0026rsquo; er selve React applikasjonen som blir generert av Altinn Studio som del av tjenestutviklingen. Den inneholder all logikk for å rendre GUI samt å gjøre nødvendige kall mot API i Altinn Tjenester 3.0\nFor øyeblikket er den statisk og lik for alle tjenester. Målet er at den blir tilpasset de komponentene som er i bruk. Dette slik at javascript koden ikke i inneholder referanser til komponenter ikke brukt i tjenesten.\n"
},
{
	"uri": "https://docs.altinn.studio/getting-started/service-creation/navigate-to-service/",
	"title": "Navigation",
	"tags": ["guide", "navigation"],
	"description": "Information on how to navigate to and within a service",
	"content": " Navigate to existing service All services are displayed on the service dashboard. Navigate to a specific service by selecting the service from the dashboard.\nNavigating within a service There are two navigation menus for a service, a top menu and a side menu (left side). The top menu allows navigation between functional areas of a service. The left menu is used for navigation within each functional area:\n About the service (Om)  About the service Roles and rights Production information Version history About the end user Altinn.no  Making the service (Lage)  Data model GUI API  Languages for the service (Språk)  Texts More languages  Testing the service (Teste)  Test  Deploying the service (Publisere)  Deploy to production Status     Navigation menus in a service   In addition to the two menus, there is also a blue top navigation menu. This menu is being phased out as new functionality is added. Use this menu when the guide specifies it.\n\r"
},
{
	"uri": "https://docs.altinn.studio/getting-started/service-creation/data-model/",
	"title": "Data model",
	"tags": ["guide", "data-model"],
	"description": "Information on how to import/view data model",
	"content": " Upload/view data model The data model defines the data that can be submitted in the service. Currently the data model format must be XSD (Seres or OR).\nThe data model needs to be uploaded for each service.\n Open the service from the dashboard Choose _Modellering -\u0026gt; Datamodell from the top navigation menu Click on Velg XSD and choose an XSD in the file explorer Click Last opp  The data model XSD is then parsed, and all necessary files are generated. These files can be viewed by selecting the different tabs displayed on the data model page. There is also a visual representation (tree view) of the data model available on this page.\n  Add/view data model   "
},
{
	"uri": "https://docs.altinn.studio/getting-started/service-creation/texts/",
	"title": "Text resources",
	"tags": ["guide", "texts"],
	"description": "Information on how to add or edit text resources for a service in Altinn Studio",
	"content": " Text resources Texts are stored in resource files for the service. Texts can come from common libraries, from the data model, and be added manually. These texts are available for example when editing a form components properties, and selected texts will be shown to the end user.\nAdd/edit texts for the service In the top navigation menu, select UX -\u0026gt; Tekster to go to the text editing page. An overview of the texts that are already available for the service is shown.\nOn this page, existing texts can be changed and new texts can be added. Add a new text by clicking Ny tekst, and enter the text and a unique identifier for the text.\nSave any changes by clicking Lagre tekster.\n  UI editor - redigere tekster   "
},
{
	"uri": "https://docs.altinn.studio/getting-started/service-creation/gui-editor/",
	"title": "GUI editor",
	"tags": ["guide", "ui-editor"],
	"description": "Information on how to create a form using the GUI editor",
	"content": " Create a form using the GUI editor The GUI editor is available via the \u0026ldquo;Lage\u0026rdquo; option in the navigation menu.\n  GUI editor   Form components Form components can be dragged into the working surface in the middle from the menu on the left-hand side. The form components can be rearranged by dragging/dropping them on the working surface.\nWhen hovering over a component, or after selecting a component by clicking on it, two icons are visible - a trash-icon for deleting the component and a pencil-icon for editing properties on the component.\n  GUI editor - add components   See the overview of form components for more details on the different components that are available.\nEditing the properties on a component Each component has a set of properties that can be edited, for example texts, connection to data model, etc. In order to edit the properties on a component, hover over or click on the component. A pencil-icon will then be visible to the right of the component. Click on this icon to open the properties editor for the component.\nSave any changes by clicking the checkmark-icon to the right of the properties editor. Discard any changes by clicking the X-icon to the right of the properties editor.\n  GUI editor - edit properties on a component   NOTE: The form components are currently being developed. As such, not all form components have a complete/updated properties editor.\n\rSee the overview of form components for information on which properties are available to edit.\n"
},
{
	"uri": "https://docs.altinn.studio/getting-started/service-creation/codelist/",
	"title": "Code lists",
	"tags": ["guide", "codelist"],
	"description": "Information on how to add/edit and configure code lists",
	"content": " Code lists A code list is a pre-defined list of codes and display texts that can be connected to a form component. Code lists can come from common libraries, and can be defined for each service.\nAdd/edit code list In the top navigation meny, select Modellering -\u0026gt; Kodelister. An overview of existing code lists will be shown. To edit an existing code list, select it from the overview. To add a new code list, click Lag ny kodeliste.\n  UI editor - redigere kodelister   Connect a code list to a form component NOTE: Currently, the only form components that support code lists are Radio buttons and Checkboxes.\n\r Add a form component that supports code lists, and open the properties editor for the component. Select Code list as option to add radio buttons. Select a code list from the available options for the service.  Note that this must be a code list that is either defined for the service, or in a common library that the service has access to.  Save the changes by clicking the checkmark icon to the right of the properties editor.  When testing the service, the actual values from the code list will be loaded into the component.\n  UI editor - add a code list to a form component   NOTE: There is currently no language support for code lists.\n\r"
},
{
	"uri": "https://docs.altinn.studio/getting-started/service-creation/api/",
	"title": "External APIs",
	"tags": ["guide", "external-api"],
	"description": "Information on how to configure calls to external APIs to fetch data",
	"content": " Call external APIs to fetch data NOTE: Currently, only open APIs (that do not require authentication) are supported for this funcitonality.\n\rExternal APIs can be used to populate data in the form from external sources. There is currently implemented support for two types of values fetched from external APIs: Single value and List of values.\nAPIs fetching a single value This type of API potentially takes some input from a field in the form, submits this to the API as a parameter, and returns a single value in response. The connection can be configured to populate a set field in the form with this fetched value. An example of this is the Bring poststed API, which takes a postal code as input and returns the postal area.\nAPIs fetching a list of values This type of APIs works in a similar way to code lists. It potentially takes some input from a field in the form, submits this to the API as a parameter, and returns a list of values in response. The connection can be configured to populate the options of a form component that can have multiple values (f.ex. a dropdown list, radio buttons, checkboxes). An example of this is the SSB kommuneliste API, which returns a list of all the municipalities in Norway defined in a configured time interval.\nAvailable APIs:    API Description Type     Bring poststed Fetches the name of the Norwegian postal area based on input of corresponding postal code Single value   SSB kommuneliste Fetches a list of all Norwegian municipalities, as defined in a set time interval List of values    Configure API connection  Add any form components that might be needed for the input/output values for the selected API. Make sure that the form components are connected to fields in the data model. Select Legg til tilkobling under API-tilkoblinger from the left-hand menu in the GUI editor. Select Eksternt API. Select API from the list of available APIs. Add client parameters,if any (ClientParam) - These are any input parameters that are populated from selected form data.  Add an example value to test the API call Select data model field that corresponds to the data model field connected to the input field.  Add any additional parameters required by the API (MetaParam) - this is input required by the API that does not come from the form data. Test the API call by clicking Fetch from API using parameters.  This will test that the call is working with the selected parameters, using the example value as input. The response from the test will be shown in the textbox under API Response  Select Add new mapping to map the response to a field in the form. Select which object from the response that should be used to populate the field (the API may return more than one object in response). Select data model field that corresponds to the data model field connected to the field that will show the output from the API.  Note that this should be a component type that supports lists (ex. dropdown, checkboxes, radiobuttons, etc.) for APIs returning a list of values.  Save the configuration by clicking Lagre. Test that it works by typing in a valid input value in the input field, and see that the output field is populated with the result of the API call.    GUI editor - Configure API connection   "
},
{
	"uri": "https://docs.altinn.studio/getting-started/service-creation/logic/",
	"title": "Service logic",
	"tags": ["guide", "logic"],
	"description": "Information on how to add/edit and configure service logic",
	"content": " There are three different categories of logic that can be set up for a service: - Validations - Calculations - Dynamics\nThese categories are explained in more detail below.\nThe various files that are used to define logic can be reached by opening the logic menu, accessed from the GUI editor via the f(x)-icon on the top right.\n  Logic menu   Auto-complete/intellisense C#-files (which are used in calculations and server-side validations) are set up with support for auto-complete for the data model. This means that suggestions for possible fields in the data model are displayed as you type.\nFor javascript-files, a full language intellisense is available, which suggests possibilities defined by the javascript language, and shows any syntax errors with a red underline. Intellisense/autocomplete is automatically shown as you type, and can also be reached by the key combination CTRL + SPACE.\n  Logic menu - auto-complete/intellisense   Validations Validations make sure that the users input is valid with respect to the data model, as well as any custom rules that are set up for the service. Validations can be run client-side (i.e. in the browser) and server-side.\nClient-side validations NOTE: Configuration of client-side validations is currently not available. The documentation will be updated when new functionality is available.\n\rThese validations are run automatically, and validates the users input against restrictions from the data model. The following restrictions are currently supported:\n min value (number) max value (number) min length max length length pattern  In addition, validation on whether the field is required or not is supported. This is automatically connected to the data model, and no configuration is required.\nServer-side validation The validations that are run on the server can be split into two categories:\n Validations against the data model: These are run each time the user saves data. If the data does not validate against the data model, it is not saved. Custom validations for the service: These are written by the service developer, and are run when the user prepares to submit the service (or continue to the next step of the service). They can also be configured to be triggered when a user leaves a specified field in the form.  Adding custom validations Validations are written in C# code, in the file ValidationHandler.cs. This file can be accessed and edited via the logic menu, by selecting Rediger valideringer. Changes are then made in the Validate-method (empty method that is created when the service is created).\nForm data can be accessed through the data model. An example of a simple validation that checks that a field FirstName does not contain the vaule 1337 is shown below:\npublic void Validate(TestModel TestModel, RequestContext requestContext, ModelStateDictionary modelState) { // Validate first name ValidateFirstName(TestModel, modelState); } private void ValidateFirstName(TestModel TestModel, ModelStateDictionary modelState) { // First, make sure that the field exists string firstName = TestModel?.Person?.FirstName; // Check if field contains \u0026quot;1337\u0026quot; if (firstName != null \u0026amp;\u0026amp; firstName.Contains(\u0026quot;1337\u0026quot;)) { // If the field value contains \u0026quot;1337\u0026quot;, add an error message using AddModelError-method. // The first argument is the error message key, which should be the data model path (without root node), if possible. // The second argument is the error message, which can be either a text, or a text key. modelState.AddModelError(\u0026quot;Person.FirstName\u0026quot;, \u0026quot;First name cannot contain 1337.\u0026quot;); } }  See the comments in the code above for details on what the different parts of the code do.\nSingle field validations If there is a need for immediate validation of a field (that is not covered by client-side validation against data model), it is possible to set up a field to trigger server-side validation. This is done by setting the property triggerValidation to true in the component definition in FormLayout.json.\nIt is then up to the service developer to write the code for validations in such a way that only the relevant errors are returned when a trigger field is specified, while all validations are run f.ex. when the user is ready to submit service. An example of such code is shown below.\npublic void Validate(TestModel TestModel, RequestContext requestContext, ModelStateDictionary modelState) { // Check if a trigger field is specified on the request context. // If a trigger field is specified, run validations inside if-block and then stop so that only relevant errors are returned. if (requestContext.ValidationTriggerField != null) { string triggerField = requestContext.ValidationTriggerField; // Check which field triggered validation, and run any relevant validations if (triggerField == \u0026quot;Person.FirstName\u0026quot;) { ValidateFirstName(TestModel, modelState); } // Finish here, do not run any further validations return; } // If no trigger field is specified, run validations for all fields RunAllValidations(TestModel, requestContext, modelState); } private void RunAllValidations(TestModel TestModel, RequestContext requestContext, ModelStateDictionary modelState) { // All validations for the form ValidateFirstName(TestModel, modelState); } private void ValidateFirstName(TestModel TestModel, ModelStateDictionary modelState) { // Check if field FirstName exists and has value string firstName = TestModel?.Person?.FirstName; // Check if the field contains \u0026quot;1337\u0026quot; if (firstName != null \u0026amp;\u0026amp; firstName.Contains(\u0026quot;1337\u0026quot;)) { // If the field value contains \u0026quot;1337\u0026quot;, add an error message using AddModelError-method. // The first argument is the error message key, which should be the data model path (without root node), if possible. // The second argument is the error message, which can be either a text, or a text key. modelState.AddModelError(\u0026quot;Person.FirstName\u0026quot;, \u0026quot;First name cannot contain 1337.\u0026quot;); } }  Soft validations Soft validations (or warnings) are validation messages that do not stop the user from proceeding to the next step. This validation type can be used for example to ask the user to verify input that might seem strange, but is not technically invalid. Soft validations are set up in the same way as other validations - the only difference is that the validation message must be prefixed by *WARNING*. An example is shown below:\npublic void Validate(TestModel TestModel, RequestContext requestContext, ModelStateDictionary modelState) { // Validate first name ValidateFirstName(TestModel, modelState); } private void ValidateFirstName(TestModel TestModel, ModelStateDictionary modelState) { // First, make sure that the field exists string firstName = TestModel?.Person?.FirstName; // Check if field contains \u0026quot;1337\u0026quot; if (firstName != null \u0026amp;\u0026amp; firstName.Contains(\u0026quot;1337\u0026quot;)) { // If the field value contains \u0026quot;1337\u0026quot;, add an error message using AddModelError-method. // The first argument is the error message key, which should be the data model path (without root node), if possible. // The second argument is the error message, which can be either a text, or a text key. // When adding a soft validation, prefix the error message with *WARNING* modelState.AddModelError(\u0026quot;Person.FirstName\u0026quot;, \u0026quot;*WARNING*Are you sure your first name contains 1337?\u0026quot;); } }  Calculations Calculations are done server-side, and are based on input from the end user. Calculations need to be coded in C# in the file CalculationHandler.cs. This file can be edited by clicking Rediger kalkuleringer from the logic menu.\nDynamics Dynamics are events that happen on the client-side. These can include calculations and rules for conditional rendering (ex. hide/show). The actual conditions/methods that are used need to be coded in javascript, in the file RuleHandler.js (see below for more details). This file can be reached through the logic menu, by clicking Rediger dynamikk. Once these conditions/methods are coded, they can be configured to be triggered for specific fields in the form.\nAdd/edit methods for dynamics The solution currently supports two types of methods:\n Rules for calculation/populating values in form fields Conditions for rendering (hide/show) of form fields  These are defined in the file RuleHandler.js as separate objects, ruleHandlerObject and conditionalRuleHandlerObject. In addition there are two corresponding helper objects (ruleHandlerHelper and conditionalRuleHandlerHelper), that define which parameters should be set up when configuring the methods to trigger. In order for a dynamics method to be available, the actual method/action must be defined in the object and the configuration parameters must be defined in the corresponding helper.\nThe objects and helpers are all generated automatically with some examples when the service is created, and can be added to or edited to create/change methods.\nIn the example below, the following methods are defined:\n   Method name Description Parameters Defined in object/helper     sum Returns the sum of the 3 provided values value1, value2, value3 ruleHandlerObject/ruleHandlerHelper   fullName Returns the full name based on the provided first and last names firstName, lastName ruleHandlerObject/ruleHandlerHelper   lengthGreaterThan4 Returns true if the provided value\u0026rsquo;s length is greater than 4 value conditionalRuleHandlerObject/conditionalRuleHandlerHelper    var ruleHandlerObject = { sum: (obj) =\u0026gt; { obj.value1 = +obj.value1; obj.value2 = +obj.value2; obj.value3 = +obj.value3; return obj.value1 + obj.value2 + obj.value3; }, fullName: (obj) =\u0026gt; { return obj.firstName + ' ' + obj.lastName; } } var ruleHandlerHelper = { sum: () =\u0026gt; { return { value1: \u0026quot;Value 1\u0026quot;, value2: \u0026quot;Value 2\u0026quot;, value3: \u0026quot;Value 3\u0026quot; } }, fullName: () =\u0026gt; { return { firstName: \u0026quot;First name\u0026quot;, lastName: \u0026quot;Last name\u0026quot; }; } } var conditionalRuleHandlerObject = { lengthBiggerThan4: (obj) =\u0026gt; { if (obj.value == null) return false; return obj.value.length \u0026gt;= 4; } } var conditionalRuleHandlerHelper = { lengthBiggerThan4: () =\u0026gt; { return { value: \u0026quot;value\u0026quot; } } }  Configuring dynamics for form components  Add any form components that are needed. For example, for the method sum defined above, 3 input values are required, so 3 form components have to be set up for the input, in addition to 1 field to display the result. Open the logic menu and select Legg til tilkobling under Regler (for calculation/population rules) or Betingede redigeringstilkoblinger for conditional rendering. Select rule from the list of available rules, ex. sum from the example above. Configure the fields that will provide input to the method a. For calculation/population rules, use the same data model field as configured on the form component. b. For conditional rendering, select the component id from the list Configure the field that will show the output/render conditionally a. For calculation/population rules, select the same data model field as configured on the form component that is to show the result. b. For conditional rendering, first select the action (hide/show) that will trigger if the selected method returns true. Then select the component id that will be conditionally rendered. Save the configuration. Test that it works by entering values in the defined input fields.  Existing configurations are visible in the logic menu, and can be edited/deleted.\nExample of using dynamics in a form The scenario:\nA service uses a form which has multiple input fields. One of these is a radio button group, with Yes/No options. Depending on the end users response (Yes or No), different content should be shown:\n Yes: A new input field should be shown, together with information on what to fill out in the field. No: An information text should be showm.  After creating the form in the GUI editor, the following code is added from the logic menu, under \u0026ldquo;Rediger dynamikk\u0026rdquo;:\nvar conditionalRuleHandlerObject = { sjekkVirksomhetIDrift: (obj) =\u0026gt; { return (obj.value \u0026amp;\u0026amp; obj.value === \u0026quot;Ja\u0026quot;); }, sjekkVirksomhetIkkeIDrift: (obj) =\u0026gt; { return (!obj.value || obj.value != \u0026quot;Ja\u0026quot;); } } var conditionalRuleHandlerHelper = { sjekkVirksomhetIDrift: () =\u0026gt; { return { value: \u0026quot;Verdi\u0026quot; } }, sjekkVirksomhetIkkeIDrift: () =\u0026gt; { return { value: \u0026quot;Verdi\u0026quot; } } }  Here, two functions are created to check if the a given value is either \u0026ldquo;Ja\u0026rdquo; or \u0026ldquo;Nei\u0026rdquo;.\nAfter adding this code, the configuration for using the functions is added. Starting with sjekkVirksomhetIDrift:\n  Test of dynamics example    First, we add the field that will provide the input.  This is the data model field that is also mapped to the radio button group we want to trigger the dynamics.  Then we select the action (show/hide) we want to trigger, and which components we want to be affected  Here, we select show. This will hide the components until they are triggered to show. We add the text components (header and paragraph for information text) and input component that should be shown when the dynamic is triggered.   Then we do the same for sjekkVirksomhetIkkeIDrift.\nFinally, we run a manual test in Altinn Studio to check that everything works as expected. The results are shown in the GIF below.\n  Test of dynamics example   "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/theming/",
	"title": "Theming and styling",
	"tags": ["tjenester 3.0"],
	"description": "Solution for theming and styling conventions ++",
	"content": " Theming and styling Altinn studio is based on Material-UI, a UI components library that focus exclusively on the React library. At this point the SBL-schemas are based on Bootstrap. This might change in the future in order to support more sophisticated schemas and the possibilty to write schemas in other languages than React + Bootstrap. Both the schemas that are produced and the editor will have the possibilty to change theme. By default altinn studio uses the altinn theme. The theme will at this point only change colors and fonts in Altinn studio. The colors are base on the altinn color palette.\nCSS\nComponents are devided into two groups. Shared components that is used several times and should be accessible for several apps. And components that are specific for one app or view. CSS for a component is set in its representative tsx-file with paramethers linking to the theme.\nHow to change theme\nChanging the theme without having to do alot of changes to the code is post-MVP.\n"
},
{
	"uri": "https://docs.altinn.studio/known-issues/",
	"title": "Known issues",
	"tags": ["issues"],
	"description": "Description of errors and weaknesses in Altinn Studio that developers and service developers should know about",
	"content": "   let content = document.getElementById('knownIssuesContent'); if (content.innerHTML === '') { content.innerHTML = 'Loading from github...'; } axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://github.com/Altinn/altinn-studio/blob/master/KNOWNISSUES.md`) .then((res) = { const doc = new DOMParser().parseFromString(res.data, \"text/html\"); content.innerHTML = doc.getElementById('readme').innerHTML; });  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-apps/",
	"title": "Altinn Apps",
	"tags": ["solution", "apps"],
	"description": "The runtime and infrastructure solution for applications developed with Altinn Studio.",
	"content": "Apps is the runtime and infrastructure solution that is responsible for hosting and running the apps created in Altinn Studio as containers.\nIt has all required functionality to render GUI, host and call APIs, handle workflow, logic, scaling and everthing else related to an app.\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-platform/",
	"title": "Altinn Platform",
	"tags": ["solution", "apps"],
	"description": "Altinn Platform is the solution where the supporting platform functionality resides",
	"content": "The Altinn Platform consist of serveral reusable components that support apps deployed in Altinn Apps. The components are deployed as microservices.\n\rAuthentication\r\rThe authentication component is used by Altinn Apps and Altinn Platform to authenticate users and system\n\rAuthorization\r\rThe authorization component is used by Altinn Apps and Altinn Platform to authorize users and system\n\rIntermediary\r\rThe Intermediary component provides shipment and other integration functionality to Altinn Apps\n\rProfile\r\rThe Profile component gives profile information for users in Altinn\n\rRegister\r\rThe Register componnt gives register information to Apps\n\rStorage\r\rThe Storage component gives storage capabilities to the platform\n\r"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-apps/app-api/",
	"title": "App API",
	"tags": ["solution", "apps"],
	"description": "Description of the API&#39;s available in a App created in Altinn Studio",
	"content": "NOTE: Work in progress. Stuff will change\n\rAPI\u0026rsquo;s have always been important to the Altinn platform. About 50% of all data going throug Altinn to service owners are comming from end user systems implementing Altinn Apis\u0026rsquo;s (SOAP and REST). More than 100 different vendors of different types of applications integrates with Altinns appi and submits data for different \u0026ldquo;services\u0026rdquo;.\nIn addition mobile apps and external governmental portal consumes Altinn Apis to allow users to use services outside the Altinn Portal.\nService Owners also have seperate APIs to interact with the apps. The below figure shows the different consumers of the API\u0026rsquo;s and show that consumers both interact with the App Apis and the shared platform Api\u0026rsquo;s.\n\n\rREST-API for End User Systems\r\rDescription of the Rest API for end user systems\n\r"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-platform/authentication/",
	"title": "Authentication",
	"tags": ["solution", "apps", "authentication"],
	"description": "The authentication component is used by Altinn Apps and Altinn Platform to authenticate users and system",
	"content": "The Authentication component gives authentication functionality needed for user and systems\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-platform/authorization/",
	"title": "Authorization",
	"tags": ["solution", "apps"],
	"description": "The authorization component is used by Altinn Apps and Altinn Platform to authorize users and system",
	"content": "The authorization component consist of a Policy Decision Point (PDP), Policy Retriaval Point (PRP) and is integrated with other external Policy Information Points.\n"
},
{
	"uri": "https://docs.altinn.studio/getting-started/service-creation/",
	"title": "Create or edit applications",
	"tags": ["guide"],
	"description": "Information on how to create or edit apps in Altinn Studio",
	"content": "\r\rCreate new app\r\rInformation on how to create a new apps\n\r\r\rNavigation\r\rInformation on how to navigate to and within a service\n\r\r\rData model\r\rInformation on how to import/view data model\n\r\r\rText resources\r\rInformation on how to add or edit text resources for a service in Altinn Studio\n\r\r\rGUI editor\r\rInformation on how to create a form using the GUI editor\n\r\r\rCode lists\r\rInformation on how to add/edit and configure code lists\n\r\r\rExternal APIs\r\rInformation on how to configure calls to external APIs to fetch data\n\r\r\rService logic\r\rInformation on how to add/edit and configure service logic\n\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-platform/intermediary/",
	"title": "Intermediary",
	"tags": ["solution", "apps"],
	"description": "The Intermediary component provides shipment and other integration functionality to Altinn Apps",
	"content": " The Intermediary service provides shipment and other integration functionality to Altinn Apps\nShipment "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-platform/profile/",
	"title": "Profile",
	"tags": ["solution", "apps"],
	"description": "The Profile component gives profile information for users in Altinn",
	"content": "The Profile component gives profile information for users in Altinn\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-apps/app-api/eus-rest/",
	"title": "REST-API for End User Systems",
	"tags": ["solution", "apps"],
	"description": "Description of the Rest API for end user systems",
	"content": " NOTE: Work in progress. Stuff will change\n\rThe main API\u0026rsquo;channel for data in the platform is REST for services created in Altinn Studio.\nThe end user system needs to call different APIS based on the need. The below figure show the different components relevant for an end user System calling Altinn through REST.\n\nAPI to authenticate end user systems For new API\u0026rsquo;s the goal is to use JWT Tokens to authenticate against the API.\nAltinn Apps will expose apis to authenticate end user systems and user of end user systems and return JWT Tokens that can be used against the other API\u0026rsquo;s.\nAPI to create new data instance for a app From end user systems it will be possible to create a instance of a App from a end user system. This is a URL directly to the app and unique\nURL\nhttps://{org}.apps.altinn.no/api/v1/{org}/{appid}/  API to update form data Data that is form data for a given app needs to be updated through the APP APis to ensure handling of business rules\nMethod: PUT\nhttps://{org}.apps.altinn.no/api/v1/{org}/{appid}/{instanceid}/Update  API to get instance data with business rules Data that is form data related to the apps data modell will need to be retrieved through the APP api. This is because the app possible can add additional data.\nhttps://{org}.apps.altinn.no/api/v1/{org}/{appid}/{instanceid}/Update  API to validate data The apps will support the possibility to validate the datamodel for the app without creating a instance of the data\nhttps://{org}.apps.altinn.no/api/v1/{org}/{appid}/{instanceid}/Validate  API to calculate / perform business rules The app will support the possibility to perform calculation / perform business rules for a datamodell to an app\nhttps://{org}.apps.altinn.no/api/v1/{org}/{appid}/{instanceid}/Calculate  API to add binary attachments The platform api will support adding binary data to a instance.\nhttps://storage.platform.altinn.no/api/v1/{org}/{appid}/7ae65582-f9bc-46b8-b094-84e9530e4ed6/Calculate  Get information about one instance.\nhttps://storage.platform.altinn.no/api/v1/instances/{instanceId}  Get (query) all instances that is instance owner has\nhttps://storage.platform.altinn.no/api/v1/instances\u0026amp;instanceOwnerId={instanceOwnerId}[\u0026amp;since=2017-01-01]  Get (query) all instances of a particular application that is completed\nhttps://storage.platform.altinn.no/api/v1/instances?applicationId={applicationId}\u0026amp;completed=true  Delete a specific instance (also deletes its data).\nhttps://storage.platform.altinn.no/api/v1/instances/{instanceId}  Data service A data element is a file that contains a specific form element of an instance. It may be structured file, e.g. json, xml, or it may be a binary file, e.g. pdf. The application metadata restricts the types of form elements that are allowed {dataTypeId}.\nGet a specific data element\nhttps://storage.platform.altinn.no/api/v1/instances/{instanceId}/data//{dataId}  Post to create a specific data element. Content a file (as MultipartContent). After success the instance\u0026rsquo;s data section is updated, with the appropriate dataId guid that is used to identify the specific data element\n/instances/{instanceId}/data/?dataTypeId={dataType}  Put to replace a specific data element. Delete to remove data element.\n/instances/{instanceId}/data/{dataId}  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-platform/register/",
	"title": "Register",
	"tags": ["solution", "apps"],
	"description": "The Register componnt gives register information to Apps",
	"content": " The Register component gives register information to Apps\n ER - Enhetsregisteret - Information about organizations in Norway DSF - Det Sentrale Folkeregisteret - Information about citizens in Norway.  ER - Enhetsregisteret ER registeret can be used to prefill information, retrieve information based on user input or for validation of input of users.\nAltinn Platform does not have a own copy of ER. It currently uses Altinn II plaform as source for register.\nSee Application architecture for details.\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-platform/storage/",
	"title": "Storage",
	"tags": ["solution", "apps"],
	"description": "The Storage component gives storage capabilities to the platform",
	"content": "Storage support storage of structured and unstructured data for apps. Apps that need the cabability to store data uses the storage service in Altinn platform to stor structured data\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/altinn-studio-repos/",
	"title": "Altinn Studio Repos",
	"tags": ["solution", "repos"],
	"description": "The Git repository solution for storing and versioning apps developed with Altinn Studio.",
	"content": "Repos is the Git repository solution for storing and versioning the apps created with Altinn Studio.\n\rFunctionality in Repos\r\rFunksjonalitet for lagring og versjonering av tjenester i Git-repositories samt funksjonalitet for application lifecycle management.\n\rData Structure for Repos\r\rStruktur for repositories og filer i Gitea\n\r"
},
{
	"uri": "https://docs.altinn.studio/getting-started/service-testing/",
	"title": "Test",
	"tags": ["guide"],
	"description": "Information about testing an app",
	"content": " An app can be tested in Altinn Studio without migrating to a test environment. This is a way to check that the app looks and behaves as expected.\nTesting in Altinn Studio Testing is available once a data model has been uploaded to the service.\n Select Test -\u0026gt; Manuell in the top navigation menu. Select a test user from the list of available users. Choose to start a new instance, or to reuse an existing instance (if any are available)  By using an existing instance, data used in a previous instance can be re-used.     Test utgave i Runtime   The following can be tested in Altinn Studio:\n Layout/look of service Client-side validations on data model Dynamics (f.ex. hide/show) Client-side API calls Loading of code lists  The following needs to be tested in a complete test environment:\n Server-side logic (validation/calculation) Server-side API calls  Complete test environments are currently not available. The documentation will be updated when it is possible to test a service in a test environment.\n\r"
},
{
	"uri": "https://docs.altinn.studio/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "docs  "
},
{
	"uri": "https://docs.altinn.studio/technology/dotnet-core/",
	"title": ".NET Core",
	"tags": ["tech", "programming"],
	"description": "Server side development framework.",
	"content": " .NET Core is the server side development framework used in Altinn Studio.\nLinks  https://dot.net https://dotnetfoundation.org https://github.com/dotnet https://github.com/aspnet  "
},
{
	"uri": "https://docs.altinn.studio/development/analysis/api/",
	"title": "API",
	"tags": ["analysis"],
	"description": "Analysis of API the area in Altinn Studio.",
	"content": "Analysis of API the area in Altinn Studio.\n\rAgency APIs - analysis\r\rAn analysis of the agency API compatibility with Altinn Studio Apps.\n\r\r\rExternal APIs - analysis\r\rAn analysis of the SBL external API forward compatibility with Altinn Studio Apps.\n\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/development/analysis/api/agency/",
	"title": "Agency APIs - analysis",
	"tags": ["development", "analysis", "api"],
	"description": "An analysis of the agency API compatibility with Altinn Studio Apps.",
	"content": "#957\nAn analysis of the agency API compatibility with Altinn Studio Apps.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/infrastructure/altinn-cdn/",
	"title": "Altinn CDN",
	"tags": [],
	"description": "Description of Altinn Content Delivery Network",
	"content": "Altinn CDN is a safe place for hosting static resources that can be reused and cached client side.\n across Altinn solutions across all apps created in Altinn Studio across apps belonging to one organization  These resources are defined in a repo on GitHub: https://github.com/Altinn/altinn-cdn\nThe files and folder structure in this repo is mirrored to https://altinncdn.no, and can be use by different solutions and apps.\nEach organization (service owner) in Altinn has their own area for resources that they reuse across their apps. For example logo files. This means that service owners can, if they want to, easily change logo for all apps at once without deploying updates to each app.\n"
},
{
	"uri": "https://docs.altinn.studio/",
	"title": "Altinn Studio",
	"tags": [],
	"description": "Documentation for Altinn Studio.",
	"content": "docs\r Altinn Studio is the next generation Altinn application development solution. All you need for testing the preview is to register an account.\n This is the documentation for Altinn Studio, Altinn Apps and Altinn Platform. Altinn Studio have an open backlog on GitHub and the code is open source. Everybody can create bugs, request features or ask questions.  "
},
{
	"uri": "https://docs.altinn.studio/development/analysis/",
	"title": "Analysis",
	"tags": ["analysis"],
	"description": "Analysis of areas in Altinn Studio. Typically linked to a corresponding GitHub issue.",
	"content": "Analysis of areas in Altinn Studio. Typically linked to a corresponding GitHub issue.\n\rAPI\r\rAnalysis of API the area in Altinn Studio.\n\r"
},
{
	"uri": "https://docs.altinn.studio/development/branching/",
	"title": "Branching",
	"tags": ["development", "git", "branching"],
	"description": "Branching information for Altinn Studio",
	"content": " Principles ##  Altinn Studio uses trunk-based development  This ensures the codebase is always releasable on demand and helps to make Continuous Delivery a reality.  Code is checked in using short living feature branches  naming standard for feature branches are feature/\u0026lt;issueNumber\u0026gt;-\u0026lt;description\u0026gt; , for instance: feature/1028-text-component naming standard for bug branches are bug/\u0026lt;issueNumber\u0026gt;-\u0026lt;description\u0026gt; , for instance: bug/877-performance-leak-ui-editor   Trunk Based Development Read more about trunk based development here.\n A source-control branching model, where developers collaborate on code in a single branch called “trunk” (master), resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after.\n Feature Branches Development is done on feature branches with short lifespans before PR is requested against the master branch.\nThe figure below illustrates - A feature branch with three commits - Pull request is create with QA and merge back to master - A new commit (forth green circle) based on feedback from QA - Merge back to master\nPull Requests A pull request (PR) is created to perform quality assurance (QA) and to merge a feature branch into master. You create a pull request after you have pushed your branch to our github repo. - Include a reference to the issue that triggered the pull request (#issuenumber)\nOnce a pull request is submitted against our master branch it triggers various pipelines, such as builds, tests, static code analysis to ensure that code that breaks builds is not merged into master. These tests are triggered manually. Now that a PR has been submitted others may review your code and leave comments if they have feedback.\nOnce all the tests and QA have been completed we are ready to merge the new code into master. This is done using squash such that the history of the master branch is simple and understandable.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/c-sharp/",
	"title": "C#",
	"tags": ["tech", "programming"],
	"description": "Server side programming language.",
	"content": " C# is the server-side development language used in Altinn Studio.\nLinks  https://docs.microsoft.com/en-us/dotnet/csharp/ https://github.com/dotnet/csharplang  "
},
{
	"uri": "https://docs.altinn.studio/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/data-modeling/",
	"title": "Data modeling",
	"tags": ["studio", "data-modeling"],
	"description": "Defining the data model(s) for a service is important. Altinn studio will support importing existing data models and creating new datamodels.",
	"content": "The data model for a service typical defines the format of the data either sent to the service owner or presented in the service for the user. The data model is important for a consistent and formal definition of the data. It will be used for validation both from GUI and for external systems.\nAltinn Studio will support both importing existing data model as XSD or creating a datamodell. In MVP only import is in scope.\nSome requirements for Altinn Studio is:\n It should be easy to model data Built in replacment for SERES (Current tool) Need to support more formats.  See all issues related to Altinn Studio and data modeling on Github.\n  Editor for enkel datamodellering   "
},
{
	"uri": "https://docs.altinn.studio/architecture/development/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/docker/",
	"title": "Docker",
	"tags": ["tech", "containers"],
	"description": "Docker is the container technology used in Altinn Studio and for Altinn Studio Apps",
	"content": " Docker is used as the container technology for hosting Altinn Studio and Altinn Studio Repos.\nIn Altinn Studio Apps it is used to host the different apps (\u0026ldquo;services\u0026rdquo;) created in Altinn Studio as seperate containers.\nLinks  https://www.docker.com https://hub.docker.com https://github.com/docker/docker-ce  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/api-expose/",
	"title": "Exposing API",
	"tags": ["studio", "api"],
	"description": "Solution for designing service UI, defining workflow, other settings, deploy ++",
	"content": " Services created in Altinn Studio can be exposed as API together with GUI, or only as API without any GUI.\nEach service will have its unique set of API\u0026rsquo;s. Compared to current API it makes it possible to create API\u0026rsquo;s that have documentation that is target for the specific service.\nWhat kind of API\u0026rsquo;s a service would expose will be analyzed in the comming periode\nAPI for End User Systems Possible scenarios\n Instansiate new instance for an App Instansiate and complete a new instance for an App Validate data for an App Get prefilled data for an App Calculate data for an app  API for Agency Systems    API for external GUI  Instansiate new instance for an app Instansiate and complete a new instance for an app  ## API for external app\n"
},
{
	"uri": "https://docs.altinn.studio/development/analysis/api/external/",
	"title": "External APIs - analysis",
	"tags": ["development", "analysis", "api"],
	"description": "An analysis of the SBL external API forward compatibility with Altinn Studio Apps.",
	"content": " #956\nAn analysis of the SBL external API forward compatibility with Altinn Studio Apps.\nLegend    Icon Status     ✅ No changes needed, will work as before.   🔢 Needs to handle ServiceCode / ServiceEditionCode.   🆔 Identifiers will change.   👽 Not part of the Altinn Studio concept, so this API can\u0026rsquo;t be used.   ⛔️ Not relevant or will be replaced by something better.    REST Token ✅ POST authorization/token/{authCode}/loguse 🛈\n✅ GET authorization/token/{authCode} 🛈\n✅ DELETE authorization/token/{authCode} 🛈\nRoleDefinitions 🔢 GET {who}/authorization/RoleDefinitions/{roleTypeID}?language={language} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n✅ DELETE {who}/authorization/RoleDefinitions/{roleTypeID} 🛈\n🔢 PUT {who}/authorization/RoleDefinitions/{roleTypeID}?language={language} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n🔢 GET {who}/authorization/RoleDefinitions?language={language} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n🔢 POST {who}/authorization/RoleDefinitions?language={language} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\nRights 🔢 GET {who}/authorization/rights 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n✅ DELETE {who}/authorization/rights/{rightID} 🛈\n✅ DELETE {who}/authorization/Rights/{receiverId}/rights/{authzRuleID}?rightID={rightID} 🛈\nRoles ✅ GET {who}/authorization/roles?language={language} 🛈\n✅ DELETE {who}/authorization/roles/{roleID} 🛈\nReportee ✅ GET reportees?showConsentReportees={showConsentReportees}\u0026amp;includeInactiveReportees={includeInactiveReportees} 🛈\n✅ GET reportees/{reporteeId} 🛈\n🔢 GET reportees?serviceCode={serviceCode}\u0026amp;serviceEdition={serviceEdition}\u0026amp;showConsentReportees={showConsentReportees} 🛈 ServiceCode/ServiceEditionCode is part of the input parameters.\n✅ GET {who}/authorization/Reportee/{receiverId}?reporteeId={reporteeId} 🛈\nAuthentication ✅ POST authentication/authenticatewithpassword 🛈\nProfile ✅ GET my/profile 🛈\n✅ GET {orgno}/profile 🛈\n✅ GET {orgno}/profile/contactinformation 🛈\n✅ POST {orgno}/profile/contactinformation 🛈\n✅ GET {orgno}/profile/contactinformation/{id} 🛈\n✅ DELETE {orgno}/profile/contactinformation/{id} 🛈\nLookUp 🔢 👽 GET {who}/lookup/{serviceCode}/{serviceEdition}?authorizationCode={authorizationCode} 🛈 \u0026ldquo;LookUp\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide APIs directly themselves. This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of the input parameters.\nMetadata 🔢 GET metadata?language={language} 🛈 ServiceCode/ServiceEditionCode is part of metadata-list.\n✅ GET metadata/correspondence/{serviceCode}/{serviceEditionCode}?language={language} 🛈 \u0026ldquo;Correspondence\u0026rdquo; will live on, so this API is not relevant for Altinn Studio.\n🔢 👽 GET metadata/formtask/{serviceCode}/{serviceEditionCode}?language={language} 🛈 \u0026ldquo;FormTask\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide forms. This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of input parameters and the returned metadata-list.\n🔢 👽 GET metadata/lookup/{serviceCode}/{serviceEditionCode}?language={language} 🛈 \u0026ldquo;LookUp\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide APIs directly themselves. This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of input parameters and the returned metadata-list.\n🔢 👽 GET metadata/formtask/{serviceCode}/{serviceEditionCode}/forms/{dataFormatId}/{dataFormatVersion}/xsd 🛈 \u0026ldquo;FormTask\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide forms and data models. This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of input parameters.\n🔢 👽 GET metadata/lookup/{serviceCode}/{serviceEditionCode}/schemas/{schema} 🛈 \u0026ldquo;LookUp\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide APIs directly themselves. This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of input parameters.\n🔢 👽 GET metadata/formtask/{serviceCode}/{serviceEditionCode}/attachmentrules/{ruleId}/xsd 🛈 \u0026ldquo;FormTask\u0026rdquo; is not a concept in Altinn Studio, since all apps can provide metadata and data models (XSDs). This API can\u0026rsquo;t be used. Also, ServiceCode/ServiceEditionCode is part of input parameters.\n⛔️ GET metadata/codelists?language={language} 🛈 Altinn Studio will provide a better solution (and APIs) for code lists.\n⛔️ GET metadata/codelists/{name}/{version}?language={language} 🛈 Altinn Studio will provide a better solution (and APIs) for code lists.\nOrganizations ✅ GET organizations?showConsentReportees={showConsentReportees}\u0026amp;includeInactiveReportees={includeInactiveReportees} 🛈\n✅ GET organizations/{organizationId} 🛈\nAttachments 🆔 POST {who}/messages/{messageId}/attachments/streamedattachment?fileName={fileName}\u0026amp;attachmentType={attachmentType}\u0026amp;language={language} 🛈 MessageId will probably change to GUID.\n🆔 DELETE {who}/messages/{messageId}/attachments/{attachmentId} 🛈 MessageId and attachmentId will probably change to GUID.\n🆔 POST {who}/messages/{messageId}/attachments/{attachmentId}?language={language} 🛈 MessageId and attachmentId will probably change to GUID.\n🆔 POST {who}/messages/{messageId}/attachments/{attachmentId}?fileName={fileName}\u0026amp;attachmentType={attachmentType}\u0026amp;language={language} 🛈 MessageId and attachmentId will probably change to GUID.\n🆔 GET {who}/messages/{messageId}/attachments 🛈 MessageId will probably change to GUID.\n🆔 POST {who}/messages/{messageId}/attachments?language={language} 🛈 MessageId will probably change to GUID.\n🆔 GET {who}/authorization/Attachments/{receiverId}?messageId={messageId}\u0026amp;attachmentId={attachmentId} 🛈 MessageId and attachmentId will probably change to GUID.\nMessages 🆔 🔢 GET {who}/Messages/{messageId}?language={language} 🛈 MessageId will probably change to GUID. Message contains ServiceCode/ServiceEditionCode.\n🆔 🔢 👽 PUT {who}/Messages/{messageId}?language={language}\u0026amp;complete={complete}\u0026amp;sign={sign} 🛈 MessageId will probably change to GUID. Message contains ServiceCode/ServiceEditionCode.\nMainForm/SubForm is not part of Altinn Studio concept. Same with DataFormatId/DataFormatVersion.\n🆔 DELETE {who}/Messages/{messageId} 🛈 MessageId will probably change to GUID.\n🆔 🔢 GET {who}/Messages?language={language} 🛈 MessageId will probably change to GUID. Message contains ServiceCode/ServiceEditionCode.\n🔢 👽 POST {who}/Messages?language={language}\u0026amp;complete={complete}\u0026amp;sign={sign} 🛈 Message contains ServiceCode/ServiceEditionCode.\nMainForm/SubForm is not part of Altinn Studio concept. Same with DataFormatId/DataFormatVersion.\n🆔 👽 GET {who}/Messages/{messageId}/Print?language={language}\u0026amp;dataFormatId={dataFormatId}\u0026amp;dataFormatVersion={dataFormatVersion} 🛈 MessageId will probably change to GUID.\nDataFormatId/DataFormatVersion is not part of Altinn Studio concept.\n✅ PUT {who}/Messages/{messageId}/Archive?language={language} 🛈\n✅ PUT {who}/Messages/{messageId}/Confirm?language={language} 🛈\n🆔 GET {who}/Messages/{messageId}/Validate?language={language} 🛈 MessageId will probably change to GUID.\n🆔 👽 GET {who}/Messages/{messageId}/signingtext?language={language} 🛈 MessageId will probably change to GUID.\nWorkflow metadata must be much more powerful and less hardcoded for Altinn Studio.\n🆔 👽 GET {who}/messages/{messageId}/custommessagedata 🛈 MessageId will probably change to GUID.\nWorkflow metadata must be much more powerful and less hardcoded for Altinn Studio.\n🔢 GET {who}/Messages/trashbin?language={language} 🛈 Message contains ServiceCode/ServiceEditionCode.\nForms 🆔 👽 GET {who}/messages/{messageId}/forms?language={language} 🛈 MessageId will probably change to GUID.\nDataFormatId/DataFormatVersion and MainForm/SubForm is not part of Altinn Studio concept.\n🆔 👽 POST {who}/messages/{messageId}/forms 🛈 MessageId will probably change to GUID.\nDataFormatId/DataFormatVersion and MainForm/SubForm is not part of Altinn Studio concept.\n🆔 👽 GET {who}/messages/{messageId}/forms/{formId}?language={language} 🛈 MessageId and formId will probably change to GUID.\nDataFormatId/DataFormatVersion and MainForm/SubForm is not part of Altinn Studio concept.\n🆔 👽 PUT {who}/messages/{messageId}/forms/{formId} 🛈 MessageId and formId will probably change to GUID.\nDataFormatId/DataFormatVersion and MainForm/SubForm is not part of Altinn Studio concept.\n🆔 DELETE {who}/messages/{messageId}/forms/{formId} 🛈 MessageId and formId will probably change to GUID.\n🆔 GET {who}/messages/{messageId}/forms/{formId}/formdata?language={language} 🛈 MessageId and formId will probably change to GUID.\nDelegations 🔢 GET {who}/authorization/Delegations/{receiverId}/rights 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n✅ GET {who}/authorization/Delegations/{receiverId}/roles?language={language} 🛈\n🔢 GET {who}/authorization/Delegations/{receiverId}?language={language} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n🔢 GET {who}/authorization/Delegations?serviceCode={serviceCode}\u0026amp;serviceEdition={serviceEdition} 🛈 ServiceCode/ServiceEditionCode is part of input parameters and the returned rights-list.\n🔢 POST {who}/authorization/Delegations 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n🔢 GET {who}/authorization/Delegations?receiverId={receiverId} 🛈 ServiceCode/ServiceEditionCode is part of Rights-list.\n✅ DELETE {who}/authorization/Delegations?receiverId={receiverId}\u0026amp;roleId={roleId} 🛈\n✅ DELETE {who}/authorization/Delegations?receiverId={receiverId}\u0026amp;authzRuleId={authzRuleId} 🛈\n✅ DELETE {who}/authorization/Delegations/{receiverId}/roles/{roleId} 🛈\n✅ DELETE {who}/authorization/Delegations/{receiverId}/rights/{authzRuleId} 🛈\nBrokerService ✅ GET {reportee}/BrokerService/files/{fileReference} 🛈\nWeb Services TODO\n"
},
{
	"uri": "https://docs.altinn.studio/development/flight-rules/",
	"title": "Flight Rules",
	"tags": ["development"],
	"description": "Flight rules for Altinn Studio",
	"content": " What are flight rules?\nFlight rules is originally a compendium of step-by-step manuals, what to do when X occurs and why.\nEssentially, they are extremely detailed, scenario-specific standard operating procedures\n\rLoadbalancer is responding with HTTP Error 502 - bad gateway This occurs when the loadbalancer could not find any of the services in it\u0026rsquo;s configuration.\nCan be triggerd by these issues:\n Some of the kubernetes services are not existing Some of the kubernetes pods are not existing Kubernetes mapping between deployments and services are incorrect.  Loadbalancer is responding with HTTP Error 504 - timeout This occurs when the loadbalancer is not getting a response from the other services running in kubernetes. Because the loadbalancer is not updated when the deployment of new versions or altinn-designer, altinn-runtime or altinn-repositories. To delete a pod, first find the name of the running pod:\nkubectl get pods  Then use the whole name, and run the following command:\nkubectl delete pod [POD_NAME]  sonarqube-code-analysis pipeline fails on pull request This occurs when there exists double line shifts in the code that is being analyzed. This somehow crashes the sonarqube code analysis tool. To solve this issue you need to identify and remove the double line shift is in the code:\n Navigate to the pipeline logs, open \u0026lsquo;Run Code Analysis\u0026rsquo; Scroll to the bottom Look for error message looking like \u0026lsquo;ERROR: 1 is not a valid line offset for pointer\u0026rsquo; The error should contain info at where the double line shift is Remove the double line shift and update PR  react-app not updating in Runtime when testing locally The react application for Runtime is fetched from Runtime/wwwroot/runtime/js/react. To see these changes locally one has to:\n Make any required changes in the runtime application\n Build the runtime application. This can be done either of the following ways:\n By running\nnpm run gulp-develop npm run gulp copy-files  from ./src/AltinnCore/Runtime folder, which will build and run the Runtime back end and build the runtime runtime.js when it detects that changes have been made. The copy is necessary to copy the files to the wwwroot folder so changes can be visible in runtime\n or, by running\nnpm run gulp  from ./src/AltinnCore/Runtime folder, which will build the Runtime back end and build the runtime runtime.js and copy the files to the wwwroot folder so changes can be visible in runtime\n or, you could trigger a build of the runtime react app manually by running\nnpm run build-develop  from .src/react-apps/applications/runtime folder. This will build the runtime runtime.js but you will still need to copy the files to the wwwroot folder in runtime, for this you can do:\nnpm run gulp copy-files  from ./src/AltinnCore/Runtime folder,\n   Manual Copy is done the following way:\n Copy runtime.js (and runtime.css if you have made changes to css styling) from the runtime dist folder (./src/react-apps/applications/runtime/dist) into the the wwwroot folder of runtime (./src/AltinCore/Runtime/wwwroot/runtime). The runtime.js file should be placed under /js/runtime.js and the runtime.css is placed under /css/runtime.css  \u0026ndash;\u0026gt; Reload the manual testing page and start new/run existing instance from there\nPod is stuck in status ContainerCreating and has warning \u0026ldquo;Unable to mount volumes for pod XXX: timeout expired waiting for volumes to attach or mount for pod XXX\u0026rdquo; The storage we use today don\u0026rsquo;t support two pods accessing it at the same time, so on deploy if the first pod don\u0026rsquo;t release the storage before the other one tries to connect to it the second pod will get stuck in ContainerCreating status. If you then run kubectl get pods and get the name of the pod you can then run\nkubectl describe [POD_NAME]  then you see the message \u0026ldquo;Unable to mount volumes for pod XXX: timeout expired waiting for volumes to attach or mount for pod XXX\u0026rdquo;\nTo fix this you need to delete the deployment to that pod and start a new release:\nkubectl delete deployment [DEPLOYMENT_NAME]  To start a new release go to release pipeline\nI got assigned to update altinn.studio with new kode Prerequirements: you need build rights to our release pipeline To deploy latest code to altinn.studio do the following:\n To start a new release go to release pipeline Locate and click on Deploy to production Click Create a new release Select versions of the different solutions to deploy (latest is preselected) Click on Create A green info message will appear with the link to the release just create, click on the link Click Deploy and select deploy multiple Select which of the pods to deploy and click Deploy  \u0026ndash;\u0026gt; A deploy to production has been started use kubectl get pods -w on the altinn.studio cluster to see if pods are updated correctly\nmultiple compilation errors for a newly generated app without form components A plausible reason for the .NET code not compiling is that the incorrect version of the SDK is being used. Either the wrong version is installed, or the project is referencing the SDK in your user directory rather than the one installed in program files.\nThere are two steps to solving this issue\n Make sure you have the following versions of the .NET SDK and Runtime installed:  Runtime 2.1.0 SDK 2.1.300  Ensure that the path of all .NET Core references in the Visual Studio solution are in the C:\\Program Files\\dotnet directory. This can be checked by going to Dependencies -\u0026gt; NuGet / SDK for each project in the AltinnCore solution. If this is not the case, remove the reference and re-install it using NuGet package manager or a tool of your own choice.  I try to pull master from github and get error \u0026ldquo;Cannot lock ref\u0026rdquo; This happens from time to time, still unsure why. To fix it run the command:\ngit gc --prune=now\n"
},
{
	"uri": "https://docs.altinn.studio/technology/gitea/",
	"title": "Gitea",
	"tags": ["tech", "gitea", "git", "repos"],
	"description": "Gitea is a self-hosted Git service similar to GitHub. It is used as the repository solution in Altinn Studio Repos.",
	"content": " Gitea is the product that is powering Altinn Studio Repos.\nCustomize The documentation on how to customize gitea can be found here.\nTemplates The user interface of gitea can be customized to match your application needs. You can copy the templates from gitea\u0026rsquo;s github.\nFor example the default login page looks like this\nIt\u0026rsquo;s customized to look like this\nFollow these steps to change any user interface of gitea. Here example is given for login\n Copy the login template from gitea\u0026rsquo;s github Paste it in your application in the same folder structure as gitea. Edit the file. You can change the html tags and introduce new css or add new text or image without affecting the logic. Update the docker image to use these templates.  Now, the new login template will be taken in use.\nLinks  https://gitea.io https://github.com/go-gitea/gitea  "
},
{
	"uri": "https://docs.altinn.studio/technology/go/",
	"title": "Go",
	"tags": ["tech", "programming"],
	"description": "Server side programming language.",
	"content": " Go is the programming language that has been used for developing many of the products we use in Altinn Studio, such as Gitea, Kubernetes, Docker, Traefik, Helm, Grafana, Prometheus and Hugo.\nLinks  https://golang.org https://github.com/golang/go  "
},
{
	"uri": "https://docs.altinn.studio/technology/grafana/",
	"title": "Grafana",
	"tags": ["tech", "monitoring"],
	"description": "Grafana is an open platform for analytics and monitoring.",
	"content": " Grafana is an open platform for analytics and monitoring that we use when monitoring Altinn Studio.\nLinks  https://grafana.com https://github.com/grafana/grafana  "
},
{
	"uri": "https://docs.altinn.studio/development/handbook/",
	"title": "Handbook",
	"tags": ["development", "handbook"],
	"description": "Development handbook for Altinn Studio",
	"content": "WARNING: The development handbook is currently being written, and is as such not complete or final.\n\rThe development handbook should provide all basic information needed to get started with development on Altinn Studio. It should alto contain the information needed to make sure all developers write their code in a consistent way. The development handbook should work as reference material, but it should also be possible to read throught the whole handbook in a logical order so that new developers quickly get up and running.\nThe development handbook is a dynamic material and everybody should feel free to extend or correct articles when needed.\n\rBack-end\r\rCoding guidelines for back-end\n\r\rError handling and Error logging\r\rGuidelines for error handling and error logging in backend\n\r\rDeployment\r\rGuidelines for deploying\n\r\r\rFront-end\r\rCoding guidelines for front-end\n\r\rBest practices\r\rBest practices for altinn.studio frontend\n\rBuild\r\rBuild documentation for altinn.studio frontend\n\rComponent Library\r\rComponent documentation for altinn.studio\n\rDebug\r\rDebug documentation for altinn.studio frontend\n\rError handling\r\rGuidelines for error handling front-end\n\rPost Message\r\rGuidelines for using post message functionality in Altinn Studio\n\rReact\r\rGuidelines for using React in Altinn Studio\n\rRedux\r\rGuidelines for using Redux in Altinn Studio\n\rStyling (css)\r\rGuidelines for styling components in Altinn Studio\n\r\rGeneral\r\rGeneral coding guidelines\n\r\r\rGetting started\r\rInformation about how to get started\n\r\r\rGit\r\rInformation about version control with Git\n\r\r\rGitea\r\rGitea documentation for altinn.studio\n\r\r\rLoadbalancer\r\rInformation about loadbalancer\n\r\r\rNaming Conventions\r\rNaming guidelines for Altinn Studio development\n\r\r\rRESTful APIs (Representation State Transfer)\r\rGuidelines for designing REST apis for microservices in Altinn\n\r\r\rSecurity Checklist\r\rChecklist for security OWASP.\n\r\r\rTest\r\rCoding guidelines for tests\n\r\rTest Strategy\r\rTest Strategy\n\rTestcafe\r\rTestcafe\n\rUnit testing\r\rHow to write jest test in altinn studio, what we know so far\n\rXunit Testing\r\rXunit Testing\n\r\rTroubleshooting\r\rTroubleshooting for altinn.studio\n\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/technology/helm/",
	"title": "Helm",
	"tags": ["tech", "containers"],
	"description": "The Kubernetes Package Manager.",
	"content": " The Kubernetes Package Manager.\nWhat is helm? Helm is a kubernetes resource templating tool. Where all the defined kubernetes resources are deployed with combinations of templates and values. Therefore it is called the kubernetes package manager.\nA helm-package, or a helm-chart is a folder with a set file-structure.\n. +\u0026ndash; altinn-designer | +\u0026ndash; templates | | +\u0026ndash; tests | | | +\u0026ndash; test-connection.yaml | | +\u0026ndash; NOTES.txt | | +\u0026ndash; _helpers.tpl | | +\u0026ndash; deployment.yaml | | +\u0026ndash; service.yaml | | +\u0026ndash; ingress.yaml (deleted in altinn studio, since we don\u0026rsquo;t use ingress. But an ingress template is included in a default helm-chart) | +\u0026ndash; .helmignore | +\u0026ndash; Chart.yaml | +\u0026ndash; values.yaml\nThe Chart.yaml-file contains information about the chart, like the name, version and maintainers. The values.yaml-file contains different values. These values are accessable in the templates. So different environment variables can be defined in the values. Values can also be overwritten when running a upgrade or install of the chart.\nThe files in the templates-folder becomes populated with the values, and sent to the kubernetes clusters as the name of the files. So deployment.yaml should create a deployment in kubernetes. The same fore service.yaml and ingress.yaml.\n_helpers.tpl can be used to define functions to get release names, concatinated with other info. NOTES.txt is the info printed in the cli after an install or upgrade of an release, usually used to give usefull commands the user can run to access the pods.\nHelm usage in altinn studio We use helm to deploy our builds to the kubernetes cluster, both in development-, production- and SBL-cluster. Azure Dev Ops pipelines have support for helm, so this makes deploying to development trigger everytime we merge some code into master.\nLinks  https://helm.sh https://github.com/helm/helm  "
},
{
	"uri": "https://docs.altinn.studio/technology/hugo/",
	"title": "Hugo",
	"tags": ["tech", "docs", "markdown"],
	"description": "Static site generator used for the documentation.",
	"content": " Hugo is a static site generator that we use for generating https://docs.altinn.studio.\nLinks  https://gohugo.io/ https://github.com/gohugoio/hugo https://github.com/altinn/altinn-studio-docs  "
},
{
	"uri": "https://docs.altinn.studio/technology/jest/",
	"title": "Jest",
	"tags": ["tech", "frontend", "test"],
	"description": "",
	"content": "\u0026ldquo;Jest is a delightful JavaScript Testing Framework with a focus on simplicity.\u0026rdquo; - https://jestjs.io/\nJest testing framework is used for front-end testing in Altinn Studio.\nYou can read more about how to test with Jest here\n"
},
{
	"uri": "https://docs.altinn.studio/technology/react/architecture/",
	"title": "Kodearkitektur",
	"tags": ["tech", "frontend", "react"],
	"description": "Kodearkitektur for React og tilhørende teknologi",
	"content": " Bruk av Redux Store i Containere og Components. Kort oppsummert (TL;DR) Send \u0026ldquo;ID\u0026rdquo; eller andre identifikatorer via Props til komponenten og la komponenten hente data fra Redux Store.\nUtfordring (Why?) Hvis en del av Redux Store sendes som Props så vil komponenten re-rendres ved endringer av denne Prop/Store. Det er ønskelig at komponenter ikke rendrer unødvendig.\nRe-rendring trigges av…  Endring av Props. Endring av State som endrer Props.  Kilder  Redux best practices Common pitfalls  Filtrering av Redux Store i mapStateToProps() ved help av Selector Kort oppsummert (TL;DR) Bruk Memoized Selector for å filtrere Redux Store til Props når Redux Store er stor.\nUtfordring (Why?) Hver gang (en del av) Redux Store endrer seg vil funksjoner som filtrerer ut deler av Redux Store kjøres. Hvis Redux Store (state tree) er stor (mange endringer) eller funksjonen er krevende kan det føre til ytelsesproblemer.\nLøsningen En Selector funksjon, med bruk av \u0026ldquo;reduxjs/reselect\u0026rdquo; vil kun kjøres når en definert del av Redux Store endres (eks \u0026ldquo;state.del.underdel\u0026rdquo;).\nKilder  Reselect Comparing shouldComponentUpdate() and Reselect  Eksempel Selector Dette er en enkel Selector uten mye logikk og filtrering. Jo større logikk i \u0026ldquo;filtreringen\u0026rdquo; jo mer \u0026ldquo;sparer\u0026rdquo; man i ytelse.\nimport { createSelector } from 'reselect'; /** * Reselect version */ const formDataSelector = (state: any, providedProps: any) =\u0026gt; { console.log('formdata selector', providedProps.id); return state.formFiller.formData; }; const dataModelBindingSelector = (state: any, providedProps: any) =\u0026gt; { console.log('datamodelBindingSelector'); return state.formDesigner.layout.components[providedProps.id].dataModelBinding; }; const getFormData = () =\u0026gt; { console.log('getFormData() is trigggered, selector is created'); return createSelector( [formDataSelector, dataModelBindingSelector], (formData: any, dataModelBinding: any) =\u0026gt; { console.log('ouput selector running', formData); if (!formData) return ''; if (!formData[dataModelBinding]) return ''; return formData[dataModelBinding]; }, ); }; export const makeGetFormDataSelector = getFormData; // Alternativt en enda enklere variant, som er implementert p.t. import { createSelector } from 'reselect'; const formDataSelector = (state: any, providedProps: any) =\u0026gt; { return state.formFiller.formData[state.formDesigner.layout.components[providedProps.id].dataModelBinding]; }; const getFormData = () =\u0026gt; { return createSelector( [formDataSelector], (formData: any) =\u0026gt; { if (!formData) return ''; return formData; }, ); }; export const makeGetFormDataSelector = getFormData;  Implementasjon i mapStateToProps const makeMapStateToProps = () =\u0026gt; { const GetFormDataSelector = makeGetFormDataSelector(); const mapStateToProps = (state: IAppState, props: IProvidedProps): IFormElementProps =\u0026gt; ({ id: props.id, formData: GetFormDataSelector(state, props), }); return mapStateToProps; }; export const FormComponentWrapper = connect(makeMapStateToProps)(FormComponent);  makeMapStateToProps implementeres slik at Selectoren kan gjenbrukes på tvers av flere komponenter.\nHigher-Order Components Higher-Order component er en funksjon som tar imot en component og returnerer et nytt komponent med ekstra funksjoner, eller ekstra data. Et eksempel på dette er connect-funksjonen fra \u0026ldquo;redux\u0026rdquo;, som tar imot en funksjon som velger redux-state data, og en komponent som disse dataene skal sendes til.\nHvorfor? Ved å wrappe induviduelle komponenter i en higher-order component, vil vi få enklere kode mtp. at en funksjon håndterer endringer i skjemaet på kun en komponent, i motsetning til å ha en funksjon som håndterer alle endringer i skjemaet. Dette vil også gi tredjeparts-utviklere en enklere måte å skrive egne funksjoner for håndtering av endringer i deres komponenter.\nEksempel på bruk i Altinn Studio Når bruker lager en tjeneste med 3. parts komponenter vil vi wrappe disse komponentene i en Higher Order Component som gir den en callback funksjon som tar imot data som komponenten har, og kjøre en redux-action som oppdaterer data i redux-state. Uten at utvikleren av 3. parts komponenten må sette seg inn i hvilke actions som skal kjøres. Dette gir også bedre mulighet for å gjennbruke 3. parts komponenter.\nEksempel på Higher Order Component const FormComponentWrapper = (WrappedComponent, ...) =\u0026gt; { // Feel free to do anything that will enhance the components properties // Return a react component return class extends React.Component { // Add functions for handling changing of data handleDataChange = (dataModelBinding, data) =\u0026gt; { // fire off an action for adding the changed data to redux state } render() { return( \u0026lt;WrappedComponent onFormDataChange={this.handleDataChange} {...props}/\u0026gt; ); } } }  Kilder  Higher-Order component  Normalized Redux Store Kort oppsummert (TL;DR)  Hver datatype får sin egen \u0026ldquo;tabell\u0026rdquo; i State. Hver \u0026ldquo;tabell\u0026rdquo; skal lagre individuelle \u0026ldquo;data\u0026rdquo; som objekter, med IDer som nøkler og \u0026ldquo;dataen\u0026rdquo; som verdi. Referansene til de individuelle \u0026ldquo;dataene\u0026rdquo; lagres ved å lagre IDene. Array med IDene brukes for å indikere sortering.  Utfordring (Why?)  Kompliserte reducers for å oppdatere nøstet state struktur. Unødvendig re-rendering grunnet oppdatering av nøstede objekter.  Eksempel { posts : { byId : { \u0026quot;post1\u0026quot; : { id : \u0026quot;post1\u0026quot;, author : \u0026quot;user1\u0026quot;, body : \u0026quot;......\u0026quot;, comments : [\u0026quot;comment1\u0026quot;, \u0026quot;comment2\u0026quot;] }, \u0026quot;post2\u0026quot; : { id : \u0026quot;post2\u0026quot;, author : \u0026quot;user2\u0026quot;, body : \u0026quot;......\u0026quot;, comments : [\u0026quot;comment3\u0026quot;, \u0026quot;comment4\u0026quot;, \u0026quot;comment5\u0026quot;] } }, allIds : [\u0026quot;post1\u0026quot;, \u0026quot;post2\u0026quot;] }, comments : { byId : { \u0026quot;comment1\u0026quot; : { id : \u0026quot;comment1\u0026quot;, author : \u0026quot;user2\u0026quot;, comment : \u0026quot;.....\u0026quot;, }, \u0026quot;comment2\u0026quot; : { id : \u0026quot;comment2\u0026quot;, author : \u0026quot;user3\u0026quot;, comment : \u0026quot;.....\u0026quot;, }, \u0026quot;comment3\u0026quot; : { id : \u0026quot;comment3\u0026quot;, author : \u0026quot;user3\u0026quot;, comment : \u0026quot;.....\u0026quot;, }, \u0026quot;comment4\u0026quot; : { id : \u0026quot;comment4\u0026quot;, author : \u0026quot;user1\u0026quot;, comment : \u0026quot;.....\u0026quot;, }, \u0026quot;comment5\u0026quot; : { id : \u0026quot;comment5\u0026quot;, author : \u0026quot;user3\u0026quot;, comment : \u0026quot;.....\u0026quot;, }, }, allIds : [\u0026quot;comment1\u0026quot;, \u0026quot;comment2\u0026quot;, \u0026quot;comment3\u0026quot;, \u0026quot;commment4\u0026quot;, \u0026quot;comment5\u0026quot;] }, users : { byId : { \u0026quot;user1\u0026quot; : { username : \u0026quot;user1\u0026quot;, name : \u0026quot;User 1\u0026quot;, }, \u0026quot;user2\u0026quot; : { username : \u0026quot;user2\u0026quot;, name : \u0026quot;User 2\u0026quot;, }, \u0026quot;user3\u0026quot; : { username : \u0026quot;user3\u0026quot;, name : \u0026quot;User 3\u0026quot;, } }, allIds : [\u0026quot;user1\u0026quot;, \u0026quot;user2\u0026quot;, \u0026quot;user3\u0026quot;] } }  Kilder  Normalizing State Shape  "
},
{
	"uri": "https://docs.altinn.studio/technology/kubernetes/",
	"title": "Kubernetes",
	"tags": ["tech", "containers"],
	"description": "Kubernetes is used to manage the docker containers.",
	"content": " Both Altinn Studio and Altinn Studio Apps consists of many different applications running in docker containers. For the Altinn Studio Apps solution this could possible over time be many thousands containers running different end user services.\nKubernetes is used to manage the containers.\nKubernetes definitions Pods Pods are the building blocks of kubernetes. They will crash, be deleted and started up again. But they will never be restored. After they either crash or get deleted, they will ble replaced with a new pod, with it\u0026rsquo;s own configuration of IP adresses.\nDeployments Deployments are controllers for pods, they declare different properties a pod should have, and how many replicas of the pod should be running.\nProperties a pod can have is:\n Environment variables and values Image and image-tag What names the pods should have (they will inherrit the name from the deployment and then a ID that makes the unique) Volume mounts, if they are from secrets or persistent volume claims  Secrets A secret is one or more key-value pairs that is stored on in the cluster and can be access from within the cluster.\nSecrets are base64 encrypted so it is possible to store binary files as secrets aswell.\nServices Services are an abstraction of a set of pods and how to access them. There are various methods of exposing a pod, here are the different types of services:\n ClusterIP (Internal) - Default service definition NodePort (External) - Exposes the nodes static ip LoadBalancer (External) - Exposes the service through a cloud-providers loadbalancer ip ExternalName (External) - Exposes the service through a cloud-providers loadbalancer ip with a CNAME entry  Persistent Volumes Persistent volumes, as the name suggests it is used to manage persistent storage volumes. In altinn.studio we use persistent volume claims,\nand since we\u0026rsquo;re using a Azure managaged kubernetes cluster, azure sets up virtual disks in the kubernetes cluster resource group.\nNamespaces Namespaces are intended for use in environments with multiple users spread across multiple teams or project.\nNamespaces provide a scope for names.\nNode A node is either a physical machine or a virtual one. They are used as workers for hosting different kubernetes resources.\nCluster A cluster is a set of virtual machines with various hardware setup.\nLinks  https://kubernetes.io https://github.com/kubernetes/kubernetes  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/logic/",
	"title": "Logic &amp; Rules",
	"tags": ["studio", "logic"],
	"description": "For many services it is a need for logic and rules. Altinn Studio will have a flexible way to build logic",
	"content": " Definere logikk Logikk som kjører i tjenesten. Er ekstremt viktig å få dette riktig, brukervennlig og fungerende på tvers av kanaler og på tvers av front-end og back-end.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/material-ui/",
	"title": "Material UI",
	"tags": ["tech", "ui", "react"],
	"description": "A popular React UI library used in Altinn Studio",
	"content": " Material UI is used in Altinn Studio as the React UI library. Material UI was chosen because\n It is based on the Google\u0026rsquo;s material design. It focuses exclusively on the React components Can use responsive components provided by the library Can override the style to customize the component to match the application requirements Can save time by using the components in the library instead of creating it from scratch (for example, the navigation drawers, application bar) It uses JSS as a styling solution that exposes a low-level API which helps in advanced overriding and theming mechanism  Material UI links  https://material-ui.com https://github.com/mui-org/material-ui  React Router React router is a third party routing library used in Altinn Studio to trigger navigation within the application.\nReact router links  https://reacttraining.com/react-router https://github.com/ReactTraining/react-router/tree/master/packages/react-router-dom  "
},
{
	"uri": "https://docs.altinn.studio/technology/nginx/",
	"title": "Nginx",
	"tags": ["tech", "load-balancer"],
	"description": "Load balancer currently used for routing traffic between Repos and Designer.",
	"content": " Nginx is used as the load balancer in the Altinn Studio solution. It routes traffic between Repos and Designer. Running in a docker container. You find details on routing on Gitub\nLinks  https://www.nginx.org https://github.com/nginx/nginx  "
},
{
	"uri": "https://docs.altinn.studio/tags/owasp/",
	"title": "OWASP",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/prometheus/",
	"title": "Prometheus",
	"tags": ["tech", "monitoring"],
	"description": "Prometheus is an open-source systems monitoring and alerting toolkit.",
	"content": " Prometheus is an open-source systems monitoring and alerting toolkit that we use for monitoring.\nLinks  https://prometheus.io https://github.com/prometheus  "
},
{
	"uri": "https://docs.altinn.studio/technology/react/",
	"title": "React",
	"tags": ["tech", "frontend", "react"],
	"description": "Modulært rammeverk for å utvikle UI komponenter",
	"content": "  Modulært rammeverk for å utvikle UI komponenter som kan gjenbrukes flere steder i løsningen. Hvert React komponent har en tilstand som gir den data i henhold til hvor i applikasjonen brukeren er og hvilke handlinger som foretas. Vedlikeholdt av Facebook, under MIT lisens.  Slik React blir brukt Uten redux  Ved bruk av higher order components kan tilstand sendes fra rot-komponenten nedover i komponent-hierarkiet. Rot-komponenten håndterer alt av state, og sender callbacks ned i komponentene, slik at det er mulig og legge til, fjerne og endre komponeter.  Med redux  Ved bruk av redux vil vi ikke være like avhengig av higher order components, da alle komponenenter kan kobles til redux-state av appen, og kunne håndtere det å legge til, fjerne eller endre komponenter selv. Håndtering av state skjer igjennom Actions og Reducers, som Redux arkitektur anbefaler.  Links  https://reactjs.org https://github.com/facebook/react  "
},
{
	"uri": "https://docs.altinn.studio/technology/react/redux/",
	"title": "Redux",
	"tags": ["tech", "frontend", "react"],
	"description": "Redux is used for handling state in React applications",
	"content": "  Applikasjonstilstandshåndtering En felles tilstand for hele applikasjonen Tilstanden styres av Actions som håndteres av Reducere som igjen populerer tilstanden.\n En Action kan f.eks. være \u0026ldquo;FETCH_POSTNUMMER\u0026rdquo; Når en slik actions kjøres, så vil en Reducer ta imot og oppdatere tilstanden slik at det er i tilstanden at applikasjonen nå henter postnummer. Når er hentingen er fullført, vil man f.eks. sende en action \u0026ldquo;FETCH_POSTNUMMER_FULFILLED\u0026rdquo; som har postnummer-data med som parameter. Reducer håndterer denne handlingen og setter postnummer-data i applikasjonens tilstand.   Vedlikeholdt av Facebook, under MIT lisens.\n  Fordeler ved å bruke redux  En felles state for alle komponenter Komponenter kan kobles direkte mot state og kan oppdatere denne uavhengig av andre komponenter Gir en stor frihet til valg av struktur på state. Enkelt å eksportere til json og importere fra json (hvis strukturen er lik)  Links  https://redux.js.org https://github.com/reactjs/redux  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/reusable-resources/",
	"title": "Reusable resources",
	"tags": ["studio"],
	"description": "A important feature with Altinn Studio is that it should promote developers to create reusable resources that can be reused by other developers",
	"content": " A important feature with Altinn Studio is that it should promote developers to create reusable resources that can be reused by other service developers that uses Altinn Studio.\nReusable resource is typical created by technical developers using code editors.\n  Development of new React web component   Web component When building UI, you will use and configure premade web components. The components will be based on React, and vil vary in size and complexity. Web components are developed in code editors.\nSome basic requirements:\n The component should be flexible and configurable The component should be able to be connected to the data model, and use the metadata from the data model. The component should be able to connect to text resources The component should support responsive design and WCAG 2 AA It should be simple for service owners to add more components  Overall layout When building UI it will be possible to select a overall layout (aka \u0026ldquo;look\u0026amp;feel\u0026rdquo;). This could bee neded because of the complexity of the service or a wish for branding of the service.\n Create reuasable artifacts\n Look\u0026amp;feel Texts and translations Code lists Logic (C#? TypeScript? WebAssembly?) Data models (Seres?) API calls  Reuse these artifacts\n  F.eks. det å lage nye web componenter og layouts vil typisk være noe som tekniske utviklere gjør i kode-editorer.\nDet å sette disse sammen og konfigurere dem, er noe alle skal kunne gjøre.\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/deployment/",
	"title": "Service Deployment",
	"tags": ["studio"],
	"description": "Altinn Studio will let the developer deploy the service to test enviroments and production without any manuel steps",
	"content": "As a service developer you will be able to deploy the created service to Altinn Studio Apps for testing/production.\nThe goal is that this functionality is 100% self service without involving other parties.\n"
},
{
	"uri": "https://docs.altinn.studio/architecture/solution/",
	"title": "Solution Architecture",
	"tags": ["solution", "architecture"],
	"description": "Description of the Altinn Studio solution architecture",
	"content": "Functionality in Altinn is distributed between five different solutions\n Altinn Studio - The new application development solution Altinn Apps - The new hosting and infrastructure solution for applications Altinn Platform - The new supporting platform solution SBL - The old hosting solution for InfoPath services TUL - The old service development solution  The diagram below shows where functionality is located in the five different solutions:\nFull screen | Visio\n\n"
},
{
	"uri": "https://docs.altinn.studio/technology/stylecop/",
	"title": "StyleCop",
	"tags": ["tech", "code-quality"],
	"description": "Stylecop analyzer is a code analysis tool for C#",
	"content": " StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule. In altinn studio application, we have turned set this \u0026ldquo;warning\u0026rdquo; action to \u0026ldquo;Error\u0026rdquo; to enforce the use of rules.\nLinks  Rule Documentation Configuring Stylecop Analyzer Github  Nuget Package Instructions to install the stylecop analyzer in your project can be found here.\nRuleset A solution wide stylecop ruleset and configuration(stylecop.json) is set for altinn studio application. This can be linked to the projects by linking these files like below in the project. It is set to only work when building in Debug mode\n\u0026lt;ItemGroup Condition=\u0026quot;'$(Configuration)'=='Debug'\u0026quot;\u0026gt; \u0026lt;PackageReference Include=\u0026quot;StyleCop.Analyzers.Unstable\u0026quot; Version=\u0026quot;1.1.1.61\u0026quot; /\u0026gt; \u0026lt;AdditionalFiles Include=\u0026quot;$(SolutionDir)stylecop.json\u0026quot;\u0026gt; \u0026lt;Link\u0026gt;stylecop.json\u0026lt;/Link\u0026gt; \u0026lt;/AdditionalFiles\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;PropertyGroup Condition=\u0026quot;'$(Configuration)'=='Debug'\u0026quot;\u0026gt; \u0026lt;CodeAnalysisRuleSet\u0026gt;$(SolutionDir)Altinn3.ruleset\u0026lt;/CodeAnalysisRuleSet\u0026gt; \u0026lt;/PropertyGroup\u0026gt;  We have turn on the rules that will improve the code quality and maintainability.\nTurn off/Turn on a rule To turn on/off a rule from the ruleset,\n Click on Altinn3.ruleset file in the solution explorer Expand the Stylecop.Analyzers Check/uncheck the rule you want to turn on/off If you are turning on a rule, select the action to be \u0026ldquo;Error\u0026rdquo;    Turn on/off a rule from ruleset   Implemented rules in Altinn Studio The list of rules that are implemented (and not implemented) in altinn studio can be found here.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/technology/",
	"title": "Technology",
	"tags": ["tech"],
	"description": "The technology used in Altinn Studio, Altinn Apps and Altinn Platform.",
	"content": "The technology used in Altinn Studio, Altinn Apps and Altinn Platform.\n\rBPMN 2.0\r\rBusiness Process Model and Notation (BMN) - Workflow\n\r.NET Core\r\rServer side development framework.\n\rC#\r\rServer side programming language.\n\rDocker\r\rDocker is the container technology used in Altinn Studio and for Altinn Studio Apps\n\rGitea\r\rGitea is a self-hosted Git service similar to GitHub. It is used as the repository solution in Altinn Studio Repos.\n\rGo\r\rServer side programming language.\n\rGrafana\r\rGrafana is an open platform for analytics and monitoring.\n\rHelm\r\rThe Kubernetes Package Manager.\n\rHugo\r\rStatic site generator used for the documentation.\n\rJest\r\r\u0026ldquo;Jest is a delightful JavaScript Testing Framework with a focus on simplicity.\u0026rdquo; - https://jestjs.io/ Jest testing framework is used for front-end testing in Altinn Studio. You can read more about how to test with Jest here\n\rKubernetes\r\rKubernetes is used to manage the docker containers.\n\rMaterial UI\r\rA popular React UI library used in Altinn Studio\n\rNginx\r\rLoad balancer currently used for routing traffic between Repos and Designer.\n\rPrometheus\r\rPrometheus is an open-source systems monitoring and alerting toolkit.\n\rReact\r\rModulært rammeverk for å utvikle UI komponenter\n\rStyleCop\r\rStylecop analyzer is a code analysis tool for C#\n\rThird party components\r\rInformation on how custom/third party components are set up\n\rTraefik\r\rContainer load balancer\n\rTypeScript\r\rTypeScript is a superset of JavaScript that compiles to clean JavaScript output\n\rVisual Studio Code\r\rVisual Studio Code is a lightweight source code editor which runs on your desktop.\n\r"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/test/",
	"title": "Testing",
	"tags": ["studio", "test"],
	"description": "In Altinn Studio there will different ways for service developers to test their services",
	"content": " Automatic testing of all Altinn Studio service that is developed will give a positive effect, both on quality and reduced development time over time.\nAltinn Studio will seek to support automatic tests of services. Currently we are looking at TestCafe as framework.\nManuell testing Samme Runtime som vil kjøre i altinn.no vil også benyttes for testing av tjenester i Designer. Dette betyr at enhetstesting av UX og API\u0026rsquo;er vil gi stor grad av sikkerhet, siden det er samme runtime-koden som vil kjøre både i prod og under utvikling. En annen positiv effekt er at mer tekniske utviklere faktisk kan gjøre realistisk lokal debugging og stepping i runtime-koden.\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/text/",
	"title": "Text and translations",
	"tags": ["studio"],
	"description": "Solution for designing service UI, defining workflow, other settings, deploy ++",
	"content": " Text editing and translations Easy and efficient text processing and translation are important in a service development solution. The possibility to reuse texts across multiple services are especially important.\nTexts in the editor are written in a ini-file that is converted to a simple JSON-file and presented as an API. In that way the user could work directly in the code editor or convert the text into other formats supported by external translation tools. Meaning that 3.0 supports any language that is added, not just languages supported by the Altinn portal.\n Definition of texts using hierarchical and readable keys Reusable texts, internal across different pages and on the levels above the solution Possibility to add other languages  Using lanuage keys in the solution Lanuage keys are references in the react-code with the help of a the language method getLanguageFromKey found in src/react-apps/applications/shared/src/utils/lanauge.ts. This method is called in the following way:\ngetLanguageFromKey('universal_key.lanuage_key', this.props.language)  Where the first param is the language key and the second is the language element. If you call this.props.language.universal_key.lanuage_key you should get the key value\nHow to add a new language:\n Make a new ini-file and place it in AltinnCore \u0026gt; Common \u0026gt; Languages \u0026gt; ini Change the parameter \u0026ldquo;languageCode\u0026rdquo; in the API call to whatever name your ini file is called.  Example for Norweigan bokmål (nb):  http://altinn3.no/designer/y/types/Language/getLanguageAsJSON?languageCode=nb  Guides for language files:\n Keys are sorted by which app they belong to Universal keys ([general]) are placed at the top of the file Keys are sorted alphabetically Keys are written in lowercase with underscores (example_key)    Editor for oversetting av tekster   "
},
{
	"uri": "https://docs.altinn.studio/technology/custom-components/",
	"title": "Third party components",
	"tags": ["tech", "ui-designer"],
	"description": "Information on how custom/third party components are set up",
	"content": " It should be possible to create and use custom/third party components as a part of a service in Altinn Studio.\nNOTE: It is not currently supported to change properties on custom components via the Altinn Studio UI editor (f.ex. texts). Therefore, any properties must be hard coded into the component at this time.\n\rHow to create a custom component All the form components in Altinn Studio and Altinn Studio Apps are created using React, and this is also a requirement for any custom components.\nTo include a custom component in Altinn Studio, the finished component needs to be built into a single index.js file. We recommend using rollup.js to do this.\nThe easiest way to get started is to clone the example code for custom components, located here. The example below will be based on this code.\nCreate a React component Create a custom React component in the src/components folder. Here we use the example component BalloonCounter, located in src/components/BalloonComponent/index.js:\nimport React from 'react'; export class BalloonCounter extends React.Component { constructor(_props, _state) { super(_props, _state); this.state = { count: 0, } } handleIncrement = () =\u0026gt; { let {count} = this.state; count += 1; this.setState({ count, }, () =\u0026gt; { this.handleSubmitData(); }); } handleDecrement = () =\u0026gt; { if(this.state.count !== 0) { let {count} = this.state; count -= 1; this.setState({ count, }, () =\u0026gt; { this.handleSubmitData(); }) } } handleSubmitData = () =\u0026gt; { this.props.onHandleDataUpdate(this.state.count); } render() { return ( \u0026lt;div\u0026gt; Number of ballons you want {this.state.count} \u0026lt;button onClick={this.handleIncrement}\u0026gt; + \u0026lt;/button\u0026gt; \u0026lt;button onClick={this.handleDecrement}\u0026gt; - \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } }  In this example, we create a React component called BalloonCounter. It has defined 4 methods and a constructor:\n constructor(_props, _state): Standard lifecycle method for a react component, see here for more information. handleIncrement(): Increments the count value by adding 1. handleDecrement(): Decrements the count value by subtracting 1. handleSubmitData(): Submits the data to the parent component by calling the provided method this.props.onHandleDataUpdate(this.state.count) (must be called in order for the components data to be used) in a form. render(): Standard lifecycle method for a react component, defines what should be rendered. See here for more information.  The method this.props.onHandleDataUpdate(...) is the method that the Altinn Studio application sends in to the component to handle data changes, and saving data to the form data. This method is therefore important to call in the custom component when data has been updated!\n\rOnce the component has been created, specify where it can be found by updating src/components/index.js with the following line:\nexport * from './BalloonCounter' // Replace BalloonCounter with the name of your component  You can add multiple components in this way, and they will then be build into the same package.\nBuild a package containing the component From the root directory of the repository, run the following command:\nnpm run build  This will create a folder named dist, and place a file called index.js into this folder. This file needs to be available online, accessible by URL, to be used by Altinn Studio. The easiest way to do this is to add the file to your service repository in Gitea. You can then find the URL to the file by navigating to your service in the Repositories part of the soluton (https://altinn.studio/\u0026lt;organization or user name\u0026gt;/\u0026lt;service\u0026gt;) and opening the file from there. Choose to view the file raw to get only the file contents, and use the URL shown in the browser.\nAdding custom component to service in Altinn Studio In the service where the custom component is to be used, create a file called ThirdPartyComponent.json. It is important that the file is called exactly this, and that it is placed in the Resources folder in the service repository.\nCopy the following content into the file and replace the placeholders with your own values:\n{ \u0026quot;packages\u0026quot;: [ { \u0026quot;packageName\u0026quot;: \u0026quot;[name of package]\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;[link to raw format of index.js in git-repoet]\u0026quot; } ] }  Once this is done, sync your version of the service with the updated Repositories version in Altinn Studio, and load the UI editor. The custom component(s) should appear in the list of available form components.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/traefik/",
	"title": "Traefik",
	"tags": ["tech", "containers", "load-balancer"],
	"description": "Container load balancer",
	"content": " Traefik is used for load balancing in Altinn Studio Apps. It routes traffic based on tags on the service containers. Details on config can be found on github.\nLinks  https://traefik.io https://github.com/containous/traefik  "
},
{
	"uri": "https://docs.altinn.studio/technology/react/third-party-components/",
	"title": "Tredjeparts komponenter",
	"tags": ["tech", "react"],
	"description": "Tredjeparts komponenter",
	"content": " Det er ønskelig at tredjeparter skal kunne utvikle komponenter som en tjenesteeier skal kunne bruke i sine løsninger\nHvordan utvikle 3. parts komponenter Når du som en bruker ønsker å utvikle tredjeparts-komponenter så er det anbefalt å bruke rollup.js som kompilerer til cjs (CommonJS).\nBasert på dette repoet i altinn.studio\nEksempel på et komponent som i et fiktivt git repo (basert på Gitea Repo) ligger i src/components/BalloonCounter/index.js :\nimport React from 'react'; export class BalloonCounter extends React.Component { constructor(_props, _state) { super(_props, _state); this.state = { count: 0, } } handleIncrement = () =\u0026gt; { let {count} = this.state; count += 1; this.setState({ count, }, () =\u0026gt; { this.handleSubmitData(); }); } handleDecrement = () =\u0026gt; { if(this.state.count !== 0) { let {count} = this.state; count -= 1; this.setState({ count, }, () =\u0026gt; { this.handleSubmitData(); }) } } handleSubmitData = () =\u0026gt; { this.props.onHandleDataUpdate(this.state.count); } render() { return ( \u0026lt;div\u0026gt; Number of ballons you want {this.state.count} \u0026lt;button onClick={this.handleIncrement}\u0026gt; + \u0026lt;/button\u0026gt; \u0026lt;button onClick={this.handleDecrement}\u0026gt; - \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } }  Viktig: Komponentens this.props.onHandleDataUpdate(...) er en funksjon som returnerer dataene komponenten har til skjema-appen, som håndterer lagring i datamodell.\nHusk å exportere denne classen i src/components/index.js slik:\nexport * from './BallonCounter.js';  Når npm run build blir kjørt vil dette lage en mappe med navn dist, med en fil som heter index.js. Denne filen må være med i git push for at altinn.studio skal kunne hente komponentene.\nHvordan bruke 3. parts komponenter I tjenester du ønsker å bruke 3. parts komponenter må det ligge en ThirdPartyComponents.json-fil. Plasseringen av denne er viktig, den må ligge under [Tjeneste navn]/editions/[utgave]/Resources. Innholdet av denne filen er som følger:\n{ \u0026quot;packages\u0026quot;: [{ \u0026quot;packageName\u0026quot;: \u0026quot;[navn på pakken]\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;[Link til raw format av index.js i git-repoet]\u0026quot; }] }  Eksempel på en slik json-fil finner du her.\nHvis alt ble satt opp riktig, vil pakkene med prefiksen til pakkenavnet komme opp i toolbaren på venstre side av Skjema designeren. F.eks. SuperCoolPackage.SuperCoolComponent.\nAlternative løsninger  Webpack med treeshaking  Positivt:  Webpack er allerede brukt i applikasjonen  Negativt:  Slik webpack er konfigurert idag vil det bli bygget en react-applikasjonsfil med alle komponenter, dette vil kreve en separering av react-skjemadesigner og react-runtime.  Runtime bygget må skje med formLayout, som vi henter i oppstarts-fasen av applikasjonen. Slik at alle kompoenter (brukte og ubrukte komponenter) blir med i bygget.  Bygget må skje fra kommando-linje/scripts som kjører i filstrukturen   Next.js SSR (server side rendering)  Positivt:  Gjøre initiell rendering på server, la klienten slippe å hente data som tekstressurser, datamodell, formLayout Dynamisk henting av komponenter som ikke er standard i react-applikasjonen  Negativt:  Introdusere flere tjenester og mye endring av allerede eksisterende react-kode   HTTP API som starter webpack-build  Ved å ha et api som f.eks. Express.js, som håndterer kompilering av applikasjon (bruker allerede kompilerte filer hvis de finnes) og blir kun brukt til å fetche javascript filen som inneholder react. Eller kun bygge da tjenesteeier klikker på \u0026ldquo;Migrer tjeneste\u0026rdquo;. Positivt:  Dynamisk kompilering av kun nødvending react applikasjon og 3. parts komponenter (kan både kompileres da tjenesten migreres, eller hver gang et en bruker starter å fylle ut et skjema (antar at første alternativ er mest gunstig))  Negativt:  Introdusere ny tjeneste (med mindre endringer av eksisterende kode enn \u0026ldquo;Next.js SSR\u0026rdquo;-alternativet)    Ressurser  Webpack tree-shaking  Webpack tree-shaking Webpack module concatenation plugin  Next.js  Offisiell nettside Github Docs  Express  Offisiell nettside Github side   "
},
{
	"uri": "https://docs.altinn.studio/technology/typescript/",
	"title": "TypeScript",
	"tags": ["tech", "programming"],
	"description": "TypeScript is a superset of JavaScript that compiles to clean JavaScript output",
	"content": " TypeScript is a superset of JavaScript that compiles to clean JavaScript output.\n Med javascript er følgende en lovlig handling:\nvar foo = false; foo = \u0026quot;bar\u0026quot;;  Dette ville gitt en TypeError i TypeScript, og koden ville ikke blitt kompilert til JavaScript.\n Typescript kompileres til JavaScript, så klienten kjører aldri TypeScript koden. Typescript er kun til for at utvikleren ikke skal lage bugs ved å endre typer på variabler.\n  Links  http://www.typescriptlang.org https://github.com/Microsoft/TypeScript  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/ui-designer/",
	"title": "UI Designer",
	"tags": ["studio", "ui-designer"],
	"description": "The UI-designer is the part of Altinn Studio where the service developer can create a form",
	"content": " The possibility to effectly build a user friendly user interface for a service is an essential feature for Altinn Studio. this is one of the more complex functionalities developed as part of Altinn Studio.\nThe UI-designer has the following functionality:\n Define a detailed layout (responsive design)  Add reusable form components Configure form components  Connection to data model Connection to texts/translations   Define/configure connections to external API Define/configure rules for validation, calculation and dynamics  See all issues related to Altinn Studio and UI-designer on Github\n  Drag\u0026#39;n drop av web komponenter   Form components The form components are reusable components that are used to build the user interface of the service. Examples include input fields and title components. See a list of all available form components here.\nIt is also possible to define custom components and use this in the service.\n"
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/api-use/",
	"title": "Using API&#39;s",
	"tags": ["studio", "api"],
	"description": "For many services it is required to call API&#39;s. Altinn Studio will support building API connections with many types of API.",
	"content": "To be able to support \u0026ldquo;once-only\u0026rdquo; it is essensial that it is easy to do API-call from a service to other systems API\u0026rsquo;s\nFor å kunne understøtte \u0026ldquo;once-only\u0026rdquo;, så er det essensielt at det er enkelt å gjøre kall mot andre systemers API\u0026rsquo;er fra en 3.0-tjeneste. For å forenkle dette kan en mulig løsning være å støtte en type gjenbrukbar asset av type \u0026ldquo;API-plugins\u0026rdquo;, som gjør det enkelt å gjøre kall.\nEn ukjent faktor er den kommende \u0026ldquo;API-katalogen\u0026rdquo;, og hvilke egenskaper den vil tilby.\n Enkel bruk av API\u0026rsquo;er. Se på det som gjøres i NADOBE. Må bort fra dagens mappere  Dette er et område som ikke ble sett på i PoC.\n"
},
{
	"uri": "https://docs.altinn.studio/technology/vs-code/",
	"title": "Visual Studio Code",
	"tags": ["tech", "git", "programming"],
	"description": "Visual Studio Code is a lightweight source code editor which runs on your desktop.",
	"content": " Visual Studio Code is a lightweight and extendable code editor which runs on your desktop and is available for Windows, macOS and Linux.\nWe use it when developing altinn-studio, and it can be used for editing files from Altinn Studio Repos locally using the built-in git support.\nVS Code comes with support for hundreds of languages and technologies, including all the ones that are relevant in Altinn Studio:\n C# CSS Docker Go HTML JavaScript JSON Kubernetes Markdown .NET Core Node.js React and JSX TypeScript  Links  https://code.visualstudio.com/docs https://github.com/Microsoft/vscode  "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/work-in-progress/",
	"title": "Work in progress",
	"tags": ["studio", "work in progress"],
	"description": "A work in progress information is displayed to users of altinn studio",
	"content": " Work in progress page There are many areas in altinn.studio where the functionality is not implemented yet (but will be available in the upcoming releases). There is a need to inform the user about this and provide a good user experience. So a work in progress page is displayed on all areas where the implementation has either not started or in progress.\n  Work in progress page   "
},
{
	"uri": "https://docs.altinn.studio/solutions/altinn-studio/functional/workflow/",
	"title": "Workflow",
	"tags": ["studio", "workflow"],
	"description": "As part of the service development the developer would define a workflow for the service",
	"content": " Definere arbeidsflyt Definere arbeidsflyt for en tjeneste. Må være MYE kraftigere og mer fleksibel enn det som finnes i dagens løsning. Målsettingen er å muliggjøre at vi kan fjerne de ulike tjenestetypene i dagens løsning.\nTanken er at hvis man både kan gjøre henting av data (innsyn) og ta i mot meldinger, og gjøre en eller flere arkivering, så faller behovet for tjenestetyper bort. Behovet for samhandlingstjenesten forsvinner også.\nEn annen veldig spennende tanke er at dette også åpner opp for å \u0026ldquo;koble sammen\u0026rdquo; dialogen for brukeren, siden det da per. def ikke er noe å koble sammen. Hele dialogen er bare ulike steg i den samme tjenesten, og siden man også kan legge til API\u0026rsquo;er på en 3.0-tjeneste, så åpner det opp for at tjenesteeier modellerer flyten istedenfor at den må passe inn i et mønster som er bestemt av Altinn.\nStegene i en arbeidsflyt skal også være del av selve tjenesten som deployes, og ikke kjøre i plattformen slik som i dag. Dette åpner opp for stor grad av tilpasninger, gjør at hele flyten kan enhetstestes, og gjør at tjenesten i større grad blir immun mot påvirkning fra endringer i plattformen. En naturlig vei å gå vil være å benytte de samme mekanismene for å kunne gjenbruke og (re)definere arbeidsflyt og GUI per steg, som for GUI for tjenestene. Og da er vi veldig nærme det at arbeidsflyt ikke er noe eget, det er det samme som flyten internt i et skjema.\nEksempler på steg:\n Signering Hente prefill, gjøre oppslag mot eksterne data Gjøre eksterne valideringer via API Motta melding via API Gjøre ekstern signering Egendefinerte steg, med UX    Banalt enkel implementasjon av arbeidsflyt   See all issues related to Altinn Studio and workflow on Github\n"
},
{
	"uri": "https://docs.altinn.studio/tags/xacml/",
	"title": "XACML",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/about/",
	"title": "about",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/analysis/",
	"title": "analysis",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/api/",
	"title": "api",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/apps/",
	"title": "apps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/arbeidsflyt/",
	"title": "arbeidsflyt",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/architecture/",
	"title": "architecture",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/arkitektur/",
	"title": "arkitektur",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/authentication/",
	"title": "authentication",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/back-end/",
	"title": "back-end",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/best-practices/",
	"title": "best practices",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/bpmn/",
	"title": "bpmn",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/branching/",
	"title": "branching",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/build/",
	"title": "build",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/checklist/",
	"title": "checklist",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ci/",
	"title": "ci",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/code-quality/",
	"title": "code-quality",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/codelist/",
	"title": "codelist",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/component-library/",
	"title": "component library",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/containers/",
	"title": "containers",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/csproj/",
	"title": "csproj",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/css/",
	"title": "css",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/css-in-js/",
	"title": "css-in-js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/data-model/",
	"title": "data-model",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/data-modeling/",
	"title": "data-modeling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/dataformat/",
	"title": "dataformat",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/debug/",
	"title": "debug",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/deploy/",
	"title": "deploy",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/deployment/",
	"title": "deployment",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/development/",
	"title": "development",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/devops/",
	"title": "devops",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/docs/",
	"title": "docs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/enzyme/",
	"title": "enzyme",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/error-handling/",
	"title": "error-handling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/error-logging/",
	"title": "error-logging",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/external-api/",
	"title": "external-api",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/front-end/",
	"title": "front-end",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/frontend/",
	"title": "frontend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/general/",
	"title": "general",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/gitea/",
	"title": "gitea",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/guide/",
	"title": "guide",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/handbook/",
	"title": "handbook",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/information/",
	"title": "information",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/infrastructure/",
	"title": "infrastructure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/intro/",
	"title": "intro",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/issues/",
	"title": "issues",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/jest/",
	"title": "jest",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/jss/",
	"title": "jss",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/load-balancer/",
	"title": "load-balancer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/loadbalancer/",
	"title": "loadbalancer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/logic/",
	"title": "logic",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/markdown/",
	"title": "markdown",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/material-ui/",
	"title": "material-ui",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/mock/",
	"title": "mock",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/monitoring/",
	"title": "monitoring",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/naming/",
	"title": "naming",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/navigation/",
	"title": "navigation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/pipeline/",
	"title": "pipeline",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/pipelines/",
	"title": "pipelines",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/platform/",
	"title": "platform",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/post/",
	"title": "post",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/post-message/",
	"title": "post message",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/programming/",
	"title": "programming",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/projectfile/",
	"title": "projectfile",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/react/",
	"title": "react",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/redux/",
	"title": "redux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/repos/",
	"title": "repos",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/rest/",
	"title": "rest",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/security/",
	"title": "security",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/solution/",
	"title": "solution",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/stub/",
	"title": "stub",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/studio/",
	"title": "studio",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/styled-components/",
	"title": "styled components",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/tech/",
	"title": "tech",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/test/",
	"title": "test",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/testcafe/",
	"title": "testcafe",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/texts/",
	"title": "texts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/tjenester-3.0/",
	"title": "tjenester 3.0",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/troubleshooting/",
	"title": "troubleshooting",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ui/",
	"title": "ui",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ui-components/",
	"title": "ui-components",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ui-designer/",
	"title": "ui-designer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ui-editor/",
	"title": "ui-editor",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/unit-testing/",
	"title": "unit-testing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/wordlist/",
	"title": "wordlist",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/work-in-progress/",
	"title": "work in progress",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/workflow/",
	"title": "workflow",
	"tags": [],
	"description": "",
	"content": ""
}]