[
{
	"uri": "https://docs.altinn.studio/design/designprinsipper/",
	"title": "Designprinsipper",
	"tags": [],
	"description": "Altinn har som mål å gjøre det enklere for innbyggere og næringsliv å være i kontakt med det offentlige uavhengig av digital kompetanse.",
	"content": "Når vi utvikler nye eller forbedrer eksisterende produkter følger vi et sett med prinsipper for å kunne sikre oss at vi leverer brukervennlige løsninger til alle. Vi anbefaler å følge disse prinsippene uansett hvilken offentlig løsning du jobber med å utvikle.\nVi setter brukerbehov først\rVi bruker innsikt om brukernes behov aktivt i utviklingen av produktene våre. Alle løsninger skal fokusere på å løse reelle problemer for brukerne og vi bruker undersøkelser og brukerinnsikt til å ta beslutninger.\r\r\rSkjule kompleksitet\rVi lager fokuserte og forenklede løsninger og skreller vekk unødvendig kompleksitet for brukerne. Løsningene er ofte komplekse på baksiden, men fremstår enkle og brukervennlige for folk som bruker dem.\r\r\rHelhetlige brukeropplevelser\rProduktene våre skal henge sammen slik at folk får en helhetlig brukeropplevelse. Vi bruker konsistent språk og samme komponenter i alle digitale løsninger. Brukerne skal kjenne seg igjen uansett hvilken del av produktet man bruker.\r\r\rVisuelt design som motiverer\rDet visuelle designet skal bidra til å gjøre brukerne trygge i dialogen med det offentlige. Vi bruker en vennlig fargepalett, et enklere grensesnitt, tydelige interaksjonselementer og fargesterke illustrasjoner til å skal skape en god atmosfære. Alle visuelle beslutninger skal ha et klart formål om å skape en spesifikk effekt.\r\r\rTilgjengelighet for alle\rVi strekker oss langt for å lage digitale løsninger som skal være tilgjengelige for alle. Vi gjenbruker komponenter som en måte å optimalisere tilgjengelighet på - teknisk så vel som interaksjonsdesign og visuelt design.\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/getting-started/",
	"title": "Getting started",
	"tags": ["development", "front-end"],
	"description": "Get started working with the frontend",
	"content": "The frontend is made up of several React applications. Each application covers a functional area.\nStructure The applications are grouped by the 3 solutions:\n Altinn Studio (Designer) Altinn Apps Altinn Platform (Receipt)  Altinn Studio Designer \nAltinn Apps \u0026amp; Platform \nTechnologies and frameworks  https://reactjs.org/ https://redux.js.org/ https://redux-saga.js.org/ https://material-ui.com/  Architecture Each frontend runs within a .NET web application, where the transpiled javascript \u0026amp; CSS are referenced.\n For Altinn Studio Designer and Altinn.Platform.Receipt, these files are deployed as part of the application itself. For Altinn.Apps frontend, these files are hosted on a CDN, and loaded in at runtime.  All of the frontend apps are set up with the same overall React + Redux architecture:\n\n Component: The react component Props: Define how the component should render Store: Contains all global state data used by the components Action: Triggered when a component updates Reducer: Listens to actions and updates the store according to which action is triggered Redux-Saga: Middleware. Intercepts the action before it reaches the reducer, in order to process data before it goes to the store. Useful for handling async operations like calling APIs.  App frontend Details of the architecture for app frontend can be found here.\nAltinn Studio Designer frontend Details of the architecture for Altinn Studio Designer frontend can be found here\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/kom-i-gang/",
	"title": "Kom i gang",
	"tags": [],
	"description": "Her finner du veiledning for hvordan du bruker designsystemet i andre løsninger, og hvordan du jobber med videreutvikling av nye komponenter i designsystemet.",
	"content": "Bruke CSS og Javascript fra designsystemet Skal du kun benytte deg av design fra designsystemet, trenger du ikke å innstallere Pattern Lab som utviklingsmiljø. Du trenger kun å hente ned de distribuerte designfilene (css og javascript) fra NPM. I tillegg kan du bruke designsystemet for å finne og kopiere HTML-koden inn i ditt system. (Grunnen til at HTML ikke kan være synkronisert, er at de ulike løsningene er bygget på ulike bakenforliggende system). Designsystemet er versjonsbasert, slik at din løsning kan velge å oppdatere til nyeste versjon av designsystemet når det er ønskelig. NB: jQuery må hentes inn i tillegg.\n\nJobbe med videreutvikling i designsystemet Med definerte UI-komponenter i Patternlab kan man som frontend-utvikler enkelt sy sammen nye maler og prototyper. NB: En designer skal alltid være ivolvert i design av nye brukergrensesnitt.\nSkal du jobbe med frontend, må du først klone Git-repositoriet fra Altinns github og følge oppskriften der for hvordan du setter opp utviklingsmiljøet. Når du er ferdig med innstallasjonen skal du kunne se dette på din localhost:3000.\nPattern Lab Dokumentasjon Dokumentasjon for hvordan utvikle atomisk design med Pattern Lab er tilgjengelig på Pattern Lab sine nettsider.\nRutiner for oppdatering Når et nytt atom, molekyl eller organisme lages, skal følgene sjekkes:\n Følg retningslinjene for frontend-kode. Dersom du har endret en eksisterende komponent, sjekk at den fortsatt fungerer som den skal på alle steder den er brukt. Placeholder-tekst i komponenter skal beskrive funksjonen. F.eks \u0026ldquo;Tittel på listen\u0026rdquo;. Løpende tekst kan være lorem ipsum. Oppdater komponentens MD-fil med versjon, status, og eventuelle notater relatert til frontend. Sjekk at komponenten fungerer i alle skjermstørrelser (responsivt). Sjekk at både koden og komponenten er universelt utformet i henhold til kravene.  Branching i github Designsystemet benytter trunk-basert utvikling. Les mer om dette på altinnpedia\nPublisering Designsystemet versjoneres og publiseres slik at det enkelt kan benyttes av andre løsninger. Vi publiserer til både npmjs.com og github.com. Les mer om dette på altinnpedia\nCSS Designsystemets css-filer er delt inn etter prosjekt. Vi har en felles \u0026ldquo;scss-common\u0026rdquo;-mappe som inneholder felles gjenbrukbar css på tvers av prosjekter.\nHvert enkelt prosjekt kan selv velge hva de ønsker å inkludere av common-filer. De kan også velge hvilken Bootstrap-css de ønsker å inkludere. Til slutt inkluderes spesifikk css for det aktuelle prosjektet. Dette gjelder alle prosjekter i designsystemet.\nIngen av prosjektene eier \u0026ldquo;scss-common\u0026rdquo;-mappen, og dersom det gjøres endringer her, skal minst en representant fra hvert prosjekt tagges i pull requesten, og godkjenne endringen.\nDersom et prosjekt ønsker å gjøre endringer som ikke påvirker de andre prosjektene, gjøres dette i prosjektets egen scss-mappe. F.eks: Dersom AltinNett har behov for å for å endre \u0026ldquo;breadcrumb-scss\u0026rdquo;, men ikke vil risikere at det påvirker brreg, oppretter de en egen \u0026ldquo;breadcrumb.scss\u0026rdquo; under scss-altinnett og gjør den aktuelle endringen her.\nJavaScript Designsystemets JavaScript-filer er delt inn i \u0026ldquo;prototyping\u0026rdquo; og \u0026ldquo;production\u0026rdquo;.\n source/js/prototyping/ inneholder funksjonalitet som bare brukes i prototype-sammenheng source/js/production/ inneholder funksjonalitet som brukes i produksjon  Hvert prosjekt har en egen \u0026ldquo;init\u0026rdquo;-fil som starter javascript-filene prosjektet har behov for.\nFilen \u0026ldquo;config.json\u0026rdquo; spesifiserer hvilke javascript-filer hvert prosjekt skal hente inn. Hvert prosjekt har i config-filen en prototype-del og en produksjons-del. Config-filen leses av Gulp for å generere produksjonsfilene til dist-mappen, mens prototypefilene genereres til public-mappen.\nEksterne biblioteker Utviklingsoppsettet er orientert rundt et Node.js-miljø og derfor blir JavaScript-biblioteker (til bruk i både utvikling og produksjon) hentet inn som Node.js-moduler (definert i fila package.json).\nDistribuert kode JavaScript-kode for Altinns brukergrensesnitt leveres som produksjonsfiler:\n dist/js/infoportal.js sammenfatter internt produsert kode for de visninger og moduler som omfattes av infoportal dist/js/infoportal.vendor.js sammenfatter eksterne biblioteker for de visninger og moduler som omfattes av infoportal dist/js/portal.js sammenfatter internt produsert kode for de visninger og moduler som omfattes av portal dist/js/portal.vendor.js sammenfatter eksterne biblioteker for de visninger og moduler som omfattes av portal  Øvrig informasjon En del av koden forutsetter jQuery som avhengighet. jQuery bundles imidlertid aldri med distrubusjonsfiler, grunnet utbredelsen til bibilioteket, og må derfor refereres til utenom.\nGithub gh-pages Vi har en egen branch som heter \u0026ldquo;gh-pages\u0026rdquo;. Filene som ligger i denne branchen vises som en demo på altinn.github.io/DesignSystem/ .\nI denne branchen ligger følgende:\n Alle filer under \u0026ldquo;designsystem-styleguide\u0026rdquo; \u0026gt; \u0026ldquo;_site\u0026rdquo;. (Index-filen vil da sørge for at designsystemets utstillingsvindu er tilgjengelig på demoen over.) Innholdet fra PatternLabs \u0026ldquo;public\u0026rdquo;-mappe, slik at frontendmiljøet kan være synlig fra altinn.github.io/DesignSystem/PatternLab Et par andre mapper som er relevant for tidligere versjoner av prototypen  For å oppdatere altinn.github.io/DesignSystem/, kopier de nyeste filene fra \u0026ldquo;designsystem-styleguide\u0026rdquo; \u0026gt; \u0026ldquo;_site\u0026rdquo; og innholdet fra PatternLabs \u0026ldquo;public\u0026rdquo;-mappe. Kjør git checkout gh-pages i \u0026ldquo;Designsystem\u0026rdquo;-repositoriet, og lim inn de nye filene. Commit til gh-pages branchen.\nOppdatere Designsystemets utstillingsvindu Designsystemet har et eget \u0026ldquo;utstillingsvindu\u0026rdquo; for komponenter (Storefront). Koden for dette ligger på Git-repositoriet \u0026ldquo;designsystem-styleguide.\u0026rdquo; Dersom du skal oppdatere dette må du først klone Git-repositoriet og følge installasjonsveiledningen.\nFor å importere de siste komponentene fra Pattern Lab inn i utstillingsvinduet, gå tilbake til git-repositoriet \u0026ldquo;Designsystem\u0026rdquo; (Pattern Lab), og kjør gulp style-guide-export i kommandolinjen. Alle patterns vil da havne i \u0026ldquo;designsystem-styleguide\u0026rdquo; \u0026gt; \u0026ldquo;patterns\u0026rdquo;.\nFor å vise komponentene, må man lage en ny md-fil under ønsket kategori i \u0026ldquo;components\u0026rdquo;-mappen. F.eks under \u0026ldquo;skjemakomponenter\u0026rdquo;. Deretter må md-filen oppdateres med info og referere til korrekt fil i \u0026ldquo;patterns\u0026rdquo;-mappen.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-frontend/react/",
	"title": "React + Redux architecture",
	"tags": ["architecture"],
	"description": "High-level description of React + Redux architecture used in app frontend",
	"content": "The app frontend uses the React and Redux frameworks for presenting a UI to the end user, together with redux-saga to handle side effects. Components are based on Material UI components.\nThe diagram below show the architecture:\nStore A store holds the whole state tree of your application. The only way to change the state inside it is to dispatch an action on it.\nRead more.\nReducers Reducers specify how the application\u0026rsquo;s state changes in response to actions sent to the store. Remember that actions only describe what happened, but don\u0026rsquo;t describe how the application\u0026rsquo;s state changes.\nRead more.\nMiddleware redux-saga is a library that aims to make application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, easy to test, and better at handling failures.\nRead more.\nBest practices We try to follow some best-practices for React architecture:\n  Small, function-specific components\n UI components are \u0026ldquo;dumb\u0026rdquo;, this keeps the amount of logic to a minimum within the components.    Reusability\n UI components are shared across apps. Shared components between app frontend and receipt frontend . Use Material UI components as much as possible instead of building our own components from scratch.    DRY code\n Use shared resources across features to avoid duplication of code. Share resources/utils between app frontend and receipt frontend.    Comments only where necessary\n Function and component names should be self-explanatory. Avoid clutter and having to update comments when things change.    Component names in capital\n  Keep complex data-loading logic separate from rendering of components\n State is handled by redux as much as possible Data should be passed as props to UI components where possible    Use a feature-based code structure\n Code related to a feature should be grouped together, rather than grouping code by function (actions/reducers etc).    Follow linting rules\n Use a code analyzer to make sure linting rules are followed, for clean readable code    "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-frontend/configuration/",
	"title": "App Frontend configuration files",
	"tags": ["architecture"],
	"description": "Description of the different configuration files used by app frontend",
	"content": "The App Frontend requires some configuration files to work correctly. These files are loaded through APIs.\nLayout files The form layout files are used to render the UI for the form feature. They defines which layout elements should be rendered, in what order, and contains details about how they should be rendered (ex. text keys, data model, etc.)\nFormLayout.json The default layout file, at the root of the ui config folder. This is only used if the app only has a single layout to use.\nSettings.json A configuration file used when an app has multiple layouts within a given process task. This defines f.ex. the order the layouts should be rendered in.\nlayout-sets.json When an app has multiple sets of layout files (f.ex. multiple data tasks), this configuration file defines which layout files belong to which task.\nLanguage All (non app-specific) text resources that are used in the app frontend.\nJSON schema data model Contains information about the data model and is used for client-side validation.\nText resources App specific texts.\n"
},
{
	"uri": "https://docs.altinn.studio/design/designsystem/",
	"title": "Designsystem",
	"tags": [],
	"description": "Vi har erfart at det å lage konsistente webløsninger ikke er så lett. Derfor har vi laget et designsystem som skal gjøre samarbeidet mellom designere, utviklere og andre folk lettere, og få webløsningene våre til å fremstå mer helhetlige.",
	"content": "Designsystemet består av to deler:\n Et komponentbibliotek for front-end. Komponentbiblioteket er bygget på Patternlab, du finner dokumentasjon av dette på teknologisidene. Et Figma-bibliotek med UI-komponenter som kan brukes av designere for å prototype nye maler.  Designsystemet baserer seg på såkalt atomisk designmetodikk hvor man i stedet for å designe sider designer komponenter som kan settes sammen og gjenbrukes i ulike webløsninger.\nDette ønsker vi å oppnå  Helhetlige og konsistente brukeropplevelser ved å bruke gjenkjennbare og godt testede komponenter Forenkle arbeidsflyten for designere, utviklere, produkteiere og andre  Kom i gang Det er viktig å ha dedikerte designere i prosjektet som kjenner brukernes behov og kan lage gode offentlige digitale løsninger ved å gjenbruke komponentene på riktig måte.\nSom designer kan du bruke designsystemet til å finne interaksjonselementer til å bygge nye eller videreutvikle webløsninger med. De ulike komponentene er laget for at de skal passe sammen i en større helhet. Det er derfor viktig å følge retningslinjene for hvordan disse brukes for å oppnå et konsistent og gjenkjennbart uttrykk over tid. Designsystemet vil hjelpe oss til å gjøre designprosessen mer fokusert på å løse konkrete designutfordringer for brukerne våre, ved at vi slipper å designe komponentene på nytt hver gang vi skal lage noe.\nGjenbruke eksisterende eller lage ny visuell profil Skal løsningen knyttes opp mot en eksisterende merkevare vil du som designer benytte deg av samme visuelle profil som denne merkevaren. Siden designsystemet er et levende bibliotek av komponenter vil det over tid være behov for å justere og gjøre tilføyelser til den visuelle profilen.\nFor nye løsninger som skal bruke designsystemet anbefaler vi at så mye som mulig av egenskapene til de ulike komponentene arves. Det vil typisk være behov for å bruke en annen font, andre farger og gjøre små justeringer i styling. Grid og komponentenes responsive egenskaper er noe vi ser for oss kan gjenbrukes av alle. Hver merkevare får sitt eget “theme” i designsystemet.\nEffektiv design av gode brukeropplevelser Vi er opptatt av å forbedre måten vi designer produktene våre på og jobber med å organisere arbeidet med design og utvikling. Vi ønsker at alle prosjekter er med på å videreutvikle det felles biblioteket av komponenter med både design og kode. For designere vil dette i praksis si at Altinn som eiere av designsystemet ønsker å ta imot forslag til nye komponenter etter hvert som prosjektene ser behovet for det. Hvordan dette arbeidet skal organiseres jobber vi med.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/frontend-retningslinjer/",
	"title": "Frontend retningslinjer",
	"tags": [],
	"description": "For å få en felles forståelse av &#34;best practice&#34; for frontend-utvikling i Altinn har vi samlet noen regler for Javascript og CSS, samt utilities-klassene vi opererer med",
	"content": "CSS-regler  Skriv all CSS ved hjelp av SASS/SCSS Alle variabler skal inn i \u0026ldquo;variables.scss\u0026rdquo;. Prosjekter med eget theme kan overstyre variablene i sin egen variables-fil. Bruk kun klasser til stilsetting, ikke ID\u0026rsquo;er. Kun engelske klassenavn, id-navn og kommentarer  Prefikser For å kunne skille mellom klasser som kommer fra Bootstrap, Patternlab og klasser som er ment for å stilsette Altinns UI-komponenter, bruker vi prefikser som start på egendefinerte klasser.\n .a-\u0026hellip; Spesifiserer stilsetting for Altinns UI-komponenter .a-sg-\u0026hellip; Stilsetting lagt til for å utvide Pattern Lab\u0026rsquo;s design .a-js-\u0026hellip; For JavaScript og dens funksjoner .a-st-\u0026hellip; Spesifiserer stilsetting for presentasjon av designsystemet ( storefront) Dersom en løsning skal ha et eget theme, kan Altinns styling overstyres ved å neste css\u0026rsquo;en inni en klasse som blir lagt på body, f.eks .project-altinnett.  Dersom nye klasser introduseres for et prosjekt, bruk egen prefix, f.eks;\n .br- \u0026hellip; Spesifiserer stilsetting for Brønnøysundregistrenes UI-komponenter .an- \u0026hellip; Spesifiserer stilsetting for Altinnetts UI-komponenter  CSS Konvensjon For å sikre konsistens i CSS-koden, skiller vi modul, komponent og state med bindestrek. Hver del av navnet skrives i lowerCamelCase.\n.\u0026lt; moduleName \u0026gt; [ - \u0026lt; componentName \u0026gt; ][ - \u0026lt; state \u0026gt; ] {}\nEksempler\n  Modul (container/root) .searchResults {}\n  Komponen av en modul\n.searchResults-heading {}\n  State: (f.eks AJAX-loading)\n.searchResults-isLoading {}\n  Sass-lint med custom policies Der det er sammenfallende regler med linting av javascript er disse like. Dette gjelder i hovedsak innrykk som settes som 2xspace. Alle regler for linting av sass ligger i filen .sass-lint.yml. Her ligger det også lenker til dokumentasjonen for de spesifikke reglene. Om en regel er satt til 0 er den skrudd av, 1 vil gi en warning og 2 vil gi en feil.\nMan kan sette opp automatisk linting av scss i Visual Studio Code, installer extension «vscode-sass-lint»: https://marketplace.visualstudio.com/items?itemName=glen-84.sass-lint .\nFor å linte sass fra kommandolinjen kjør npm run sass eller ./node_modules/.bin/sass-lint –v -q fra roten av git-repoet. Om man bruker «npm run sass» vil kommandoen gi en feilmelding til slutt om man har noen feil eller warnings. Derfor kan det være ryddigere å bruke den andre kommandoen.\nFor å linte en spesifikk sass fil, bruk kommandoen ./node_modules/.bin/sass-lint –v –q source/css/scss/\u0026lt;mappenavn\u0026gt;/\u0026lt;filnavn\u0026gt;\nSortering av element properties er satt til å ta utgangspunktet i bootstrap sin PropertySortOrder https://github.com/twbs/bootstrap/blob/v4-dev/scss/.scss-lint.yml.\nJavaScript For linting av javascript bruker vi airbnb sine regler, med noen custom overrides som finnes i .eslintrc.js.\nMan vil ikke kunne committe til github dersom det er linting-feil i koden. Dette gjelder også for css-linting.\nKodekvalitet  HTML skal validere som HTML5 CSS skal validere med unntak av CSS3-attributter og IE-filtre. Klasse- og ID-navn skal ha meningsfulle navn som fungerer til gjenbruk andre steder. Bruk av !important skal begrenses i stilarket. Sjekk først om stilsettingen kan utføres ved omstrukturering av klasser/containere. Stilarket skal ikke inneholde duplisering og ingen ubrukte klasse- eller ID-selektorer (i den grad det kan kontrolleres). Semantisk korrekt oppbygging. Eks. Overskrifter (h1 \u0026gt; h2 osv), legends i fieldsets, caption på tabeller. Lister skal være være lister. Også oppramsinger av ting kan ofte markeres som lister.  Valideringsverktøy  Bootlint - Validerer Bootstrap prosjekter CSS Validator - Validerer CSS Total Validator - Validerer tilgjengelighet, rettskriving, og ødelagte lenker Easy Checks - Nyttige verktøy for UU Tanaguru Contrast Finder - Sjekker fargekontraster og foreslår gyldige alternativer Colour Contrast Analyser - Validerer fargekontraster etter WCAG2.0 krav (ikke prøvd)  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/css-utilities/",
	"title": "CSS Utilities",
	"tags": [],
	"description": "I utgangspunktet skal kun de fargene som er presentert her brukes. Hvis nye farger blir implementert skal dette gås opp med ansvarlig designer.",
	"content": "CSS-utilities Se Bootstraps sider for utilities. Vi har i tillegg noen egne utilities:\n  Fontweight: .a-fontLight .a-fontReg .a-fontMedium .a-fontBold\n  Overskrifter: .a-h1 .a-h2 .a-h3 .a-h4\n  Bakgrunn: .a-bgWhite .a-bgGreen .a-bgGreenLight .a-bgGreenLighter .a-bgBlue .a-bgBlueLight .a-bgBlueLighter .a-bgPurple .a-bgPurpleLight .a-bgYellow .a-bgYellowLight .a-bgRed .a-bgRedLight\n  Deaktivert bakgrunn: .a-disabled\n  Tekstfarger: .a-textWhite .a-textBlue\n  Stiplet linje i lister: .a-dotted .a-dotted-line-top\n  Lenker uten understrek: .a-noUnderline\n  Maks tre linjer tekst: .a-maxThreeLines2\n  Position: .a-p-relative .a-p-static \n  Display: a-displayBlock\n  NB: Denne listen er ikke fullstendig per 21.nov 2019.\r\rDeaktiverte elementer Deaktiverte elementer får en stiplet grå bakgrunn ved bruk av klassen .a-disabled\n.a-disabled\rSkygger Skygger aktiveres ved bruk av variabelen $shadow\nbox-shadow: 1px 1px 4px 0px rgba(137, 137, 137, 0.5);\n$shadow\rFargevariabler Fargene refereres til ved bruk av variabler som er definert i  variables.scss .\n$blue-darker: #022F51;\r$blue-dark: #0062BA; \r$blue: #1eaef7;\r$blue-light: #cff0ff;\r\r$green: #17c96b; \r$green-light: #d4f9e4;\r$red: #e23b53;\r$red-light: #f9cad3;\r\r$purple: #3f3161;\r$purple-light: #e0daf7;\r$yellow: #ffda06;\r$yellow-light: #fbf6bd;\r\r$black: #000; \r$grey: #6a6a6a; \r$grey-medium: #BCC7CC;  \r$grey-light: #efefef;  \r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-frontend/features/",
	"title": "App frontend features",
	"tags": ["architecture"],
	"description": "High-level description of app frontend features",
	"content": "The App Frontend SPA is separated in several features that is a collection of components and containers that support a given functional area for a App. Typical a feature is connected to a type of workflow step. Like form filling, signing, ++.\nSupport for new types of workflow steps will be added as they become available in the backend.\nInstantiate This feature is responsible for creating a specific instance of the app for the end user. This feature validates the selected party by checking authorization, and gives the user the option to select a new party (if available) if the current party is invalid. Once a user/party is validated, the backend API to create an instance is called, and the user is sent to the first process step defined for the app.\nForm This feature is responsible for the data process task type, which is typically used for form filling. This includes rendering the form UI designed in Altinn Studio, running any rules/dynamics, calling APIs to perform calculations, validations, save form data, submit/move process to next step.\nTo render the form UI, the form layout defined in Altinn Studio is used together with metadata about the data model. The form components are rendered based on the contents of the form layout.\nConfirm This feature is responsible for the confirmation process task type. This includes rendering a configurable confirmation view.\nFeedback This feature is responsible for the feedback process task type. This includes rendering a configurable feedback view.\nReceipt This feature is responsible to show the summary of the instance when an app is sent to end state of the process flow.\n"
},
{
	"uri": "https://docs.altinn.studio/design/figma/",
	"title": "Kom i gang med Figma",
	"tags": [],
	"description": "For å kunne jobbe effektivt med interaksjonsdesign og nye konsepter, har vi satt opp et design kit for Figma som inneholder alle komponentene i et såkalt &#34;Team-library&#34;. Dette er tilgjengelig for konsulenter og interne som jobber med å videreutvikle Altinn.",
	"content": "For å få tilgang til Altinns Figma-konto ta kontakt med Alise Kjelling. Tjenesteeiere i Altinn kan bruke Altinns åpne design kit for eksterne.\nVed hjelp av “Team Library” deler vi komponenter på tvers av alle filer og prosjekter i Altinns Figmakonto. Filmen over viser hvordan komponentene er delt inn i \u0026ldquo;Lister\u0026rdquo;, \u0026ldquo;Skjemakomponenter\u0026rdquo; og så videre.\nMasterkomponenter og instanser Dersom en master-komponent oppdateres vil de ulike filene som bruker komponenten få en melding om oppdateringen og spørsmål om å oppdatere til nyeste versjon.\nFilmen under viser eksempel på endring av en fargekomponent. Brukes fargen av en knapp, vil man i knappens fil få spørsmål om å oppdatere fargen. Herfra kan man igjen publisere den nye knappen, slik at disse endringene igjen når ut til alle filer som bruker knappen.\nHver masterkomponent eksisterer kun en gang. Alle instanser av komponenten lever sitt eget liv og endringer i disse vil ikke påvirke masterkomponenten. Man kan alltid resette en instans til å se ut som masterkomponenten igjen (ved å høyreklikke og velge “reset”).\nSett opp en ny mal i figma For å lage en ny mal må du først kopiere griden du ønsker å bruke (som du finner i “Introduksjon” \u0026gt; “Grid”). Gå deretter inn i prosjektet du skal jobbe med (f.eks “Maler-Altinn”). Velg filen XL eller XS, alt ettersom om du skal lage en ny desktopskisse eller mobilskisse. Lim inn griden (den kan justeres i høyden, men ikke i bredden). Hent til slutt inn komponentene du trenger fra “Team Library” og gjør eventuelle justeringer på dem.\nVariasjoner av komponenter En komponent kan inneholde flere ulike varianter av lag du kan skru på og av. Dersom du f.eks henter inn komponenten “Standard liste” og ser i lagene, vil du finne skjulte lag du kan aktivere ved å bruke øyesymbolet.\nVersjonskontroll På hver fil har man mulighet til å vise versjonshistorikk. Her kan man enkelt gå tilbake i historikken dersom en komponent er ødelagt.\nPrototyping Når sidemaler befinner seg i samme fil, er det mulig å lenke mellom dem. På denne måten kan man sette opp en enkel klikkbar prototype som viser hvor de ulike lenkene fører deg hen.\nEksempel på Altinns Figma-filer De navigerbare rammene under viser eksempler på filer vi har i komponentbiblioteket vårt. For å få tilgang til biblioteket, ta kontakt med Alise Kjelling.\n\r\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/design/logo/",
	"title": "Logo",
	"tags": [],
	"description": "I Altinn-profilen er det flere virkemidler som jobber sammen. Logoen er muligens det viktigste av disse virkemidlene, og fungerer ofte som en signatur på flatene man kommuniserer på.",
	"content": "\nNegativ logo Negativ variant av logoen kan brukes i enkelte tilfeller der bakgrunnen for mørk til å vise blå versjon.\n\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/font/",
	"title": "Font og tekststørrelser",
	"tags": [],
	"description": "All tekst på Altinn er satt med fonten ‘DIN’ i fire ulike varianter: Light, Regular, Medium og Bold. ",
	"content": "Overskrifter Overskriftsnivåer brukes for å strukturere teksten. Det er derfor viktig å ikke bruke H1, H2, H3, osv for styling av størrelse, men for strukturering. Er det sturkturmesig riktig å bruke en H2, men du den skal ha styling som H3 kan du bruke klassen a-h3. F.eks:\n\u0026lt;h2 class=\u0026quot;a-h3\u0026quot;\u0026gt;Overskrift\u0026lt;/h2\u0026gt;\rLes mer om riktig bruk av overskrifter på Difis nettsider.\nLine-height Line-height er satt til 1.5 (unitless).\nTekststørrelser Standard tekststørrelse er satt til 16px regular, mens brødtekst i artikler er satt til 18px regular. Tekststørrelsene på overskrifter og paragrafer varierer med skjermstørrelse.\nSidetittel\r36px (desktop)\n36px (laptop)\n28px (tablet)\n24px (mobile)\nSeksjonstittel\r28px (desktop)\n24px (laptop)\n22px (tablet)\n18px (mobile)\nUndertittel\r20px (desktop)\n20px (laptop)\n18px (tablet)\n16px (mobile)\n\rIntrotekst/ingress\n20px (desktop)\n20px (laptop)\n20px (tablet)\n18px (mobile)\n\rBrødtekst i artikler\n18px (desktop)\n18px (laptop)\n18px (tablet)\n16px (mobile)\n\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-frontend/structure/",
	"title": "App frontend code structure",
	"tags": ["architecture"],
	"description": "High-level overview of how the app frontend is structured",
	"content": "The code mainly uses a feature-based structure.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/grid-og-layout/",
	"title": "Grid og layout",
	"tags": [],
	"description": "Altinn’s responsive brukergrensesnitt er basert på en 12-kolonners grid layout, samt et sett definerte avstander som tar utgangspunkt i 12px som base.",
	"content": "Bootstrap grid Vi har brukt Bootstrap\u0026rsquo;s responsive gridsystem (fra aplha v4) for å bygge malene. Systemet baserer seg på flexbox. Les mer om grid-systemet hos Bootstrap\nHvordan grid-systemet skal brukes Dette står også i Bootstraps dokumentasjon, men kort oppsummert består grid-systemet av tre hovedkomponenter: \u0026ldquo;containers\u0026rdquo;, \u0026ldquo;rows\u0026rdquo;, og \u0026ldquo;columns\u0026rdquo;.\n \u0026ldquo;Containers\u0026rdquo; sentrerer innholdet på siden. .container for fast bredde eller .container-fluid for full bredde. \u0026ldquo;Rows\u0026rdquo; er horisontale grupper av kolonner som sikrer at kolonnene blir stilt opp riktig. \u0026ldquo;Columns\u0026rdquo; er barn av \u0026ldquo;rows\u0026rdquo; og det er i der inneholdet skal bli plassert.   En rad (row) må tilsammen utgjøre 12 kolonner. Man kan for eksempel kobinere 4+4+4=12, 3+3+3+3=12, osv.. Klassenavn på \u0026ldquo;Columns\u0026rdquo; indikerer antall kolonner man vil bruke ut av 12 mulige innengfor en \u0026ldquo;row\u0026rdquo;. Så hvis du vil ha tre like brede kolonner, vil du bruke klassen .col-sm-4. (4 + 4 + 4 = 12) Kolonnenes bredde blir satt i prosent, så de er alltid fluid og relative til deres forelder. Kolonnene har horisontal padding to for å lage avstand mellom hver individuelle kolonne. Det er fem grid-nivåer, en for hver responsive breakpoint: : xs, s, m, l, og xl.  Breakpoints $grid-breakpoints: (\r// Extra small screen / phone\rxs: 0,\r// Small screen / phone\rsm: 544px,\r// Medium screen / tablet\rmd: 768px,\r// Large screen / desktop\rlg: 992px,\r// Extra large screen / wide desktop\rxl: 1200px\r) !default;\rCSS3 Media queries @media blir brukt for å definere ulik stilsetting for ulike medietyper, skjermstørrelser og enheter. CSS-kode som skal være forskjellig på forskjellige skjermstørrelser lages for mobil først - deretter utvider vi for større skjermer. Eksempel:\n.a-navbar {\rwidth: 100%;\r@include media-breakpoint-up(md) {\rwidth: 300px;\r}\r}\rLes mer på Bootstraps nettsider\nAvstander // SPACE $spacer : 12px;\t// 12px $spacer/2;\t// 6px $spacer*1.5;\t// 18px $spacer*2;\t// 24px $spacer*3;\t// 36px $spacer*4;\t// 48px $spacer*5; // 60px $spacer*6;\t// 72px Gjenbrukbare klasser for avstander Klassene refereres til med {property}-{sides}-{size}\nF.eks \u0026ldquo;pr-1\u0026rdquo; vil sette padding right til 12px. \u0026ldquo;mt-2\u0026rdquo; vil sette margin top til 24px. Her kan man også bruke mediaquery-klasser, f.eks ved å sette \u0026ldquo;pl-md-3\u0026rdquo; så vil man få en padding left på 36 px for skjermer større enn md (768px).\nLes mer på Bootstraps nettsider\nVertikal midtstilling Når tekst skal sentreres innenfor en ramme, slik som for eksempel på en knapp, skal teksten sentreres basert på høyden til versalene i fonten (de store bokstavene). Slik figuren viser vil dermed avstanden fra toppen av k-en til toppen av knappen være større enn avstanden fra bunnen av p-en til bunnen av knappen.\nInteraktive elementer Av hensyn til ulike brukeres fingerstørrelse og førlighet skal alle interaktive elementer ha touch-target på minimum 48px. Det vil si at selv om en knapp kan se ut som den er 36px høy vil ethvert trykk innenfor 48px utløse knappen.\nDette løses ved å legge til et pseudo-element med en høyde på 48px og sentrere det, se kodeutsnittet under.\n\u0026amp;:after {\rcontent: \u0026quot;\u0026quot;;\rwidth: 100%;\rheight: 48px;\rposition: absolute;\rleft: 0;\rtop: -6px;\r}\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-frontend/rendering/",
	"title": "App frontend rendering and flow",
	"tags": ["architecture"],
	"description": "High-level overview of what happens when the app frontend is rendered",
	"content": "The sections below give a high-level overview of what happens when the app frontend is rendered. Data that is loaded into the app frontend is placed in the Redux store, where it can be accessed by the React components during rendering.\nLoading general App resources - common for all apps and process task types When an app is loaded initially, there is some data that is always loaded for the App, regardless of state or which process task the app is currently in. This includes the following data:\n application metadata - general metadata about the application text resources - json file containing all app-specific texts in a given language user profile - loaded from Altinn II current party - who the user is currently representing language - standard language text resources for the app. These are not app specific, but are included in all apps.  See the diagram below for an overview of what happens when the user loads the app for the first time, the flow goes up to the process specific part, which is detailed in the other sections.\nLoading App resources for a data type process task A data type process task has a data model that can be populated, f.ex. through the use of forms. All the resources that are needed to support displaying and/or updating data in the data model are loaded when an app is in a data type process task. This includes the following resources:\n formData - any data on the data model that has been previously saved. layout sets - an overview of the different layout sets available in the app. jsonSchema - a JSON schema representation of the data model for validation layouts - the actual layouts (within a given layout set) defining the form components to be rendered ruleHandler - a collection of rules that can be run client-side ruleConfiguration - the definitions of when any client-side rules should be triggered  See the diagram below for an overview of what happens when the user loads an app in a data process task, after the initial loading of general resources (and instantiation if needed) has completed.\nRendering a form in data process task "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/requirements/",
	"title": "Architecture Requirements",
	"tags": ["architecture"],
	"description": "Functional and non-functional requirements for the different solutions has been important to shape the architecture.",
	"content": "They are important input to deciding which cababilities required and they also is important input to the Architecture Principles and Architecture Patterns.\n\rFunctional Requirements\rFunctional requirements can be important to the architecture decisions.\n\r\rNon-Functional Requirements\rNon functional requirements contains requirements that typically is important for deciding the architecture.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/design/ikonbruk/",
	"title": "Ikonbruk",
	"tags": [],
	"description": "Altinns ikoner er spesialtegnet for å harmonere med Altinns profilfont DIN. Ikonene fremstår i to vekter: Regular og Bold.",
	"content": "Retningslinjer for ikonbruk:  Ikonene skal som hovedregel ikke stå alene. De er ikke nødvendigvis selvforklarende og brukes derfor som støtteelement til tekst. Som hovedregel settes ikonene i samme vekt som teksten den står til. Ikoner på deaktiverte elementer skal være grå. Ikoner skal brukes sparsomt og kun der de gir verdi. Ikoner brukes for å differensiere og fremheve interaktive elementer. Et ikon kan ikke brukes til å symbolisere flere ting Det skal ikke benyttes ikoner som ikke er en del av ikonbiblioteket. Utvikling av nye ikoner skal skje gjennom UX-ansvarlig i Altinn. Hvis du ikke finner et ikon som passer og ikke har anledning til å følge disse retningslinjene vil du antagelig klare deg fint uten  Opprette nye ikoner Når nye ikoner lages, skal de først opprettes i Figma-filen Komponenter/Ikoner. Deretter skal den nye svg-filen lastes opp til FortAwesome, slik at den kan bli brukt i designsystemets front-end kode. Kontakt UX-ansvarlig i Altinn for å få tilgang til å laste opp nye ikoner til fortAwesome.\n\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/ikonbruk/",
	"title": "Ikonbruk",
	"tags": [],
	"description": "Ikonene er satt sammen til en font ved hjelp av verktøyet &#34;FortAwesome&#34;.",
	"content": "Ikon-fonten oppdateres med nye ikoner ved å laste opp SVG-filer til FortAwesome. Kontakt UX-ansvarlig i Altinn for å få tilgang til å laste opp nye ikoner til fortAwesome.\nSett inn et ikon i HTML For å sette inn et ikon, bruk følgende kode:\n\u0026lt;i class=\u0026quot;ai ai-flag\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; Flagg\rBytt ut \u0026ldquo;flag\u0026rdquo; med navnet på ikonet du vil sette inn.\nNB: Dersom ikonet står alene uten tekst, legg følgende etter:\n\u0026lt;span class=\u0026quot;sr-only\u0026quot;\u0026gt;flag icon\u0026lt;/span\u0026gt;\rDette vil hjelpe brukere med skjermleser å oppfatte ikonets funksjon. Denne teksten er kun synlig for skjermlesere, ikke for vanlige brukere.\n Tilgjengelige ikoner \r\u0026#xf008;\r\rai-download\rf008\r\rLast ned svg\r\r\u0026#xf009;\r\rai-arrowrightup\rf009\r\rLast ned svg\r\r\u0026#xf017;\r\rai-money\rf017\r\rLast ned svg\r\r\u0026#xf019;\r\rai-skatteetaten\rf019\r\rLast ned svg\r\r\u0026#xf01a;\r\rai-aordningen\rf01a\r\rLast ned svg\r\r\u0026#xf01b;\r\rai-phone\rf01b\r\rLast ned svg\r\r\u0026#xf01f;\r\rai-sign\rf01f\r\rLast ned svg\r\r\u0026#xf020;\r\rai-write\rf020\r\rLast ned svg\r\r\u0026#xf021;\r\rai-read\rf021\r\rLast ned svg\r\r\u0026#xf023;\r\rai-archive\rf023\r\rLast ned svg\r\r\u0026#xf026;\r\rai-plus\rf026\r\rLast ned svg\r\r\u0026#xf027;\r\rai-corp\rf027\r\rLast ned svg\r\r\u0026#xf028;\r\rai-private\rf028\r\rLast ned svg\r\r\u0026#xf02a;\r\rai-deadline\rf02a\r\rLast ned svg\r\r\u0026#xf02b;\r\rai-tax\rf02b\r\rLast ned svg\r\r\u0026#xf02c;\r\rai-exit\rf02c\r\rLast ned svg\r\r\u0026#xf02d;\r\rai-search\rf02d\r\rLast ned svg\r\r\u0026#xf02e;\r\rai-back\rf02e\r\rLast ned svg\r\r\u0026#xf030;\r\rai-expand\rf030\r\rLast ned svg\r\r\u0026#xf031;\r\rai-undo\rf031\r\rLast ned svg\r\r\u0026#xf032;\r\rai-openmessage\rf032\r\rLast ned svg\r\r\u0026#xf033;\r\rai-closedmessage\rf033\r\rLast ned svg\r\r\u0026#xf034;\r\rai-help\rf034\r\rLast ned svg\r\r\u0026#xf035;\r\rai-edit\rf035\r\rLast ned svg\r\r\u0026#xf036;\r\rai-document\rf036\r\rLast ned svg\r\r\u0026#xf037;\r\rai-settings\rf037\r\rLast ned svg\r\r\u0026#xf039;\r\rai-server\rf039\r\rLast ned svg\r\r\u0026#xf03a;\r\rai-info\rf03a\r\rLast ned svg\r\r\u0026#xf03d;\r\rai-arrowright\rf03d\r\rLast ned svg\r\r\u0026#xf03e;\r\rai-keyhole\rf03e\r\rLast ned svg\r\r\u0026#xf03f;\r\rai-expand-circle\rf03f\r\rLast ned svg\r\r\u0026#xf041;\r\rai-upload\rf041\r\rLast ned svg\r\r\u0026#xf042;\r\rai-help-popicon\rf042\r\rLast ned svg\r\r\u0026#xf043;\r\rai-check\rf043\r\rLast ned svg\r\r\u0026#xf046;\r\rai-circle-plus\rf046\r\rLast ned svg\r\r\u0026#xf047;\r\rai-circle-minus\rf047\r\rLast ned svg\r\r\u0026#xf049;\r\rai-facebook\rf049\r\rLast ned svg\r\r\u0026#xf047;\r\rai-circle-minus\rf047\r\rLast ned svg\r\r\u0026#xf04a;\r\rai-twitter\rf04a\r\rLast ned svg\r\r\u0026#xf04b;\r\rai-linkedin\rf04b\r\rLast ned svg\r\r\u0026#xf04c;\r\rai-date\rf04c\r\rLast ned svg\r\r\u0026#xf04d;\r\rai-send\rf04d\r\rLast ned svg\r\r\u0026#xf04f;\r\rai-info-circle\rf04f\r\rLast ned svg\r\r\u0026#xf052;\r\rai-check-circle\rf052\r\rLast ned svg\r\r\u0026#xf053;\r\rai-attachment\rf053\r\rLast ned svg\r\r\u0026#xf054;\r\rai-forward\rf054\r\rLast ned svg\r\r\u0026#xf055;\r\rai-trash\rf055\r\rLast ned svg\r\r\u0026#xf056;\r\rai-circle-exclamation\rf056\r\rLast ned svg\r\r\u0026#xf057;\r\rai-family\rf057\r\rLast ned svg\r\r\u0026#xf058;\r\rai-more\rf058\r\rLast ned svg\r\r\u0026#xf059;\r\rai-archive-alt\rf059\r\rLast ned svg\r\r\u0026#xf05a;\r\rai-print\rf05a\r\rLast ned svg\r\r\u0026#xf05b;\r\rai-client\rf05b\r\rLast ned svg\r\r\u0026#xf07a;\r\rai-keyhole-circle\rf07a\r\rLast ned svg\r\r\u0026#xf07b;\r\rai-private-circle-big\rf07b\r\rLast ned svg\r\r\u0026#xf07f;\r\rai-corp-circle-big\rf07f\r\rLast ned svg\r\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/principles/",
	"title": "Architecture Principles",
	"tags": ["architecture"],
	"description": "The Architecture Principles are guidelines for the construction of the architecture in Altinn 3.",
	"content": "The following architecture principles has been defined for the solutions. The principles are document as suggested by TOGAF.\nThe architecture principles below is described like TOGAF recommends.\nFree and open-source software Principle\nThe components and solutions in Altinn 3 are Free and Open Source.\nRationale\nPossibility to share the platform as Open Source. The possibility to create an Open Source community around the platform.\nImplications\n Code developed is shared on GitHub. See License. We also have our backlog on GitHub. Can\u0026rsquo;t use closed source products in the platform Can\u0026rsquo;t use products with licensing limiting use and modifications Others can easily reuse, modify and improve our components and solutions  Web Standards Principle\nUse Web Standards.\nRationale\nCan use standard tools and developers does not need to have special skills to develop components in the platform or applications to run on the platform.\nImplications\n Formats and frameworks used need to follow standards We use JWT in authentication cookies  Build with modern and popular frameworks Principle\nWhen choosing between different technology with similar capabilites, select the most modern and popular framework.\nRationale\nThe project is open source and it is a big advantage to build the solution on open source technology that developers love to use. This gives better access to resources with the needed competency.\nImplications\n We build the frontend using React and ASP.NET Core, the 2 most loved web frameworks. We use .NET Core, the framework that developers love the most We use Linux and Docker containers in Kubernetes, the 3 most loved platforms. We use Visual Studio Code, the most loved development environment.  Favor standards over custom Principle\nWhenever we need to store information we favor standard formats for that information over creating a custom format.\nRationale\nStandard formats are documented and is some cases it exists 3. party tools to edit information.\nImplications\n We use BPMN 2.0 to define the process for applications We use XACML 3.0 to define authorization policies for applications We use JSON as general format.  Isolation Principle We should try isolate application and data own by one organization from others.\nRationale\nReduce risk for one organization affecting service for another organization.\nImplications\n Seperate Kubernetes Clusters for each organization Seperate data store for each organization  Design and build for Public Cloud Principle\nThe solutions should be deployed to a public cloud solution. The architecture need to support that.\nRationale\nUsing public cloud infrastructure from one of the big vendors gives cost savings, the team can be more agile and the solutions can take scale.\nImplications\n Additional security measures Need to build knowledge about cloud solutions  Limit cloud lock-in Principle\nThe architecture should try to avoid technology that locks the platform to a specific public cloud vendor. But not for all costs. In many cases it would still make sense to choose a managed service only available in a given public cloud.\nRationale\nThe goal with this principle is that it should be possible to move the solution to a different cloud provider without needing to build everything from scratch.\nImplications\n Docker and Kubernetes is used for containers and orhecstration of containers. We use document databases and BLOBS for storing data. Everything talks through APIs.  Build as microservices Principle\nThe platform is built as microservices. Related functionality is grouped in to seperate applications and deployed as containers. Apps created in Altinn Studio will be deployed as microservices/apps.\nRationale\nThe different components can be scaled differently, it can be deployed independently. Reduced deploy time. Different teams can be responsible for different microservices/apps.\nImplications\n Functionality in Altinn Platform is seperated in Authentication, Authorization, Profile, Storage, Pdf and Register components Applications created in Altinn Studio is deployed as microapps to Altinn Apps  Design for automation Principle\nThe component should be created in a way that they support automation in development, deployment and operations.\nRationale\nReduce the required effort to develop and operate the platform.\nImplications\n We use Continuous integration We use Continuous deployment We build Infrastructure as code We use Automatic scaling We monitor and do automatic recovery of components  Favor managed services Principle\nWe should use manages cloud services when possible.\nRationale\nReduce effort needed to host and scale the platform.\nImplications\n Use managed PostgreSQL in Azure for Gitea Use managed CosmosDB as document database Use Azure blob storage for storing data Use Azure Kubernets Services to manage the Kubernetes Clusters Use Azure Api Management as API-management platform  Security in depth Principle\nAll components should authenticate and authorize requests.\nRationale\nWe can\u0026rsquo;t trust other components.\nImplications\n Components in Altinn Platform authenticates and authorize end user even if the request comes throug a application that also require the same We use API management to control traffic between Altinn Apps and Altinn Platform.  Cross-platform Principle\nThe components in the platform should be cross platform and can run on Microsoft Windows, Linux and MacOs.\nRationale\nDevelopers should be able to create applications on any platform, and our platform should never be locked to a single operating system or processor-architecture.\nImplications\n We use .NET Core or Java to build components.  Container technology Principle\nApplications should be deployed as containers.\nRationale\nThe rationale to use containers is that we get a consistent runtime environment that can run anywhere. Isolate runtime environment. Consistency.\nImplications\n Deploy and run applications/components in docker containers.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/patterns/",
	"title": "Architecture Patterns",
	"tags": ["architecture"],
	"description": "The architecture defines some patterns that is reused accross the different solutions.",
	"content": "Cloud Native The solutions are designed and built to be \u0026ldquo;Cloud Native\u0026rdquo;, meaning it is built be scalable applications hosted in public cloud.\nThere is serveral Architecture Patterns that Cloud Native applications are built on.\nContainers, microservices and declarative APIs exemplify this approach.\nThese techniques enable loosely coupled components that are resilient, manageable, and observable.\nCombined with robust automation, they allow the devops team to make changes frequently.\nThe Cloud Native blueprint below show the important aspect of a Cloud Native solution.\nThe following listing describes the different Architecture Patterns selected for Altinn.\nMicroservice Pattern Overview The Microservice Pattern is one of the more defining patterns in the platform.\nIn the new Altinn Solutions this mean that Altinn Platform will be grouped in functional related components, that will run as separate applications in docker containers.\nExample components are authorization and storage.\nEach application created in Altinn Studio will be a isolated microservice application with API\u0026rsquo;s and front-end.\nBenefits  Strong Module Boundaries: Microservices reinforce modular structure, which is particularly important for larger teams. Independent Deployment: Simple services are easier to deploy, and since they are autonomous, are less likely to cause system failures when they go wrong. Technology Diversity: With microservices you can mix multiple languages, development frameworks and data-storage technologies.  Risk \u0026amp; Issues  Distribution: Distributed systems are harder to program, since remote calls are slow and are always at risk of failure. Eventual Consistency: Maintaining strong consistency is extremely difficult for a distributed system, which means everyone has to manage eventual consistency. Operational Complexity: You need a mature operations team to manage lots of services, which are being redeployed regularly.  Layered Pattern Overview Applications/Components are organized into horizontal layers, each layer performing a specific role within the application. Typical the layers will typical be Presentation, API, Business and dataacess where dataccess could be access to database or API calls to other components.\nBenefits  Testability. Dependency injection. Possible to mock lower layers.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/universell-utforming/",
	"title": "Universell utforming",
	"tags": [],
	"description": "God tilgjengelighet kan hjelpe mennesker med funksjonshemninger å oppfatte innholdet vårt på en meningsfull måte. Det er flere ting vi kan gjøre, men det første og viktigste er å skrive semantisk god HTML.",
	"content": "Forskrift om universell utforming av IKT-løsninger stiller krav om at nettsider må oppfylle 35 av 61 suksesskriterier i standarden Retningslinjer for tilgjengelig webinnhold (WCAG) 2.0. Sjekk ut minimumskravene på difi som er omfattet av forskriften.\nMål for universell utforming (UU)  Løsningen skal fungere 100% ved tab-navigering, med logisk og meningsfull fokusrekkefølge. Tab-indeks må vurderes. Det elementet som er i fokus skal få en egen stilsetting, slik at det er tydelig hvor man står. For å sørge for en god brukeropplevelse for blinde, skal sidemalene testes i skjermopplesere. Det er viktig at man er bevisst på om det blir brukt knapper eller linker, da skjermlesere kan få problemer med å tolke funksjonaliteten. alt- og title-attributter skal brukes til å gi tilleggsinformasjon til bilder og andre objekter. label-element skal ha et for-attributt som matcher skjemakontrollen det tilhører, med mindre label omslutter input-feltet. Ulike typer lenker skal brukes riktig (disse har ulikt design basert på om de står sammen med annen tekst, eller om de lenker til interne/eksterne sider) Alle sidemaler skal tåle tekststørrelsesendring på opptil 200% uten å brekke eller at tekst forsvinner. Alle klikkbare elementer skal være minimum 48px på korteste side. Elementer trenger ikke oppfylle dette visuelt, men kan få et usynlig touch-område rundt seg.  Dynamisk innhold er alltid litt vanskelig med tanke på UU, bruk aria-tags.\nTilpasse WCAG 2.0 sjekkliste for prosjekt (offisiell)\nWCAG-krav er retningslinjer, ikke krav. Dersom avvik skjer, bør det finnes en god begrunnelse for avviket.\nRutiner For å sikre best mulig kvalitet på løsningen, bruk følgende verktøy/steg:\n Sjekk Errors og Alerts i Wave Toolbar HTML skal validere (som HTML5). Test skjermleserfunksjonalitet (Overskrift-hopping, tabbing, lenker og vanlig lesing) med ChromeVox. Skru av CSS i nettleseren og sjekk at rekkefølge på komponenter er logisk. Kjør Accessibility Developer Tools Audits fane i dev tools.  Disse stegene er blitt tatt som standard design-review. I tillegg bør det testes på ekte brukere der det er mulig.\nAndre nyttige verktøy som kan tas i bruk dersom man trenger mer utdypende info er:\n Kjør Ainspector Sidebar i Firefox (denne deler opp evt feil inn i WCAG standards) NoCoffee simulator viser hvordan brukere med nedsatt syn opplever nettsiden ChromeLens (legges på i dev tools) kan brukes til å simulere nedsatt syn  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/",
	"title": "Architecture Capabilities",
	"tags": ["architecture"],
	"description": "Architecture Capabilities are the logical building blocks of the solutions. They have been grouped into Development &amp; Operations (DevOps) Capabilities and Runtime (Execution) Capabilities.",
	"content": "Functional capabilities are described in the functional description of the solutions.\nRuntime capabilities The runtime capabilities describe the architecture capabilities the different solutions provide during runtime operations.\nAn example could be authorization. The architecture provides the capability to authorize access to resources.\nSince Altinn 3 is a platform letting its users develop applications and deploy them, you will see that many capabilities that typical is DevOps capabilities in other projects, is part of the runtime capabilities. An example of this is the capability to build and deploy applications\nLearn more about Altinn 3 runtime capabilities.\nDevOps capabilities To develop and operate a large platform like Altinn 3 requires many different capabilities.\nSome capabilities are provided by application and tools and other is provided by processes performed by the DevOps team.\nAn example capability is to be able to configure the infrastructure.\nLearn more about Altinn 3 DevOps capabilities.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/nettleserstotte/",
	"title": "Nettleserstøtte",
	"tags": [],
	"description": "Altinn støtter de nettleserne og operativsystemene som er mest anvendt av våre brukere. Vi tester ikke utdaterte eller ikke-supporterte versjoner av nettlesere.",
	"content": "Altinn fungerer med de fleste vanlige operativsystemer og nettlesere. Ettersom ulike nettlesere tolker kildekode forskjellig, kan besøkende på altinn.no få ulike brukeropplevelser basert på hvilken nettleser de benytter.\nNettlesere vi tester  Chrome Edge Firefox Internet Explorer 11 Opera Safari  Javascript Nettleseren må ha støtte for javascript.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/",
	"title": "Runtime arhictecture capabilities",
	"tags": ["architecture"],
	"description": "The runtime (execution) capabilities desribes the provided capabilites by the architecture components at runtime.",
	"content": "The Runtime (exceution) Architecture supports applications at run-time. It is a unified collection of run-time technology services, capabilities, control structures, and supporting infrastructure upon which application software runs.\nThe below capability map shows the different runtime capabilities grouped by different areas.\nDownload as Visio\n\rApplication build \u0026amp; deploy capabilties\rApplication developers using Altinn Studio to create Applications have access to build \u0026amp; deploy capabilties\n\r\rApplication development capabilities\rApplication development capabilities are capabilites that is used for developing applications in Altinn Studio\n\r\rData management Capabilities\rData management capabilities range from handling data to defining data models for applications in Altinn Studio\n\r\rIntegration \u0026amp; Data Transport Capabilties\rThe most important capability for a platform like Altinn 3 is the integration capabilites.\n\r\rPresentation (User Interface) Capabilities\rPresentation Capabilities enable an application to manage the human-computer interface.\n\r\rProcessing \u0026amp; Execution Capabilities\rProcessing \u0026amp; Execution Capabilities includes everything from processing a defined business processes to load balancing and failover.\n\r\rSecurity Enforcement Capabilities\rSecurity Enforcement Capabilities are capabilities typical provided by common architecture components.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/",
	"title": "Application Components",
	"tags": ["architecture"],
	"description": "The Application Components is split in to solution-specific application components, application construction components and non-solution application components.",
	"content": "\rSolution-Specific (functional) Application Components\rSolution-Specific (Functional) Application Components describes the different applications and their functional components. It does not go in to detail about technology.\n\r\rApplication Construction Components\rApplication Construction Components refers to the required components and configurations needed to create the different applications in the different solutions.\n\r\rNon-Solution-Specific\rNon-Solution-Specific Application components refer to all components other than the core solution or solution-specific Application typical used for devops.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-frontend/",
	"title": "Changelog for app frontend",
	"tags": [],
	"description": "Overview of changes introduced into app frontend",
	"content": "\rv3\rOverview of changes introduced in v3 of app frontend\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/kalender/",
	"title": "Arrangementer",
	"tags": [],
	"description": "Arrangementene vi markedsfører i kalenderen skal være relevante for etater og kommuner som jobber med digitalisering. Dette kan være tjenesteeiere som allerede bruker Altinn og andre som ikke bruker Altinn ennå, men er interessert i å høre om muligheter.",
	"content": "Sekundær målgruppe vil være private aktører og andre i offentlig sektor som er interesserte i hva Altinn jobber med.\nNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå.\n\r\rBrukeroppgaver for arrangementer Generelt  Har Altinn arrangementer som er relevante for meg i digitaliseringsjobben? Har Altinn kurs for å lære verktøyene? Hva er siste nytt i prosjektene? Hvordan har andre brukt Altinn? Kan jeg møte folk fra Altinn på andre arrangementer? For eksempel digitaliseringskonferansen og andrea arenaer Er det møteplasser hvor jeg kan møte andre etater jeg bør være med på? Hvordan komme i kontakt med Altinn for å dele fra min organisasjon på Altinns arrangementer? Er det møter jeg og min etat bør være delta på for å kunne være med på videreutviklingen av Altinn?  Brukeroppgaver arrangementsiden  Hvor og når er det? Er det digitalt? Er det relevant for meg? Hva er programmet? Hvordan melder jeg meg på? Koster det penger?  Regler for innhold Dette er hva vi anbefaler som et minimum av informajon og rekkefølge på innholdet.\nBeskrivende tittel  Ikke interne prosjektnavn slik som for eksempel “Tjenester 3.0”. Dette kan evt. beskrives i teksten med forklaring til hva det er. Husk at folk som ikke kjenner Altinn skal forstå hva arrangementet er.  Lenke til sted  Hvis arrangementet har en fysisk lokasjon  Påmelding  Anbefalt tekst til påmeldingsknapp: “Meld meg på”. Hvis arrangementet ikke har påmelding bør det skrives til sist i teksten: “Arrangementet er gratis og du trenger ikke melde deg på”.  Ingress  Skriv kort og konsist Ingressen skal si noe om hva arrangementet er (gjerne litt selgende) og hvem det passer for.  Utfyllende tekst  Utdyp gjerne med et par setninger videre fra ingressen. Eventuell lenke til webinar/videomøte bør komme inn her  Agenda/program og praktisk info  Bruk bullets eller tidspunkt med bold  Eventuell bakgrunnsinfo  Hvis arrangementet er i regi av et prosjekt kan du krive kort om prosjektet til sist. Eventuelt lenke til andre sider på altinndigital hvor det står mer om temaet/prosjektet. For webinarer fra prosjektene vil det være relevant å lenke til sidene under “Hva jobber vi med”.  Etter arrangementet er ferdig  Arrangementet vil gjøres om til et tidligere arrangement når datoen for arrangementet er passert. Hvis det har blitt gjort opptak på video av arrangementet skal vi lenke til det. Legg inn lenke etter ingressen, slik at den er godt synlig. Lenketeksten kan for eksempel være “Se opptak fra kurset 24. Mars 2020\u0026quot;. Vis gjerne agenda med tidskoder for hvor i videoen de finner de ulike temaene.  "
},
{
	"uri": "https://docs.altinn.studio/design/",
	"title": "Slik designer vi",
	"tags": [],
	"description": "Her finner du våre designprinsipper, visuelle profil, merkevare og personlighet.",
	"content": "\rDesignprinsipper\rAltinn har som mål å gjøre det enklere for innbyggere og næringsliv å være i kontakt med det offentlige uavhengig av digital kompetanse.\n\r\rDesignsystem\rVi har erfart at det å lage konsistente webløsninger ikke er så lett. Derfor har vi laget et designsystem som skal gjøre samarbeidet mellom designere, utviklere og andre folk lettere, og få webløsningene våre til å fremstå mer helhetlige.\n\r\rKom i gang med Figma\rFor å kunne jobbe effektivt med interaksjonsdesign og nye konsepter, har vi satt opp et design kit for Figma som inneholder alle komponentene i et såkalt \u0026#34;Team-library\u0026#34;. Dette er tilgjengelig for konsulenter og interne som jobber med å videreutvikle Altinn.\n\r\rLogo\rI Altinn-profilen er det flere virkemidler som jobber sammen. Logoen er muligens det viktigste av disse virkemidlene, og fungerer ofte som en signatur på flatene man kommuniserer på.\n\r\rIkonbruk\rAltinns ikoner er spesialtegnet for å harmonere med Altinns profilfont DIN. Ikonene fremstår i to vekter: Regular og Bold.\n\r\rFarger\rI utgangspunktet skal kun de fargene som er presentert her brukes. Hvis nye farger blir implementert skal dette gås opp med ansvarlig designer.\n\r\rIllustrasjoner\rIllustrasjonene er tegnet av illustratør Sandra Blikås. De er spesialtilpasset grid, layout og fargepalett. Motivene viser hverdagssituasjoner som er tolkninger av sentrale tema i Altinns innhold.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/",
	"title": "Development &amp; Operations Capabilties",
	"tags": ["architecture", "devops"],
	"description": "The development &amp; operations architecture capabilities list the capabilities used to develop and operate the Altinn 3 platform including Altinn Studio, Altinn Apps, and Altinn Platform.",
	"content": "It covers the full spectrum of capabilities starting from development, going through a transition to operations, and ending with operations it-self.\nEach capability consists of people, the procedures they follow, and the software and hardware tools they use.\nThis documentation currently focuses on the capabilities that can be shared and reused by others.\nSee below for a capability map and the different DevOps capability areas.\n\nFull screen\n\rAnalysis \u0026amp; Design Capabilities\rAnalysis \u0026amp; Design Capabilities are the capabilities needed to analyze needs and design solutions and applications for the Altinn 3 platform.\n\r\rBuild \u0026amp; Test Capabilities\rInvolves everything from the capability to write and building code to the different types of testing of the code.\n\r\rEnvironments\rAn important DevOps capability is to have different environments to deploy the different solutions part of the Altinn 3 platform.\n\r\rPlatform Operations Management Capabilities\rPlatform Operations Management Capabilities describes the capabilities needed to operate the platform.\n\r\rProject Management Capabilities\rProject Management Capabilities covers the different capabilities to mange the project.\n\r\rQuality Management Capabilities\rQuality Management Capabilities covers the different capabilities to mange the project.\n\r\rSoftware Configuration \u0026amp; Release Management Capabilities\rSoftware Configuration \u0026amp; Release Management Capabilities process of tracking changes and handle new releases for a application\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/designer/frontend/",
	"title": "Application construction components - Designer Front-end",
	"tags": [],
	"description": "Description of the application construction components for Altinn Studio Designer Front-end",
	"content": "\rOverview of frontend applications\rHigh-level description of the different applications used in Desgner frontend\n\r\rDesigner frontend code strucure\rHigh-level overview of how the app frontend is structured\n\r\rThe Designer frontend consists of multiple React + Redux applications. It is split into two top-level applications:\n dashboard app-development  In additions, different functional areas will have their own applications, which are then imported into the relevant top-level application as a subapp (see https://redux.js.org/recipes/isolatingsubapps). Currently, we have the following subapps, that are used by the app-development top-level application:\n ux-editor schema-editor (data modeling)  Finally, there is a library of shared components and utils that are used accross all the applications in the Designer frontend.\nDuring build of the Designer application, the top-level applications are transpiled into javascript-files and CSS, which are copied into the Designer backends wwwroot folder and hosted there. The Designer backend is a web application with views, that reference the javascript files and CSS.\nNOTE: Parts of the front-end is currently built in .NET Core. This will gradually be ported over to React as we work with the different functional areas. The exception here is the static landing page, which will remain as a custom view in the .NET application.\n\rReact architecture The front-end of Altinn Studio designer is set up using the same React + Redux architecture as the App frontend, take a look here for more details.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/about/goals/",
	"title": "Goals",
	"tags": [],
	"description": "Main goals for Altinn 3.",
	"content": "This summarizes the high level goals for Altinn 3.\nUser friendly and responsive apps  User interface that is user friendly, effective and modern. Support for Responsive Design both for forms and the development tool. Built in accessability with support for WCAG 2 Good performance and low response time  Effective and self-serviced development  As a developer you can do everthing yourself (including deployment to production) whenever you want, without need for orders, training ++. Bottlenecks is eliminated. Effective and real testing, where unit test works like in a test environment and produiction. Support for creating automated tests of apps Rules and logic is defined once for all channels (portal/web service / rest), and are more robust than current plattform Built inn data modelling in web based tool (and support for XSD import from external tools like SERES, OR, etc. ) Not nescessery with Citrix for access to Altinn Studio  Simple for non-technical developers, flexible for technical developers  Non-technical app developers have access to needed functionality in browser You can reuse good and testet components/widgets It is easy to do call against API\u0026rsquo;s in other systems (retrieve data, run external logic) Techincally skilled deveopers can configure all aspect of the apps, as an example make a reusable widgets, stylesheets ++ Reuse of text and other resources on the desired level (platform, org, app), all languages supported Git (version control) are used for source control for the apps, both from browser and code editior.  Open Source, cross-platform  Altinn 3 will be based on open source Altinn 3 will be open source Altinn 3 can run on your own computer, own serwers on Windows, macOS or Linux Everything is based on open web-standardes and regulaer development knowledge.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/designer/frontend/applications/",
	"title": "Overview of frontend applications",
	"tags": [],
	"description": "High-level description of the different applications used in Desgner frontend",
	"content": "dashboard This is a top-level application, and is responsible for showing the app developers an overview of the apps they have available to view and/or edit, as well as functionality for creating a new app.\napp-development This is a top-level application, and handles all operations related to the development of a specific app. It contains functionality like administration and build/deploy of apps. It also uses the subapps ux-editor and schema-editor to provide functionality for creating/editing forms and data models. It does not have access to the store of any of the subapps.\nHeader and Navigation Material UI (applicatiopn bar and drawer) components are customized with altinn studio styles for the header and navigation in Altinn Studio. A third-party library, React Routing, is used together with Material UI to handle navigation. When the user clicks on a header/side navigation link, the route changes and the subapp specific to the route is rendered.\nHeader Menu (Application bar) Application bar component is the Altinn Studio\u0026rsquo;s header menu(navigation links at the top). React router library is used to handle those navigations. Header menu has different user interface on desktop and tablet. The display text and the links for navigation are built as object in a configuration file appbarconfig.\nThe configuration object in the file is iterated and the application bar is rendered. The styles specific to the component are placed inside the component file. In addition to the navigation menu, a breadcrumb is also rendered in tablet view.\nSide Menu (Drawer Menu) Drawer menu component is the Altinn Studio\u0026rsquo;s side menu which can be found on the left. It displays a list of Icons by default and on hover expands the menu and lists text by the side of the icon. It will render a list of navigation links based on the selected header menu.\nSide menu has different user interfaces in desktop and tablet. In tablet, only text is displayed and it slides in from left when \u0026ldquo;Menu\u0026rdquo; button is clicked.\nTwo different components are created to acheive this:\n LeftDrawerMenu TabletDrawerMenu  The styles specific to the side menu is added in a separate style file. Similar to the header menu, the side menu is also rendered by looping over the menu settings object which is available in a separate configuration file\nux-editor This application is responsible for the GUI allowing app developers to create/edit form views that will be shown in the data step in the app frontend.\nThe general concept is that there is one or more JSON files (layouts) where the components that are to be part of a form are specified. This includes the component types, texts, order, etc. These files are then parsed to display the form in the app frontend.\nThe ux-editor application provides a GUI to create/change these files. The ux-editor displays a simple representation of the components that app developers can then edit.\nschema-editor This application is currently under development.\r\rResponsible for the GUI allowing app developers to upload/create/edit data models for the application.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/developing/",
	"title": "Developing locally",
	"tags": ["development", "front-end"],
	"description": "Running the frontends locally for development",
	"content": "App frontend  Follow the instructions here to set up an app to run locally, up to step 5 (do not do step 6 yet.)   Make sure Altinn Studio is not running. If it is, run  docker-compose down\rfrom altinn-studio/src/studio before proceeding with the instructions linked above.\n In the app that will be running locally, edit the \u0026lt;path-to-app\u0026gt;/App/views/Home/Index.cshtml file, and replace https://altinncdn.no/toolkits/altinn-app-frontend/\u0026lt;version\u0026gt;/ with http://localhost:8080/.\n  Run the app (from \u0026lt;path-to-app\u0026gt;/App/):\n  dotnet run\ror run it directly from VS Code.\nInstall frontend dependencies if this has not been done (or dependencies have been updated) (from src/Altinn.Apps/AppFrontend/react):  npm ci\rnpm run install-deps\rRun the app frontend (from src/Altinn.Apps/AppFrontend/react):  cd altinn-app-frontend\rnpm start\rThis serves altinn-app-frontend at localhost:8080. The command npm start runs the application with hot reload, which rebuilds the application any time a new change is saved. The page should refresh automatically.\nStart the app in a browser by going to altinn3local.no!  Altinn Studio Designer   Follow the instructions in the Altinn Studio README to set up Altinn Studio locally.\n  Stop the altinn-designer container:\n  docker stop altinn-designer\rInstall/update dependencies (from src/studio/src/designer/backend):  npm ci\rnpm run gulp-install-deps # Installs front-end dependencies\rRun the designer application (from src/studio/src/designer/backend):  npm run gulp # only needed the first time\rnpm run gulp-develop #or npm run gulp-develop-dashboard\rThis will both start the backend application with dotnet run, and serve the front-end application at localhost:8080 with hot reload, which rebuilds the frontend application any time a new change is saved. You might have to refresh the page to see your changes.\nOpen Altinn Studio in a browser  Note that you can also run Altinn Studio Designer frontend in the same way as running app frontend. This would require changing the `src/studio/src/designer/backend/views/ServiceDevelopment/Index.cshtml` (for app-development) or `src/studio/src/designer/backend/views/Home/Index.cshtml` (for Dashboard) to point at `http://localhost:8080` in a similar way as described in the app frontend section.\rThe first time setting this up, you would have to follow steps 1-3 and then run the npm run gulp command from step 4, before navigating to the frontend folder src/studio/src/designer/frontend and then into the application you want to run (dashboard or app-development). From there, you can run npm run start and the frontend will be up and running.\nThe backend will have to be started separately, using the dotnet run command.\nSubsequent setups, you only have to do steps 1-2, and if dependencies have been updated then step 3 can be run (or these can be installed directly from the src/studio/src/designer/frontend folder).\nTo enable hot reload of the designer frontends, this is the method to use.\n\rPlatform Receipt Open a terminal in src/Altinn.Platform/Altinn.Platform.Receipt, and run:\nnpm install\rnpm run gulp #(only the first time)\rnpm run gulp-install-deps\rnpm run gulp-develop\rThis will build and run receipt back end, and build and copy the receipt frontend to the wwwroot folder. The application should now be available at localhost:5060/receipt/{instanceOwnerId}/{instanceId}. The script will also listen to changes in the receipt react app, rebuild and copy the new react app to the wwwroot folder. You might need to refresh to see the changes.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/routine/",
	"title": "Routines for development",
	"tags": ["development", "routines", "front-end"],
	"description": "Describes routines for developing frontend code for resources in the DevOps team",
	"content": "When selecting an issue from the backlog, assign yourself to the issue and set it to the Developing pipeline in the Altinn Tjenester 3.0 - DevOps Team board\nApp frontend  Create a new branch from master.  Naming convention for branches is bug/\u0026lt;issue number\u0026gt;-\u0026lt;short description\u0026gt; or feature/\u0026lt;issue number\u0026gt;-\u0026lt;short description\u0026gt;, depending on the issue type.   Code your changes and test them by running an app locally. Run unit tests  Update any failing tests Add new tests when needed   Make sure you update the version in altinn-app-frontend/package.json, following semantic versioning. Commit/push your changes and create a pull request.  Tag the issue in the description of the PR. Do not use \u0026ldquo;fix\u0026rdquo;/\u0026ldquo;fixes\u0026rdquo; issue, as this will close the issue when PR is merged. Move the issue to the Review/QA pipeline in board and tag/notify any reviewers.   Fix any review comments and/or issues that come up from running the automated pipelines.  All pipelines should run green. Test coverage should be \u0026gt;65%. No new code smells should be introduced.   Once approval of code is in and all pipelines run green, move the issue to Testing pipeline in board and unassign yourself. Fix any bugs that are uncovered by manual testing. Once testing is completed, tester will move issue to Done pipeline in board. When this is done, code can be merged into master.  Make sure the version in altinn-app-frontend/package.json is still updated to a new version (new code might have been merged in the mean time).   Update any relevant documentation. F.ex.  Changelog for app frontend. User documentation.   Check if there are any tasks in the issue that are incomplete. If all tasks are completed, the issue can be closed.  Studio frontend  Create a new branch from master. Naming convention for branches is bug/\u0026lt;issue number\u0026gt;-\u0026lt;short description\u0026gt; or feature/\u0026lt;issue number\u0026gt;-\u0026lt;short description\u0026gt;, depending on the issue type. Code your changes and test them by running Designer locally. Run unit tests  Update any failing tests Add new tests when needed   Commit/push your changes and create a pull request.  Tag the issue in the description of the PR. Do not use \u0026ldquo;fix\u0026rdquo;/\u0026ldquo;fixes\u0026rdquo; issue, as this will close the issue when PR is merged. Move the issue to the Review/QA pipeline in board and tag/notify any reviewers.   Fix any review comments and/or issues that come up from running the automated pipelines.  All pipelines should run green. Test coverage should be \u0026gt;65%. No new code smells should be introduced.   Once approval of code is in and all pipelines run green, merge the code to master, move the issue to Testing pipeline in board and unassign yourself. Fix any bugs that are uncovered by manual testing. Update any relevant documentation. F.ex.  User documentation.   Once testing is complete, check if there are any tasks in the issue that are incomplete. If all tasks are completed, the issue can be closed.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/new-component/",
	"title": "Creating components",
	"tags": ["development", "front-end"],
	"description": "Get started creating new form components for the apps",
	"content": "App structure When an instance is in a data step, the form defined in the JSON form layout file(s) for that task is rendered. Below you can see a simplified overview of the layers of components that are used to render the form, including some of the most important inputs.\nA detailed overview of the app frontend structure and architecture is available here.\nForm components All form components should be presentational components. This means that their only responsibility is to present something to the DOM, and as such they do not handle any direct interactions with the redux store. This is the responsibility of the parent component (in most cases GenericComponent), which will provide the form components with the data they need to render themselves, as well as any functions to call in the event of a change.\nAdding a new form component Form components are defined in src/components. Find a relevant folder in the structure, or create a new one if necessary, and implement the component there. All form components are react components, that are provided with props as input. A list of the props that are provided and can be used:\n   prop name type description source     id string unique component ID layout   text string text to be displayed layout (textResourceBindings.title value)   formData any form data to display (if relevant) parent component   language any object containing standard language resources parent component   shouldFocus boolean should component have focus parentComponent   handleDataChange (value: any) =\u0026gt; void function to call in the event of a data change parent component   handleFocusUpdate (value: any) =\u0026gt; void function to handle updating focus parent component   getTextResource (key: string) =\u0026gt; string function to get text resource value parent component   isValid boolean is component valid parent component    In addition, any properties defined on the component in the layout-file will be passed through to the component.\nTo make a new form component available for use, it needs to be added to the module that exports all the form components for use elsewhere in the application. This is the src/components/index.tsx-file. In this file, you will find lists of all the available form components exported. To make your component available, you need to do the following:\n Import your new component into the file Update the ComponentTypes enum with your new component type Add your a new object for your component to one of the component lists (or create a new list if relevant). The list object must have the following structure: {\rname: \u0026quot;\u0026lt;component name\u0026gt;\u0026quot;,\rTag: \u0026lt;Component tag\u0026gt;,\rType: \u0026lt;ComponenType enum for your component\u0026gt;m\rcustomProperties: {\r\u0026lt;any custom properties that the component should be initialized with\u0026gt;\r}\r}\r  Use the existing lists and components as an example for setting this up. Once this is done, the component is ready to use, and can be added to the layout file of an app and used.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/designer/frontend/structure/",
	"title": "Designer frontend code strucure",
	"tags": [],
	"description": "High-level overview of how the app frontend is structured",
	"content": "On this page:\n dashboard app-development ux-editor schema-editor shared  dashboard app-development ux-editor schema-editor shared "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/models/app-metadata/",
	"title": "App metadata",
	"tags": ["api"],
	"description": "The application metadata document is holds technical information about the app and the data type requirements.",
	"content": "Application The Application model is the main model for metadata for the application.\n   Name Description     id A gobally unique id for the application. The value has two parts separated by a \u0026lsquo;/\u0026rsquo; character. The first part is the short name of the application owner and the second part is the name of the app.   versionId The current version of the application. (Currently not in use.)   org The short name of the application owner.   title A collection of the application title in different languages.   validFrom The date and time from when the application can be used to create instances.   validTo The data and time for when the application will expire and can no longer be used to create new instances.   processId The id of the process model being used by the application. (Currently not in use.)   dataTypes A list of all the data types associated with the application. See DataType.   partyTypesAllowed A collection of flags that controls what type of instance owners new instances can be created for. See PartyTypesAllowed   autoDeleteOnProcessEnd A value indicating whether an instance will be automatically deleted once the process ends. This can be used by highly sensitiv applications to force an instance delete instead of sending the instance to the archive.   presentationFields A collection of presentation fields. See PresentationField. Currently not in use.   dataFields A collection of data fields. See DataField.   eFormidling The configuration for the eFormidling integration for the application. See eFormidlingContract.    DataType Data type represents the requirements for data elements. Data types representing a form will have model validation in addition to the requirements defined here.\n   Name Description     id The id of the data type. Unique for the app.   description A collection of data type descriptions in different languages.   allowedContentTypes A list of Content-Types allowed by the data type.   allowedContributers A list of allowed contributors. This can be used to restrict who it is that can work with the data type.   appLogic A complex object with information on how a data type is connected to a model. See ApplicationLogic.   taskId A reference to a task from the application process. The value indicate that the data type requirements must be fulfilled before the process can move on from the given step in the process.   maxSize The maximum allowed size of the data element.   maxCount The maximum number of data elements of this type.   minCount The minimum required number of elements of this type.   grouping The name of a group. This can be used to logically associate a data type to a group. E.g Photos or a text resource key.    ApplicationLogic ApplicationLogic holds information about how a data type representing a form is connected to a model.\n   Name Description     autoCreate A value indicating whether a data element will be automatically created once an instance moves into the process step indicated by taskId.   classRef The name of the C# class used to represent the form as a model in application logic.   schemaRef A reference to the original schema used to define the model.    PartyTypesAllowed PartyTypesAllowed contains a set of values indicating the type of owners an instance can have.\n   Name Description     bankruptcyEstate A value indicating that the instance owner can be a bancruptcy estate.   organisation A value indicating that the instance owner can be any organisation.   person A value indicating that the instance owner can be a person.   subUnit A value indicating that the instance owner can be a sub unit.    PresentationField This type is used by a feature still in development.\nPresentationField represents a form field extraction rule. Every time a form is being saved the presentation field rules will be applied and any values from the form will be stored directly on the instance. This can later be used to present instance specific data in places like the portal message box. The purpose is to make it easier to identify a specific instance in a list with many almost identical instances.\n   Name Description     id An id or key to identify the specific rule.   path A path to a specific field or property in the form model.   dataTypeId The name of the datatype. See DataType.    DataField DataField represents a form field extraction rule. Every time a form is being saved the data field rules will be applied and any values from the form will be stored directly on the instance. While PresentationField will have logic applied to it with regards to where and how it\u0026rsquo;s used, the use of data fields is entirely up to the application developer and the application owner. One usage scenario is to provide data fields which can be used for routing to the correct backend system.\n   Name Description     id An id or key to identify the specific rule.   path A path to a specific field or property in the form model.   dataTypeId The name of the datatype. See DataType.    eFormidlingContract This type is used by a feature still in development.\neFormidlingContract holds the configuration of the eFormidling integration for the application. An application configured to enable eFormidling integration in combination with the eFormidiling contract will send a shipment to eFormidling for every instance that is created.\n   Name Description     serviceId The service identifier of the process   process The process type to be set on the shipment   receiver The receiver of the eFormidling shipment.   sendAfterTaskId The id of the last task to be completed before the shipment is sent   type The document type of the shipment e.g. arkivmelding   typeVersion The version of the document type   standard The document standard e.g. urn:no:difi:arkivmelding:xsd::arkivmelding   securityLevel The security level to be set on the standard business document   dataTypes A list of the dataTypes to be included in the shipment. Data type for both form data and attachments should be listed to be included in the shipment    Complete example This is a complete app metadata document with data types.\n{ \u0026#34;id\u0026#34;: \u0026#34;ttd/bli-applikasjonseier\u0026#34;, \u0026#34;versionId\u0026#34;: null, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Bli applikasjonseier\u0026#34; }, \u0026#34;validFrom\u0026#34;: null, \u0026#34;validTo\u0026#34;: null, \u0026#34;processId\u0026#34;: null, \u0026#34;dataTypes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;Kursdomene_BliTjenesteeier_M_2020-05-25_5703_34553_SERES\u0026#34;, \u0026#34;description\u0026#34;: null, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/xml\u0026#34; ], \u0026#34;allowedContributers\u0026#34;: null, \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: true, \u0026#34;classRef\u0026#34;: \u0026#34;Altinn.App.Models.BliTjenesteeier_M\u0026#34;, \u0026#34;schemaRef\u0026#34;: null }, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxSize\u0026#34;: null, \u0026#34;maxCount\u0026#34;: 1, \u0026#34;minCount\u0026#34;: 1, \u0026#34;grouping\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;ref-data-as-pdf\u0026#34;, \u0026#34;description\u0026#34;: null, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/pdf\u0026#34; ], \u0026#34;allowedContributers\u0026#34;: null, \u0026#34;appLogic\u0026#34;: null, \u0026#34;taskId\u0026#34;: null, \u0026#34;maxSize\u0026#34;: null, \u0026#34;maxCount\u0026#34;: 0, \u0026#34;minCount\u0026#34;: 0, \u0026#34;grouping\u0026#34;: null } ], \u0026#34;partyTypesAllowed\u0026#34;: { \u0026#34;bankruptcyEstate\u0026#34;: true, \u0026#34;organisation\u0026#34;: true, \u0026#34;person\u0026#34;: true, \u0026#34;subUnit\u0026#34;: true }, \u0026#34;autoDeleteOnProcessEnd\u0026#34;: false, \u0026#34;created\u0026#34;: \u0026#34;2020-07-17T08:26:21.5707559Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;sandgrainone\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-07-17T08:26:21.5708691Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;sandgrainone\u0026#34; } "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-nuget/",
	"title": "Changelog for app nuget packages",
	"tags": [],
	"description": "Overview of changes introduced into app nuget packages",
	"content": "\rv4\rOverview of changes introduced in v4 of the Altinn.App.* packages.\n\r\rv3\rOverview of changes introduced in v3 of the Altinn.App.* packages.\n\r\rOlder\rOverview of changes introduced into app nuget packages up to (not including) major version 3.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/generell-systemdokumentasjon/",
	"title": "Arkitektur og infrastruktur",
	"tags": [],
	"description": "Beskrivelse av Altinns arkitekturområder, prinsipper og domenestruktur.",
	"content": "Foreløpig finner du informasjon om arkitektur og infrastruktur på altinnpedia (krever innlogging).\n\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/nyheter/",
	"title": "Nytt i Altinn",
	"tags": [],
	"description": "Nyhetene skal ha relevans for etater og kommuner som jobber med digitalisering. Både tjenesteeiere og de som ikke bruker Altinn ennå. Andre private aktøre som for eksempel journalister og konsulenthus vil også kunne ha nytte av informasjonen.",
	"content": "Brukeroppgaver for nytt i Altinn Overordnede brukeroppgaver  Har det kommet noe nytt som påvirker det jeg jobber med? Venter på ny funksjonalitet og lurer på når det kommer ut? Hva kommer i Altinn fremover? Hvor mye er Altinn brukt?  Brukeroppgaver nyhetssiden  Er dette relevant for meg og min etat? Påvirker dette løsningene våre? Må vi gjøre noe? Hvor kan jeg finne mer informasjon? Hvem kan jeg kontakte om dette?  Regler for innhold Lurt å tenke over  Hvem er nyheten for? Hvorfor er den relvant? Hvorfor er dette en nyhet? Hvordan kan jeg vinkle det til å være en nyhet? Ofte vil en nyhet være noe vi ønsker folk skal ta i bruk - må gi en “call to action” videre – vi må vite hva vi ønsker de skal gjøre etter å ha lest saken og hjelpe dem videre. For eksempel via lenke til mer informasjon eller til verktøyet osv. Hva ønsker jeg å fortelle om? Hva er viktig for brukeren å vite? Hold deg til ett budskap. Mye bedre med en kort sak, enn en lang  Overskrift Skal være beskrivende og brukeren skal kunne tolke om saken er relevant for dem fra denne. Viktig å unngå stammespråk!\nIngress Kom fort til saken og unngå kryptiske innledninger. Ikke forklar hvorfor vi gjør noe før vi forklarer hva vi gjør.\nInnhold  Utdyp kort og konsist hva nyheten går ut på. Folk som ikke kjenner Altinn skal også forstå hva dette er. Forklar om dette er noe som påvirker tjenestene til etatene og kommunene – er det noe de må gjøre? Skal dette være i et driftsvarsel (er brukerne nødt til å gjøre noe)? For eksempel ha et driftsvarsel og så lenke til nyhetssaken. Vis vei til hvem brukeren kan ta kontakt med hvis de ønsker mer informasjon – enten kontaktperson, felles mailadresse, Slack eller lenke til hvor de kan finne mer informasjon.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/",
	"title": "Slik utvikler vi",
	"tags": [],
	"description": "Finn ut mer om våre tekniske løsninger, arkitekturen bak, og hvordan vi utvikler.",
	"content": "Dersom du lurer på hvordan du kan ta i bruk Altinn i ditt digitaliseringsarbeid, finner du utviklingsguider for dette på altinndigital.no/utvikling.\nSlik utvikler vi Altinn Studio\r\r\rFinn ut hvordan Altinn Studio er bygget opp og hvordan du skal jobbe med utvikling i løsningen. \r\rDesignsystem for front-end kode\r\r\rAltinns designsystem, som er bygget med Pattern Lab, fungerer som et hjem for våre UI-komponenter og deres tilhørende front-end kode. \r\rAltinn på GitHub\r\nVi ønsker at det skal være enklest mulig for deg å bidra - flere av prosjektene våre ligger derfor åpent på GitHub. Vi setter stor pris på dine innspill! \r\r\rArkitektur og infrastruktur\rBeskrivelse av Altinns arkitekturområder, prinsipper og domenestruktur.\n\r\rAltinn 3\rSystem documentation for Altinn Studio, Altinn Apps and Altinn Platform.\n\r\rFront-end designsystem\rAltinns designsystem, som er bygget med Pattern Lab, fungerer som et hjem for våre UI-komponenter og deres tilhørende front-end kode. Designsystemet er i bruk av infoportal, portal og altinn digitalisering.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/utvikling/utviklingsguider/",
	"title": "Utviklingsguider",
	"tags": [],
	"description": "Hvert produkt har en utviklingsguide som skal sørge for at brukeren får en oversikt over hva som må til for å bruke dette produktet. Guiden skal skrives slik at det er lett å forstå hvilken rekkefølge du skal gjøre oppgavene i.",
	"content": "\rNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå.\n\r\rUtviklingsguider skal beskrive steg for steg hvordan utviklere går frem for å bruke de ulike produktene til Altinn. Det bør være én utviklingsguide per produkt. Undersider kan brukes til å vise eksempler eller presentere teknisk dokumentasjon og kodeeksempler som er relevant for produktet.\nBrukeroppgaver for utviklingsguider  Hvordan kommer vi i gang med utviklingen? Hvilke tilganger trenger vi? Hvordan tilrettelegger vi våre egne system? Hvordan tester vi grensesnittet? Hvordan produksjonssetter vi tjenesten?  Regler for innhold Tittel og intro  Bruk samme tittel som brukes på produktsidene. Intro - Hva er “produktet” og kort om prosessen for å utvikle det.  Trinnvis oppskrift Forsiden på utviklingsguiden skal inneholde en trinnvis oppskrift som tar for seg hele prosessen fra å skaffe tilganger til å produksjonssette tjenesten.\n Maks 10 trinn Maks 80 ord per trinn På trinnene som trenger mer forklaring, lenk til en underside som forklarer prosessen mer detaljert.  Undersider  Bruk undersider for å vise detaljerte beskrivelser med kodeeksempler og skjermbilder. Opplys eventuelt om teknisk dokumentasjon utvikleren bør kjenne til eller relevante lenker.  "
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/utvikling/api/",
	"title": "API",
	"tags": [],
	"description": "API-dokumetasjonen skal gi veiledning for hvordan utviklere bruker APIet - både det som er åpent for alle og det som er tilgjengelig kun for tjensteeiere.",
	"content": "\rNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå.\n\r\rBrukeroppgaver for API  Hvordan lage skjema i egne løsninger ved hjelp av Altinns API? Hvordan bruke data fra egne systemer og folkeregisteret i tjeneste på altinn.no? Hvordan sende en melding til sluttbruker i Altinn innboks og motta bekreftelse på at den er lest? Hvordan sende digital post/melding til innbygger eller virksomhet? Hvordan kan et regnskapssystem koble seg til Altinn slik at dataen kan gå direkte til de riktige etatene? Har det skjedd noen endringer i API-et som påvirker mine løsninger?  Huskeregler  Del APIene inn i hva de gjør Bruk kodeeksempler med tilhørende forklaring  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/app-api/metadata/",
	"title": "App metadata",
	"tags": ["api"],
	"description": "The app API to get metadata information for the app.",
	"content": "Overview The endpoints documented here are all for accessing metadata on the app itself and the data types that are allowed in an instance of the app. Additional endpoints provides access to text resources.\nGet app metadata Endpoint for downloading a copy of the application metadata document.\nGET {basePath}/api/v1/applicationmetadata Get Application texts Get text resources for the application for a specific language code. If the requested language isn\u0026rsquo;t available, norsk bokmål (nb) will be returned as default. The langaugeCode URL path element should follow the ISO 639-1 standard\nGET {basePath}/api/v1/texts/{languageCode} Note that the texts are cached in Platform Storage for 60 minutes before being retrieved from the database again.\nGet model JSON schema Download the JSON schema for a specific model. The id parameter must have the name of a JSON Schema in the app. This is usually a generated name based on values in the original XSD uploaded on the app. E.g: Kursdomene_BliTjenesteeier_M_2020-05-25_5703_34553_SERES\nGET {basePath}/api/jsonschema/{id} "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/app-api/",
	"title": "Application API",
	"tags": ["api"],
	"description": "The API exposed by a standard app hosted by Altinn",
	"content": "Overview The features documented here are the default features of any app created based on the app template in Altinn Studio. Application owners are free to make changes to this, but it is probably safe to say that removal of features will be extremly rare. Any app with changes to its API should have its own documentation published by the application owner.\nAll app API endpoints have the same URL base path that will vary based on application owner and application name.\nTest environment (TT02)\nhttps://{org}.apps.tt02.altinn.no/{org}/{appname} Production\nhttps://{org}.apps.altinn.no/{org}/{appname} The URL identifies the application owner specific hostname using the short name org, and the identificator of the app consisting of both the application owner short name and the name of the app; org/appname.\n\rApp metadata\rThe app API to get metadata information for the app.\n\r\rInstances\rThe app API to work with instances of an app\n\r\rData elements\rThe app API to work with the data elements associated with an instance\n\r\rStateless data elements\rThe app API to work with stateless date elements not associated with an instance\n\r\rProcess\rThe process API endpoints to lead an instance through the defined process.\n\r\rValidation\rThe validation API endpoints for instances and data elements.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/",
	"title": "Slik skriver vi",
	"tags": [],
	"description": "Tips og råd som er viktige for at flest mulig skal kunne finne og forstå teksten din.",
	"content": "Ressursene handler om ordene vi bruker, måten vi bruker dem på og hvordan vi ønsker å fremstå når vi skriver.\n\raltinn.no\rHer finner du skriveråd og regler for sidemaler som er viktige å følge når du skal skrive til innbyggere og næringslivsbrukere som målgruppe.\n\r\raltinndigital.no\rHer finner du skriveråd og regler for sidemaler som er viktige å følge når du skal skrive til etater og kommuner som målgruppe.\n\r\rUniversell utforming for innhold\rNår du lager innhold har du en rekke ansvarsområder når det kommer til universell utforming.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinn.no/m%C3%A5lform/",
	"title": "Målform",
	"tags": [],
	"description": "På altinn.no har vi innhold på både bokmål, nynorsk og engelsk. Vi forholder oss til mållova, som sier at begge målformer skal være representert med minst 25 prosent.",
	"content": "Informasjonsportal har mer variasjon i sidene som er tilgjengelig på hvilket språk, mens innlogget skal alt være oversatt.\nNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene enda\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/produkter/",
	"title": "Produkter",
	"tags": [],
	"description": "Produktsidene skal presentere og selge Altinns produkter til etater og kommuner som jobber med digitalisering. Både tjenesteeiere og de som ikke bruker Altinn ennå.",
	"content": "\rNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå.\n\r\rBrukeroppgaver for produktsider  Er produktet relevant for meg og min etat? Hva kan vi bruke produktet til hos oss? Hvilke gevinster vil produktet gi oss? Hvordan kommer vi i gang?  Regler for innhold Lurt å tenke over  Hvem er produktet relevant for? Vi ønsker at etater skal ta i bruk produktene våre. Hva ønsker vi at de skal gjøre etter å ha lest om produktet? Hvordan kommer de videre? Hva er viktig for brukeren å vite for å kunne beslutte å gå for produktet? Det mer tekniske kan bli forklart på utviklingssidene.  Overskrift og ingress  Overskrift skal være navnet på produktet. Ingressen skal forklare hva brukeren får ved å velge dette produktet.  Innhold  Utdyp hva produktet går ut på, hvem det passer for og hvilke fordeler det gir. Folk som ikke kjenner Altinn skal også forstå hva det er Det skal ligge en produktspesifikasjon i slutten av artikkelen med oversikt over tjenestene som benyttes i produktpakken. Bildekarusell skal vise hvordan produktet fungerer med enkle illustrasjoner. Lenke til minst et eksempel for en etat/kommune som har brukt produktet.  Veien videre  Må man være tjenesteeier i Altinn for å ta i bruk produktet? Det skal i så fall lenkes til Kom i gang med Altinn. Hvert produkt skal ha en egen trinnvis oppskrift på utviklingssidene. Det skal lenkes til denne siden.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/react/",
	"title": "React",
	"tags": ["development", "react"],
	"description": "Guidelines for using React in Altinn Studio",
	"content": "React React is a library for developing component based applications. It is done by having declared html as xml in javascript code, and that is again transpiled into vanilla javascript for the browser to render into a page.\nGet started by looking at the Getting started docs or trying the tutorial.\nImportant concepts The 2 most important concepts when working with React components are state and props.\nState is a collection of properties, controlled by the component, that say what the current state of the component is - this can be used to determine how the component should be rendered.\nProps is a collection of properties that are passed to the component as input. They can also be used to determine how the component should render.\nAny time the state or props of a component is updated, the component re-renders.\nClass components Class components are React components defined as classes. We used class components when we started building Altinn Studio, and most of the components for the Altinn Studio applications are still class components.\n// Example component import * as React from React export interface IExampleComponentProps { id: string; title: string; } export interface IExampleComponentState { value: string; } export class ExampleComponent extends React.Component\u0026lt;IExampleComponentProps, IExampleComponentState\u0026gt; { public onChange = (event: any) =\u0026gt; { setState(event.target.value); } public render( \u0026lt;div id={this.props.id}\u0026gt; \u0026lt;label htmlFor={`input-${this.props.id}`}\u0026gt;{this.props.title}\u0026lt;/label\u0026gt; \u0026lt;input id={`input-${this.props.id}`} value={this.state.value} onChange={this.onChange} /\u0026gt; \u0026lt;/div\u0026gt; ); } Read more about class components here.\nWhen writing a new component, or refactoring an existing class component, use hooks where possible.\nFunctional components - React hooks Hooks are new in React 16.8, and allow us to use state directly in functional components - components that are defined as functions. Using functional components with hooks results in cleaner, shorter code. Most of the components for the Altinn Apps applications are functional components using hooks.\n// Example component import * as React from React export interface IExampleComponentProps { id: string; title: string; } export function ExampleComponent(props: IExampleComponentProps) : JSX.Element { const [value, setValue] = React.useState\u0026lt;string\u0026gt;(\u0026#39;\u0026#39;); const onChange = (event: any) =\u0026gt; { setValue(event.target.value); } return( \u0026lt;div id={props.id}\u0026gt; \u0026lt;label htmlFor={`input-${props.id}`}\u0026gt;{props.title}\u0026lt;/label\u0026gt; \u0026lt;input id={`input-${props.id}`} value={value} onChange={onChange} /\u0026gt; \u0026lt;/div\u0026gt; ); } Read more about React hooks here\nLinks  Documentation for react components  "
},
{
	"uri": "https://docs.altinn.studio/innhold/altinn.no/skriver%C3%A5d/",
	"title": "Skriveråd",
	"tags": [],
	"description": "Tips og råd som er viktige for at flest mulig skal kunne finne og forstå teksten din. Ressursene handler om ordene vi bruker, måten vi bruker dem på og hvordan vi ønsker å fremstå når vi skriver.",
	"content": "\rNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene enda\n\r\rTall, nummer og tid Så fremt ikke annet er oppgitt her bruker vi retningslinjene for skrivemåte fra Språkrådet. Det er viktig at disse reglene følges konsekvent. Særlig aktuelt for Altinn er følgende regler:\nTid og dato Klokkeslett skal kun vises der det gir verdi for brukeren. I innboksen vil det for eksempel være naturlig å vise klokkeslett for meldinger mottatt samme dag men erstatte klokkeslett med dato for meldinger mottatt tidligere. Vi skriver som hovedregel dato med årstall når det er enkeltstående hendelser og kun dag og måned når det er snakk om gjentagende frister eller hendelser.\n Klokkeslett skriver vi kun med timer og minutter, aldri sekunder. Klokkeslett skrives slik: 13:45 Dato skal som hovedregel skrives slik: 05.06.2017 Unntaksvis kan datoer skrives slik i løpende tekst: 5. juni 2017  Organisasjonsnummer, bankkonto, personnummer og telefonnummer Riktig og konsekvent oppdeling av tallene hjelper brukeren å lese og skille forskjellige typer nummer. Ingen av nummerne skal skilles med punktum, kun mellomrom. I felt hvor brukeren skal skrive inn lengre nummer er det hjelpsomt å indikere antall siffer.\n Organisasjonsnummer deles opp i tre og tre: 123 456 789 Bankkonto deles opp i fire, to og fem: 1234 56 78901 Personnummer deles opp i seks og fem: 123456 78901 Mobilnummer deles opp i tre, to og tre: 987 65 432 Fasttelefon og faks deles opp i to og to: 98 76 54 32  "
},
{
	"uri": "https://docs.altinn.studio/innhold/altinn.no/",
	"title": "altinn.no",
	"tags": [],
	"description": "Her finner du skriveråd og regler for sidemaler som er viktige å følge når du skal skrive til innbyggere og næringslivsbrukere som målgruppe.",
	"content": "Retningslinjene skal følges når du skriver på altinn.no.\n\rMålform\rPå altinn.no har vi innhold på både bokmål, nynorsk og engelsk. Vi forholder oss til mållova, som sier at begge målformer skal være representert med minst 25 prosent.\n\r\rSkriveråd\rTips og råd som er viktige for at flest mulig skal kunne finne og forstå teksten din. Ressursene handler om ordene vi bruker, måten vi bruker dem på og hvordan vi ønsker å fremstå når vi skriver.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/",
	"title": "altinndigital.no",
	"tags": [],
	"description": "Her finner du skriveråd og regler for sidemaler som er viktige å følge når du skal skrive til etater og kommuner som målgruppe.",
	"content": "Retningslinjene skal følges når du skriver på altinndigital.no og på altinndigital.no/utvikling.\n\rSkriveråd\rSkriverådene skal sørge for at vi får et ensrettet språk i løsningene våre slik at innholdet blir lettere å forstå. Vi skal også gjøre bevisste valg på hvilken form innholdet presenteres i. Tekst, video, bilder og illustrasjoner skal velges ut fra formålet med innholdet.\n\r\rSidetyper\rInnholdet på altinndigital.no er prioritert etter de viktigste brukeroppgavene folk kommer på nettstedet for å få gjort. Her kan du se brukeroppgaver og regler for innhold for de ulike sidetypene.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/universell-utforming-for-innhold/",
	"title": "Universell utforming for innhold",
	"tags": [],
	"description": "Når du lager innhold har du en rekke ansvarsområder når det kommer til universell utforming.",
	"content": "På Difis nettsider kan du sortere UU-krav etter ansvarsområde innhold. Her får du en god oversikt på hva du må passe på når det kommer til tekst, bilder og video.\nHjelpemiddel For å oppdage feil i innholdstrukturen kan det være nyttig å benytte “Wave” som er et utvidelsesverktøy til chrome.\nLast ned Wave til Chrome, installer og ikonet vil dukke opp øverst til høyre i nettleseren.\nI eksempelet under ser vi hjelp av Wave at det uheldigvis er blitt lagt inn en tom overskrift i episerver som egentlig ikke skulle vært der. For å fjerne den igjen må vi markere den tomme linjen i epi, og fjerne “Mindre kapittel Heading” som style.\n"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/skriver%C3%A5d/",
	"title": "Skriveråd",
	"tags": [],
	"description": "Skriverådene skal sørge for at vi får et ensrettet språk i løsningene våre slik at innholdet blir lettere å forstå. Vi skal også gjøre bevisste valg på hvilken form innholdet presenteres i. Tekst, video, bilder og illustrasjoner skal velges ut fra formålet med innholdet.",
	"content": "\rNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå\n\r\rOverordnede prinsipper Altinns visjon er «Sikkert samspill for et enkelt og effektivt samfunn». For målgruppen til altinndigital.no er sikkerhet spesielt viktig – at de kan stole på at informasjon utvekslet via Altinn beholder konfidensialitet og integritet. Det er også viktig at verktøyene for å lage tjenester er enkel å ta i bruk og effektive å forvalte.\nVi har spinnet videre på visjonen og laget et sett med overordnede prinsipper for altinndigital.no og sub-merkevarene. Ha prinsippene i bakhodet når du jobber med innhold til målgruppen.\nVi ønsker å fremstå som:  Pålitelige: Vi er til å stole på og har sikkerhet i høysete Tydelige: Det er lett å forstå hvilken plass Altinn har i digitaliseringsarbeidet Åpne: Vi deler og legger til rette for fornuftig bruk av skattepengene Nyskapende: Vi fornyer oss hele tiden Inkluderende: Vi er ikke kun til for de store, men også for de små etatene og kommunene som ikke har store budsjetter.  Skriveprinsipper  Vi bruker et muntlig og lett språk Vi skriver direkte til brukeren (bruk «du») Vi er sympatiske og selger Altinn på en subtil måte Vi skal engasjere og overtale Vi skriver om tekniske termer til forståelig språk Vi unngår interne begreper Vi gir gode råd om digitalisering Vi forklarer alltid hva som er neste steg Vi skriver på norsk der det er mulig  Generelle anbefalinger Huskeregler:  Tenk over hva som er informasjon, instruksjon og funksjon – og skriv det i forskjellige tekster/avsnitt etc. Unngå innledende tekst om teksten slik som «her kan du lese om\u0026hellip;» - gå rett på sak! Skriv kort, klart og klikkbart Skriv tekster som kan skummes Start alle sider med en oppsummering/ingress som gir tilstrekkelig informasjon slik at brukeren kjapt kan vurdere om innholdet er relevant  Lengde på tekst:  overskrifter: maks. 8 ord setninger: 15-20 ord avsnitt: 40-80 ord dokument (side): 500 ord  Unngå:  lange ord lange setninger kryptiske eller lyriske overskrifter flere poenger i samme setning flere poenger i samme avsnitt VERSALER (store bokstaver)  Overskrifter:  Skal sortere fra de brukerne som innholdet ikke er interessant for Vær spesifikk om innholdet, men sørg samtidig for å bruke ord som alle kan forstå Mere fagspesifikke termer kan komme lenger ned i teksten  Unngå verbalsubstantiver: Verbalsubstantiver gjør teksten unødvendig tung å lese. Et verbalsubstantiv er et substantiv dannet av et verb, for eksempel at «å utrede» blir til «å foreta en utredning», der utredning er selve verbalsubstantivet. De fleste verbalsubstantiv slutter på «-ing» og «-else».\nEn tekst med mange verbalsubstantiver blir abstrakt fordi den fjerner seg fra de konkrete handlingene den egentlig beskriver. Teksten blir mer konkret når vi bruker verbene i stedet.\nEksempler\n Ved avtaleinngåelsen \u0026ndash;\u0026gt; Da avtalen ble inngått Ny henvendelse \u0026ndash;\u0026gt; Kontakt oss Innmelding av feil \u0026ndash;\u0026gt; Meld inn feil  Skriv rett frem: Formelt språk er ofte skrudd sammen slik at utsagnet (verbet) kommer sent i setningen. Det gjør at man må lese mange ord før man får verbet. Det krever mer av leseren som må huske hva som stod tidlig i setningen. Verbet bør stå så tidlig som mulig i setningen og bør stå så nært subjektet som mulig.\nEksempel:\nTjenesteeier har en del plikter som må oppfylles \u0026ndash;\u0026gt; Tjenesteiere må oppfylle en del plikter\nSkriv aktivt, ikke passivt: I lovspråk blir det ofte skrevet at noe skal gjøres og det er ikke ønskelig å si noe om hvem som skal gjøre det. I Altinn sine løsninger vil det gjerne være flere enn en person som skal gjøre noe, men vi kan skrive direkte til brukeren likevel.\nEksempel:\nForberedelser og planleggingsaktiviteter må gjennomføres før utviklingen av tjenesten(e) kan og bør starte \u0026ndash;\u0026gt; Gjør forberedelser og planlegg godt før du utvikler tjenesten.\nUnngå stammespråk: Alle fagspråk har sitt stammespråk og i Altinn har vi både juss, byråkrati og tekniske fag hvor hvert språk har sin uttrykksform. Vi må passe på, at vi ikke bruker for mye fagspråk i løsningene våre.\nHvilken form skal innholdet være i? Skal vi lage en artikkel, video eller kanskje bruke illustrasjoner? For å velge form er det viktig å ha tenkt over hva som er formålet med innholdet. Som regel vil svaret på hvilken form innholdet skal være i at du trenger flere virkemidler for å få frem budskapet. Start derfor alltid med hva budskapet skal være, og hvordan du ønsker brukerne skal handle.\nVideo Som hovedregel skal en video aldri stå alene, men være et supplement til informasjon i tekstformat. Fordelen med videoer er at det kan fungere godt til å forklare kompleks informasjon. Ulempen er at det tvinger brukerne til å se hele sekvensen, for først da å finne ut av om det er noe som er relevant for dem. Det krever mer tid fra brukeren enn å lese tekst. De fleste brukere scanner innholdet på nettsteder og terskelen for å se en video er høyere enn å lese tekst.\nFra et tilgjengelighetsperspektiv er ikke video alltid et godt format for folk med syns- eller hørselsutfordringer. Brukerne skal ha mulighet til å tilegne seg samme informasjon på en annen måte enn video.\nVideo kan være bra til å vise hvordan et produkt fungerer eller hvordan verktøyene våre oppleves.\nRetningslinjer for bruk av video:  Gjør videoen så kort og tydelig som mulig. Det anbefales ikke lengere introduksjoner til hva videoen handler om enn 5-10 sekunder. Brukerne faller av ved lange introduksjoner. Navnet eller tittelen på videoen skal være beskrivende og tydelig Beskriv hva som er temaet, hvem er med i videoen og lengden på videoen i en undertekst (kort og konsist) Beskrivende thumbnail/bilde (ikke nødvendigvis fra starten av videoen) Video kan ofte oppleves som «dead end» - tenk over hva du vil ha brukerne til å gjøre etter å ha sett videoen. Legg for eksempel til en «call to action» eller fortsett med å sende brukeren videre til annet relevant innhold etter de har sett videoen. Hvis vi skal lenke til videoinnhold et annet sted skal det indikeres i lenken at dette er en video. Brukere liker ikke å bli overrasket over videoinnhold når de ikke forventer det. Alle videoer skal ha undertekster for å følge regler for tilgjengelighet  Les mer om hvordan du gjør video brukervennlig på Nilsen Norman Group – video usability.\nBilder Bilder brukes på Altinn digitalisering der det gir en merverdi til det tekstlige innholdet. For eksempel bruker vi bilder på case-artikler med eksempel på hvordan andre har brukt Altinn. Bildene viser hvem brukerne av tjenesten typisk er – vanlige folk i en bildestil som er naturlig og troverdig. Bildestilen passer med den visuelle profilen til Altinn og nye bilder skal følge samme bildestil. Bildene er tatt av Knut Åserud.\nVi bruker bilder av våre digitale veiledere (serviceledere) i «kontaktboksen» på produktsidene. Dette gjør vi får å få brukerne til å følge seg trygge – vi viser at det finnes folk på baksiden av produktet Altinn som kan hjelpe deg med digitalisering.\nRetningslinjer for bruk av bilder:  Bilder skal kun brukes der de er informasjonsbærende, ikke som pynt Stockfotos er ikke lov – undersøkelser viser at brukere ignorerer stockfotos som ikke ser ekte ut Bilder brukes i hovedsak på case/eksempler Bilder skal tas av profesjonell fotograf og følge brief til bildestil  Illustrasjoner Illustrasjoner brukes på Altinn digitalisering der det gir en merverdi til det tekstlige innholdet. I hovedsak bruker vi illustrasjoner til å illustrere produktene våre – til å vise hva produktet er og hvordan produktet virker. Vi bruker også illustrasjon til å formidle samarbeid om tjenesteutvikling og verktøyet, Altinn Studio.\nRetningslinjer for bruk av illustrasjoner:  Illustrasjoner skal kun brukes der de er informasjonsbærende, ikke som pynt Illustrasjonene skal følge illustrasjonsstilen til altinn.no Tekniske illustrasjoner og modeller (på Altinn dokumentasjon) skal følge illustrasjonsstil som altinn.no/Altinn digitalisering Illustrasjoner skal på Altinn digitalisering i hovedsak brukes til å forklare produktene og verktøyene våre  "
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/",
	"title": "Sidetyper",
	"tags": [],
	"description": "Innholdet på altinndigital.no er prioritert etter de viktigste brukeroppgavene folk kommer på nettstedet for å få gjort. Her kan du se brukeroppgaver og regler for innhold for de ulike sidetypene.",
	"content": "\rArrangementer\rArrangementene vi markedsfører i kalenderen skal være relevante for etater og kommuner som jobber med digitalisering. Dette kan være tjenesteeiere som allerede bruker Altinn og andre som ikke bruker Altinn ennå, men er interessert i å høre om muligheter.\n\r\rNytt i Altinn\rNyhetene skal ha relevans for etater og kommuner som jobber med digitalisering. Både tjenesteeiere og de som ikke bruker Altinn ennå. Andre private aktøre som for eksempel journalister og konsulenthus vil også kunne ha nytte av informasjonen.\n\r\rProdukter\rProduktsidene skal presentere og selge Altinns produkter til etater og kommuner som jobber med digitalisering. Både tjenesteeiere og de som ikke bruker Altinn ennå.\n\r\rEksempler\rEksempler skal vise hvordan etater og kommuner har brukt Altinns produkter i sin digitalisering.\n\r\rUtvikling\rUtviklingssidene er en teknisk veiledning for utviklere som lager tjenester ved hjelp av Altinns verktøy og API-er.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/eksempler/",
	"title": "Eksempler",
	"tags": [],
	"description": "Eksempler skal vise hvordan etater og kommuner har brukt Altinns produkter i sin digitalisering.",
	"content": "\rNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå.\n\r\rBrukeroppgaver for eksempelsider  Hvordan har andre brukt dette produktet? Kan min etat gjøre noe tilsvarende? Hva er neste steg?  Regler for innhold Overskrift og ingress  Overskriften skal inkludere navn på etat eller kommune som har brukt produktet. Om mulig også en kort oppsummering av gevinsten de har hatt, f.eks: \u0026ldquo;Helsedirektoratet sparer millioner på heldigitalisering av søknader\u0026rdquo;. Ingressen skal forklare kort hva etaten har oppnådd med å bruke Altinns produkt.  Innhold  Start med en kort oppsummering av hva som var utfordringen og hva som ble løsningen. Bildekarusell med forklaring av hvordan produktet virker. Utdyp problemet, løsningen, hvordan prosessen fungerer og hvilke gevinster det har gitt.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/models/instance/",
	"title": "Instance",
	"tags": ["api"],
	"description": "An instance is a metadata container that is used to track the status and progress of one interaction between an app user and owner.",
	"content": "Instance The Instance model is the main model of an instance. An instance can be regarded as an envelope or folder where data is collected and exchanged between the application user and owner. The instance document is a way for Altinn and external parties to track the state of one specific data exchange.\nProperties    Name Description     id A gobally unique id for the instance. The value has two parts separated by a \u0026lsquo;/\u0026rsquo; character. The first part is the internal unique id of the instance owner and the second part is a generated UUID value.   instanceOwner A complex type identifying the owner of the instance. See InstanceOwner   appId The id for the app the instance is associated with. The value has two parts separated by a \u0026lsquo;/\u0026rsquo; character. The first part is the short name/identifier of the owner of the app and the second part is the app name.   org The short name of the app owner.   selfLinks A complex type containing a set of named URLs. See ResourceLinks   dueBefore This can be use by app owner to indicate a deadline for when the instance must be completed and submitted by a user that can represent the instance owner.   visibleAfter This can be used by app owner to have an instance become visible for app users at a given date and time. This way an instance can be created in advance and populated with data before being available to an application user.   process A complex type tracking the process state of the instance. See ProcessState   status A complex type with more state data. See InstanceStatus   completeConfirmations A list of complete confirmations. See CompleteConfirmation   data A list of data elements. This include all forms, attachments and other data types being collected. See DataElement   presentationTexts A dictionary with text values extracted from forms that are saved on the instance. Values are extracted based on PresentationField values stored in the application metadata document. Also see PresentationField   dataValues A dictionary with data values extracted from forms that are saved on the instance. Values are extracted based on configured data fields in the applicationmetadata document. Also see DataField   created The date and time when the instance was first initialized.   createdBy An idenfificator indicating who it was that created the instance.   lastChanged The date and time when the instance was last changed.   lastChangedBy An idenfificator indicating who it was that made the last change to the instance.    InstanceOwner The InstanceOwner model is a simple definition whose only porpose is to hold a universally known identification value of the instance owner.\nProperties    Name Description     partyId A value used internally by Altinn to uniquely identify an entity across Organisations, Persons and Self identified users.   personNumber If the instance owner is a person this field is populated with a person number from the National Population Register in Norway.   organisationNumber If the instance owner is an organisation this field is populated with an organisation number from the National Unit Register in Norway.    InstanceStatus The InstanceStatus model is used to hold key status related metadata about an instance. All information is also tracked through instance events, but this is an easily accessible summary of the last events.\nProperties    Name Description     archived The date and time for when an archived instance was archived.   softDeleted The date and time for when a deleted instance were moved to the recycle bin.   hardDeleted The date and time for when an instance became unrecoverable through any API. A few days later the instance and all its data will be physically deleted from storage and truly unrecoverable.   readStatus A field indicating whether an application user has opened the instance at any time. Used internally by the message box to indicate read status of elements.   substatus A property with human readable status information that will be displayed by the message box.    CompleteConfirmation The CompleteConfirmation model is a simple type for holding information about who and when a given stakeholder has told Altinn that the instance is no longer needed. They have obtained all the information they needed from the instance. The instance can be deleted permanently should an application user decide to to so. At the time of writing an instance can have only one stakeholder and that is the Application Owner.\nDataValues Data values are values either extracted from the instance data or other sources. The values are stored with the instance for easy access and can be used for example in routing logic on the receiving end.\nWhile data fields configured in the app metadata file will be extracted and automatically picked up by the application, there is also the option of adding values manually by using the UpdataDataValues method from the IInstance interface. You can mix and match data fields from configuration and by manually adding. It\u0026rsquo;s the UpdateDataValues method that is called under the hood in both cases. UpdateDataValues merges the incoming collection with what\u0026rsquo;s allready stored. However if yo specify the same id it will be overwritten by one or the other and you have no guaranties on which is stored.\nValues passed in to the UpdataDataValues can have any source and is not restricted to data stored in the application. It can be called from any place but it\u0026rsquo;s recomended to not call it more than strictly required. A good place is to override the RunProcessTaskEnd method from AppBase causing the method to be called when a task is completed.\nProperties    Name Description     stakeholderId The short name of an application owner.   confirmedOn The date and time for when the application owner confirmed that they consider the instance as no longer needed in Altinn.    ProcessState The process state model keeps track of the process of a specific instance.\nProperties    Name Description     started Date and time for when the process was initially started.   startEvent The name of the start event triggering the beginning of the process.   currentTask A complex model keeping track of current process step. See ProcessElementInfo   ended Date and time for when the process was finished.   endEvent The name of the end event that the process ended with.    ProcessElementInfo The process element info holds information about the current task in the process.\nProperties    Name Description     flow A step counter that increase every time the process moves forward.   started Date and time for when the instance entered the current step.   elementId The unique id of current process task.   name The name of the task. (Human readable.)   altinnTaskType The type of task.   validated A date and time for when the instance was validated as well as a value indicating if the task can be completed without additional changes and a new validation.    ResourceLinks The resource link model is should have a collection of URLs that can be used to obtain a copy of the instance document through different API. The propose is to make it easy to switch between API. Primarily when the original was obtain from the storage instance query API and you need to use the app API to perform changes on the instance.\nProperties    Name Description     apps Contains a URL for the endpoint to use to obtain a copy of the current instance document through the app API.   platform Contains a URL for the endpoint to use to obtain a copy of the current instance document through the Platform Storage API.    Complete example This example was created by instantiating an app running locally on a development machine using LocalTest. The process is at first step, Task_1, and it has a single data element which is the main form of the app.\n{ \u0026#34;id\u0026#34;: \u0026#34;1337/bd9edd59-b18c-4726-aa9e-6b150eade814\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;partyId\u0026#34;: \u0026#34;1337\u0026#34;, \u0026#34;personNumber\u0026#34;: \u0026#34;01039012345\u0026#34;, \u0026#34;organisationNumber\u0026#34;: null }, \u0026#34;appId\u0026#34;: \u0026#34;ttd/bli-applikasjonseier\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;selfLinks\u0026#34;: { \u0026#34;apps\u0026#34;: \u0026#34;https://altinn3local.no/ttd/bli-applikasjonseier/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;https://altinn3local.no/storage/api/v1/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814\u0026#34; }, \u0026#34;dueBefore\u0026#34;: null, \u0026#34;visibleAfter\u0026#34;: null, \u0026#34;process\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2020-11-18T15:56:41.5662973Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;flow\u0026#34;: 2, \u0026#34;started\u0026#34;: \u0026#34;2020-11-18T15:56:41.5664762Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Utfylling\u0026#34;, \u0026#34;altinnTaskType\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;ended\u0026#34;: null, \u0026#34;validated\u0026#34;: { \u0026#34;timestamp\u0026#34;: \u0026#34;2020-11-20T13:00:05.1800273+00:00\u0026#34;, \u0026#34;canCompleteTask\u0026#34;: true } }, \u0026#34;ended\u0026#34;: null, \u0026#34;endEvent\u0026#34;: null }, \u0026#34;status\u0026#34;: null, \u0026#34;completeConfirmations\u0026#34;: null, \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;instanceGuid\u0026#34;: \u0026#34;bd9edd59-b18c-4726-aa9e-6b150eade814\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;Kursdomene_BliTjenesteeier_M_2020-05-25_5703_34553_SERES\u0026#34;, \u0026#34;filename\u0026#34;: null, \u0026#34;contentType\u0026#34;: \u0026#34;application/xml\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;ttd/bli-applikasjonseier/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;selfLinks\u0026#34;: { \u0026#34;apps\u0026#34;: \u0026#34;https://altinn3local.no/ttd/bli-applikasjonseier/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;https://altinn3local.no/storage/api/v1/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34; }, \u0026#34;size\u0026#34;: 401, \u0026#34;locked\u0026#34;: false, \u0026#34;refs\u0026#34;: [], \u0026#34;created\u0026#34;: \u0026#34;2020-11-18T15:56:43.1089008Z\u0026#34;, \u0026#34;createdBy\u0026#34;: null, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-11-18T15:56:43.1089008Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: null } ], \u0026#34;created\u0026#34;: \u0026#34;2020-11-18T15:56:42.1972942Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;1337\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-11-18T15:56:42.1972942Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;1337\u0026#34; } "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/",
	"title": "Platform API",
	"tags": ["api"],
	"description": "The API exposed by the Altinn Platform.",
	"content": "Overview Description\u0026hellip;\n\rEvents\rThe Platform API to work with events\n\r\rInstances\rThe Platform API to work with instances\n\r\rInstance events\rThe Platform API for working with instance events\n\r\rSwagger\rOpen API specifications for the Altinn 3 Platform API.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/redux/",
	"title": "Redux",
	"tags": ["development", "front-end", "react"],
	"description": "Guidelines for using Redux in Altinn Studio",
	"content": "Redux is used to manage the states of the applications. The components update the states in the Redux store, instead of keeping state only within the component. This allows components to easily react to state changes from other components.\nRedux Toolkit As of 2021, we have started using Redux Toolkit rather than the traditional Redux setup. This allows us to get rid of a lot of boilerplate code. Read more about Redux Toolkit here.\nIn practice, this affects the setup of actions and reducers. We currently use Redux Toolkit in Altinn Studio, and plan to update the App frontend as well. Redux Toolkit also works well in parallel with the more traditional setup. In App frontend, any new reducers should be set up as slices where possible, using Redux Toolit. New actions can be set up using the createAction method, rather than the existing boilerplate setup.\ncreateAction React more about creating actions here. Actions can also be created automatically within slices. The createAction command is useful for actions that are are not necessarily handled by the reducer.\ncreateSlice Read more about slices here. Slices combine the creation of actions and reducers into one command, thereby reducing the amount of code, as well as making the setup much more readable.\nDispatching actions In the traditional setup, we use an action dispatcher. For App frontend, it is possible to combine f.ex. createAction with existing action dispatchers. Where possible, however, actions should be dispatched using the dispatch function, from the component itself. For class components, this function is provided as a prop from mapStateToProps. For functional components using hooks, we can use const dispatch = useDispatch() where the useDispatch function comes from the react-redux package.\nExamples For examples of Redux Toolkit setup in the code, look at the Studio code, where all actions/reducers/dispatching has been updated to use Redux Toolkit.\nBasic concepts Below is a short descriptions of some of the basic Redux concepts that we use. Note that these are described using the traditional Redux setup and not Redux Toolkit, but the concepts are the same in both cases.\nStore This is where the overall states are stored. Each state is stored here as an object.\nActions Actions are the events that are triggered when a change is made. An action contains the action type, and any metadata needed to complete the action. For example:\nexport interface IUpdateFormData extends Action { field: string; data: any; componentId: string; } export function updateFormData(field: string, data: any, componentId: string): IUpdateFormData { return { type: actionTypes.UPDATE_FORM_DATA, field, data, componentId, }; } In this example, a change in form data can trigger the updateFormData action, which contains an object with the action type, as well as the data/metadata.\nSagas Redux saga is the middleware used to process information before the store is updated (i.e. before the reducer does its work).\nAn example is asyncronous calls to backend APIs to get data, or submit data.\nEach saga defines methods that complete different tasks, connected to actions. These methods are called via listeners that listen to the actions that are being dispatched. There are different sagas for all the different functional areas.\n/** * Define the saga for the UPDATE_FORM_DATA event */ function* updateFormDataSaga(action: ActionType) { try { // fetch some data  const relevantData = yield selectRelevantStateObjects(...); ... // process the data  const processedData = doRelevantLogic(relevantData); ... // trigger a new action to update the store  yield call(updateFormDataSagaFulfilled, processedData, ... ); } catch (err) { yield call(updateFormDataSagaRejected, err); } } /** * Define a listener for the UPDATE_FORM_DATA event */ export function* watchUpdateFormDataSaga(): SagaIterator { yield takeLatest(FormFillerActionTypes.UPDATE_FORM_DATA, updateFormDataSaga); } Reducers Redux reducers are used to update the different states in the store. There is one reduer per state. The reducers listen to the actions that are dispatched when changes are made, and update the state accordingly.\nExample:\nconst initialState: IFormDataState = { formData: {}, error: null, }; const FormDataReducer: Reducer\u0026lt;IFormDataState\u0026gt; = ( state: IFormDataState = initialState, action?: Action, ): IFormDataState =\u0026gt; { if (!action) { return state; } switch (action.type) { case actionTypes.UPDATE_FORM_DATA_FULFILLED: { const { field, data } = action as IUpdateFormDataFulfilled; return Immutable\u0026lt;IFormDataState\u0026gt;(state, { formData: { $setField: { field, data, }, }, }); } case actionTypes.UPDATE_FORM_DATA_REJECTED: { const { error } = action as IUpdateFormDataRejected; return Immutable\u0026lt;IFormDataState\u0026gt;(state, { error: { $set: error, }, }); } default: { return state; } } }; export default FormDataReducer; "
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/utvikling/vekt%C3%B8y/",
	"title": "Verktøy",
	"tags": [],
	"description": "Verktøy inkluderer brukerveiledning for TUL, SERES og Altinn Studio",
	"content": "\rNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå.\n\r\rBrukeroppgaver for verktøy  Hvilke verktøy er relevante for meg, hva bør jeg velge? Hvordan utvikler jeg tjenester i Altinn ved bruk av TUL og SERES? Hva er Altinn Studio og hvordan bruker jeg det?  Innhold  Sidene skal forklare hvordan du utvikler tjenester/apper i Altinn Forklar hvordan brukeren kommer i gang med verktøyet Bruk trinnvise oppskrifter Bruk skjermbilder med tilhørende forklaringer  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/debug/",
	"title": "Debug",
	"tags": ["development", "debug"],
	"description": "Debug documentation for altinn.studio frontend",
	"content": "Debugging Google Chrome has many debugging tools, but most used in altinn.studio is breakpoints in the react-code.\nThis allows for code to run, and pause at the desired codeline, so the developer can then inspect different values that is present when the desired code is ran.\nDebugging tools  Google Chrome React Devtools Google Chrome Redux Devtools  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/app-api/instances/",
	"title": "Instances",
	"tags": ["api"],
	"description": "The app API to work with instances of an app",
	"content": "Overview An instance can be regarded as an envelope or folder where data is collected and exchanged between the application user and owner. The instance document is a way for Altinn and external parties to track the state of one specific data exchange. How long an instance lives and how many interactions there are between the application owner and user will vary from one app to another. Advanced apps will have their own documentation.\nbasePath\n{org}/{appname}/instances Get instance Endpoint for downloading the instance metadata document for a specific instance. The app API does not have an endpoint for listing instances. The Storage API in the Platform has a query endpoint that can be used for this purpose.\nUse this endpoint for instances that are active, and the owner party id and instance guid for the instance are known. External systems that work with an instance over multiple sessions might want to keep these values (or full URL) stored on their end to limit the need to query this information multiple times.\nGET {basePath}/{instanceOwnerPartyId}/{instanceGuid} Create instance Altinn assigns a unique identifier to all users that wish to report data. We call this id instanceOwner.partyId. If you do not know this, you should provide the official identity number, e.g national identification number for persons or organisation number for organisations, and in some case user name. This should be provided as part of the payload to the creation request. Altinn will look up this identifier and replace it with the instanceOwner.partyId. The official identity number will be stored in the instance metadata.\nData elements can be provided as part of the creation request, but can also be uploaded at a later time.\nThe client specifies the instance owner and may set a number of the metadata fields of the instance by attaching the following form:\n{ \u0026#34;appId\u0026#34; : \u0026#34;org/app\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;personNumber\u0026#34;: \u0026#34;12247918309\u0026#34;, \u0026#34;organisationNumber\u0026#34;: null }, \u0026#34;dueBefore\u0026#34;: \u0026#34;2019-06-01T12:00:00Z\u0026#34;, \u0026#34;visibleAfter\u0026#34;: \u0026#34;2019-05-20T00:00:00Z\u0026#34; } Notice that all dates must be expressed in Utc (Zulu) time zone and represented according to ISO 8601!\nData elements (files) can be attached to the initial request as a multipart/form-data or as attachments. The name of the parts must correspond to element types defined in the application metadata.\nPOST {basePath} A multipart/formdata should contain the instance json document and the data element files of the instance. The first part should be instance which contains the json template to create an instance from.\nThe subsequent parts must have a name that correspond to the element types defined in application metadata. They may have a filename. Hence the model1 and certificate names correspond to data types defined in the application metadata. If additional data elements are required they must be defined in the application metadata.\nContent-Type: multipart/form-data; boundary=\u0026#34;abcdefg\u0026#34; --abcdefg Content-Type: application/json; charset=utf-8 Content-Disposition: form-data; name=\u0026#34;instance\u0026#34; { ... } --abcdefg Content-Type: application/xml Content-Disposition: form-data; name=\u0026#34;model1\u0026#34; \u0026lt;xml\u0026gt; ... \u0026lt;/xml\u0026gt; --abcdefg Content-Type: application/pdf Content-Disposition: form-data; name=\u0026#34;certificate\u0026#34;; filename=certificate.pdf %PDF-1.4 %Óëéá 1 0 obj ... --abcdefg-- This call will return the instance metadata document that was created.\nUpdate sub status The instance sub status is used to give an end user further details about the state of their instance. Currently, only application owner is allowed to update substatus for an instance. Include the new substatus in the body of the requests as a json.\nPUT {basePath}/{instanceOwnerPartyId}/{instanceGuid}/substatus Request body\n{ \u0026#34;label\u0026#34;: \u0026#34;some.label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Beskrivelse i klarteskst\u0026#34; } The values can be referencing text resource names from the language files or be regular text.\nComplete instance Endpoint used by application owner to mark an instance as completed. Technically this only means that the instance is no longer needed by the application owner.\nAltinn will permanently delete an instance and all the data, if both application owner and a user with the necessary rights indicate on the instance that they no longer have a need for it.\nPOST {basePath}/{instanceOwnerPartyId}/{instanceGuid}/complete The request does not use the request body for anything even though it is a POST request.\nDelete instance Endpoint for marking an instance as deleted. This can be used by both application owner and user to delete an instance. The endpoint has an optional parameter called hard that can be used to indicate the type of delete that is wanted. Setting the parameter to false or simply omitting it, will move the instance to a recycle bin. Hard delete means that the instance will be unrecoverable.\nInstances that where active might be permanently deleted by Altinn within a few days. Archived instances will be permanently deleted if both application owner and a user with the necessary rights indicate on the instance that they no longer have a need for it.\nDELETE {basePath}/{instanceOwnerPartyId}/{instanceGuid}?hard=true The endpoint does not use the request body for anything.\nThere are no Application API endpoint for recovering instances in the recycle bin.\n"
},
{
	"uri": "https://docs.altinn.studio/innhold/altinndigital.no/sidetyper/utvikling/",
	"title": "Utvikling",
	"tags": [],
	"description": "Utviklingssidene er en teknisk veiledning for utviklere som lager tjenester ved hjelp av Altinns verktøy og API-er.",
	"content": "Målet er at innholdet ikke skal være en “dokumentasjon” på hvordan ting er gjort, men være “oppskrifter” på hvordan brukeren løser en oppgave. De generelle skriverådene gjelder også for utviklingssidene.\nNB: Innholdet og sidene er under utvikling\nVi er ikke helt ferdige med disse ressursene ennå.\n\r\rMålgruppe Primær  Utviklere som jobber for tjenesteeiere Andre utviklere som ønsker å bruke Altinns åpne API eller Digital post Fagpersoner som jobber med tjenesteutvikling og ikke har utvikler-kompetanse  Sekundær  Prosjektledere, designere og andre som jobber med digitalisering av offentlige tjenester  Brukeroppgaver for utviklingssidene  Har Altinn verktøy og API-er som er relevante for meg i digitaliseringsjobben? Hvordan kommer jeg i gang som utvikler? Trenger jeg noen tilganger? Er min etat/kommune tjenesteeier? Hvordan har andre brukt Altinn i digitaliseringsarbeidet?  Skriveprinsipper  Vi skriver direkte til brukeren (bruker «du») Vi skriver kort og konsist Når vi introduserer Altinn-spesifikke ord forklarer vi alltid hva det betyr Vi gir dem lette oppgaver først slik at brukeren kan føle mestring Vi hjelper brukeren til å få ting gjort og sender brukeren videre til neste steg Vi motiverer og deler opp oppgavene i flere deler Vi informerer der innholdet kun er på engelsk  Huskeregler  Bruk tid på å finne ut av hva fagpersonene bruker slags ord og ikke bruk det som interne kaller ting. Husk at brukeren kanskje kommer til siden fra en søkemotor Ha som utgangspunkt at brukeren ikke vet noe om Altinn fra før Ikke bruk interne prosjektnavn slik som for eksempel “Tjenester 3.0”. Dette kan evt. beskrives i teksten med forklaring til hva det er. Husk at folk som ikke kjenner Altinn skal forstå innholdet  Generelle regler for innhold på utviklingssidene Tittel og ingress  Bruk en tittel som beskriver innholdet. Dersom tittelen er et prosjektnavn, verktøynavn eller forkortelse skal dette forklares i teksten. Ingressen skal gi tilstrekkelig informasjon slik at brukeren kjapt kan vurdere om innholdet er relevant.  Innholdsliste  Bruk innholdsliste for sider med mye innhold slik at brukeren kan skape seg et raskt overblikk. Dette gjøres i markdown-filen ved å sette toc:true i toppfeltet. Alle H2 vil da bli klikkbare titler i innholdslisten.  Innhold  Vær inkluderende og si det så enkelt som mulig, selv om innholdet er teknisk. Bruk trinnvise oppskrifter der brukeren skal gjøre noe i en bestemt rekkefølge. Forklar alltid hva som er neste steg for brukeren.  \rUtviklingsguider\rHvert produkt har en utviklingsguide som skal sørge for at brukeren får en oversikt over hva som må til for å bruke dette produktet. Guiden skal skrives slik at det er lett å forstå hvilken rekkefølge du skal gjøre oppgavene i.\n\r\rAPI\rAPI-dokumetasjonen skal gi veiledning for hvordan utviklere bruker APIet - både det som er åpent for alle og det som er tilgjengelig kun for tjensteeiere.\n\r\rVerktøy\rVerktøy inkluderer brukerveiledning for TUL, SERES og Altinn Studio\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/models/data-element/",
	"title": "DataElement",
	"tags": ["api"],
	"description": "A data element is a metadata container that is used to track the status of actual data blobs.",
	"content": "DataElement The data element model is the main model for metadata related to a specific data element. A data element can be any data associated with an instance. The two most common type of data is the actual form data and attachments.\nProperties    Name Description     id A globally unique id for the data element.   instanceGuid The globally unique id for the instance the data element is associated with.   dataType The name of the data type describing the requirements of the data element.   filename The data blob name if represented as a file.   contentType The mime-type of the content of the blob.   blobStoragePath The physical location of the data as it is stored in the Application owner storage account.   selfLinks A complex type containing a set of named links of how to obtain a copy of the data element.   size The number of bytes in the blob.   locked A value indicating whether the blob is read only.   refs A list of UUID values. Can be used to link related data elements.   isRead A boolean indicating if the dataElement has been read by a user.   created The date and time when the data element was first created.   createdBy An idenfificator indicating who it was that created the data element.   lastChanged The date and time when the data element was last changed.   lastChangedBy An idenfificator indicating who it was that made the last change to the data element.    Complete example This data element example is from the instance example.\n{ \u0026#34;id\u0026#34;: \u0026#34;8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;instanceGuid\u0026#34;: \u0026#34;bd9edd59-b18c-4726-aa9e-6b150eade814\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;Kursdomene_BliTjenesteeier_M_2020-05-25_5703_34553_SERES\u0026#34;, \u0026#34;filename\u0026#34;: null, \u0026#34;contentType\u0026#34;: \u0026#34;application/xml\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;ttd/bli-applikasjonseier/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;selfLinks\u0026#34;: { \u0026#34;apps\u0026#34;: \u0026#34;https://altinn3local.no/ttd/bli-applikasjonseier/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;https://altinn3local.no/storage/api/v1/instances/1337/bd9edd59-b18c-4726-aa9e-6b150eade814/data/8a8a01ae-9533-4aa9-b914-8ab0fae6ea0d\u0026#34; }, \u0026#34;size\u0026#34;: 401, \u0026#34;locked\u0026#34;: false, \u0026#34;refs\u0026#34;: [], \u0026#34;created\u0026#34;: \u0026#34;2020-11-18T15:56:43.1089008Z\u0026#34;, \u0026#34;createdBy\u0026#34;: null, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-11-18T15:56:43.1089008Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: null } "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/storage-interfaces/v3/",
	"title": "v3",
	"tags": [],
	"description": "Overview of changes introduced in v3 of the Altinn.Platform.Storage.Interface package.",
	"content": "\rWhat\u0026#39;s new\rOverview of changes introduced in version 3\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-nuget/v4/",
	"title": "v4",
	"tags": [],
	"description": "Overview of changes introduced in v4 of the Altinn.App.* packages.",
	"content": "\rBreaking changes\rOverview of breaking changes introduced into app nuget packages in v4.0.0\n\r\rWhat\u0026#39;s new\rOverview of changes introduced in version 4\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-nuget/v3/",
	"title": "v3",
	"tags": [],
	"description": "Overview of changes introduced in v3 of the Altinn.App.* packages.",
	"content": "\rBreaking changes\rOverview of breaking changes introduced into app nuget packages in v3.0.0\n\r\rWhat\u0026#39;s new\rOverview of changes introduced in version 3\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/",
	"title": "Application construction components Altinn Studio",
	"tags": [],
	"description": "The application construction components for Altinn Studio includes all components uses to create the Altinn Studio Applications.",
	"content": "The following diagram shows the application construction construction for the Altinn Studio solution with its applications.\nSee fullscreen or download as visio\n\nBelow you find the application components for the different applications in the solution.\n\rApplication Construction Components Designer\rDesigner is split in two applications. One frontend created in REACT that communicates with the back-end application through rest-API.\n\r\rApplication construction components Loadbalancer\rThe loadbalancer for Altinn Studio is based on standard open source software.\n\r\rApplication construction components Repositories\rThe application construction components for Repositories is based on standard open source software.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/automated-test-app/",
	"title": "App for automated test",
	"tags": ["development", "testing"],
	"description": "An app used solely for automated testing in the browser",
	"content": "Rules\nConditional rules\nPrefill\nChange of name app This is an app which should only be used to run automated tests against. It contains these components:\n Title Input Textarea Checkbox Radio button Attachment Datepicker Button   Rules The rules appends the text from the text feilds for new first, middle and last name and displays in a new field. The relevant code:\nnyttNavn: (obj) =\u0026gt; { obj.fornavn = obj.fornavn ? obj.fornavn + \u0026#39; \u0026#39; : \u0026#39;\u0026#39;; obj.mellomnavn = obj.mellomnavn ? obj.mellomnavn + \u0026#39; \u0026#39; : \u0026#39;\u0026#39;; obj.etternavn = obj.etternavn ? obj.etternavn : \u0026#39;\u0026#39;; return obj.fornavn + obj.mellomnavn + obj.etternavn; } nyttNavn: () =\u0026gt; { return { fornavn: \u0026#34;fornavn\u0026#34;, mellomnavn: \u0026#34;mellomnavn\u0026#34;, etternavn: \u0026#34;etternavn\u0026#34; } } } Conditional Rendering rules The app has several conditional rendering rules based on the values entered by the user in other fields. Below is an example code for one of the conditional rendering rules. The relevant code:\nsjekkNavnendringBekreftelse: (obj) =\u0026gt; { return (obj.value \u0026amp;\u0026amp; obj.value === \u0026#34;Ja\u0026#34;); } sjekkNavnendringBekreftelse: () =\u0026gt; { return { value: \u0026#34;Verdi\u0026#34; } } Prefill The app has a prefill defined in the InstantiationHandler.cs for fetching the current name of the user and display in an input component.\nValidation The app has many required field validation, without which the user will not be allowed to submit the app instance.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/back-end/app-template-and-deps/",
	"title": "App template and deps",
	"tags": ["development"],
	"description": "Guidelines for working with the app template and its dependencies",
	"content": "Process for updating app template and its dependencies Updating app template (Template files + depentent supporting projects)  Complete changes in template Get PR approved Push alpha nugets \u0026amp; update reference in Altinn.Apps/AppTemplate Merge to master Complete testing of new feature Once testing is completed and successful Create new branch. Push nugets without alpha based on the branch Duplicate changes in Altinn Studio template Update nuget reference in Altinn Studio template.  Updating Altinn Platform and app template  Code that requires changes in platform are merged in a seperate PR The platform code must be rolled out to all environments. Then, follow Updating app template for remaning changes.  If there is a need to deploy the code faster than the regular deploy schedule, a specific deploy should be considered.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/back-end/async-programming/",
	"title": "Async programming",
	"tags": ["development", "asynchronous-programming"],
	"description": "Guidelines for asynchronous programming",
	"content": "The way our solution is built there is a large need for asynchrous functionality. It is important for the development teams to be aware of best practices as well as which antipatterns to avoid.\nBest Practices Async Antipatterns Keep an eye out for anti-patterns and help the team to maintain a high quality in our code base.\nBlocking on tasks with .Result When an asynchronous call is needed in a synchronous method, the implementation below is quite common. This use of .Result ties up the thread that could be doing other useful work, but even more serious it might cause a deadlock.\nInstead of implementations like this:\npublic Party GetCurrentParty() { UserContext userContext = _userHelper.GetUserContext(HttpContext).Result; int userId = userContext.UserId; string cookieValue = Request.Cookies[_settings.GetAltinnPartyCookieName]; int.TryParse(cookieValue, out int partyId); (...) } Try using this:\npublic async Party GetCurrentParty() { UserContext userContext = await _userHelper.GetUserContext(HttpContext); int userId = userContext.UserId; string cookieValue = Request.Cookies[_settings.GetAltinnPartyCookieName]; int.TryParse(cookieValue, out int partyId); (...) } Whenever in a method that needs to call an asynchronous method, make the method itself asynchronous.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/scenarios/authentication/",
	"title": "Authentication",
	"tags": ["api"],
	"description": "How to authenticate using the APIs.",
	"content": "Authentication for application owners Application owners should be authenticated with Maskinporten.\nAPI provisioning in Maskinporten API-provider To provide an API in maskinporten Altinn has to do two operations.\n As API-provider Altinn registres a scope in Maskinporten POST /scopes { \u0026#34;prefix\u0026#34;: \u0026#34;altinn\u0026#34;, \u0026#34;subscope\u0026#34;: \u0026#34;instances/metadata.read\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Clients can access metadata for all instances for all apps of the organisation\u0026#34; }  As API-provider Altinn has to give access to its scope for a given organisation PUT /scopes/access/889640782?scope=altinn:apps.read Here we have given organisation 889640782 access to the scope altinn:instances/metadata.read. The organisation must then create a client that uses the scope.\n  API-consumer To access the Altinn API an organisation must create a client.\n As API-consumer the organisation must create a client in Maskinporten with scopes provided by Altinn: POST /clients { \u0026#34;client_name\u0026#34;: \u0026#34;altinnOrgRead\u0026#34;, \u0026#34;client_type\u0026#34;: \u0026#34;CONFIDENTIAL\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Client for accessing the my orgs app data\u0026#34;, \u0026#34;scopes\u0026#34;: [ \u0026#34;altinn:instances/metadata.read\u0026#34; ],  \u0026#34;token_reference\u0026#34;: \u0026#34;SELF_CONTAINED\u0026#34; }   Scopes scope names must follow the following regexp:\n^([a-z0-9]+\\/?)+[a-z0-9]+(\\.[a-z0-9]+)?$? It means that we cannot have - or _ in scope names.\nAll instances scope altinn:serviceowner/instances.read altinn:serviceowner/instances.write This is the most general scope which can be given to an organisation by Altinn. It means that the application owner can create a client that can access all instances of apps issued by that application owner.\nClients with write scope will be able to instantiate applications through direct access to the app\u0026rsquo;s api, update metadata, update process state, upload data, validate data, and change process of an instance.\nClients with read token will only be allowed to read metadata, data and events information.\nExchange of JWT token Application owners register clients in Maskinporten and selects the scope they need.\nA client is authenticated by Maskinporten and are given a Maskinporten JWT access token.\nThis token has to be validated and replaced with an Altinn JWT access token which should be used to access the apis.\nMaskinporten JWT access token (input) Client provides a self-contained access-token.\nAutorization: Bearer eyJraWQiOiJIdFlaMU1UbFZXUGNCV0JQVWV3TmxZd1RCRklicU1Hb081OFJ4bmN6TWJNIiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiJ0ZXN0X3JwIiwic2NvcGUiOiJ ... GET /authentication/api/v1/exchange/maskinporten The token looks something like this (after base64-decoding):\n{ \u0026#34;kid\u0026#34;: \u0026#34;HtYZ1MTlVWPcBWBPUewNlYwTBFIbqMGoO58RxnczMbM\u0026#34;, \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34; } . { \u0026#34;aud\u0026#34;: \u0026#34;https://tt02.altinn.no/maskinporten-api/\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;altinn:instances.write\u0026#34;, \u0026#34;iss\u0026#34;: \u0026#34;https://oidc-ver2.difi.no/idporten-oidc-provider/\u0026#34;, \u0026#34;client_amr\u0026#34;: \u0026#34;virksomhetssertifikat\u0026#34;, \u0026#34;token_type\u0026#34;: \u0026#34;Bearer\u0026#34;, \u0026#34;exp\u0026#34;: 1571935870, \u0026#34;iat\u0026#34;: 1571923870, \u0026#34;client_id\u0026#34;: \u0026#34;0de19f7a-f5fa-45d1-874c-3d2e88ce97d9\u0026#34;, \u0026#34;client_orgno\u0026#34;: \u0026#34;974760673\u0026#34;,  \u0026#34;jti\u0026#34;: \u0026#34;U3HMLIY8b_X454CADQzfttSuWpCADPQhc57iZXVF_Ac\u0026#34;, \u0026#34;consumer\u0026#34;: { \u0026#34;authority\u0026#34;: \u0026#34;iso6523-actorid-upis\u0026#34;, \u0026#34;ID\u0026#34;: \u0026#34;0192:974760673\u0026#34; } } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt; Maksinporten provides the legal consumer (the client) in ISO 6523 format. The client_orgno claim is deprecated.\nThe Altinn JWT Access token (output) The convert operation validates the incoming token and generates a new JWT token with the same scope as the token. The scopes is copied. The orgNumber and org is added by the token converter.\n{ \u0026#34;scope\u0026#34;: \u0026#34;altinn:instances.read altinn:instances.write\u0026#34;, \u0026#34;token_type\u0026#34;: \u0026#34;Bearer\u0026#34;, \u0026#34;exp\u0026#34;: 1571996946, \u0026#34;iat\u0026#34;: 1571995146, \u0026#34;client_id\u0026#34;: \u0026#34;0de19f7a-f5fa-45d1-874c-3d2e88ce97d9\u0026#34;, \u0026#34;client_orgno\u0026#34;: \u0026#34;974760673\u0026#34;, \u0026#34;jti\u0026#34;: \u0026#34;BcNIAuZKXdjpECmmwalAm-pcBp0iNc56T6eXhlxNBZE\u0026#34;, \u0026#34;consumer\u0026#34;: { \u0026#34;authority\u0026#34;: \u0026#34;iso6523-actorid-upis\u0026#34;, \u0026#34;ID\u0026#34;: \u0026#34;0192:974760673\u0026#34; }, \u0026#34;org\u0026#34;: \u0026#34;brg\u0026#34;, \u0026#34;orgNumber\u0026#34;: 974760673,  \u0026#34;iss\u0026#34;: \u0026#34;https://platform.altinn.cloud/\u0026#34;, \u0026#34;AuthenticateMethod\u0026#34;: \u0026#34;maskinporten\u0026#34;, \u0026#34;AuthenticationLevel\u0026#34;: 3, \u0026#34;nbf\u0026#34;: 1571995146 } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt; Authentication for end user system End user systems should be authentication with ID-porten. When authenticated the system may exchange a token provided by ID-porten with an Altinn token by instructions below.\nExchange of JWT token This token has to be validated and replaced with an Altinn JWT access token which should be used to access the apis.\nID-porten JWT access token (input) Autorization: Bearer eyJraWQiOiJjWmswME1rbTVIQzRnN3Z0NmNwUDVGSFpMS0pzdzhmQkFJdUZiUzRSVEQ0IiwiYWxnIjoiUlMyNTYifQ.eyJhdF9 ... GET /authentication/api/v1/exchange/id-porten The token looks something like this (after decoding):\n{ \u0026#34;kid\u0026#34;: \u0026#34;cZk00Mkm5HC4g7vt6cpP5FHZLKJsw8fBAIuFbS4RTD4\u0026#34;, \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34; } . { \u0026#34;at_hash\u0026#34;: \u0026#34;IF-jpSLtMjzoHdEhLq9pnw\u0026#34;, \u0026#34;sub\u0026#34;: \u0026#34;PZcxQYOR_ylbrlj69pXn_HdTmrpDRpA3X0rTyOEyN5I=\u0026#34;, \u0026#34;amr\u0026#34;: [ \u0026#34;Minid-PIN\u0026#34; ], \u0026#34;iss\u0026#34;: \u0026#34;https://oidc-ver2.difi.no/idporten-oidc-provider/\u0026#34;, \u0026#34;pid\u0026#34;: \u0026#34;191080XXXXX\u0026#34;, \u0026#34;locale\u0026#34;: \u0026#34;nb\u0026#34;, \u0026#34;nonce\u0026#34;: \u0026#34;1584978003167642\u0026#34;, \u0026#34;sid\u0026#34;: \u0026#34;bQDBkJmjrX3bx2agu4q7BS5QW6TPf9CHnJX11vEthZg\u0026#34;, \u0026#34;aud\u0026#34;: \u0026#34;38e634d9-5682-44ae-9b60-db636efe3156\u0026#34;, \u0026#34;acr\u0026#34;: \u0026#34;Level3\u0026#34;, \u0026#34;auth_time\u0026#34;: 1584978021, \u0026#34;exp\u0026#34;: 1584978141, \u0026#34;iat\u0026#34;: 1584978021, \u0026#34;jti\u0026#34;: \u0026#34;_Og8JT1zMKzzHFB4WoVCdvqzmEpoY1hPhLa47bieJ94\u0026#34; } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt; The Altinn JWT Access token (output) The exchange operation validates the incomming token and generates a new JWT token that contains user data retrieved from the database using the provided pid (person identification number) and pre-existing data from the ID-porten token.\npid is referred to as ssn (social security number) i Altinn Platform.\n{ \u0026#34;nameid\u0026#34;: \u0026#34;20000011\u0026#34;, \u0026#34;urn:altinn:userid\u0026#34;: \u0026#34;20000011\u0026#34;, \u0026#34;urn:altinn:username\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;urn:altinn:partyid\u0026#34;: 50002119, \u0026#34;urn:altinn:authenticatemethod\u0026#34;: \u0026#34;Minid-PIN\u0026#34;, \u0026#34;urn:altinn:authlevel\u0026#34;: 3, \u0026#34;amr\u0026#34;: \u0026#34;Minid-PIN\u0026#34;, \u0026#34;pid\u0026#34;: \u0026#34;191080XXXXX\u0026#34;,  \u0026#34;locale\u0026#34;: \u0026#34;nb\u0026#34;, \u0026#34;nonce\u0026#34;: \u0026#34;1585045781364132\u0026#34;, \u0026#34;sid\u0026#34;: \u0026#34;BYSqEpVGRrh6rElmnzzTjcU0roC95rxNCC2kAsB2hmY\u0026#34;, \u0026#34;acr\u0026#34;: \u0026#34;Level3\u0026#34;, \u0026#34;auth_time\u0026#34;: 1585045793, \u0026#34;exp\u0026#34;: 1585047785, \u0026#34;iat\u0026#34;: 1585045985, \u0026#34;nbf\u0026#34;: 1585045985 } . \u0026lt;\u0026lt;signature\u0026gt;\u0026gt; Open ID Connect configuration This is work-in-progress. The response is still missing required information and might be inconsistent with actual authentication mechanisms.\r\rMetadata about Altinn as an Open ID provider is exposed as a .well-known endpoint as defined by OpenID Connect Discovery.\nThe primary porpose of this endpoint is to make available the Altinn signing certificate for the JSON Web Tokens being generated. It is recommended that clients of Altinn use this discovery endpoint to automatically have their systems updated when Altinn changes their signing certificate.\n   Environment URL     AT2x https://platform.at2x.altinn.cloud/authentication/api/v1/openid/.well-known/openid-configuration   YT01 https://platform.yt01.altinn.cloud/authentication/api/v1/openid/.well-known/openid-configuration   TT02 https://platform.tt02.altinn.no/authentication/api/v1/openid/.well-known/openid-configuration    "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/azure-dev-spaces/",
	"title": "Azure Dev Spaces",
	"tags": ["development"],
	"description": "Guidelines for deploying storage",
	"content": "This page is a work-in-progress. Currently we don't have azure dev spaces set up for tjeneste 3.0 \rAzure Dev Spaces Azure dev spaces is an offering from Azure for a rapid, iterative Kubernetes development experience for teams. AZDS gives the opportunity to iteratively run and debug containers directly in Azure Kubernetes Service (AKS) with minimal dev machine setup. You can read more about AZDS, setup and configuration for visualstudio or Visualstudiocode here.\nEnable Azure Dev Spaces in Storage Once you install the visual studio or visual studio code extensions for azure dev spaces, you should see the option for azure dev spaces in debug tool.\nOn selecting the azure dev spaces option for a selected project, azure dev spaces configuration modal popsup where you must select the subscription, cluster name and space.\nAzure dev spaces tools for Visual studio automatically generates the required helm charts and dockerfile for the first time.\nThe application is then deployed to the selected dev space and ready for debugging.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/azure-devops/",
	"title": "Azure DevOps",
	"tags": ["development"],
	"description": "Guidelines for working with resources in Azure DevOps",
	"content": "\rPipelines\rQuality checklist and overview of pipelines in Azure DevOps\n\r\r\r\rWe use Azure DevOps for building and deploying both our solution and the app owners applications.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/back-end/",
	"title": "Back-end",
	"tags": ["development", "todo"],
	"description": "Coding guidelines for back-end",
	"content": "TODO\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/best-practices/",
	"title": "Best practices",
	"tags": ["development", "front-end"],
	"description": "Best practices for altinn.studio frontend",
	"content": "Altinn.studio best practices will be updated with more and better practices ;)\r\rBest practices  Simple lists should be sorted alphabetically  Form components (app-frontend) Form components (src/components) should, whenever possible, be \u0026ldquo;dumb\u0026rdquo; components that receive all their input from props. They should not have a direct connection to the store, and should not know anything about the store.\nSagas All logic used in a saga should be an exported function in the utils-folder. This is decided since we need to split up the logic from the fetching of data, so we have a more testable codebase. The saga only fetches data from the state, and sends the appropriate data to utils-functions.\nFolder Structure This is the best practice for folder structure in applications. Note that this is not necessarily how the folder structure is for all the apps, but when creating anything new, or cleaning up, this is how it should look.\n- src /\r- config /\r- config.json\r- exportedConfig.js\r- features / # routes,pages,features\r- [featureName] /\r- components /\r- containers /\r- resources /\r- featureSpecificData /\r- delete /\r- deleteFeatureSpecificDataActions.ts\r- deleteFeatureSpecificDataSagas.ts\r- fetch /\r- ...\r- upload /\r- ...\r- featureSpecificDataActions.ts\r- featureSpecificDataActionTypes.ts\r- featureSpecificDataReducers.ts\r- featureSpecificDataSagas.ts\r- selectors /\r- getSomeResourceSelector.ts\r- reducers /\r- featureNameReducer.ts\r- utils / # Feature specific utils\r- formFiller / # Example feature\r- components /\r- containers /\r- resources\r- attachments / # FileUpload example\r- delete /\r- deleteAttachmentsActions.ts\r- deleteAttachmentsSagas.ts\r- fetch /\r- fetchAttachmentsActions.ts\r- ...\r- upload /\r- ...\r- attachmentsActions.ts\r- attachmentsActionTypes.ts\r- attachmentsReducers.ts\r- attachmentsSagas.ts\r- selectors / - getSomeResouceSelector.ts\r- reducers /\r- formfillerReducer.ts\r- utils /\r- reducers /\r- index.ts\r- shared /\r- components / # Shared components\r- resources / # Shared resources\r- [resourceName] /\r- [action] /\r- \u0026lt;action\u0026gt;\u0026lt;resourceName\u0026gt;Actions.ts\r- \u0026lt;action\u0026gt;\u0026lt;resourceName\u0026gt;Sagas.ts\r- \u0026lt;resourceName\u0026gt;Actions.ts\r- \u0026lt;resourceName\u0026gt;ActionTypes.ts\r- \u0026lt;resourceName\u0026gt;Reducer.ts\r- \u0026lt;resourceName\u0026gt;Sagas.ts\r- language / # example resource\r- fetch /\r- fetchLanguageActions.ts\r- fetchLanguageSagas.ts\r- someAction /\r- someActionOnLanguageActions.ts\r- someActionOnLanguageSagas.ts\r- languageActions.ts\r- languageActionTypes.ts\r- languageReducer.ts\r- languageSagas.ts\r- types /\r- utils /\r- store\r- types\r- utils\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/build/",
	"title": "Build",
	"tags": ["development", "front-end", "build"],
	"description": "Build documentation for altinn.studio frontend",
	"content": "Local build Building an app locally is done by running\nnpm run build\rfrom the apps root folder.\nSome of the react projects also have various other predefined npm tasks, which can be viewed in the package.json file which is located in the root folder of each react project, example src/Altinn.Apps/AppFrontend/react/altinn-app-frontend/package.json\nAdding new packages to react-applications Adding of a new package in an app is done with lerna in the lerna-folder (/src/react-apps/). Command syntax for this will be:\nlerna add [package-name] --scope=[app-name] --exact\nIf you are going to add react to a new app called Foo:\nlerna add react --scope=Foo --exact\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/general/",
	"title": "Cheat Sheet",
	"tags": ["development", "todo"],
	"description": "Qucik guide for different commands",
	"content": "GIT git clone repourl\ngit\nDocker docker ps to list all running docker containers.\nAKS kubectl get pods list all pods in current cluster\nkubectl -n default logs -f deployment/altinn-storage --all-containers=True - get logs for all components of the same deployment\nkubectl describe pod [pod name] describes current state and lists environment variables for a given pod\nkubectl delete pod [pod name] deletes a pod and a new pod of the same deployment will start\nkubectl set env [deployment] [key]=[value] update or insert new enviornment variable for a deployment\nMore useful kubectl commands can be found in Kubernetes' own documentation.\nHELM helm uninstall [deployment] deletes a helm release. Running pods in AKS cluster will also be deleted.\nMarkdown Azure CLI "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/securecoding/checklist/",
	"title": "Code Checklist",
	"tags": ["checklist", "OWASP", "security"],
	"description": "Checklist for security OWASP.",
	"content": "Below you find checklists used during coding. Important input have been OWASP Top 10 and CWE Top 25\nBackend checklist 1. Are input validated? Url parametes, post parameters and other that are store or presented in application.\nExamples from the Altinn 3 is validaton of file names. used here.\nThis is related to OWASP Top 10 no 1.\n2. Does API requires authenticted user? All API\u0026rsquo;s need to require authenticated user or system. For .Net core application this means that it need to have the [Authorize] tag\nExample from InstancesController in Storage\n[Authorize] [HttpPost] [Consumes(\u0026#34;application/json\u0026#34;)] [ProducesResponseType(StatusCodes.Status201Created)] [ProducesResponseType(StatusCodes.Status400BadRequest)] [Produces(\u0026#34;application/json\u0026#34;)] public async Task\u0026lt;ActionResult\u0026lt;Instance\u0026gt;\u0026gt; Post(string appId, [FromBody] Instance instance) 3. Does API validate correct authorization policy? For each API the developer needs to identify the correct authorization policy required to be validated.\nThis could be that read or write access need to be authorized.\nExample from InstancesController in Storage\n[Authorize(Policy = AuthzConstants.POLICY_INSTANCE_DELETE)] [HttpDelete(\u0026#34;{instanceOwnerPartyId:int}/{instanceGuid:guid}\u0026#34;)] [ProducesResponseType(StatusCodes.Status200OK)] [ProducesResponseType(StatusCodes.Status204NoContent)] [ProducesResponseType(StatusCodes.Status400BadRequest)] [ProducesResponseType(StatusCodes.Status404NotFound)] [Produces(\u0026#34;application/json\u0026#34;)] public async Task\u0026lt;ActionResult\u0026lt;Instance\u0026gt;\u0026gt; Delete(int instanceOwnerPartyId, Guid instanceGuid, [FromQuery] bool hard) This is related to OWASP Top 10 no 5. and CWE-862\n4. Dont run application with to high priveliges. Are the docker containers running with the correct priveliges?\nsecurityContext: runAsUser: 1000 runAsGroup: 3000 allowPrivilegeEscalation: false Example from Dockerfile\nRUN addgroup -g 3000 dotnet \u0026amp;\u0026amp; adduser -u 1000 -G dotnet -D -s /bin/false dotnet USER dotnet RUN mkdir /tmp/logtelemetry 5. Protect against Cross-site requeste forgery It is important that every endpoint that is exposed to users validates antiforgery tokens to make sure we protect against Cross-site request forgery.\nAs part of the platform their has been created a custom authorization filter to protect against CSRF for endpoints beeing access by using cookie or token. This is enabled with using [AutoValidateAntiforgeryTokenIfAuthCookie] on methods or controllers.\nExample from datacontroller\n[AutoValidateAntiforgeryTokenIfAuthCookie] [Route(\u0026#34;{org}/{app}/instances/{instanceOwnerPartyId:int}/{instanceGuid:guid}/data\u0026#34;)] public class DataController : ControllerBase Frontend "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/component-library/",
	"title": "Component Library",
	"tags": ["development"],
	"description": "Component documentation for altinn.studio",
	"content": "WARNING: Component library will be documented when the [task](https://github.com/Altinn/altinn-studio/issues/168) is done.\r\rSummary All shared components are to be documented in Markdown with inline JSX.\n All shared components shall have a corresponding component.md file in the same directory. The shared component must hava a default export function AND also exporting the rendered function. React Styleguidist is used to build the documentation site. The Component Library is currently a local dev server  Running dev server  \u0026ldquo;npm run styleguide\u0026rdquo; from src\\react-apps\\applications\\shared\n Inline comments on props  Reacy Styleguidist supports inline comments. Props should have inline comments.  export interface IAltinnButtonComponentProvidedProps extends WithStyles\u0026lt;typeof styles\u0026gt; { /** Button ID */ id?: any; /** @ignore */ classes: any; /** Text shown on button */ btnText: string; /** onClick function */ onClickFunction?: any; /** Class objects created with Material-Ui\u0026#39;s createStyle */ className?: any; /** Secondary styling */ secondaryButton?: boolean; /** Disabled styling */ disabled?: boolean; } Example markdown ### Default button  ```jsx \u0026lt;AltinnButton btnText=\u0026#39;Altinn button with some text\u0026#39; /\u0026gt; ``` ### Disabled button  ```jsx \u0026lt;AltinnButton btnText=\u0026#39;Disabled button\u0026#39; disabled={true} /\u0026gt; ``` ### Secondary button  ```jsx \u0026lt;AltinnButton btnText=\u0026#39;Secondary button\u0026#39; secondaryButton={true} /\u0026gt; ``` ### Click function  Altinn button supports onClickFunction via the onClickFunction prop. ```jsx const myFunc = () =\u0026gt; { console.log(\u0026#39;My Function\u0026#39;); } \u0026lt;AltinnButton btnText=\u0026#39;Button with onClickFunction\u0026#39; onClickFunction={myFunc} /\u0026gt; ``` ### Styling  Altinn button also supports Material-UI class objects (classes.someObject) passed via the optional className prop. ```jsx static \u0026lt;AltinnButton btnText=\u0026#39;Secondary button\u0026#39; className={classes.someClassObject} /\u0026gt; ``` "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/cosmosdb/",
	"title": "Cosmos DB",
	"tags": ["development"],
	"description": "General guidelines and best practice for working with Cosmos DB",
	"content": "Querying documents in CosmosDB Use FeedResponse to retrieve all hits The documents in a collection might be stored in different partitions. When querying documents in a collection, the response will only contain documents from a single partition at a time, to retrieve your hits across all partitions you may utilize the the continuation token or the HasMoreResults property of the DocumentQuery.\nAvoid expensive queries CosmosDB uses indexes to find matches for the queries, if there is not value for the indexed property, all instances will have to be checked to figure out if there is a match for the query. This occurs in cases where we assert that a property is null, so queries like this should be avoided.\nAlways try to assert on an existing value, if this is not possible modifying the data model should be considered.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/app-api/data-elements/",
	"title": "Data elements",
	"tags": ["api"],
	"description": "The app API to work with the data elements associated with an instance",
	"content": "Overview A data element consist of two parts: its metadata document and the actual data blob. This API work primarily with the blob while keeping the metadata document updated.\nbasePath\n{org}/{appname}/instances/{instanceOwnerPartyId}/{instanceGuid}/data Get data Endpoint for downloading the data blob.\nGET basePath/{dataGuid} Accept: application/{xml/json} The response will depend on the type of blob. There are currently 2 primary types: form data based on a model and attachments. An Accept header in a request will be considered only when the requested data element is connected to a data model. The header is then used to pick a serializer for the data.\nResponse with form data A response with form data will either be a json or xml serialized version of the data model depending on the Accept header in the request. The value application/xml will result in an XML document and the value application/json will result inn a JSON document.\nResponse with attachment A response with a file attachment will be a file stream. Content-Type will be the same as the original value given when the file was uploaded. The same is true for the file name.\nContent-Disposition: attachment; filename=cute_cat.png; filename*=UTF-8\u0026#39;\u0026#39;cute_cat.png Content-Length: 16994 Content-Type: image/png Upload data Endpoint for uploading a new data element on a specific instance.\nPOST basePath?dataType={data type name} The dataType parameter is required and should reference one of the data types defined on the application. Data types with an appLogic property are linked to a form and will have data validation and calculation rules associated with them. Data types without an appLogic property will be handeled as an attachment and streamed directly to storage.\nRequest Content-Type is handled a little differently between the two cases:\n If a request is uploading form data, the Content-Type is used by Altinn to deserialize the request into a strongly typed object. A request must either be application/json or application/xml. No other Content-Types are supported. Content-Type is not validated against allowed Content-Types on the data type. If a request is uploading an attachment, the validation of Content-Type will depend on the rules of the data type.  If the data type has no Content-Type requirements, there will be no validation and the request can contain any Content-Type. If the data type has Content-Type requirements, there is a new set of checks.  The request Content-Type must either be application/octet-stream or match the MIME type of the file being uploaded. Altinn will perform a mapping from file extension to MIME type before comparing with Content-Type. As an example we can see that .xml will map to text/xml and not application/xml. If the data type allow Content-Type application/octet-stream no further validation is performed. If not, the identified MIME type must match one of the allowed Content-Types on the data type.      Uploading form data as application/json Content-Type: application/json { \u0026#34;dataFormatProvider\u0026#34;: \u0026#34;SERES\u0026#34;, \u0026#34;dataFormatId\u0026#34;: \u0026#34;5703\u0026#34;, \u0026#34;dataFormatVersion\u0026#34;: \u0026#34;34553\u0026#34;, \u0026#34;Tjenesteeier\u0026#34;: null, \u0026#34;Kontaktperson\u0026#34;: { \u0026#34;navn\u0026#34;: \u0026#34;Sophie Salt\u0026#34;, \u0026#34;epost\u0026#34;: \u0026#34;1337@altinnstudiotestusers.com\u0026#34;, \u0026#34;telefonnummer\u0026#34;: \u0026#34;90001337\u0026#34; }, \u0026#34;OEnsketBruk\u0026#34;: null } Uploading form data as application/xml Content-Type: application/xml \u0026lt;BliTjenesteeier_M xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; dataFormatProvider=\u0026#34;SERES\u0026#34; dataFormatId=\u0026#34;5703\u0026#34; dataFormatVersion=\u0026#34;34553\u0026#34;\u0026gt; \u0026lt;Kontaktperson\u0026gt; \u0026lt;navn\u0026gt;Sophie Salt\u0026lt;/navn\u0026gt; \u0026lt;epost\u0026gt;1337@altinnstudiotestusers.com\u0026lt;/epost\u0026gt; \u0026lt;telefonnummer\u0026gt;90001337\u0026lt;/telefonnummer\u0026gt; \u0026lt;/Kontaktperson\u0026gt; \u0026lt;/BliTjenesteeier_M\u0026gt; Uploading an attachment An example of a request uploading a PDF file.\nContent-Type: application/pdf Content-Disposition: attachment; filename=\u0026#34;receipt.pdf\u0026#34;; filename*=UTF-8\u0026#39;\u0026#39;receipt.pdf Content-Length: 16994 %PDF-1.4 %Óëéá 1 0 obj ... Response example The endpoint returns the data element metadata document that was created.\n{ \u0026#34;id\u0026#34;: \u0026#34;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026#34;, \u0026#34;instanceGuid\u0026#34;: \u0026#34;762011d1-d341-4c0a-8641-d8a104e83d30\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;contentType\u0026#34;: \u0026#34;application/xml\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;org/app/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026#34;, \u0026#34;selfLinks\u0026#34;: { \u0026#34;apps\u0026#34;: \u0026#34;{appPath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;{storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026#34; }, \u0026#34;filename\u0026#34;: \u0026#34;default.xml\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-03-06T15:00:23Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;org23\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2019-03-07T15:00:23Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;org23\u0026#34;, \u0026#34;size\u0026#34;: 20001, \u0026#34;locked\u0026#34;: false } Replace data Endpoint for replacing the content of an existing data element with new data. The new data must match the data type of the data element it is replacing.\nPUT basePath/{dataGuid} The endpoint works exactly like the endpoint for uploading a new data element.\nDelete data Endpoint for deleting an existing data element. It is currently not possible to delete the data for a form this way.\nDELETE basePath/{dataGuid} "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/deployment/",
	"title": "Deployment",
	"tags": ["development", "deploy"],
	"description": "Guidelines for deploying",
	"content": "ci build devops pipeline pipelines Build process Build Pipelines Quality Build Building the docker image, running tests and checking code. Triggered by:\nGit Push Pull Request Altinn Studio and Runtime Docker Images Separate pipelines are made for Altinn Studio and Runtime. The pipeline will build and deploy the Altinn Studio Docker Image and the Runtime Docker Image to Azure Container Registry.\nTriggered by:\nGit Merge to Master Altinn Studio Release Build When the build for either Altinn Studio or Runtime is successfully ran a release build will start. The release build will update the kubernetes cluster with the images created in the Altinn Studio and the Runtime builds\nTriggered by:\nSuccessfull build of either/both Altinn Studio and Runtime Altinn Service Deploy\nService Runtime docker image bundling process. Building the Altinn Service with “service specific” files from Gitea, creating a “Service Image”, deploying to Azure Container Registry and telling Kubernetes to deploy service.\nBuild process (Pipeline):\nThis process have more details in the Dockerfile. This is a summary.\nDownloading files from service repo in Gitea Building Docker base image with Dockerfile. This includes “Dotnet build” for C# files from Gitea. “Dotnet build” is executed on the Runtime Base Image reusing previous. Docker Pull: Altinn/Runtime Base Image with SDK from ACR. This makes the AltinnService build faster. Clone and build code from Gitea inside Altinn-Runtime Base Image. Docker Pull: Microsoft/DotNet AspNetCore. Copy Altinn Runtime, AltinnService Build files and Service Metadata/Resources from Gitea. Publish to ACR. Triggered by:\n“Publish Service”-button in Altinn Studio. Generating Altinn Pipelines Images Summary The Altinn Azure Pipelines Image (image) is built with Packer. The Packer JSON configuration is based on the same configuration used by Microsoft to build their own Hosted Agent images. The image is built in Azure Pipelines passing in “secrets” to the Packer configuration with Environment Variables not visibly available during the build process. Usage Create a Virtual Machine in Azure using the pre built image found under “browse all images and disks”. Create a username and password (should be stored in Azure Vault). Installing Agent Host The script for installing the Agent Host is found at: Maintenance/azure-pipelines-image/scripts/agent/agent-install.sh (Currently a manual job)\nA computer can have one or several Agent Hosts installed. Several Agents, on one or several servers, can connect to one Agent Pool.\nCreating Pipelines Image with Packer.io The process of creating an Image with Packer is described here\nSome steps might already be performed in Azure.\nThe repo for creating the Pipelines Image for Altinn is hosted in this branch and is based on the Microsoft Packer scripts from this repo\nThe variables used in the Packer JSON configuration file is passed in via hidden Pipelines environment variables.\nUbuntu1604-full The “full” image contains components for building Dotnet and NodeJS applications, running JavaScript based headless tests and running Docker Images. See the JSON file for specifications.\nUbuntu1604-light The “light” image only contains Git and Docker and is created for only running Docker images.\nClean-up Packer creates Resource Groups in Azure keeping the image build for history and debuggind purposes. To remove this Resource Group run AZ Cli:\naz group delete -n PackerResourceGroup\nDeleting build queue If there is the need to delete builds in the Azure Devops pipelines queue, you can use the DELETE rest API found here. You can use PostMan. Rememember to copy the cookies from an authenticated browser.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/back-end/error-handling/",
	"title": "Error handling",
	"tags": ["development", "error-handling"],
	"description": "Guidelines for exception handling in backend logic.",
	"content": "Exception Handling Exception handling is the act of catching an exception with the intention of handling the situation so that normal execution flow can continue. It should not be used as any part of an expected execution flow. It should also be avoided if the situation continue to be unrecoverable.\n.Net core provides a default middleware UseExceptionHandler that will catch exceptions and log them. You can read more about this here. This is the preferred mechanism when it comes to dealing with errors the application logic is unable to handle elegantly on its own. The middleware should be configured to generate a response that is appropriate for the running environment.\nExceptions that can be handled by the application logic should be handled as soon and as specific as possible. The following example is found in the platform Storage application. More specifically the DataController.GetDataElementAsync method.\nActionResult errorMessage; try { DataElement dataElement = await _dataRepository.Read(instanceGuid, dataGuid); return (dataElement, null); } catch (DocumentClientException dce) { if (dce.StatusCode == HttpStatusCode.NotFound) { errorMessage = NotFound($\u0026#34;Unable to find any data element with id: {dataGuid}.\u0026#34;); } else { throw; } } In this example the try..catch is interested only in the DocumentClientException, and on top of that only when the StatusCode is NotFound. All other exceptions and exception reasons are ignored and will end up in the .Net Core middleware.\nAPI Response Exceptions that are handled by application logic can result in almost any response. The outcome will depend on the type of exception and how it is handled:\n 200 - Ok - The original request is considered successfully processed. 400 - BadRequest - The exception was caused by a faulty request. In this case it is preferred that the application logic does active validation instead of needing to deal with an exception. 401 - Unauthorized - Similar to BadRequest, but logic is associated with authentication. 403 - Forbidden - Similar to BadRequest, but logic is associated with authorization. 404 - NotFound - The requested resource does not exist.  By limiting the usage of status codes, we can ease the handling of different status codes at client side. Application logic should (ideally) never produce a 500 response. Exceptions that are not handled by application logic, but the default middleware will always result in a response with status code 500.\nMiddleware configuration Handling of unrecoverable errors should be done by the built in middleware mentioned previously. The configuration should be different between production environments and other environments. In development and staging environments the middleware should allow detailed exception information to be exposed by the API.\nConfiguration of the middleware is done in the Startup.Configure method. This is an example from the platform Storage application:\nif (env.IsDevelopment() || env.IsStaging()) { app.UseDeveloperExceptionPage(); } else { app.UseExceptionHandler(\u0026#34;/storage/api/v1/error\u0026#34;); } This configuration requires an ErrorController that can handle the server side redirect performed by the middleware. The following code sample is a stipped version of the ErrorController in the platform Storage application:\n[ApiController] [ApiExplorerSettings(IgnoreApi = true)] [AllowAnonymous] [Route(\u0026#34;storage/api/v1\u0026#34;)] public class ErrorController : ControllerBase { [Route(\u0026#34;error\u0026#34;)] public IActionResult Error() =\u0026gt; Problem(); } "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/error-handling/",
	"title": "Error handling",
	"tags": ["development", "error-handling"],
	"description": "Guidelines for error handling front-end",
	"content": "This page is a work-in-progress. Because we do not have details on how potential errors should be shown to the users, this is only a general overview currently. More details will be added once we have a functional understanding of how users should experience errors. \rReact components Error boundaries Error boundaries are React\u0026rsquo;s official way of handling errors that occur in a component. This functionality is available from React 16. Using this allows a component to fail without unmounting the whole application, and allows us to control how the user is exposed to unexpected errors.\nSee the official React documentation or this official blog post for more information about error boundaries and how to implement them.\nWe need a generic error boundary component that can be configured and reused for all of the sub-applications. Each sub-application should be wrapped in this error boundary component. This will allow the main applications (service-development and dashboard) to keep functioning even though any sub-applications throw an error.\nIn addition we should have a generic \u0026ldquo;something went wrong\u0026rdquo; error boundary for the main applications.\nWithin the sub-applications, it may be beneficial to implement error boundaries around key components. This will typically be relevant for components that act as containers for other components. An example could be the preview-component in the UI-editor, which shows the working surface of the forms designer.\nEvent handlers Error boundaries do not catch errors that occur within event handlers, as mentioned in the official React documentation. Thus, any direct API calls from within an event handler in a React component should be wrapped in a try/catch block.\nOptional props Any use of props that have been defined as optional should be done together with a null/undefined-check, to make sure that the prop is actually available.\nRedux Actions All actions should have sibling actions for success and error. See naming conventions for actions. The success action is triggered when everything is ok, while the error action is triggered if something goes wrong.\nSagas If a saga needs to make an API call (or uses logic/utils that make API calls), this should be wrapped in a try/catch block. If an error occurs, this should be logged and the corresponding error action should be triggered. If no error occurs then the corresponding success action should be triggered. See here for more information on actions and sagas.\nReducers If an error handling action is triggered, the reducer should update the corresponding error object in the state to reflect that an error has occured.\nLogging errors We need to decide if all errors should be logged on the server or not. If all front-end errors should be logged on the server, we need to create an API we can call from the front-end to to the logging. \rAll errors that are caught should be logged to the console using console.error.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/events/",
	"title": "Events",
	"tags": ["api"],
	"description": "The Platform API to work with events",
	"content": "Overview Events are in this context is information about events created by applications or other sources. The event itself is based on the CloudEvent standard and is a small JSON structure containing the most important information of an event. Details are found here.\nThe events APIs are used to access events created by applications in Altinn Apps and other event sources that use Altinn Platform as av \u0026ldquo;event hub\u0026rdquo;.\nSubscription The highly preferred way to use events is to set up a subscription that enables push of events to a webhook-endpoint. This is done through the subcriptions API. This API supports the following consumers\n Persons, authenticated through ID-porten Orgs, authenticated through Maskinporten  The subscriptions API is described here as Swagger.\nThe webhook endpoint needs to be able to accept cloud event that is posted through HTTPS to the endpoint URL.\nThe push functionality also supports pushing events to Slack. Other platforms might be added at a later point.\nSearch API The search allows searching for events. The storage of events is limited to 90 days.\nThis is available to be used by the following consumers.\n Persons, authenticated through ID-porten Orgs, authenticated through Maskinporten  The API is described in swagger here.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/",
	"title": "Front-end",
	"tags": ["development", "front-end"],
	"description": "Coding guidelines for front-end",
	"content": "\rGetting started\rGet started working with the frontend\n\r\rDeveloping locally\rRunning the frontends locally for development\n\r\rRoutines for development\rDescribes routines for developing frontend code for resources in the DevOps team\n\r\rCreating components\rGet started creating new form components for the apps\n\r\rReact\rGuidelines for using React in Altinn Studio\n\r\rRedux\rGuidelines for using Redux in Altinn Studio\n\r\rDebug\rDebug documentation for altinn.studio frontend\n\r\rBest practices\rBest practices for altinn.studio frontend\n\r\rBuild\rBuild documentation for altinn.studio frontend\n\r\rComponent Library\rComponent documentation for altinn.studio\n\r\rError handling\rGuidelines for error handling front-end\n\r\rPost Message\rGuidelines for using post message functionality in Altinn Studio\n\r\rStyling (css)\rGuidelines for styling components in Altinn Studio\n\r\rVersioning\rGuidelines for versioning of front-end\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/cheatsheet/",
	"title": "General",
	"tags": ["development", "todo"],
	"description": "General coding guidelines",
	"content": "TODO\nGit git add .\ngit commit -m \u0026ldquo;\u0026rdquo;\nRevert local commit git reset --soft HEAD~1 Azure CLI az login --use-device-code Kubectl "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/getting-started/",
	"title": "Getting started",
	"tags": ["development"],
	"description": "Information about how to get started",
	"content": "\r.highlight-source-batchfile {\rcolor: #fff !important;\r}\r\r\r\r\rlet content = document.getElementById('readmeContent');\rif (content.innerHTML === '') {\rcontent.innerHTML = 'Loading from github...';\r} axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://github.com/Altinn/altinn-studio/blob/master/README.md`)\r.then((res) = {\rconst doc = new DOMParser().parseFromString(res.data, \"text/html\");\rcontent.innerHTML = doc.getElementById('readme').innerHTML;\r});\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/git/",
	"title": "Git",
	"tags": ["development", "git"],
	"description": "Information about version control with Git",
	"content": "\r\r\rlet content = document.getElementById('contributionContent');\rif (content.innerHTML === '') {\rcontent.innerHTML = 'Loading from github...';\r}\raxios.get(`${'https://cors-anywhere.herokuapp.com/'}https://github.com/Altinn/altinn-studio/blob/master/CONTRIBUTING.md`)\r.then((res) = {\rconst doc = new DOMParser().parseFromString(res.data, \"text/html\");\rcontent.innerHTML = doc.getElementById('readme').innerHTML;\r});\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/traefik/installation/",
	"title": "Installation of Traefik 2.0",
	"tags": ["development", "routing", "traefik", "installation"],
	"description": "How to install traefik",
	"content": "Installation of traefik is done through helm, and we have a traefik helm chart for Altinn Tjenester 3.0.\nIf there is a fresh installation of traefik 2.0 with helm 3.0, make sure that there is a folder called crds in that helm chart folder. After that it is just to install with helm, and wait for the traefik service to have a public IP before updating the Azure DNS zone with a A record.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/instances/",
	"title": "Instances",
	"tags": ["api"],
	"description": "The Platform API to work with instances",
	"content": "Overview An instance works as a form of envelope or folder where data can be collected and exchanged between the user and owner of the application. The instance document is a way for Altinn and external parties to track the state of one specific data exchange. How long an instance can live and how many interactions there can be between the application owner and user will vary from one app to another. Advanced Apps will have their own documentation.\nbasePath = https://{hostname}/storage/instances Query instances It is possible to query instances based on a number of query parameters.\nApplication owners can search for from a single application or across all applications that they have. Using this endpoint requires the scope \u0026lsquo;altinn:instances.read\u0026rsquo;. And query parameter \u0026lsquo;org\u0026rsquo; or \u0026lsquo;appId\u0026rsquo; must be included in the request.\nUsers can search for instances linked to either themselves or an instanceOwner they are authorized to read the instances of. Query parametr \u0026lsquo;instanceOwner.partyId\u0026rsquo; must be included in the request if using this endpoint as an end user.\nSearch for instances with a simple GET request towards the instances endpoint. Avaliable query paramters include:\n process.currentTask (string)\nSearch for instances at a specific step in its process. process.isComplete (bool)\nSearch for instances where the process is completed. process.endEvent (string)\nDeprecated. The parameter doesn\u0026rsquo;t have any code associated with it. process.ended (datetime)\nFilter instances based on ended date. instanceOwner.partyId (int)\nFilter instances based on the instance owner party id. lastChanged (datetime)\nFilter instances based on the last time they where worked on. created (datetime)\nFilter instances based on when they where initially created. visibleAfter (datetime)\nFilter instances based on when they became visible. dueBefore (datetime)\nFilter instances based on their due date. excludeConfirmedBy (string)\nExclude instances already confirmed by a specific stakeholder. Usually the short name of an application owner. isArchived (bool) Filter instances based on whether they are archived. isSoftDeleted (bool) Filter instances based on whether they are soft deleted. isHardDeleted (bool) Filter instances based on whether they are hard deleted. Note that hard deleted instances are only included if an application owner retrieves instances, and the results may include deleted drafts.  Some examples:\nGet all instances of application org/app, that is at process task with id Task_2 (which is Submit, see process definition), and has last changed date greater than 2019-05-01.\nGET {storagePath}/instances?appId=org/app\u0026amp;process.currentTask=Task_2\u0026amp;lastChanged=gt:2019-05-01 Get all instances of all applications of a given application owner org that has ended date greater than 2020-03-10.\nGET {storagePath}/instances?org=org\u0026amp;process.ended=gt:2020-03-10 Get all instances of all applications of a given application owner org that has not already been confirmed completed by org.\nGET {storagePath}/instances?org=org\u0026amp;excludeConfirmedBy=org Get all instances of an application that are at a specific process task e.g. Task_1.\nGET {storagePath}/instances?appId={org}/{app}\u0026amp;process.currentTask={taskId} On query parameters specifying date time you can use the following operators:\n gt: - greater than gte: - greater than or equal to lt: - less than lte: - less than or equal to eq: - equal (can also be blank)  They can be combined to define a range:\ndueBefore=gt:2019-02\u0026amp;dueBefore=lt:2019-03-01 The query returns a result object (page) which includes a collection of instances that matched the query. 100 instances is returned by default. Use size to get more or less instances per page. To get to the next page you have to use the continuationToken present in the next link.\nThe instances endpoint returns a query result object with information about how many total hits totalHits that the query matched and how many objects returned count.\nThe endpoint supports application/json.\nAccept: application/json { \u0026#34;totalHits\u0026#34;: 234, \u0026#34;count\u0026#34;: 50, \u0026#34;self\u0026#34;: \u0026#34;{storagePath}/instances?appId=org/app\u0026amp;size=50\u0026#34;, \u0026#34;next\u0026#34;: \u0026#34;{storagePath}/instances?appId=org/app\u0026amp;size=50\u0026amp;continuationToken=%257b%2522token%2522%253a%2522%252bRID%...\u0026#34; \u0026#34;instances\u0026#34;: [ {...}, {...}, ... ] } } "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/devslide/",
	"title": "Intro for Developers",
	"tags": [],
	"description": "Introduction",
	"content": "Altinn Studio Aka. \u0026ldquo;Tjenester 3.0\u0026rdquo; What are we creating  A app development solution Altinn Studio: The development tool Altinn Platform: The supporting platform Altinn Apps: The solution to host the Apps   What technologies are we using  .Net Core : Backend / API REACT : Frontend Altinn Studio \u0026amp; App Docker: Apps are created as Docker Containers Kubernetes: The containers are hosted in Kubernetes Azure: We use Azure for Kubernetes hosting   Altinn Studio  Design frontend Define frontend logic Define datamodel for app Define app logic for backend Build \u0026amp; deploy app container Source Control for App files       Altinn Apps  Kubernetes Cluster where apps are hosted One cluster per Organisation   Altinn Platform  Supporting functionality Authentication Authorization Storage Register Profile   Documentation  The different solutions are described in detail on docs Terms Architecture   The End Tilbake\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/k6/",
	"title": "k6",
	"tags": ["development", "testing", "api"],
	"description": "Performance and Functional Testing of API with K6",
	"content": "k6 is a developer-centric, free and open-source load testing tool built for making performance testing a productive and enjoyable experience. read more about K6 here\nSet up k6 tests  Clone the k6 tests from GitHub Repo Install docker and make sure the drive having the k6 tests is shared. Open cmd and download the latest k6 docker image docker pull loadimpact/k6  How to write k6 tests  Find the area/collection where the new test has to be added. k6 test project is divided into three basic folders.  tests - includes all the .js test files that send data to methods in api and validated response data - includes all the testdata ex., attachments, formdata, appmetadata, etc., api - includes the api calls to platform/app apis by getting data from the tests and returns the response of the http requests. (post, get, put, delete)   Begin by adding the endpoint to config.json Create a new method for the actual api in a .js file under folder K6/src/api which gets in data from the tests and returns response. Refer below picture for a sample method calling an api with endpoint and headers and returning the response.  Create a test .js file under K6/src/tests. Refer below picture for a sample test file. More about k6 test scripts One test can call many api endpoints with appropriate data, the result output of the test is determined by the checks in a tests and the thresholds defined in a test. More about k6 test checks and thresholds  Run k6 tests locally with a k6 docker image and visualize results in grafana  Before a test can be run, the files mentioned under .gitignore has to be created under the data folder. In cmd, change directory to \\altinn-studio\\src\\test\\K6 Download and run docker containers of influxdb and grafana  docker-compose up -d influxdb grafana  Open http://localhost:3000/ in a browser and the dashboard gets preloaded and is visible under \u0026lsquo;Recently viewed dashboards\u0026rsquo;. Run the below example command where pdf.js testscript is run for 1 minute with a maximum of 20 virtual users and with a ramp up and ramp down of virtual users. The testscript targets 5 vus for first 10 seconds, targets 20 vus for next 40 seconds and ramps down to 5 vus for the last 10 seconds.  docker-compose run k6 run --vus=20 --stage 10s:5,40s:20,10s:5 /src/tests/platform/pdf/pdf.js -e env=value  Once the above script it run, one could see results in grafana similar to the below image.   k6 test pipeline in Azure Devops Azure Devops Pipeline for Platform\nAzure Devops Pipeline for App\nVisualizing k6 results k6 by default outputs in stdout format while running a test. Below is described various methods to visualise results.\n  To get a junit.xml output from k6 tests, use handleSummary and the logic to export junit from the summary.json This comes in handy to view test results in CI/CD pipelines.\n  k6 performance test results can be visualised with the help of a influxdb and grafana instance that stores and reads the test results and displays as graph. More about influxdb and grafana results\n  Initial results from a sample tests against performance test environment  Test case: Login - Build test data - Create instance - Upload formdata - validate and archive instance Http-requests: 14 Iteration: 1 Iteration duration: ~27 seconds Average http_req_duration : 1.9s  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/back-end/logging/",
	"title": "Logging",
	"tags": ["development", "logging"],
	"description": "Guidelines logging in backend",
	"content": "This page is a work-in-progress. Because we do not have details on how potential errors should be shown to the users, this is only a general overview currently. More details will be added once we have a functional understanding of how users should experience errors. \rLogging .Net core provides a standard logging framework that can be used to log exceptions or events to a desired logging provider (console, eventlog, azure app service, application insights). You can read more about logging in asp.net core from here.\nWhat to log? Context is very important to any warning message or error that is logged. Without context, it can be difficult to relate applicaiton failures to logs. So it is important to include the following details in the log\n Where in the code did the application fail? Who was using the system when it failed? What was the system doing when it failed? Specify a log level that can be used to filter logs when needed  Where do we log? The idea is to send the logs to the console and collect them using Application Insights (Note: Application Insights involves data limitation and costs vary based on needs). It is also possible to log to different log providers by configuring it in the config file. F.ex It is possible log only error and warning message to appinsights and information logs to console.\nThird Party Logging Frameworks There are a bunch of third party logging frameworks available for .net core. Serilog is one of them and Altinn Studio will use it to log. There are many advantages of using serilog\n It\u0026rsquo;s open source Allows logging to many sinks like slack, azure, etc. It has support for logging to files (Microsfot basic logging doesn\u0026rsquo;t have support for logging in file at this point) It allows to define a custom message template for logging. Provides prebuilt enrichers through nuget. These add more value and information to the log events. This can be used to filter events in Application Insights.  Step one - Init logger in Program.cs public static IWebHostBuilder CreateWebHostBuilder(string[] args) =\u0026gt; WebHost.CreateDefaultBuilder(args) .ConfigureLogging((hostingContext, logging) =\u0026gt; { logging.ClearProviders(); Serilog.ILogger logger = new LoggerConfiguration() .WriteTo.Console() .CreateLogger(); logging.AddProvider(new SerilogLoggerProvider(logger)); }); Step two - inject logger where it is needed private ILogger logger; public ApplicationsController( IApplicationRepository repository, ILogger logger) { this.logger = logger; this.repository = repository; } Step three - log error _logger.LogError(exception, \u0026#34;Unable to process request...\u0026#34;); "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/naming/",
	"title": "Naming Conventions",
	"tags": ["development"],
	"description": "Naming guidelines for Altinn Studio development",
	"content": "C# The Altinn project will use Microsoft’s coding conventions as a general guideline when no other guidelines are given.\nExceptions/additions to the general guideline:\nImplicit typing (var) should only be used when a variable is initialized with an anonymous type, which is a common scenario in LINQ query expressions. In general implicit typing makes the code more difficult to read and understand,and should be avoided. Altinn specific coding guidelines:\nMethods should not be more than 50 lines long When dealing with XML you should prefer XDocument to XmlDocument (especially in new methods) If/for/while/using and other structures should normally not be more than 2-3 levels deep All disposeable objects (proxies, DbCommand and so on) should be disposed by using a using block. Altinn specific naming guidelines:\nNames for classes, methods and variables should be describing, but not too long WCF-Artifact Naming TUL Naming Standard Namespace \u0026amp; Solution Structure\nReact Names of react-components should be descriptive and in pascal case\nActions Names of actions should be descriptive and in camel case.\nAn action should have the initial action, for instance fetchFormLayout, and an action if it succeeds and if it fails. For instance fetchFormLayoutFulfilled(succeed) and fetchFormLayoutRejected(failed).\nSagas Names of sagas should have the name of the action it listens to, and the word Saga appended to the end. For instance fetchFormLayoutSaga.\nAnd for saga-watchers, should have the watch-word appended to the start, and the saga name it watches. For instance watchFetchFormLayoutSaga.\nReducers Names of reducers should have a descriptive name of that it is responsible for updating in the redux-store, and the word Reducer appended to the end. For instace formLayoutReducer.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/loadbalancer/",
	"title": "Nginx loadbalancing in studio",
	"tags": ["development", "nginx", "routing"],
	"description": "Information about routing with nginx",
	"content": "Nginx routing The router config is stored as a configmap in our kubernetes cluster, and mounted to the pod as a .conf file. When the config needs to be changed, the changes should be done in the loadbalancer-configmap for the correct environment (dev/prod).\nApply the changes, and restart the pod:\nOption 1: kill the pod and let the deployment spinn up a new pod.\nOption 2: open a shell into the pod kubectl exec -it [POD_NAME] -- sh and run the command nginx -s reload\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/nginx/",
	"title": "Nginx routing",
	"tags": ["development", "nginx", "routing"],
	"description": "Information about routing with nginx",
	"content": "Nginx routing The router config is stored as a configmap in our kubernetes cluster, and mounted to the pod as a .conf file. When the config needs to be changed, the changes should be done in the loadbalancer-configmap for the correct environment (dev/prod).\nApply the changes, and restart the pod:\nOption 1: kill the pod and let the deployment spinn up a new pod.\nOption 2: open a shell into the pod kubectl exec -it [POD_NAME] -- sh and run the command nginx -s reload\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/loadbalancer/ssl-certificate/",
	"title": "Nginx SSL/TLS certificate",
	"tags": ["development", "nginx", "routing", "ssl", "tls", "certificate"],
	"description": "Information about SSL/TLS certificates with nginx",
	"content": "Generate SSL/TLS certificates from .PFX file In altinn studio we are using nginx as a proxy for internal routing. After issues with creating SSL/TLS certificates for nginx we we have written a guide for future developers to follow when creating SSL/TLS certificate secrets in kubernetes and mounting them to the nginx pods.\nDownload .pfx file At the moment of writing this guide, we store our *.altinn.studio certificate in azure keyvault and you will need access to download it from that vault. When you have downloaded the .pfx file, you can start extracting the CA certificate bundles, private key and the certificate.\nExtracting the values from the pfx file With openssl installed and in path, open a terminal and type the command\nExtracting the private key $ openssl pkcs12 -in \u0026lt;filename.pfx\u0026gt; -nocerts -nodes -out star.altinn.studio.key Extracting the certificate $ openssl pkcs12 -in \u0026lt;filename.pfx\u0026gt; -clcerts -nokeys -out star.altinn.studio.cert Extracting the CA certificates $ openssl pkcs12 -in \u0026lt;filename.pfx\u0026gt; -cacerts -nokeys -chain -out star.altinn.studio.ca.cert Assembling a SSL/TLS bundle After extracting all the certificate and keys, you will have 3 new files in the same directory that you have the .pfx file. These files will be:\n star.altinn.studio.key star.altinn.studio.crt star.altinn.studio.ca.crt  Now you can start assembling an SSL/TLS certificate bundle.\nIn the file star.altinn.studio.ca.crt you will have 2 certificate, one intermediate and a root certificate. The root certificate doesn\u0026rsquo;t need to be in the SSL/TLS bundle, so copy the second certificate block (including the -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----) in this file and paste it at the bottom in star.altinn.studio.crt-file.\nUsing the SSL/TLS values in the kubernetes pod Kubernetes encodes secrets with base64, so you will need to encode the contents of star.altinn.studio.cert and star.altinn.studio.key files. And create a secret in the kubernetes cluster. The secret can be defined like this:\napiVersion: v1 kind: Secret metadata: name: ssl-cert type: Opaque data: star.altinn.studio.cert: \u0026lt;BASE 64 ENCODED SSL/TLS-BUNDLE\u0026gt; star.altinn.studio.key: \u0026lt;BASE 64 ENCODED PRIVATE KEY\u0026gt; The names under data will be the filenames mounted on the kubernetes pods (these will have to match with the filenames defined in the nginx.conf config file, which is a configmap).\nnginx.conf:\n\r...\rserver {\rlisten 443 ssl http2;\rssl_protocols TLSv1.2 TLSv1.3;\rssl_prefer_server_ciphers on;\rssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;\rssl_certificate /etc/nginx/ssl/altinn_studio/star.altinn.studio.cert;\rssl_certificate_key /etc/nginx/ssl/altinn_studio/star.altinn.studio.key;\rssl_stapling on;\rssl_stapling_verify on;\rssl_trusted_certificate /etc/nginx/ssl/altinn_studio/star.altinn.studio.cert;\rssl_session_cache shared:SSL/TLS:40m;\rssl_session_timeout 4h;\rssl_session_tickets on;\r...\r}\rThe path of where the certificates are mounted is described in the helm deployment. It will be a volume and volumeMount on the deployment. (same as mounting of configuration through a configmap).\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/back-end/nuget-package/",
	"title": "Nuget Package",
	"tags": ["nuget"],
	"description": "Overview of nuget package usage in altinn studio",
	"content": "Altinn 3 NuGet Packages Altinn 3 has published a number of nuget packages to share common libraries between different solutions. You can read more about nuget here.\nThe following nuget packages are available for download here\n Altinn.App.Api Altinn.App.Common Altinn.App.PlatformServices Altinn.Common.PEP Altinn.Authorization.ABAC Altinn.Platform.Storage.Interface Altinn.Platform.Models JWTCookieAuthentication Altinn.Common.AccessToken Altinn.Common.AccessTokenClient  Procedure for changes involving NuGet Packages  Implement all changes necessary in the NuGet package project. Remember to update the package version, assembly version and file version so they match. Submit a pull request on these changes only. No implementation on other projects should be included. Once pull request is approved and changes are merged into master; create and publish new NuGet package based on master branch. Continue with implementation, referencing the updated package wherever it is needed. Remember to update all outdated references to the package and check that all tests run successfully before submitting a final PR.  Creating a NuGet package Detailed documentation on how to create a NuGet package, guidelines etc can be found here.\nAn example of nuget package creation Open the project csproj file to edit it as an xml file.\nKeep properties related to NuGet separated from other properties as in the example below:\n\u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;netstandard2.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;OutputType\u0026gt;Library\u0026lt;/OutputType\u0026gt; \u0026lt;AssemblyVersion\u0026gt;2.5.10.0\u0026lt;/AssemblyVersion\u0026gt; \u0026lt;FileVersion\u0026gt;2.5.10.0\u0026lt;/FileVersion\u0026gt; \u0026lt;!-- SonarCloud requires a ProjectGuid to separate projects. --\u0026gt; \u0026lt;ProjectGuid\u0026gt;{D9F6DAB7-E921-44B6-A1A6-5796DCAE0D07}\u0026lt;/ProjectGuid\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;!-- NuGet package properties --\u0026gt; \u0026lt;PackageId\u0026gt;Altinn.Platform.Storage.Interface\u0026lt;/PackageId\u0026gt; \u0026lt;PackageVersion\u0026gt;2.5.10\u0026lt;/PackageVersion\u0026gt; \u0026lt;PackageTags\u0026gt;Altinn;Studio;Platform;Storage;Models\u0026lt;/PackageTags\u0026gt; \u0026lt;Description\u0026gt; This class library holds the models exposed by the external endpoints of the Altinn 3 Storage component. \u0026lt;/Description\u0026gt; \u0026lt;PackageReleaseNotes\u0026gt; https://docs.altinn.studio/teknologi/altinnstudio/changelog/storage-interfaces/ \u0026lt;/PackageReleaseNotes\u0026gt; \u0026lt;Authors\u0026gt;Altinn Platform Contributors\u0026lt;/Authors\u0026gt; \u0026lt;RepositoryType\u0026gt;git\u0026lt;/RepositoryType\u0026gt; \u0026lt;RepositoryUrl\u0026gt;https://github.com/Altinn/altinn-studio\u0026lt;/RepositoryUrl\u0026gt; \u0026lt;IncludeSymbols\u0026gt;true\u0026lt;/IncludeSymbols\u0026gt; \u0026lt;SymbolPackageFormat\u0026gt;snupkg\u0026lt;/SymbolPackageFormat\u0026gt; \u0026lt;/PropertyGroup\u0026gt;  Save the changes Open a command line utility like git bash, powershell or cmd. Navigate to the project folder. Build the project using Release configuration:\ndotnet build -c Release Pack the project into a NuGet package:\ndotnet pack -c Release --include-source -p:SymbolPackageFormat=snupkg\nThe package will now be created in {projectfolder}\\bin\\Release. Navigate to the release folder. Publish the package:\ndotnet nuget push Altinn.Platform.Storage.Interface.2.5.10.nupkg -k [nuget api key] -s https://api.nuget.org/v3/index.json Your package will now be published to nuget.org  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-nuget/older/",
	"title": "Older",
	"tags": [],
	"description": "Overview of changes introduced into app nuget packages up to (not including) major version 3.",
	"content": "\rBreaking changes\rOverview of breaking changes introduced into app nuget packages in v1.0.62-alpha to 2.0.1\n\r\rWhat\u0026#39;s new\rOverview of changes introduced in v1.0.62-alpha -- 2.0.1\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/azure-devops/pipelines/",
	"title": "Pipelines",
	"tags": ["development"],
	"description": "Quality checklist and overview of pipelines in Azure DevOps",
	"content": " Quality checklist Build pipelines Release pipelines  Quality Checklist  all sensitive information is marked as secret. Read more about setting variables as secret here. verify that no sensitive information is available in the exported API JSON definition (https://dev.azure.com/brreg/d0be3bbb-9145-4490-8d76-fd8024277467/_apis/pipelines/{definitionId}) make sure that no secrets are shared with forks of github repos if you are using a github integrated pipeline. Read more about that here. if it exists a built in task for the job the pipeline should do, this should be prefered over writing your own scripts. Both for maintainability and security reasons. referencing other pipelines is done by definitionId.  Build Pipelines The build pipelines are grouped in folders based on either the part of the solution they are used for or the purpose of the pipeline. See build pipelines here.\n altinn-apps altinn-platform altinn-studio code-analysis load-test test  altinn-apps There are pull request and master pipelines for app frontend and kubernetes wrapper.\nThe pull request pipeline builds a dockerimage and is triggered whenever a pull request is created or updated that modifies code related to the component.\nThe master pipeline builds a docker image and pushes it to Azure Container Registry. The pipeline is triggered whenever new code is merged into the master branch that modifies code related to the component.\nRemaing pipelines in this folder are described below.\naltinn-studio-build-app-image  trigger: triggered by app developers in Altinn Studio details: builds a docker image of an app and pushes it to Container Registery. cloud component integrations: Azure Container Registry  altinn-studio-deploy-app-image  trigger: triggered by app developers in Altinn Studio. details: Gets APIM Subscription key if required and deploys a new helm release to the correct AKS cluster. cloud component integrations: Azure API Management, Azure Kubernetes services  altinn-studio-update-deploy-release-db  trigger: final step in build/deploy app image pipelines details: Sends request to designer to update status of a given buil or release of an app.  altinn-platform / altinn-studio Pipelines in altinn-platform and altinn-studio share the same structure. There is a pull request and master pipeline for each component.\nThe pull request pipeline builds a dockerimage and is triggered whenever a pull request is created or updated that modifies code related to the component.\nThe master pipeline builds a docker image and pushes it to Azure Container Registry. The pipeline is triggered whenever new code is merged into the master branch that modifies code related to the component.\nThe pull request pipeline for the .net app template does not build a docker image, but simply ensures that it is possible to build the app template used by Altinn Studio.\nPipelines follow this naming standard: [component]-(master/pull-request).\ncode-analysis Each component in the solution has their own analysis pipeline. The pipeline runs unit and integration tests and triggers a sonar cloud analysis of the code.\nPipelines follow this naming standard: [component]-analysis-[langugage].\nload-test The load-test pipelines are administered by the load-testing team. The pipelines run k6 tests aimed at YT01.\ntest There are automated tests that are aimed at our running solutions and that can be run in any environment.\nThe pipelines in this project have varying triggers. Some are on a schedule and regularily run in one or all of our environments. Others are triggered when a new release is deployed to an environment.\napps-and-platform-postman  trigger: nightly schedule environment: at22 details: tests platform and app APIs  studio-testcafe  trigger: final task in release pipeline for Designer environment: all details: runs test café test in Altinn Studio to validate most common functionality.  apps-k6  trigger: N/A environment: N/A details: k6 tests to verify Altinn Apps behavior  platform-k6  trigger: final task in release pipeline for relevant platform components. environment: all except YT01. details: k6 tests to verify Altinn Platform functionality.  Release Pipelines See all release pipelines here.\nOur release pipelines are set up with multiple stages. This allows for different policies related to deploy and varying triggers.\nCommon for all release pipelines is that they rely on an artifact containing the helm chart which is packed in Azure Studio Ops project.\nDeploy to TT02 or production requires approval from a team member. Weekly releases are scheduled for these environments.\nHOWTO Setting a variable as secret Marking a variable is secret is straight forward. Navigate to the pipeline variables.\nAll that is needed in order for a variable to be secured in the pipeline is click on the lock icon at the right hand side.\nDisable sharing of secrets on github forks Disabling of secret sharing on repo forks are done by navigating from the pipeline to Triggers and selecting the github integration under \u0026ldquo;Pull Request Validation\u0026rdquo;. Here you can disable secret sharing by disabling the build on forks.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/postmessage/",
	"title": "Post Message",
	"tags": ["development", "front-end"],
	"description": "Guidelines for using post message functionality in Altinn Studio",
	"content": "Window.postMessage() is introduced to handle communication between components that has no connection other then the need to communicate/trigger events. Eg. its used to communicate with the syncBar to get it to perform a new status check. To read more see: Window.postMessage\nUsage Dispatching a message event is done the following way:\n// variables should be used for messages var SAVED_EVENT = \u0026#39;SAVED\u0026#39; window.postMessage(SAVED_EVENT, window.location.href); Catching the event is done by adding an event listener to the component one needs to communicate with:\npublic componentDidMount() { window.addEventListener(\u0026#39;message\u0026#39;, this.eventThatShouldHappend); } public eventThatShouldHappend(){ if (event.data === SAVED_EVENT){ //Do necessary handling of correct message  } } When the commponent is unmounting the event listener should be removed:\npublic componentWillUnmount() { window.removeEventListener(\u0026#39;message\u0026#39;, this.eventThatShouldHappend); }  Remember to create \u0026ldquo;message variables\u0026rdquo; that make sense when comparing different messages. Example: \u0026ldquo;SAVED_IN_UI_EDITOR\u0026rdquo;, \u0026ldquo;SAVED_IN_OTHER_PLACE\u0026rdquo; or \u0026ldquo;FETCH_REPO_STATUS\u0026rdquo;.\n "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/postgres/",
	"title": "PostgreSQL",
	"tags": ["development"],
	"description": "Setting up PostgreSQL for local development",
	"content": "\rNOTE: Work in progress.\n\r\rInstall PostgreSQL and pgAdmin4 Follow the instructions on https://www.postgresql.org/download/\nSet up database Open pgAdmin 4. We will be working on the PostgreSQL 13 server.\n  Right click on Databases and select Create.   Fill inn database name eventsdb and click Save.   You should now be able to see a new database in the list. If you don\u0026rsquo;t - right click the server and select REFRESH.   Set up admin user   Right click on Login/Group Roles , select Create and Login/Group Roles.   In the General tab fill out the username platform_events_admin   Navigate to the Definition tab and insert password: Password   Navigate to the Priviliges tab and enable all options and click Save.   Confirm that the user has been created in the side bar. If you cannot see the user, try refreshing the Login/Group Roles section.   Set up app user   Right click on Login/Group Roles , select Create and Login/Group Roles.   In the General tab fill out the username platform_events   Navigate to the Definition tab and insert password: Password   Navigate to the Priviliges tab and enable Can log in and click Save.   Confirm that the user has been created in the side bar. If you cannot see the user, try refreshing the Login/Group Roles section.   Create a schema called events. [A more detailed description to come..]\n  Right click the database in the side menu and select Query tool\u0026hellip;   Run script grating user privilliges on schema resources.\n  GRANT USAGE ON SCHEMA events TO platform_events; GRANT SELECT,INSERT,UPDATE,REFERENCES,DELETE,TRUNCATE,REFERENCES,TRIGGER ON ALL TABLES IN SCHEMA events TO platform_events; GRANT ALL ON ALL SEQUENCES IN SCHEMA events TO platform_events; The result should be as shown in the picture below. "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/postman/",
	"title": "Postman",
	"tags": ["development", "testing", "api"],
	"description": "API Testing with postman",
	"content": "Postman To test API endpoints the tool postman enables easy configuration and setup of various HTTP requests, read more about postman here.\nAuthentication Several of the exposed APIs requires various cookies, for instance authentication and gitea information. To be able to do requests against these APIs the cookies have to be included in the HTTP request, and configured in postman. The cookies can be found in the following way:\n In your browser login to dev.altinn.studio/altin.studio/altinn3.no depending on what environment you are targeting Notice that the cookies AltinnStudioDesigner, AltinnStudioRuntime and i_like_gitea (among others) has been saved for the domain name you have logged in to.  For Chrome cookies can be found under settings -\u0026gt; advanced -\u0026gt; cookies -\u0026gt; see all.    The two cookies AltinnStudioDesigner and AltinnStudioRuntime works as auth against the Designer and APP API respectively, so if you are targeting a Designer API you should include the AltinnStudioDesigner cookie, along with the i_like_gitea cookie, and if you are targeting a runtime API the AltinnStudioRuntime cookie should be included. Cookies are easily added to the postman requests under the slightly hidden cookies setting, see:\nSet up postman tests  Download and install postman native app. Import the files from src/test/Postman/Collection to the collections area in Postman. Import the environment .json file from src/test/Postman to the environments area in Postman.  How to write postman tests  Find the area/collection where the new test has to be added. Add a new request of type GET/POST/PUT/DELETE under the right folder. Provide the endpoint, input for the request. Make sure the variable values are accessed from environments file. Write the tests as a javascript code in the \u0026lsquo;tests\u0026rsquo; section of a request. More about test scrips Tests should have one test to verify valid response code and another test to validate the content of the response.  Information about the postman collections  Collections folder include postman collections for Platform API, Storage API, APP API. Platform API uses Platform.postman_environment as an environment file. Storage, App API and Negative tests uses App.postman_environment as an environment file. One has to fill in the values (testdata) in the environment file based on the environment under test. The collections has steps that would authenticate an user and set appropriate cookies.  Run Postman tests against a test environment.  Open Postman and Import the Postman collection file and the corresponding envrinonment file. Select the environment file and fill in the necesary information for the required collection. Required Test data for App / Storage / Negative Tests Collection are envUrl, org(appOwner, app(level2-app), testUserName(level2LoginUser), testUserPassword(use same password for two users), level3-app, level1-app, testUserName2(level1LoginUser) Required Test data for Platform are envUrl, org(appOwner), app(level2-app), partyID, SSN, OrgNr, userID Open the Postman runner -\u0026gt; Select the collection and environment and click \u0026lsquo;Start Run\u0026rsquo;  Note: newman can be used to a Postman collection from command line interface.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/processing/process/process_interaction/",
	"title": "Process Interaction",
	"tags": ["app-backend"],
	"description": "",
	"content": "App backend exposes different APIS that is relevant during a app process.\nThis page show examples\nProcess Interaction App Frontend - App Backend - \nFull Screen\nThe above example show the following\n  User clicks link to a App from service catalog\n  The browser redirect to the start service page in the app. The react application renders the correct view\n  User click on instantiate button.\n  App Frontend calls instansiate API\n  Instantiate create a new instance with data for the datamodell with prefill and returns instance information that user should be redirect to.\n  User/browser open the instance\n  App frontend calls app backed to get the instance state\n  App Frontend render the correct component for the given state.\n  User input data . App Frontend call Data API to update data. If calculation or dataretrieavel causes additional data updates on server side, the response indicates to app frontend to get the latest data\n  App frontend gets the updated data 9 and 10 is repeated as long user has data to input\n  User press complete/send inn button\n  App frontend Saves data\n  App frontend calls validation API and any possible errors are presented to the user. If\n  If no errors are returned App Frontend call Process API to complete Task. Process Api trigger task validation to make sure it is allowed to move process forward. If validation fails, process API returns\n  Process Interaction End User System - App Backend - \nFull Screen\nProcess Interaction Sirius Use case \nFull Screen\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/rest/",
	"title": "RESTful APIs (Representation State Transfer)",
	"tags": ["development", "api"],
	"description": "Guidelines for designing REST apis for microservices in Altinn",
	"content": "This page is work-in-progress. This is a proposed api which most likely is going to change.\r\rREST REST is an architectural style for designing loosely coupled applications over HTTP which was coined by Rob Fielding in 2000. We will define services according to REST.\n  REST APIs should start with /api so that we with ease can differentiate between an rest api call and a ux-application call.\n  REST APIs should start with a short word to indicate the logical domain or group of apis.\n  REST APIs should be versioned, with semantic versioning: v1 major (incompatible API changes), v1.1 minor (add backwards-compatible functionality), and v1.1.1 patch (bugfix). We should strive to make REST APIs backwards compatible, hence clients should not break if we add a new parameter.\n  REST APIs paths should be in lower case letters. Query parameter names should be lowerCamelCase.\n  REST APIs should be resource oriented. A resources is a thing that the client and server knows about. The API provides methods to find, create, update, delete or manipulate a resource object. A resource in a system should have only one logical URI, which should provide a way to fetch related or additional data about the resource.\n  REST APIs specifications should be public awailable as OpenApi 3.0 (swagger).\n  /api/{domain}/{version}/{resource} Example:\nCreate a new instance resource. Post to instances with query params that identifies the application and the instance owner. This call should return identifier of the new instance resource or the json of the instance resource itself.\n/api/storage/v1/instances?applicationId=KNS-sailor\u0026amp;instanceOwnerId=1024 GET one instance or PUT to to this url to update the instance.\n/api/storage/v1/instances/23f1faab-bdb3-4cba-aed2-d515e1be6db8 Get (query) all instances that is instance owner has\n/api/storage/v1/instances\u0026amp;instanceOwnerId={instanceOwnerId}[\u0026amp;since=2017-01-01] "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/",
	"title": "Routing",
	"tags": ["development", "routing"],
	"description": "Information about routing",
	"content": "Routing \rNginx routing\rInformation about routing with nginx\n\r\rTraefik routing\r\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/securecoding/",
	"title": "Secure DevOps",
	"tags": ["development", "routing"],
	"description": "Security is an important concern in all the phases of the DevOps cycle for Altinn 3.",
	"content": "Having a Secure DevOps process requires that security is built into the applications, the process, the infrastructure, and the configuration, and more.\nBelow you find information on what kind of tools, patterns, and processes we follow to make sure we think about application and infrastructure security for all phases.\nPlanning phase During the planning phase, the requirements for features are gathered. Already in this phase, we identify changes that need special security considerations. Typical this is done as part of grooming. We mark our security-related features and bugs to a specific label. Details of security-related issues are in many cases kept out of GitHub.\nCode phase During the development of a feature, we have several processes and tools to help us creating secure code.\nDevelopment checklists We have a development checklist that ensures that developers and reviewers consider the different security aspects.\nSee checklist.\nIDE and tools We use both Visual Studio and Visual Studio Code. Those provide us with tools for static code analysis.\n StyleCop analyzes C# source code to enforce a set of style and consistency rules. See project Code Analysis verifies the code after a ruleset defined by Altinn  Unit and integration tests As part of the coding process unit and integration-tests are created. Besides, to cover functionality, many of them cover security aspects like authentication and authorization.\nBuild phase Once a developer has finished coding a feature he/she creates a pull request in our repository.\nPeer Reviews All pull requests require peer review from at least one team member from the Altinn DevOps team.\nSee active pull requests.\nRun Unit and integration tests As part of the build pipelines, all unit and integration tests are run. This makes sure that security functionality has not been broken.\nStatic code analysis Sonar Cloud Every pull request is analyzed by Sonar Cloud\nSonar Cloud analyzes the code by a defined rule set and checks the code against OWASP Top 10, SANS Top 25 and the Co\nWe have defined some quality gates that the code need to adhere to to be able to merging pull request in to master.\nOur current active issues are available here.\nLGTM LGTM is a code analysis platform for identifying vulnerabilities and preventing them from reaching production.\nThis is run for every pull request.\nTest Each feature added to our platform is tested.\n Integration tested with positive and negative tests for access control where possible Manual functional tests Manual security testing for selected features  Dynamic code analysis. We use different tools to perform dynamic code analysis.\nSome of the tools are\n HCL AppScan  We also regulary use third party secyurity companies to go through our code.\nRelease phase Releases are created automatically. For Test environments, every build is deployed automatically. For the Application Test environment and production, we deploy once a week. Those releases are created automatically. Deploy are needs to be approved by one team member.\nDeploy phase All deployment is done with an automated tool like Azure Pipelines reducing the risk for misconfiguration.\nApplications are deployed to Azure Kubernetes Services that has standard policies defined with a focus on the reduction of risk. Read more about Secure DevOps with AKS.\nOperate phase When the different applications are in production the DevOps team make sure that everything works as expected\nWe have different tools to identify security threats for our running applications.\n Application Insights presents log and traffic information making it possible to detect different types of attacks X y  Monitor phase During the monitor phase, the team follows up on how the different solutions are working and identifying improvements and changes.\nDependency updates We use Dependabot and WhiteSource Bolt to monitor updates for dependencies.\nIt creates pull request in a mirror repository\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/about/slide/",
	"title": "Slides",
	"tags": [],
	"description": "En presentasjon om målsettinger og konsepter for Tjenester 3.0",
	"content": "Altinn Studio Aka. \u0026ldquo;Tjenester 3.0\u0026rdquo; Dagens løsning  Produksjonsatt sommeren 2010 Basert på InfoPath og SharePoint 115.000.000 skjema fylt ut 404 aktive innsendingstjenester i 2018   Bakgrunn og mål  Behov har vært kjent lenge POC utviklet i 2015 (men lagt på is grunnet manglende finansiering) Finansiering på Statsbudsjettet 2018 Startet opp igjen våren 2018    Hva er målet med prosjektet?  En modern utviklingsplattform Et effektivt utviklingsverktøy En moderne infrastruktur En plattform for gjenbruk En platform for deling av data og erfaringer   En moderne utviklingsplattform Altinn Studio er en åpen og modern utviklingsplattform\n Versjonering og samarbeid via Git Støtte for distribuert utvikling All programvare som benyttes er åpen kildekode. Også selve 3.0-plattformen. Funksjonalitet i Altinn tilgjengelig via API’er Moderne og populær teknologi, f.eks. React og Visual Studio Code Full selvbetjening Tekniske utviklere kan benytte best-of-breed utvikler-verktøy og teknologi, slik de er vant til.       Et effektivt utviklingsverktøy Altinn Studio tilbyr enkel, effektiv og 100% selvbetjent utvikling og forvaltning av tjenester, også for ikke-teknologer.\n Brukergrensesnitt (GUI) API’er Arbeidsflyt Logikk og dynamikk Datamodellering Konfigurasjon og tilgangsstyring Automatisert testing …   En moderne infrastruktur Altinn Studio (og tjenester som lages der) vil kjøre på en moderne infrastruktur.\n Docker containers for applikasjoner Kubernetes for orkestrering av containers  Dette gir isolering mellom applikasjoner (microservices), enklere skalering og understøtter “DevOps”.\n  Hva kan jeg gjøre med MVP?  Opprette bruker og logge inn i Altinn Studio  Lage (og finne igjen) en tjeneste  Finne tjenester fra andre organisasjoner  Laste opp en datamodell som fungerer i tjenesten (Seres eller OR)  Lage et skjemadesign med drag and drop av elementer (begrenset utvalg av komponenter)  Legge inn tekster/tekstnøkler for tjeneste  Legge inn regler for skjemalogikk (validering, kalkulering, dynamikk)  Bruke API-oppslag i tjenesten (forutsetter Ajax kall kodet i GUI)\n Endre på standardfil for arbeidsflyt  Endre på filer med versjonskontroll  Legge den ferdige tjenesten i test- og produksjonsmiljø  Tjenster 3.0 vs Tjenester 2.0  Skjemaverktøy  Egenutviklet vs InfoPath React vs SharPoint formserver Responsivt vs ikke responsivt   Arbeidsflyt  BPMN vs Custom   Tjenester som API  REST vs SOAP Individuell API vs Generelle   Ressurser  Isolerte vs delte Raskt skalerbar vs lang leveringstid   Dataformat  JSON/XML vs XML   Kontroll på logikk  Full kontroll på når ting skjer i plattformen i motsetning til Infopath   Shipment  Inntil videre kun pull-basert nedlasting av skjemadata.   Videre arbeid i MVP  Fokus på infrastruktur Skyløsninger Sikkerhet Deploy av tjenester Integrasjon med tjenesteeier Understøtte piloter   Detaljer løsning Tre nye løsninger\n Altinn Studio Altinn Apps Altinn Platform   Altinn Studio  Altinn Apps  Altinn Platform  Status Du kan følge utviklingen på Github. Motivasjon Se Archimate arkitekturmodell. The End Tilbake\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/",
	"title": "Solution-Specific (functional) Application Components",
	"tags": ["solution", "architecture"],
	"description": "Solution-Specific (Functional) Application Components describes the different applications and their functional components. It does not go in to detail about technology.",
	"content": "Functionality in Altinn is distributed between five different solutions\n Altinn Studio - The new application development solution Altinn Apps - The new hosting and infrastructure solution for applications Altinn Platform - The new supporting platform solution SBL - The old hosting solution for InfoPath services TUL - The old app development solution  The diagram below shows where functionality is located in the five different solutions:\nFull screen | Visio\n\n\rSolution-specific application components Altinn Apps\rDescription of the Altinn Studio solution\n\r\rSolution-specific application components Altinn Platform\rFunctionality in Altinn Platform is distributed between different reusable components.\n\r\rSolution-specific application components Altinn Studio\rAltinn Studio have many functional components that lets the app developer create, manage and deploy applications.\n\r\rSolution-specific application components local deveolopment\rAs part of the platform it is created a solution to develop and test applications.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/app-api/stateless-data-elements/",
	"title": "Stateless data elements",
	"tags": ["api"],
	"description": "The app API to work with stateless date elements not associated with an instance",
	"content": "Overview A stateless data element is a data object based on a data model without relations to an instance, instance owner or a state. The data is never persisted anywhere, and the avilable endpoints simply creates, prefills and/or runs calculations on a data object before returning it to the caller.\nbasePath\n{org}/{app}/v1/data Create new data Endpoint for creating a new stateless dataelement based on a data type.\nPOST basePath?dataType=[dataTypeId] Accept: application/{xml/json} The dataType parameter is required and should reference one of the data types defined on the application that requires app logic.\nIf prefill or calculations are defined for the data type, these will be run on the data element before it is returned.\nResponse A response with the data element in the body will be returned if a valid data type is provided.\nCalculate data Endpoint for running calculations on a data element.\nPUT basePath?dataType=[dataTypeId] Accept: application/{xml/json} The dataType parameter is required and should reference one of the data types defined on the application that requires app logic.\nThe Content-Type is used by Altinn to deserialize the request into a strongly typed object. A request must either be application/json or application/xml. No other Content-Types are supported. Content-Type is not validated against allowed Content-Types on the data type.\nProviding data as application/json Content-Type: application/json { \u0026#34;dataFormatProvider\u0026#34;: \u0026#34;SERES\u0026#34;, \u0026#34;dataFormatId\u0026#34;: \u0026#34;5703\u0026#34;, \u0026#34;dataFormatVersion\u0026#34;: \u0026#34;34553\u0026#34;, \u0026#34;Tjenesteeier\u0026#34;: null, \u0026#34;Kontaktperson\u0026#34;: { \u0026#34;navn\u0026#34;: \u0026#34;Sophie Salt\u0026#34;, \u0026#34;epost\u0026#34;: \u0026#34;1337@altinnstudiotestusers.com\u0026#34;, \u0026#34;telefonnummer\u0026#34;: \u0026#34;90001337\u0026#34; }, \u0026#34;OEnsketBruk\u0026#34;: null } Providing data as application/xml Content-Type: application/xml \u0026lt;BliTjenesteeier_M xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:xsd=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34; dataFormatProvider=\u0026#34;SERES\u0026#34; dataFormatId=\u0026#34;5703\u0026#34; dataFormatVersion=\u0026#34;34553\u0026#34;\u0026gt; \u0026lt;Kontaktperson\u0026gt; \u0026lt;navn\u0026gt;Sophie Salt\u0026lt;/navn\u0026gt; \u0026lt;epost\u0026gt;1337@altinnstudiotestusers.com\u0026lt;/epost\u0026gt; \u0026lt;telefonnummer\u0026gt;90001337\u0026lt;/telefonnummer\u0026gt; \u0026lt;/Kontaktperson\u0026gt; \u0026lt;/BliTjenesteeier_M\u0026gt; "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/styling/",
	"title": "Styling (css)",
	"tags": ["development", "front-end", "styling"],
	"description": "Guidelines for styling components in Altinn Studio",
	"content": "Summary Styling in React is done per component using a combination of Material-UI and compatible JSS.\n Components shall not be styled with CSS classes in .CSS files.\n Different component types should use different styling methods, or a combination.\nProposed order of styling methods The following order is proposed when considering styling methods:\n Styled Components (Accepts props, logic, theming) Material-UI\u0026rsquo;s JSS (Accepts theming) Inline Styling, the React way (Accepts props, logic, theming. Not directly compatible with Material-UI)  Shared Components Shared components should utilize \u0026ldquo;Styled Components\u0026rdquo; which can write Props directly in the CSS styling. The alternative way is handling styling via props is leveraging \u0026ldquo;inline styling\u0026rdquo; combined with Material-UI\u0026rsquo;s JSS. When using inline styling, the component\u0026rsquo;s styling will be configured in two different places. Inline style example\n\u0026lt;FormControl fullWidth={true} style={{ width: this.props.width ? this.props.width : null, }} \u0026gt; Styled Components example\nconst theme = createMuiTheme(altinnTheme); const StyledPopper = styled(({ ...otherProps }) =\u0026gt; ( \u0026lt;Popper {...otherProps} /\u0026gt; ))` color: ${theme.altinnPalette.primary.black}; background: ${theme.altinnPalette.primary.redLight}; border-radius: 0; box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.25); font-size: 16px; padding: 24px; max-width: 550px; margin-top: 10px; z-index: ${(props) =\u0026gt; props.zIndex || 1}`; class AltinnPopper extends React.Component\u0026lt;IAltinnPopperComponentProvidedProps, IAltinnPopperComponentState\u0026gt; { public render() { const open = Boolean(this.props.anchorEl); return ( \u0026lt;StyledPopper open={open} anchorEl={this.props.anchorEl} placement={\u0026#39;bottom-start\u0026#39;} \u0026gt; {this.props.message} \u0026lt;/StyledPopper\u0026gt; ); } } export default AltinnPopper; Exception There will be examples where \u0026ldquo;Styled Components\u0026rdquo; are hard to configure using some of Material-UI\u0026rsquo;s components where \u0026ldquo;Props\u0026rdquo; with styling needs to be passed down to sub-components. Then the regular CreateStyles method from Material-UI needs to be leveraged and can be used in a combination with Styled Components.\nStyled object example\nconst styles = { searchBoxInput: { fontSize: \u0026#39;16px\u0026#39;, color: \u0026#39;#000000\u0026#39;, padding: \u0026#39;6px\u0026#39;, }, searchBoxIcon: { color: \u0026#39;#000000\u0026#39;, fontSize: \u0026#39;30px\u0026#39;, marginRight: \u0026#39;10px\u0026#39;, }, }; React component, with Styled Component AND \u0026lsquo;classes.searchBoxInput\u0026rsquo; from Styled Object example above.\nclass AltinnSearchInput extends React.Component\u0026lt;IAltinnSearchInputComponentProvidedProps, IAltinnSearchInputComponentState\u0026gt; { public render() { const { classes } = this.props; return ( \u0026lt;StyledFormControl id=\u0026#39;StyledForm\u0026#39; fullWidth={true} \u0026gt; \u0026lt;TextField id={this.props.id} placeholder={this.props.placeholder} onChange={this.props.onChangeFunction} InputProps={{ disableUnderline: true, startAdornment: \u0026lt;InputAdornment position={\u0026#39;end\u0026#39;} classes={{ root: classNames(classes.searchBoxIcon) }} \u0026gt; \u0026lt;i className={\u0026#39;ai ai-search\u0026#39;} /\u0026gt; \u0026lt;/InputAdornment\u0026gt;, classes: { root: classNames(classes.searchBoxInput) }, }} /\u0026gt; \u0026lt;/StyledFormControl\u0026gt; ); } } export default withStyles(styles)(AltinnSearchInput); Contained Components Contained components are React components which are not shared in other parts of the React application. It\u0026rsquo;s encouraged to consider the styling order above.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/",
	"title": "Test",
	"tags": ["development", "testing"],
	"description": "Coding guidelines for tests",
	"content": "Coding guidelines for tests \rApp for automated test\rAn app used solely for automated testing in the browser\n\r\rk6\rPerformance and Functional Testing of API with K6\n\r\rPostman\rAPI Testing with postman\n\r\rTest Strategy\rTest Strategy\n\r\rTestcafe\rTestcafe\n\r\rUnit testing\rHow to write jest test in altinn studio, what we know so far\n\r\rWCAG testing in Altinn Studio\rCoding guidelines for tests\n\r\rXunit Testing\rXunit Testing\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/test-strategy/",
	"title": "Test Strategy",
	"tags": ["development", "testing"],
	"description": "Test Strategy",
	"content": "What should be tested? In tjenester 3.0, there is a need for both testing Altinn Studio, the app designer, as well as testing apps that are developed by an app developer in Altinn Studio Runtime. Testing these two areas of Altinn Studio requires different approaches.\nTesting of Altinn Studio is to be tested automatically at the unit and integration levels of testing. Unit testing of the system involves, for example, the testing of individual javascript functions, and individual pieces of logic relating to react/UI components. At the integrasion level of test, API\u0026rsquo;s and smaller modules are typically tested: Effective unit and integration testing demands good testing frameworks that tjenester 3.0 developrs can easily pick up and use, and that can be easily integrated in the current codebase and the current build toolchain.\nTesting of workflows, and the usage of ALtinn Studio, as well as testing of apps developed in Altinn Studio, is the primary responsibility of the test developer in the team. On a regression, or end-to-end, level of test, one tests that the users whole journey through the altinn studio system, or the developed app, works as expected in relation to stated acceptance criteria.\nA good end-to-end test tool has the same requirements as tooling and frameworks that is to be put to use for unit and integration testing. Additionally, the tool needs to be give the opportunity for less technically minded app developers to quickly develop UI tests for apps they develop and deploy to Altinn Studio. The end-to-end tool should also allow the test developer to easily run a full regression test suite, as well as reduce the amount of time to run such a set of regression tests accurately.\nTooling After a discussion internally in the tjenester 3.0 team, these tools and frameworks have been decided to be put to use for testing\n Unit testing: Jest / Enzyme / xUnit Integration testing: Jest / Sinon Regression testing: Testcafe  The chosen tool set has been chosen for their ease of integration into the exisiting codebase, and also because they are all open source tools. Testcafe also gives the possibility of recording tests, with a paid license, the testcafe framework and UI test project will be the responsibility of the test developer in the team. Developers write unit and integration tests by using Jest and xUnit. See the other pages under test in this handbook for more information on how to effectively write unit tests or regression tests.\nDocumentation for the mentioned tools can be found below:\n xUnit Jest Enzyme Sinon Testcafe  Test in the first MVP delivery Testing in the first MVP delivery was primarily done thru unit testing with test written in xunit, and jest, as well as thru manual functional tests of user stories under development. The unit testing frameworks xunit and jest were integrated in the MVP01 delivery, and the tests are executed using pipeline definitions in azure devops. The unit test pipelines are automatically triggered both by pull requests to the altinn github repo, as well as when code is merged into master. The pipelines for unit tests can be found here for the xunit pipeline, and here for the jest test pipeline. At the end of MVP01, testcafe tests also began running in their own pipeline. The regression tests in the testcafe pipeline are run as a nightly build, and does not deploy on pull requests, to avoid slowing down and hindering the work of developers. The pipeline for testcafe can be found here\nTest in the second MVP delivery In the second MVP delivery, deploying apps created in the Altinn Studio designer to Altinn Studio runtime has been prioritized as a \u0026ldquo;hill\u0026rdquo;, or main deliverable. In this context, regression tests written with testcafe wil focus on the workflow the developer \u0026ldquo;Christian\u0026rdquo; will be using to be able to deploy on of his apps to a test environment. The goal of test automation is to reduce the time taken to run all test in the Altinn Studio regression test suite, to run these tests accurately, and free up the time of the test developer to write better test cases. Both automatic and manual regression tests are run against dev.altinn.studio to assure the quality of developed code that is to be deployed to production. Unit and system testing in MVP02 will work in much the same way as in the MVP01 delivery: Developers write unit and integration tests in their respective frameworks, and focus on testing business logic they have developed. Snapshot testing, which was begun in MVP01, is deprioritized in MVP02 as they were found to be brittle and not contributing to the overall quality of the code. \u0026ldquo;Look and feel\u0026rdquo; testing will be the responsibility of functional designers, and the test developer in the team.\nTest levels The pyramid figure below shows an overview of the different levels of test, the possible tools associated with the testing level, as well as which rle has the responsibilty for writing tests at that level.\nTestdata To be be able to easily and effectively test on all levels, it can be necessary to put a tool in place to easily retrieve or store different test data. The Tjenester 3.0 team must decide on whether to creat testdata classes that can be imported in the different test projects. Another possibility is to fetch spesific pre-made dataset (for example testdata set 164/5) from a json file or similar. In MVP02 the testcafe project uses a naive testdata class, that will be expanded as the new for more complex testdata grows: TestData.js contains a class for creating users in Altinn Studio at the moment. Refer to the Jest section under test for an overview on using data in unit tests.\n#Methodology During sprint planning, the product owner, the developers, and the test developer agree on an approach for teting on individual user stories that are pulled into the sprint. A plan is then created for how the responsible role will test the required functionality, and sub tasks are created on the different user stories. It is possible, and likely, that a user story will contain tasks to develop tests on all the testing levels specified above. When a test is written and completed, it can be integrated into a testing build.\nNaming convention for element ids' Testcafe\u0026rsquo;s test api has different methods of instantiating Selector objects that can be then used in tests. The easiest and most robust method of defining a selector in testcafe is with a css id selector. The idea behind using css id\u0026rsquo;s is to avoid finding elements by their relative location in the DOM, or by the element\u0026rsquo;s inner texts, as tests become brittle with these selectors due to design changs. The id\u0026rsquo;s must be unique, to ensure the uniqueness of a Selector, the following naming convention for element id\u0026rsquo;s is proposed: Id\u0026rsquo;s must be tekstbased and written in camelCase, id\u0026rsquo;s follow a logical location the Altinn Studio system, such as; \u0026ldquo;Pagelocation Submenu Elementtype Descriptiveword\u0026rdquo;. The text box element id under the GUI creator could then be assigned the following id: \u0026ldquo;designerSkjemakomponenterKnappTekstområde\u0026rdquo;.\nBuilding and deploying testcode See the pipeline hyperlinks above in this document.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/testcafe/",
	"title": "Testcafe",
	"tags": ["development", "testing"],
	"description": "Testcafe",
	"content": "This document describes how one can start working on a test cafe project from installtion of plugins, cloning the project to run tests and pipeline information.\nClone project in Visual Studio Code Clone the project- git clone https://github.com/Altinn/altinn-studio.git\nCode for Testcafe tests in altinn.studio\nInstall Tools  Open PowerShell -\u0026gt; Verify Node and Npm version  npm -v (6.9.0) node -v (9.5.0)   Install npm  npm install -g npm   Install npm in the Altinn Studio project  Navigate to the folder - C:\\Altinn Studio\\altinn-studio\\src\\test\\Testcafe Run command – npm install   Ensure that the environment variables has the path of npm  C:\\Users\\UserName\\AppData\\Roaming\\npm    Run a Test Locally from PowerShell  Open testRunner.js in Visual Studio Code Set the browser as: Chrome Speed controls the speed of the execution Open a test fixture .js file (e.x., designer_tests -\u0026gt; navigation-tests.js) ‘.only’ can be used to run a specific fixture or a test case Save the project Open PowerShell and navigate to C:\\Altinn Studio\\altinn-studio\\src\\test\\Testcafe Set environment to run the test using: set ENV=dev Set password for the test users of Studio using: set \u0026ldquo;username from config.json\u0026rdquo;=password Run the command – ‘node .\\testRunner.js’ to run general tests Run the command - \u0026lsquo;node .\\WCAGRunner.js\u0026rsquo; to run wcag tests  Test cafe pipeline in Azure Devops Azure Devops Pipeline\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/testcafe/testcafehowto/",
	"title": "Testcafe - Tests",
	"tags": ["development", "testing"],
	"description": "How to write and maintain testcafe tests",
	"content": "This document describes how one can start writing tests on a test cafe project , and debug of the tests.\nProcedure to write general testcafe test  Find a test case and area that has to be automated. Find the \u0026lsquo;-tests.js\u0026rsquo; file that the test case has to be added or create a new folder and new .js file for the test under src/test/Testcafe. Identify and add the page objects with the selectors information under respective file under src/test/Testcafe/page-objects. Identify the need for methods that can be reused by other tests and add it under the page object file. Each \u0026lsquo;-tests.js\u0026rsquo; file has headers that import the necessary page objects. Fixtures innholds URL, before and aftereach test procedures. Test cafe tests has a basic format as below.   Debug Tests  Use \u0026rsquo;t.debug()' in a testcafe test to start debugging of the test. Use breakpoints for the steps to be debugged. Use \u0026lsquo;console.log(variable_name)\u0026rsquo; to find the runtime value of an variable - which will be logged in VS Code Terminal.  Rename the test to “test.only” - this will only run the specific test case. in testRunner.js, Set “chrome” as browser, Reduce the speed to 0.8 (percentage), debugOnFail : True, stopOnFirstFail: True Use \u0026lsquo;\u0026ndash;inspect \u0026ndash;debug-brk\u0026rsquo; in the command line when starting the tests. Check for the logs in junit.xml. Testcafe continues to work towards implementing a method to debug an application interactively. Refer: https://github.com/DevExpress/testcafe/issues/3244  Basics on POM and Selectors  config.json has the URLs and app names used in different environment Use of objects from POM  Import page – \u0026lsquo;import page_name from path_to_the_file Declare an object for the page - let object_name = new page_name();   Selectors  Id – starts with ‘#’ Class – starts with ‘.’ Html -\u0026gt; “ul \u0026gt; li”   test.skip – to skip a test in a test run (The results for the tests goes to Others)  More about Selectors\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/traefik/tls-configuration/",
	"title": "TLS in Traefik 2.0",
	"tags": ["development", "routing", "traefik", "tls"],
	"description": "How to set up TLS",
	"content": "TLS sertificates stored as secrets on the cluster apiVersion: v1 kind: Secret metadata: name: altinn-tls-secret data: tls.crt: [[BASE 64 ENCODED CERTIFICATE]] tls.key: [[BASE 64 ENCODED PRIVATE KEY]] TLS Options To set up TLS options we need to use the custom resource TLSOption. A basic set up of this is:\napiVersion: traefik.containo.us/v1alpha1 kind: TLSOption metadata: name: altinn-tls-options namespace: default spec: minVersion: VersionTLS12 Adding TLS to an Ingress Route Add a tls attribute to the spec if the ingress route, with secretName (secret that contains the TLS certificate and private key) and optionally a options-attribute with the name of the TLSOption we made and the namespace (if nothing is specified when creating the secret it would be in the default namespace).\napiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: altinn-runtime spec: entryPoints: - web - websecure routes: - match: Host(`dev.altinn.studio`) # priority: 25 kind: Rule services: - name: altinn-runtime port: 5005 tls: secretName: altinn-tls-secret options: #Optional name: altinn-tls-options namespace: default "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/traefik/custom-resources/",
	"title": "Traefik custom resources",
	"tags": ["development", "routing", "traefik", "custom resources", "crds"],
	"description": "Definitions for traefik 2.0 custom resources in kubernetes",
	"content": "IMPORTANT These resources have to be installed before creating any of the resources they describe. They are most likely installed with helm when installing traefik 2.0.\nTo support new features in routing and middlewares with IngressRoutes and dynamic tls options, traefik supplies it\u0026rsquo;s own kubernetes custom resources defined in the traefik docs. These are:\napiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: ingressroutes.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: IngressRoute plural: ingressroutes singular: ingressroute scope: Namespaced --- apiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: middlewares.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: Middleware plural: middlewares singular: middleware scope: Namespaced --- apiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: tlsoptions.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: TLSOption plural: tlsoptions singular: tlsoption scope: Namespaced --- apiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: name: ingressroutetcps.traefik.containo.us spec: group: traefik.containo.us version: v1alpha1 names: kind: IngressRouteTCP plural: ingressroutetcps singular: ingressroutetcp scope: Namespaced They will extend the types of resources you can have on your cluster.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/traefik/ingress-routes/",
	"title": "Traefik ingress routes",
	"tags": ["development", "routing", "traefik", "ingress routes", "ingress"],
	"description": "How to set up an ingress route and route trafic based on rules and middlewares",
	"content": "Before traefik 2.0 the only supported way of routing in kubernetes was through the Kubernetes Ingress prodvider, which limited the functionality traefik could offer.\nAs a result of introducing the custom resource IngressRoutes in traefik 2.0 we don\u0026rsquo;t need to write many annotations on the ingress. And it is easier to configure access to a kubernetes cluster.\nResource configuration apiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: altinn-runtime spec: entryPoints: - web - websecure routes: - match: Host(`dev.altinn.studio`) # priority: 25 kind: Rule services: - name: altinn-runtime port: 5005 This is the simplest service to port over to traefik 2.0 within Altinn Studio. Since it is the \u0026ldquo;default\u0026rdquo; route if nothing else matches (routes for /repos or /designer).\nPay close attencion to the priority-field. If nothing is specified it will be the length of the string in the match-field. So longer rules are higher prioritized.\nRouting Middlewares In the earlier example we can hook up middlewares. You can define middlewares in this format:\napiVersion: traefik.containo.us/v1alpha1 kind: Middleware metadata: name: fetch-cookie-and-redirect spec: replacePath: path: /Redirect/FetchCookieAndRedirectHome/ This example is for when the designer fetches cookies and redirects to \u0026ldquo;/home\u0026rdquo;.\nThe different specs can be found in the traefik docs.\nSo first create a middleware resource in kubernetes and then you can use it in the ingressRoute like this\nname: altinn-designer-root namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; Path(`/`) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; Path(`/`) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; Path(`/`) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; Path(`/`) kind: Rule strategy: RoundRobin middlewares: [] - name: altinn-designer-home namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; PathPrefix(`/Home`) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/Home`) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/Home`) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/Home`) kind: Rule strategy: RoundRobin middlewares: [] - name: altinn-designer-designer namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; PathPrefix(`/designer`) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/designer`) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/designer`) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; PathPrefix(`/designer`) kind: Rule strategy: RoundRobin middlewares: [] - name: altinn-designer-repos namespace: default entrypoints: - web routes: - match: local: Host(`altinn3.no`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) dev: Host(`dev.altinn.studio`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) staging: Host(`staging.altinn.studio`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) prod: Host(`altinn.studio`) \u0026amp;\u0026amp; (Path(`/repos/`) || Path(`/repos`)) kind: Rule strategy: RoundRobin middlewares: - name: fetch-cookie-and-redirect At the last entry in the routes element uses the middleware. It references the middleware by name.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/routing/traefik/",
	"title": "Traefik routing",
	"tags": ["development", "traefik", "routing"],
	"description": "",
	"content": "In Altinn Tjenester 3.0 we are migrating from nginx to traefik for routing.\n\rInstallation of Traefik 2.0\rHow to install traefik\n\r\rTLS in Traefik 2.0\rHow to set up TLS\n\r\rTraefik custom resources\rDefinitions for traefik 2.0 custom resources in kubernetes\n\r\rTraefik ingress routes\rHow to set up an ingress route and route trafic based on rules and middlewares\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/unit-testing/",
	"title": "Unit testing",
	"tags": ["development", "front-end", "testing"],
	"description": "How to write jest test in altinn studio, what we know so far",
	"content": "Introduction to unit testing with Jest This page summarizes how UI testing is performed with Jest and related libraries for Altinn Studio.\n\r When should you write tests? Exporting and importing your component Methods in your component User Interface and Methods Networked functions (get, post, put) Rejecting Promises / Error testing / Negative tests Using Router Example #1, positive test Example #2, negative test (Error handling)  \r\rWhen should you write tests? Unit testing includes testing of javascript functions and react/UI components. Listing of the highest priority of unit-testing:\n API calls with the correct formatted parameters Rendering of isolated components. Functions in general.  Exporting and importing your component A quick way to get started testing your component is first to export the React Component:\nexport class CloneServiceComponent extends React.Component\u0026lt;ICloneServiceComponentProps \u0026amp; RouteChildrenProps, ICloneServiceComponentState\u0026gt; { and then reference it in your test the following way:\nimport { CloneServiceComponent } from \u0026#39;../../../src/dashboardServices/cloneService/cloneServices\u0026#39;; it(\u0026#39;+++ this is the test\u0026#39;, async () =\u0026gt; { const mountedComponent = mount( \u0026lt;CloneServiceComponent language={mockLanguage} services={mockServices} classes={mockClasses} location={mockLocation} history={mockHistory} match={mockMatch} /\u0026gt;, ); const instance = mountedComponent.instance() as CloneServiceComponent; } This will test the component without state, router or styles (read Material UI), so values usually passed in by Redux store, by means of routing or styles/Material UI needs to be reference as if they are props passed into the component (match={mockMatch}).\nMethods in your component Methods can be called directly from your test, or executed when clicked on UI elements (See own section). Calling methods is done like this:\ninstance.getCurrentRepositoryInfo(); instance.componentDidMount();  If you call networked functions in componentDidMount() you need to mock the networked functions before mounting.\n If you have one function that calls another function, and you want to be sure that both functions ran at the end of the test, you can use jest\u0026rsquo;s spyOn functionality described here:\nconst spy = jest.spyOn(instance, \u0026#39;funcitonTwoCalledWithinFunctionOne\u0026#39;); instance.functionOne(); expect(spy).toHaveBeenCalled();  You can read more about Jest.expect() here: Jest.expect()\n User Interface and Methods In the example above, testing the actual interface is excluded. Simulating a click on an element might need to be performed twice in some cases. Simulating a click can be done using the elements ID and the simulate method from Enzyme:\nmountedComponent.find(\u0026#39;button#editService\u0026#39;).simulate(\u0026#39;click\u0026#39;);  ReactWrapper will pass a SyntheticEvent object to the event handler in your code. If the code you are testing uses properties that are not included in the SyntheticEvent, for instance event.target.value, you will need to provide a mock event for it to work. Read more at Enzyme\u0026rsquo;s Simulate documentation here.\n Networked functions (get, post, put) If you are using get, post or put from the shared networking.ts component you need to mock the actual call to be able to test functions that calls either get, post or put. This can be done in the following way:\n// Add this to the import statements in you test file: import * as networking from \u0026#39;../../../../shared/src/utils/networking\u0026#39;; // To resolve the promise and and to return the value, first make sure your test is async: it(\u0026#39;should handle successfully returned data from API\u0026#39;, async () =\u0026gt; { /* Mounting goes here, commented to get markdown colors correctly const mountedComponent = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); */ // Creating the instance so you can spy or call methods directly  const instance = mountedComponent.instance() as HandleMergeConflictAbort; // Spies for regular methods  const spyOnClickFunctionHandler = jest.spyOn(instance, \u0026#39;clickFunctionHandler\u0026#39;); // Before you call the methods which use netowrking, you must create the spy and mock:  const mockData = { isSuccessStatusCode: true, }; const getStub = jest.fn(); const mockGet = jest.spyOn(networking, \u0026#39;get\u0026#39;).mockImplementation(getStub); getStub.mockReturnValue(Promise.resolve(mockData)); // Simulate clicks  mountedComponent.find(\u0026#39;button#editService\u0026#39;).simulate(\u0026#39;click\u0026#39;); // OR call methods  instance.clickFunctionHandler(); // Expect functions to be called, both handler and networking  expect(spyOnClickFunctionHandler).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Resolve mocked networking  await Promise.resolve(); // Expect something to happen  expect(instance.state.networkingRes.isSuccessStatusCode).toEqual(true); }); Rejecting Promises / Error testing / Negative tests If you want to test how your component handles rejected Promises / errors, for example in your Try/Catch you can use the following modification:\n// This is the rejected version of the mock gode const mockError = Error(\u0026#39;mocked error\u0026#39;); const getStub = jest.fn(); const mockGet = jest.spyOn(networking, \u0026#39;get\u0026#39;).mockImplementation(getStub); getStub.mockReturnValue(Promise.reject(mockError)); // You \u0026#34;execute\u0026#34; the network function the same way as a resolved promise await Promise.resolve(); You can spy on the console.error with the following code:\nlet consoleError: any; beforeAll(() =\u0026gt; { consoleError = jest.spyOn(console, \u0026#39;error\u0026#39;).mockImplementation(() =\u0026gt; { return {}; }); }); // And the following inside your test: expect(consoleError).toHaveBeenCalled();  See example #2, for more detailed test\n Using Router If you are testing a component that uses React Router, you might have to build router props and pass them to the component you are testing. Here is an example on how this can be done:\nmockLocation = { pathname: \u0026#39;pathname\u0026#39;, search: \u0026#39;search\u0026#39;, state: {}, hash: \u0026#39;hash\u0026#39;, }; mockHistory = { length: 1, action: \u0026#39;PUSH\u0026#39; as Action, location, push: () =\u0026gt; false, replace: () =\u0026gt; false, go: () =\u0026gt; false, goBack: () =\u0026gt; false, goForward: () =\u0026gt; false, block: () =\u0026gt; (null) as any, listen: () =\u0026gt; (null) as any, createHref: () =\u0026gt; \u0026#39;\u0026#39;, }; mockMatch = { params: {}, isExact: false, path: \u0026#39;\u0026#39;, url: \u0026#39;\u0026#39;, }; Example #1, positive test import { mount } from \u0026#39;enzyme\u0026#39;; import \u0026#39;jest\u0026#39;; import * as React from \u0026#39;react\u0026#39;; import * as networking from \u0026#39;../../shared/src/utils/networking\u0026#39;; import { HandleMergeConflictAbort } from \u0026#39;../src/features/handleMergeConflict/components/HandleMergeConflictAbort\u0026#39;; describe(\u0026#39;HandleMergeConflictAbort\u0026#39;, () =\u0026gt; { let mockLanguage: any; beforeEach(() =\u0026gt; { mockLanguage = {}; }); it(\u0026#39;should handle successfully returned data from API\u0026#39;, async () =\u0026gt; { const wrapper = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); const instance = wrapper.instance() as HandleMergeConflictAbort; // Spies  const spyOnAbortPopover = jest.spyOn(instance, \u0026#39;AbortPopover\u0026#39;); const spyOnAbortConfirmed = jest.spyOn(instance, \u0026#39;AbortConfirmed\u0026#39;); // Mocks  const mockData = { isSuccessStatusCode: true, }; const getStub = jest.fn(); const mockGet = jest.spyOn(networking, \u0026#39;get\u0026#39;).mockImplementation(getStub); getStub.mockReturnValue(Promise.resolve(mockData)); // Expected no result from networking yet  expect(instance.state.networkingRes).toEqual(null); // Expect discard button to exist  expect(wrapper.exists(\u0026#39;#abortMergeBtn\u0026#39;)).toEqual(true); // workaround, have to click twice the first time  wrapper.find(\u0026#39;button#abortMergeBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); // Click the discard button  wrapper.find(\u0026#39;button#abortMergeBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); expect(spyOnAbortPopover).toHaveBeenCalled(); // Expect the button inside the popover to exist  expect(wrapper.exists(\u0026#39;#abortMergeConfirmBtn\u0026#39;)).toEqual(true); // Click the confirm button  wrapper.find(\u0026#39;button#abortMergeConfirmBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); // Expect functions to be called  expect(spyOnAbortConfirmed).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Expect state to change  expect(instance.state.popoverState.isLoading).toEqual(true); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(false); // Resolve mocked networking  await Promise.resolve(); // Expect state to change  expect(instance.state.popoverState.isLoading).toEqual(false); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(true); expect(instance.state.networkingRes.isSuccessStatusCode).toEqual(true); }); }); Example #2, negative test (Error handling) import { mount } from \u0026#39;enzyme\u0026#39;; import \u0026#39;jest\u0026#39;; import * as React from \u0026#39;react\u0026#39;; import * as networking from \u0026#39;../../shared/src/utils/networking\u0026#39;; import { HandleMergeConflictAbort } from \u0026#39;../src/features/handleMergeConflict/components/HandleMergeConflictAbort\u0026#39;; describe(\u0026#39;HandleMergeConflictAbort\u0026#39;, () =\u0026gt; { let mockLanguage: any; let consoleError: any; beforeAll(() =\u0026gt; { consoleError = jest.spyOn(console, \u0026#39;error\u0026#39;).mockImplementation(() =\u0026gt; { return {}; }); }); beforeEach(() =\u0026gt; { mockLanguage = {}; }); it(\u0026#39;should catch error from networked function\u0026#39;, async () =\u0026gt; { const wrapper = mount( \u0026lt;HandleMergeConflictAbort language={mockLanguage} /\u0026gt;, ); const instance = wrapper.instance() as HandleMergeConflictAbort; // Spies  const spyOnAbortPopover = jest.spyOn(instance, \u0026#39;AbortPopover\u0026#39;); const spyOnAbortConfirmed = jest.spyOn(instance, \u0026#39;AbortConfirmed\u0026#39;); // Mocks  const mockError = Error(\u0026#39;mocked error\u0026#39;); const getStub = jest.fn(); const mockGet = jest.spyOn(networking, \u0026#39;get\u0026#39;).mockImplementation(getStub); getStub.mockReturnValue(Promise.reject(mockError)); // Expected no result from networking yet  expect(instance.state.networkingRes).toEqual(null); // Expect discard button to exist  expect(wrapper.exists(\u0026#39;#abortMergeBtn\u0026#39;)).toEqual(true); // workaround, have to click twice the first time  wrapper.find(\u0026#39;button#abortMergeBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); // Click the discard button  wrapper.find(\u0026#39;button#abortMergeBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); expect(spyOnAbortPopover).toHaveBeenCalled(); // Expect the button inside the popover to exist  expect(wrapper.exists(\u0026#39;#abortMergeConfirmBtn\u0026#39;)).toEqual(true); // Click the confirm button  wrapper.find(\u0026#39;button#abortMergeConfirmBtn\u0026#39;).simulate(\u0026#39;click\u0026#39;); // Expect functions to be called  expect(spyOnAbortConfirmed).toHaveBeenCalled(); expect(mockGet).toHaveBeenCalled(); // Error is thrown  await Promise.resolve(); // Expect state to change, and error to be saved to state  expect(instance.state.popoverState.isLoading).toEqual(false); expect(instance.state.popoverState.shouldShowDoneIcon).toEqual(false); expect(instance.state.errorObj).toMatchObject(Error(\u0026#39;mocked error\u0026#39;)); expect(instance.state.networkingRes).toEqual(\u0026#39;error\u0026#39;); // Expect console.error to be called.  expect(consoleError).toHaveBeenCalled(); }); }); "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/storage-interfaces/v2/",
	"title": "v2",
	"tags": [],
	"description": "Overview of changes introduced in v2 of the Altinn.Platform.Storage.Interface package.",
	"content": "\rWhat\u0026#39;s new\rOverview of changes introduced in version 2\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-frontend/v3/",
	"title": "v3",
	"tags": [],
	"description": "Overview of changes introduced in v3 of app frontend",
	"content": "\rBreaking changes\rOverview of breaking changes introduced into app frontend in v3.0.0\n\r\rWhat\u0026#39;s new\rOverview of changes introduced in v3 of app frontend\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/front-end/versioning/",
	"title": "Versioning",
	"tags": ["development", "front-end", "versioning"],
	"description": "Guidelines for versioning of front-end",
	"content": "The frontends, both for Altinn Studio and Apps are set up as node modules, using a package.json to import external dependencies. In package.json for each package we can specify the version of the package. In this context, package refers to the different applications we are bulding, such as altinn-app-frontend, receipt, etc.\nEach time we make a change to a package, we need to update the version of the package to reflect the change. This is especially important in the packages related to Altinn.Apps - whenever changes are merged into the master branch, the compiled javascript is uploaded to a CDN where it can be used by the app, and the CDN supports versioning. So an app can refer to a specific version of f.ex. the app frontend.\nThe packages use semantic versioning:\n Given a version number MAJOR.MINOR.PATCH, increment the:\n MAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards compatible manner, and PATCH version when you make backwards compatible bug fixes. Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.   Each time a change is made to any frontend applications, the version in the corresponding package.json must be updated according to the rules above.\nThe default is for a new app to refer to the latest MAJOR version of the app frontend. If any changes are made that cause us to update the MAJOR version, remember to also update\rthe app template, so that any new apps will refer to the newest MAJOR version.\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/wcag/",
	"title": "WCAG testing in Altinn Studio",
	"tags": ["development", "testing"],
	"description": "Coding guidelines for tests",
	"content": "This document describes how to see results of testcafe wcag tests, and how to write new wcag tests in testcafe. See the general testcafe documentation for a recipe on how to set up a development environment for writing testcafe test.\nTesting Altinn Studio for accesibility with testcafe and axe-core WCAG tests run in Altinn Studio using the testcafe UI test project, with some additional plug-ins: axe-testcafe is the plug-in used for Altinn Studio, see documentation here. The accessibility engine aXe allows the tester to configure which wcag rules to run, elements to include or ignore, and to format a report that can be generated automatically.\nThe Altinn Studio wcag tests are run automatically each night in azure devops. Link to the build can be found here, the wcag tests are run as a task in the build definition altinn-studio-test-testcafe. To inspect a run of the wcag tests, open the build definition:\nThe \u0026ldquo;Tests\u0026rdquo; tab contains the the general UI test report. WCAG tests use a seperate reporter (called \u0026ldquo;spec\u0026rdquo;) to allow the user see which elements break with accesibility rules. Open the npm wcag task to inspect the wcag test results:\nLine 40 describes the title of the test. In this case, the testcase for the deployment page. Line 43 displays the number of A and AA rules violated on the specific page. The list under this line describes which specific rules were violated, a list of wcag rules can be found here, as well as which element on the page caused the violation.\nWriting new wcag tests in testcafe Writing new wcag tests will become necessary as new functionality and pages are added to Altinn Studio. New wcag tests are added to the wcag js file in the testcafe project: src/test/Testcafe/wcag/wcag.js\nTo write a new wcag test, add the following code to the file\ntest(\u0026#39;My new wcag test for ACME page\u0026#39;, async t =\u0026gt; { const { error, violations } = await axeCheck(t); await t.expect(violations.length === 0).ok(createReport(violations)); }); Add the required testcafe code to navigate to the page under test, for example the dashboard page:\ntest(\u0026#39;My new wcag test for altinn studio dashboard\u0026#39;, async t =\u0026gt; { await t.navigateTo(app.baseUrl) const { error, violations } = await axeCheck(t); await t.expect(violations.length === 0).ok(createReport(violations)); }); The object app is a part of the page object model of the testcafe project, baseUrl points to the dashboard url for the selected altinn studio environment to be tested.\nAxe can also allow the tester to specify the context, what elements of the test should included or excluded, as well as which rules should be run:\ntest(\u0026#39;Accessibility testing for dashboard page\u0026#39;, async t =\u0026gt; { await t.navigateTo(app.baseUrl); const axeContext = { exclude: [[\u0026#39;img\u0026#39;]] }; const axeOptions = { runOnly: [\u0026#39;wcag2a\u0026#39;, \u0026#39;wcag2aa\u0026#39;] }; const { error, violations } = await axeCheck(t, axeContext, axeOptions); await t.expect(violations.length === 0).ok(createReport(violations)); }); More on the axe context and options can be found in the axe documentation To debug the new test, append test with the only keyword: test.only\nThe new test can now be run from the command line using the package.json wcag script.\nnpm run wcag\nThe test report is then generated displayed in the console:\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/test/xunit-testing/",
	"title": "Xunit Testing",
	"tags": ["development", "testing"],
	"description": "Xunit Testing",
	"content": "Find code on xunit tests here\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authentication/",
	"title": "Application architecture authentication component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "The Authentication component is an a ASP.NET Core MVC Application exposing REST-API to Altinn Apps.",
	"content": "The solution is available at https://platform.altinn.cloud/authentication/api/v1.\nAuthenticate user The authentication resource enables authenticating a user and redirecting it to another Altinn-url. If the user is not authenticated already it will be sent to the login page before redirecting the user to its final destination {url}.\nGET /authentication?goto={url} Refresh a valid JwtToken GET /refresh Exchange a JWT token from an external token provider Accepted providers include: maskinporten and id-porten. Request must include a bearer token in the authorization header. Set test equal to true if retrieving a token for Testdepartementet. (This ony works with maskinporten as the token provider.)\nGET /exchange/{tokenProvider}?test={bool} "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/",
	"title": "Application Construction Components",
	"tags": ["architecture"],
	"description": "Application Construction Components refers to the required components and configurations needed to create the different applications in the different solutions.",
	"content": "It also describes the internal frameworks used in the different applications and how they consume and produce data.\n\rApplication construction components Altinn Studio\rThe application construction components for Altinn Studio includes all components uses to create the Altinn Studio Applications.\n\r\rApplication construction components for Altinn Apps\rApplication created in Altinn Studio is deployed to Altinn Apps.\n\r\rApplication construction components for Altinn Platform\rAltinn Platform consist of serveral components that is constructed with help of different frameworks and components.\n\r\rSecurity Enforcement Capabilities\rDescription of the Altinn Studio, Altinn Apps, Altinn Platform security architecture providing runtime capabilities for the solutions.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/",
	"title": "Altinn Platform - Authorization",
	"tags": ["architecture", "solution"],
	"description": "The authorization component provides functionality to authorize access to applications and components in Altinn Apps and Altinn Platform.",
	"content": "The authorization components are based on attribute based access control (ABAC).\nIn short, a request is authorized based on attributes for the request. Eg what data element is the user accessing, who owns it, what type of data element, and so on.\nThe authorization architecture for the Altinn Platform is based on the XACML reference architecture.\nThe following diagram describes the different solution components that provide Authorization capabilities.\nThis architecture defines the following components.\nPDP - Policy Decision Point Responsible to decide if a request is authorized or not. Read more\nPAP - Policy Administration Point Responsible for defining and administration authorization policies. Read more\nPRP - Policy Retrieval Point Responsible for identifying the correct policy for a request. Read more\nContext Handler Responsible for enriching the decision request so it can correctly be evaluated. Read more\nPIP - Policy information point Responsible for providing information about the subject and the resource to the context handler. Read more\nPEP - Policy Enforcement Point Responsible for enforcing the decision from PDP. This is the component that blocks a request or let it through.\nFor details about how the components are constructed go here.\nThe Overall Authorization flow The sequence diagram below shows how a request is authorized\nExample process The following example flow describes in detail the authorization process when the REACT frontend calls an API to store form data\n User trigger save in the REACT application. REACT application makes an HTTP post request against the ServiceAPIController in The configured Policy Enforcement Point for the API, the Service Access Handler,\ntriggers to verify that user is authorized The PEP identifies the authenticated user from authorizationhandler context and find the relevant resource ID from request The PEP calls the PDP functionality in Authorization Component in Altinn Platform PDP calls context handler to enrich the decision request Context handler calls Storage PIP to get resource information Context handler calls authorization PIP to get roles user have for resource party Context handler enriches the decision request and returns to PDP PDP calls PRP to get the policy for the resource PDP evaluates the decision request and returns a decision response If the result was Permit, the PEP validates the obligation from PDP to see if the authentication level was high enough. If it is enough the request is let through If the authentication level is not high enough the PEP will throw a not authorized exception (403) If the result was \u0026ldquo;Not Applicable\u0026rdquo; the PEP will throw a not authorized exception (403)  Authorization API The Authorization component exposes a REST-API to Altinn Apps. Use the authorization API to manage authorizations in altinn platform.\nParties A party is a person whom you can represent and perform a request on his behalf. A logged in user can retrieve a list of parties that he/she can represent.\nOperations Get a list of parties that the user can represent. The userid is sent as parameter.\nGET /authorization/api/v1/parties?userid={userid} Validate that a given user is allowed to represent a given party. The partyid and userid are sent as parameters.\nGET /authorization/api/v1/parties/{partyId}/validate?userid={userid} Roles A role in altinn offers or denies right to the logged in user to perform an action or group of actions for him or on behalf of someone.\nOperations Get a list of roles that the user can perform for the selected party.\nGET /authorization/api/v1/roles Policies A set of polices contains authorization rules.\nOperations Stores / updates rules for a given app, defined in the query string. The rules are sent in the body of the request. Reade more about the policy format.\nPOST /authorization/api/v1/policies?org=org\u0026amp;app=app \rContext Handler\rThe responsibility to the Context Handler is to enrich a decision request sent from a PEP so it can be evaluated by PDP.\n\r\rPolicy Administration Point\rThe Policy Administration Point is responsible for creating and modifying the different authorization policies used by the PDP\n\r\rPolicy Decision Point\rThe Policy Decision Point is responsible to evaluate if users and systems is authorized to perform the requested operation on a resource.\n\r\rPolicy Enforcement Point\rIn Altinn Platform there are PEP\u0026#39;s that enforce access to different types of API\n\r\rPolicy Information Point\rThe Policy Information Point(s) are responsible for providing needed information to the context handler so it can enrich the context request.\n\r\rPolicy Retrieval Point\rThe Policy Retrieval Point is the functionality where Policy Decision Point (PDP) can retrieve the policy defined for an app resource.\n\r\rXACML - Altinn Studio\rXACML stands for \u0026#34;eXtensible Access Control Markup Language\u0026#34;.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/nonsolutionspecific/",
	"title": "Non-Solution-Specific",
	"tags": ["solution", "architecture"],
	"description": "Non-Solution-Specific Application components refer to all components other than the core solution or solution-specific Application typical used for devops.",
	"content": "\rDevelopment Applications\rDevelopment Applications are used by the devops team to support the different development capabilities required.\n\r\rOperations Application\rOperations Applications are used by the devops team for supporting the different operation and management capabilities required\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/thirdpartytools/",
	"title": "Third Party Tools",
	"tags": ["third party tools"],
	"description": "One important aspect of the Altinn Studio is that we encourage to use third party development tools to create and modify applications.",
	"content": "Since application code and config is versioned in Altinn Studio Repos and that is a GIT based source control any development tool with GIT support can clone application repository to local develoment machine.\nIn addition the application is based on a asp.net core web application that is supported in tools like Visual Studio Code.\nSuggested tools The following tools are examples on tools that you as a developer can install and use for application development.\nGit Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Altinn Studio Repository uses a git based source control system.\nYou can download a git client here\nVisual Studio Code Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity)\nThe application repos created in Altinn Studio contains workspace configuration for Visual Studio Code.\nYou can download Visual Studio Code here.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/events/",
	"title": "Application architecture Events component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "The Events component is an a ASP.NET Core MVC Application exposing REST-API to Altinn Apps and other Altinn Platform components.",
	"content": "In addition it contains serveral Azure Functions to support push of events.\nSee event capabilities for functional description of the platforms event capabilities.\nThe solution is available at https://platform.altinn.cloud/events/api/v1.\nAPI Structure The API\u0026rsquo;s is structured so the URLs are filtered queries into the events storage.\nInstances events for Org Endpoint GET path: platform.altinn.no/events/api/v1/app/{org}/{appName} Usage This will be used by application owners to identify changes on instances for their applications.\nAuthorization We will use scopes from Maskinporten to authorize access. In this way, it should also be possible for an org to delegate access to events for a given org/app.\nThe full detail for this API is described in this issue.\nRequest The following url parameters and http headers have been defined. Person is given as a http header because of security.\n   Parameter Type Description     org string Required: the org owning the application   appName string Required: the application related to the event   after string Required**: the id of the last event processed by the client   from datetime Required**: The time (UTC) to search from   to datetime Optional: The time (UTC) to search up until   party string Optional: the partyId   type List\u0026lt;string\u0026gt; Optional: a list of event types   unit string Optional: the organisation number nine digits for reportee   person string (http header) Optional: the f or d number of the person   size int Optional: upper limit for number of returned events    * Needs to give one identifcator of the subject, unit,person or party parammeter.\n** After or from is required\n*** Source allows for escaping a single character _ or an undefined number of characters %\nResponse Response includes a next header that can be used to get the events following the last event returned by the response. Query parameter after is inserted or replaced and holds the id of the last event returned in the reponse.\nhttps://platform.tt02.altinn.no/events/api/v1/app/ttd/apps-test?after=5beae524-0b3d-4e3b-bf40-450575eaf5d6\u0026amp;from=2020-10-01 11:35:00 Response body includes a list of cloud events on the form\n[ { \u0026#34;id\u0026#34;: \u0026#34;8c99c887-3861-4c2a-9ac9-178a20b1ee70\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;https://nav.apps.altinn.no/nav/app/instances/1234324/6fb3f738-6800-4f29-9f3e-1c66862656cd\u0026#34;, \u0026#34;specversion\u0026#34;: \u0026#34;1.x-wip\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;instance.created\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/567890\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2020-10-13T15:46:02.557971Z\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/person/01038712345\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;data field\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5beae524-0b3d-4e3b-bf40-450575eaf5d6\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;https://nav.apps.altinn.no/nav/app/instances/1234324/6fb3f738-6800-4f29-9f3e-1c66862656cd\u0026#34;, \u0026#34;specversion\u0026#34;: \u0026#34;1.x-wip\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;instance.deleted\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/567890\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2020-10-14T10:33:33.022379Z\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/person/01038712345\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;data field\u0026#34; } ] Events for a given party A very common scenario is that a party needs to know about events for the party itself or other party that party has a relationship for (client, child unit++).\nEndpoint GET platform.altinn.no/events/api/v1/app/party Usage This is used by end users to see events for a given party. This will list all changes for a given party, identified with a partyId, person number or organisation number.\nAuthorization Access to events needs to be authorized. To be able to read events, you need to have the read right for the given app for the given party.\nThe topic and subject would be used to identify the correct XACML-policy to use.\nThe operation would be read and the proccess task will be set to null. This way there would be no need to verify the current state of an instance.\nThe full detail for this API is described in this issue.\nRequest The following url parameters and http headers has been defined. Person is given as a http header because of security.\n   Parameter Type Description     after string Required**: the id of the last event processed by the client   from datetime Required**: The time (UTC) to search from   to datetime Optional: The time (UTC) to search up until   party string Required* the partyId   type List\u0026lt;string\u0026gt; Optional: a list of event types   source List\u0026lt;string\u0026gt; (regex allowed)*** Optional: a list of strings to match the event source   unit string Required* the organisation number nine digits   person string (http header) Required* the f or d number of the person   size int Optional: upper limit for number of returned events   * Needs to give one identifcator of the subject, unit,person or party parammeter.      ** After or from is required\n*** Source allows for escaping a single character _ or an undefined number of characters %\nResponse Response includes a next header that can be used to get the events following the last event returned by the response. Query parameter after is inserted or replaced and holds the id of the last event returned in the reponse.\nhttps://platform.tt02.altinn.no/events/api/v1/app/party?after=5beae524-0b3d-4e3b-bf40-450575eaf5d6\u0026amp;from=2020-10-01 11:35:00 We have this example\n[{ \u0026#34;source\u0026#34;: \u0026#34;https://skd.apps.altinn.no/skd/skattemelding/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/234234422\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;instance.process.completed\u0026#34;,  \u0026#34;time\u0026#34;: \u0026#34;2020-02-20T09:06:50.3736712Z\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;ssid\u0026#34;:\u0026#34;orgno:974760673\u0026#34; }] To be able to read this event, the authenticated party is required to have the rights for SKD/Skattmelding for the party 234234422. This is something it gets throug roles for that specific application.\nAdding events Endpoint POST {platformurl}/events/api/v1/app This returns the created ID for the event.\nUsage This is used by the application to publish app events. Events are submitted as CloudEvents.\nA CloudEvent consists of a number of attributes, such as the ID of the event and the type of the event.\nThe following attributes is used by the Events component.\n   Attribute Name Type Note     id String Optional. The ID of the event. A CloudEvent is uniquely identified with its source and id. The Events component will assign the id of the event.   source String (URI-reference) Required. The source of the event.   specversion String Required. The version of CloudEvents Specification the Cloud Event uses.   type String Required. The type of the event.   subject String Required. The subject of the event.   time String (Timestamp) Optional. The timestamp when the event happens. The Events component will set this.   alternativesubject String Optional. The alternative subject of the event.    We have this example\n[{ \u0026#34;specversion\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;instance.created\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;skd/skattemelding/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8\u0026#34;,  \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2020-02-20T08:00:06.4014168Z\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/234234422\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;party/131555662\u0026#34; }] Adding Subscription Endpoint POST {platformurl}/events/api/v1/subscriptions/ This returns the created subscription with IDs\nUsage This is used by the consumer to add a subscription.\nThe consumer needs to ba an org authenticated with maskinporten or a end user autenticated with ID-porten\nWe have this example that adds a subscription for all events for the app ttd/apps-test to be pushed to a Slack webhook\n{ \u0026#34;endPoint\u0026#34;: \u0026#34;https://hooks.slack.com/services/TSRSASBVNF3/ADRRSDSSSAahttsasdfasFO3w83456ss\u0026#34;, \u0026#34;sourceFilter\u0026#34;: \u0026#34;https://ttd.apps.at21.altinn.cloud/ttd/apps-test\u0026#34; } API Documentation The full detail for this API is described here.\nPush Functions A important part of the Events components are three different Azure Functions that is responsible for the following\n Inbound Function: Send every event to an subscription matching and authorization function Outbound Function: Pushes events to subscription endpoints Subscription Validation Function  See more details in the construction components for Events\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/profile/",
	"title": "Application arhicture profile component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Description of profile component",
	"content": "The profile component is an ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\nThe profile solution is now available locally at http://platform.altinn.cloud/profile/api/v1 and all resources are avaiable through endpoints defined below.\nResources: users\n/users A user is the entity which is logged in in Altinn and performs actions for on behalf of an instance owner.\nUser type    Attribute Type Description     UserId int user ID   UserName string username set by the user   PhoneNumber string phone number   Email string email address   PartyId int party ID   Party Party party object that represents the user   UserType UserType user type   ProfileSettingPreference ProfileSettingPreference object containing the users profile setting preferences    Operations Get information about a user from user id:\nGET /users/{userId} Get information about a user from SSN. Send a POST request with the SSN contained in the request body.\nPOST /users "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-restorage/",
	"title": "Altinn ReStorage",
	"tags": ["altinn-apps"],
	"description": "Altinn ReStorage is a comand line application that can be used by operators to recover and restore data from Altinn Platform Storage.",
	"content": "Altinn ReStorage can be found on GitHub.\nConcepts The consepts of the application are releated to the different parts of a command line command.\nExample: data info -ig e415477d-7964-4ffe-97b1-4b2cbf7ba8fe -lv\nCommand: data\nSubCommand: info\nOptions:\n -ig e415477d-7964-4ffe-97b1-4b2cbf7ba8fe -lv  Command The name of the command gives an indication of which type of resource the user wishes to interact with.\nSubCommand The sub command defines the operation to be performed on the command resource\nOption An option is a named parameter that is passed to the command.\nCommands Commands and examples of their usage are available on GitHub.\nSoftware implementation The command line interface is implemented using the popular CommandLineUtils library written by natemcmaster. In this section the file structure of the project is describes and code samples on how to add new commands.\nFolder structure structure This section gives an overview of the most important folders and files in the project. Hopefully, making it clear how to include new files into the project and where to place them.\nAttributes A folder containing attribute validation classes used to verify command line options.\nCommands A folder containing IBaseCmd.cs and a folder for each command e.g. data.\nIBaseCmd.cs An interface that all commands and subcommand classes must inherrit.\nData A folder containing the subfolder Subcommands and Data.cs\nServices A folder containing service interfaces and their implementation.\nHow to \u0026hellip; This section contains instructions the most common development tasks when expanding the tool.\n \u0026hellip; add a new root command \u0026hellip; add a new subcommand \u0026hellip; add a new option to a command \u0026hellip; validate an option \u0026hellip; add a new service  \u0026hellip; add a new root command   Create a new folder using the name of the command and include a new class with the same name.   Make the class an extention of the IBaseCmd interface.\npublic class NewCommand : IBaseCmd { }   The command attribute must be set on the class It is possible to add more parameters, explore which ones might be usefor for your command. The ones listed below are suggested as a minimum for all commands. The name parameter is what will be used to navigate to this command when running the app. Note that the name should be all lower case.\nusing McMaster.Extensions.CommandLineUtils; [Command( Name = \u0026#34;newcommand\u0026#34;, OptionsComparison = StringComparison.InvariantCultureIgnoreCase, UnrecognizedArgumentHandling = UnrecognizedArgumentHandling.CollectAndContinue)] public class NewCommand :IBaseCmd { } Note that the McMaster nugetpackage is references in the class.\n  Inlcude the override of the OnExecuteAsync from the base class. The implementation below will show the help for the command and then complete the task. If the command does not have any sub commands simply remove app.ShowHelp(); and include your own implementation.\n/// \u0026lt;inheritdoc/\u0026gt; protected override Task OnExecuteAsync(CommandLineApplication app) { app.ShowHelp(); return Task.CompletedTask; } Place all logic and operations you wish to be executed when the command is called. If you require any input parameters check the how to section for this below.\n  The new command should now be included in Program.cs. This is so that the command is recognized and executed when inputed in the running program.\nAdd a new parameter:\nprivate static readonly CommandLineApplication\u0026lt;NewCommand\u0026gt; _newCommandCmd = new CommandLineApplication\u0026lt;NewCommand\u0026gt;(); In the Task function the standard conventions are set for the new command and all DI services are made available.\n_newCommandCmd.Conventions .UseDefaultConventions() .UseConstructorInjection(serviceProvider);   Finally the command must be added to the switch case that identifies the input and routes it to the correct CommandLineApplication. Extend the switch case a shown below.\ncase \u0026#34;newcommand\u0026#34;: await _newCommandCmd.ExecuteAsync(args); break; The standard error message in the default clause of the loop should also be modified to include the new command.\ndefault: Console.WriteLine($\u0026#34;Unknown argument {string.Join(\u0026#34; \u0026#34;, args)}, Valid commands are data, instance and settings.\u0026#34;); break;   \u0026hellip; add a new sub command   Add a new class in the correct Subcommands-folder. It there is not subcommands folder for the command, please create this first. The class should share a name with the sub command.\n  The command attribute must be set on the class Name should be in lower case and match the class name. Note that the McMaster nugetpackage must be references to use the Command attribute.\n[Command( Name = \u0026#34;newsubcommand\u0026#34;, OptionsComparison = StringComparison.InvariantCultureIgnoreCase, UnrecognizedArgumentHandling = UnrecognizedArgumentHandling.CollectAndContinue)] public class NewSubCommand :IBaseCmd { }   The root command must include a reference for the new subcommand, so navigate back to newCommand.cs Add the following attribute to the class [Subcommand(typeof(NewSubCommand))]. If the class has multiple sub commands simply comma seperate them as such:\n[Subcommand(typeof(NewSubCommandA),typeof(NewSubCommandB), typeof(NewSubCommandC))]   Make the class an extention of IBaseCmd and include an override of the OnExecuteAsync method.\npublic class NewCommand : IBaseCmd { protected override Task OnExecuteAsync(CommandLineApplication app) { return Task.CompletedTask; } } OnExecuteAsync will be triggered whenver the subcommand is called, so this is where all logic should be implemented. If you require input parameters check the how to below. If you require services through dependency injection a constructor should be included in the blass.\n  \u0026hellip; add a new option to a command An option is simply implemented as a public property in the command class with an option attribute included. There are several input parameters for the options attribute. The ones belowe are what we suggest, but feel free to add more parameters if you require.\n[Option( CommandOptionType.SingleValue, ShortName = \u0026#34;dg\u0026#34;, LongName = \u0026#34;dataGuid\u0026#34;, ShowInHelpText = true, Description = \u0026#34;DataGuid for the data element.\u0026#34;)] public string DataGuid { get; set; } Not that the command class is not instantiated with each new command, so if you have some optional parameters, ensure that these are reset for their default value after the command is executed.\n\u0026hellip; validate an option Instead of validating the format of an option that is shared by several commands in each command where it is used it is easier to create a validation class and simply include this attribute on the option. This way validation is triggered before the command is even executed, notifying the user about their incorrect input.\nAll validation attribute classes must extend ValidationAttribute and override the validation method. See GuidAttribute for an example.\nIf an option is required add the [Required] as an attribute on the property.\n\u0026hellip; add a new service  Define an interface for the service. Implement a class that extends the interface. Add the service in the function GetAndRegisterServices in Program.cs Depending on the required lifetime of the service you will have to use one of the implementations below.  services.AddScoped\u0026lt;IService, Service\u0026gt;(); services.AddSingleton\u0026lt;IService, Service\u0026gt;(); services.AddTransien\u0026lt;IService, Service\u0026gt;(); Documentation on service lifetim is available here.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/register/",
	"title": "Application arhicture register component - Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Description of register component",
	"content": "The register component is an ASP.Net Core MVC Application exposing REST-API to Altinn Apps.\nThe solution is now available at https://platform.altinn.cloud/register/api/v1 and all resources are avaiable through endpoints defined below.\nResource: Organizations, Parties, Persons\n/organizations Get information about an organisation:\nOrganization type    Attribute Type Description     OrgNumber string the organisation number nine digits   Name string the registered name of the organisation   UnitType string    TelephoneNumber string the telephone number   MobileNumber string the mobile number   FaxNumber string the fax number   EMailAddress string the email adress   InternetAddress string the url for a web site   MailingAddress string the adress for sending mail to the organisation   MailingPostalCode string the postal code for sending mail to the organisation   MailingPostalCity string the city for sending mail to the organisation   BusinessAddress string the address of the daily business   BusinessPostalCode string the postal code for the daily business   BusinessPostalCity string the city for the daily business    Operations GET /organizations/{orgNr} /persons Person type    Attribute Type Description     SSN string Social security number   Name string the person\u0026rsquo;s full name   FirstName string the person\u0026rsquo;s first name   MiddleName string the person\u0026rsquo;s middle name   LastName string the person\u0026rsquo;s last name   TelephoneNumber string telephone number   MobileNumber string mobile number   MailingAddress string mailing address   MailingPostalCode string mailing postal code   MailingPostalCity string mailing postal city   AddressMunicipalNumber string adress municipal number   AddressMunicipalName string adress municipal name   AddressHouseNumber string address house number   AddressHouseLetter string address house letter   AddressPostalCode string address postal code   AddressCity string adress city    Operations Get information about a person: Send a GET-request with the persons SSN contained in the request body to\nGET /persons /parties Party type    Attribute Type Description     PartyId int the party ID   PartyTypeName PartyType the type of the party; organisation or person   OrgNumber string the organisation number. Empty string if party is person.   SSN string the social security number. Empty string if party is organisation.   UnitType string    Name string the full name of the person or name of the organisation   IsDeleted bool true is the organisation has been deleted from the registery   OnlyHiearhyElementWithNoAccess bool true if party is a parent unit with no access in current context   Person Person the person the party represents   Organization Organization the organisation the party represents   ChildParties List List of sub units if the party is an organisation    Operations Get information about a party:\nGET /parties/{partyId} Lookup a party id based on social secutiry number or organisation number: (SSN or OrgNumber should be included in string format in the request body.)\nGET /parties/lookup Lookup a party based on social secutiry number or organisation number: (SSN or OrgNumber should be included in string format in the request body.)\nGET /parties/lookupObject "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/storage/",
	"title": "Altinn Platform - Storage",
	"tags": ["architecture", "solution", "platform"],
	"description": "Storage provides persistent storage service for applications in Altinn.",
	"content": "The Storage component exposes a REST-API to Altinn Apps.\nStorage is mostly used by the app-backend to store information about instances and their data elements. It provides a registry of all applications metadata, data types and events. It is also intended to be used by organisations and other clients to read data.\nResources: Instance, Application, DataType, ApplicationLogic, InstanceEvent, ApplicationEvent, MessageBoxInstance, ProcessHistory.\nInstance An application instance is created when a instance owner (reportee) starts a process in an Altinn application. An instance replaces Altinn2 Message. An instanceOwner is a person/company that reports information via Altinn. An appId refers to the application information element which defines the metadata about the application.\n{ \u0026#34;id\u0026#34;: \u0026#34;60238/762011d1-d341-4c0a-8641-d8a104e83d30\u0026#34;, \u0026#34;appId\u0026#34;: \u0026#34;test/sailor\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;partyId\u0026#34;: \u0026#34;60238\u0026#34; }, \u0026#34;created\u0026#34;: \u0026#34;2019-03-06T13:46:48.6882148+01:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;user32\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2019-03-07T23:59:49+01:00\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;user34\u0026#34;, \u0026#34;dueBefore\u0026#34;: \u0026#34;2019-06-10T00:00:00.00Z\u0026#34;, \u0026#34;visibleAfter\u0026#34;: null, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Færder påmelding 2019\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Fearder Race Registration 2019\u0026#34; }, \u0026#34;process\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2019-09-25T09:32:44.20Z\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2019-10-10T32:22.00Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Data_1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Fyll ut\u0026#34;, \u0026#34;altinnTaskType\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;validated\u0026#34;: { \u0026#34;timestamp\u0026#34;: \u0026#34;2019-10-04T12:00.00Z\u0026#34;, \u0026#34;canCompleteTask\u0026#34;: true } } }, \u0026#34;status\u0026#34;: { \u0026#34;softDeleted\u0026#34;: null, \u0026#34;archived\u0026#34;: \u0026#34;2019-12-20T20:30:33.233Z\u0026#34;, \u0026#34;hardDelete\u0026#34;: null, \u0026#34;readStatus\u0026#34;: \u0026#34;Read\u0026#34;, \u0026#34;substatus\u0026#34;:{ \u0026#34;label\u0026#34;:\u0026#34;substatus.accepted.label\u0026#34;, \u0026#34;description\u0026#34;:\u0026#34;substatus.accepted.description\u0026#34; } }, \u0026#34;data\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;692ee7df-82a9-4bba-b2f2-c8c4dac69aff\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;boatdata\u0026#34;, \u0026#34;contentType\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;test/sailor/60238/762011d1-d341-4c0a-8641-d8a104e83d30/data/692ee7df-82a9-4bba-b2f2-c8c4dac69aff.json\u0026#34;, \u0026#34;filename\u0026#34;: \u0026#34;davidsyacht.json\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-03-06T15:00:23+01:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;XXX\u0026#34;, \u0026#34;size\u0026#34;: 2003, \u0026#34;locked\u0026#34;: true }, { \u0026#34;id\u0026#34;: \u0026#34;999911d1-d341-4c0a-8641-d8a104e83d30\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;crewlist\u0026#34;, \u0026#34;contentType\u0026#34;: \u0026#34;text/xml\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;test/sailor/60238/762011d1-d341-4c0a-8641-d8a104e83d30/data/999911d1-d341-4c0a-8641-d8a104e83d30\u0026#34;, \u0026#34;filename\u0026#34;: \u0026#34;crewLIst.xml\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-03-07T23:59:49+01:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;XXX\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2019-03-10T23:59:49+01:00\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;XXX\u0026#34; } ] } Instance type    Attribute Type Description User Owner App Storage     id string unique id    C   appId string application id    C   instanceOwner.partyId integer id of instance owner C C     create dateTime creation time    C   createdBy string user id    C   lastChanged dateTime? last changed time    C   lastChangedBy string user id    C   dueBefore dateTime? deadline for submit  CU     visibleAfter dateTime? when visible for user  CU     process ProcessState process state info   U    status InstanceStatus instance status info   U C   data List data elements   CU    completeConfirmations List\u0026lt;CompleteConfirmation\u0026gt; List of stakeholders that are done with their processing the instance   C     C - creation time, U - can be updated\nInstanceStatus Model The instance status holds data on delete, archive, read, and substate of the instance. Setting the archive and read state of the instance is handled by the application itself. By default, both the end user and app owner can set the delete state of an instance. Only app owner is able to set the substatus of an instance.\n   Attribute Type Description     Archived DateTime? Date and time for when the instance was archived. Null if instance is active.   SoftDeleted DateTime? Date and time for when the instance was soft deleted. Null if instance is not deleted.   HardDeleted DateTime? Date and time for when the instance was hard deleted. Null if instance is not deleted.   ReadStatus ReadStatus An enum reflecting if the instance is unred, read og updated since last review.   SubStatus Substatus Substatus of the instance. Label \u0026amp; description should be text keys in order to enable language support.    CompleteConfirmation Model\nThe complete confirmation is used to inform Altinn about when a given stakeholder considers their own process as complete with regards to an instance.\n   Attribute Type Description     StakeholderId string Unique identifier for a stakeholder.   ConfirmedOn DateTime Date and time for when the complete confirmation was created.    Operations Create a new instance of an app for a given instance owner. Post with query params that identifies the appId and the instance owner. An instance object can be sent as json data to set certian values.\nPOST /instances?appId=test/sailor { \u0026#34;instanceOwner\u0026#34;: { \u0026#34;partyId\u0026#34;: \u0026#34;60238\u0026#34; }} Get information about one instance.\nGET /instances/{instanceId} Get (query) all instances that an instance owner has\nGET /instances/{instanceOwnerPartyId} Query all instances of an application owner\u0026rsquo;s organisation\nGET /instances?org={org} Delete a specific instance (also deletes its data).\nDELETE /instances/{instanceId} Update read status of an instance. UpdatedState can hold values: \u0026ldquo;read\u0026rdquo;, \u0026ldquo;unread\u0026rdquo;, \u0026ldquo;updatedSinceLastReview\u0026rdquo;\nPUT /instances/{instanceId}/readstatus?status={updatedState} Update substatus of an instance.\nPUT /instances/{instanceId}/substatus Data service A data element is a file that contains a specific form element of an instance. It may be structured file, e.g. json, xml, or it may be a binary file, e.g. pdf. The application metadata restricts the types of form elements that are allowed {dataType}.\nGet a specific data element\nGET /instances/{instanceId}/data/{dataId} Post to create a specific data element. Content a file (as MultipartContent). After success the instance\u0026rsquo;s data section is updated, with the appropriate dataId guid that is used to identify the specific data element\nPOST /instances/{instanceId}/data?dataType={dataType} Put to replace a specific data element. Delete to remove data element.\nPUT /instances/{instanceId}/data/{dataId} Notice that PDFs, such as receipts or simmilar, is handled the same way as data elements.\nApplication Application metadata used to validate data element types in instances. And to provide application events.\nResource: /applications/test/sailor\n{ \u0026#34;id\u0026#34;: \u0026#34;test/sailor\u0026#34;, \u0026#34;versionId\u0026#34;: \u0026#34;v32.23-xyp\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;app\u0026#34;: \u0026#34;sailor\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-03-06T13:46:48.6882148+01:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;XXX\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;Testapplikasjon\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Test Application\u0026#34; }, \u0026#34;processId\u0026#34;: \u0026#34;standard\u0026#34;, \u0026#34;validFrom\u0026#34;: \u0026#34;2019-04-01T12:14:22+01:00\u0026#34;, \u0026#34;validTo\u0026#34;: null, \u0026#34;maxSize\u0026#34;: null, \u0026#34;dataTypes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;boatdata\u0026#34;, \u0026#34;description\u0026#34;: {\u0026#34;nb\u0026#34;: \u0026#34;Båtdata\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Boat data\u0026#34;}, \u0026#34;allowedContentTypes\u0026#34;: [\u0026#34;application/json\u0026#34;], \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: true, \u0026#34;classRef\u0026#34;: \u0026#34;Skjema\u0026#34;, \u0026#34;schemaRef\u0026#34;: \u0026#34;schemas/boatname\u0026#34; }, \u0026#34;maxSize\u0026#34;: 200000, \u0026#34;maxCount\u0026#34;: 1 }, { \u0026#34;id\u0026#34;: \u0026#34;crewlist\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [\u0026#34;application/xml\u0026#34;], \u0026#34;taskId\u0026#34;: \u0026#34;Task_2\u0026#34;, \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: false, \u0026#34;classRef\u0026#34;: \u0026#34;CrewList\u0026#34;, \u0026#34;schemaRef\u0026#34;: \u0026#34;schemas/crewlist\u0026#34; }, \u0026#34;maxSize\u0026#34;: null, \u0026#34;minCount\u0026#34;: 1, \u0026#34;maxCount\u0026#34;: 3 }, { \u0026#34;id\u0026#34;: \u0026#34;certificate\u0026#34;, \u0026#34;allowedContentType\u0026#34;: [\u0026#34;application/pdf\u0026#34;], \u0026#34;appLogic\u0026#34;: null, \u0026#34;maxSize\u0026#34;: null, \u0026#34;maxCount\u0026#34;: 1 } ] } Application type    Property Type Description     id string application id   versionId string release or commit id   processId string application process id   title LanguageString[] application title in different languages   validFrom dateTime when the application is valid from   validTo dateTime? when the application is valid to   dataTypes DataType[] Metadata about data requirements in the application. See DataType.   maxSize integer the maximum number of bytes that the data elements can have    DataType The DataType model represents data requirements for an application for different process tasks.\n   Property Type Description     id string Required. Id of the data type.   description LanguageString[] A short description of the data type. Language support.   allowedContentTypes string[] A list of allowed content types.   allowedContributers string[] A list of allowed contributers. On the format \u0026lsquo;{keyword}:{value}\u0026rsquo; Approved keywords are: org and orgno.   taskId string Required. Associated task from the process definition. Defines that the data is required to progress to next task in a process.   appLogic ApplicationLogic Data object that connect data to application models. This should be null for data types describing attachments. See ApplicationLogic.   maxSize int Maximum allowed size of a data item of this type. Undefined means that the limit is unbounded.   maxCount int Maximum allowed data item count of this type. Zero or below indicate unbounded.   minCount int Minimum number of data items of this type. Zero or below indicate that the data type is optional.    Example { \u0026#34;id\u0026#34;: \u0026#34;receipt\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [\u0026#34;image/jpeg\u0026#34;, \u0026#34;image/png\u0026#34;], \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;appLogic\u0026#34;: null, \u0026#34;maxSize\u0026#34;: 20, \u0026#34;minCount\u0026#34;: 1, \u0026#34;maxCount\u0026#34;: 3 } In order to complete process task Task_1 the user must upload at least one image. It can be either a jpg or png below 20 MB. The user is allowed to upload additional 2 images. The application does not have any business logic associated with the data type.\nApplicationLogic The ApplicationLogic model describes the connection between a data type and a corresponding data model in the application. This is required for all data types associated with an XSD or JSON Schema. In most cases it also implies that there is a UI with a form the user can fill in.\n   Property Type Description     autoCreate bool Indicate that the application should automatically create a data item of this type with every new application instance.   classRef string Reference to the class definition representing the data model.   schemaRef string Reference to the XSD or JSON schema.    Operations Get a list of all Applications\nGET /applications Get metadata about a specific application\nGET /applications/{appId} Get application events.\nGET /applications/{appId}/events InstanceEvent User actions on an instance trigger instance events such as created, saved, _submitted, deleted, and undeleted. The events are associated with an instance, a user and an instance owner and generated by the application and stored in CosmosDB.\nFormat of the JSON object stored in the database.\n{ \u0026#34;id\u0026#34;:\u0026#34;6dff32bc-0928-4ae8-937c-b362d6941c89\u0026#34;, \u0026#34;instanceId\u0026#34;: \u0026#34;60238/5c6b1a71-2e1f-447a-ae2f-d1807dcffbfb\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;deleted\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-05-02T13:08:21.981476Z\u0026#34;, \u0026#34;instanceOwnerPartyId\u0026#34;: \u0026#34;60238\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;userId\u0026#34;: 3, \u0026#34;authenticationLevel\u0026#34;: 1, \u0026#34;enduserSystemId\u0026#34;: 2 } } Instance Event type    Attribute Type Description     id Guid? Id set by CosmosDB when the instance event is stored   instanceId string {instanceOwnerPartyId}/{instanceGuid}   dataId string Id of data element if event is related to a data element.   created DateTime? DateTime set by CosmosDB when the event is stored   eventType string the event type. Available instance event types are listed here   instanceOwnerPartyId string the instance owner id   user.userId int? the user who triggered the event   user.authenticationLevel int the authentication level for the user or system that triggered the event   user.endUserSystemId int? the end user system that triggered the event   process ProcessState the process step during which the event occured    Operations GET /instances/{instanceId}/events Create an event. POST with body. Note id and createDateTime is set by the system and should not be included in the json object.\nPOST /instances/{instanceId}/events Get all instance events for a specific instance.\nGET /instances/{instanceId}/events Get all instance events for a specific instance filtered by event types\nGET /instances/{instanceId}/events?eventTypes={eventTypeA},{eventTypeB} Get all instance events for a specific instance within a time frame The times are strings defined in UTC-format. E.g. \u0026ldquo;2019-05-03T12:55:23\u0026rdquo;\nGET /instances/{instanceId}/events?from={fromtime}\u0026amp;to={totime} Get all instance events for a specific instance within a time frame filtered by event types\nGET /instances/{instanceId}/events?from={fromtime}\u0026amp;to={totime}\u0026amp;eventTypes={eventTypeA},{eventTypeB} Delete all instance events for a specific instance. DELETE request.\nDELETE /instances/{instanceId}/events MessageBoxInstance A message box instance is a compressed instance object stripped for data that is not relevant for the Altinn II message box. In addition some properties from the application metadata such as application title are included in the object.\nMessageBoxInstance type    Attribute Type Description     id string unique id (corrresponds to instance guid)   instanceOwnerId integer id of instance owner   org string Application owner for the app   appName string name of the application   title string title of the application in language defined in the request   processCurrentTask string current task in the process state   createDateTime dateTime creation time   lastChangedBy string user id of the user who last changed the instance   lastChangedBy string user id   dueDateTime dateTime? deadline for submit   bool allowDelete is current user allowed to delete instance   bool authorizedForWrite is current user allowed to write to edit the instance   deletedDateTime dateTime? date the instance was deleted   archivedDateTime dateTime? date the instance was archived    Operations Get a single instance in message box instance format in (optional) preffered language. Default lanugage is norsk bokmål (nb). Available language specifications: en, nb, nn-NO.\nGET /sbl/instances/{instanceOwnerPartyId}/{instanceId}?language={languageId} Get list of all instances for an instance owner in a specific state, with a visible dateTime that has passed and (optional) preffered language. Available states: active, deleted, archived. Available language specifications: en, nb, nn-NO.\nGET /sbl/instances/{instanceOwnerPartyId}?state={instanceState}\u0026amp;language={languageId} Search instances based on query parameters All query parameters are optional.\nGET /sbl/instances/search?instanceOwner.partyId={instanceOwnerPartyId}\u0026amp;language={languageId}\u0026amp;appId={applicationId} Mark an instance for deletion in storage. Set parameter hard equal to true or false to indicate soft or hard deletion. Calling this endpoint will not the delete the instance from Storage, simply mark is as deleted.\nDELETE /sbl/instances/{instanceOwnerPartyId}/{instanceId}?hard={true/false} Restore a soft deleted instance.\nPUT /sbl/instances/{instanceOwnerPartyId}/{instanceId}/undelete ProcessHistory The process history is a list comprised of process history events for a given instance.\nProcessHistoryItem type    Attribute Type Description     EventType string the event type. Available process event types are listed here with the prefix process_   ElementId string element id for the process flow step   Occured DateTime? event occurence time   Started DateTime? task start time   Ended DateTime? task end time    Operations Get process history for a given instance\nGET /instances/{instanceOwnerPartyId}/{instanceId}/process/history Texts Represents text resources for an application.\nText type    Property Type Description     id string text id {org-app-language}. Only used internally for storage purposes. Auto generated.   language string the language. Two letter ISO name.   org string the org. Only used internally for storage purposes. Auto generated.   resources TextResource[] list of text resources    The id and org fields are generated by the system, and should not be included when using POST the text resource object. Example of an text element that should be sent during a POST:\n{ \u0026#34;language\u0026#34;: \u0026#34;nb\u0026#34;, \u0026#34;resources:\u0026#34;: [ {\u0026#34;id\u0026#34;: \u0026#34;some_id\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;some value\u0026#34;}, {\u0026#34;id\u0026#34;: \u0026#34;some_other_id\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;some other value\u0026#34;}, {\u0026#34;id\u0026#34;: \u0026#34;yet_another_id\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Text containing two variables: {0} and {1}.\u0026#34;, \u0026#34;variables\u0026#34;:[ { \u0026#34;key\u0026#34;: \u0026#34;dataSouce.TextKey_1\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.dataModelName\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;dataSouce.TextKey_2\u0026#34;, \u0026#34;dataSource\u0026#34;: \u0026#34;dataModel.dataModelName\u0026#34; }] } ] } TextResource type    Property Type Description     id string text resource id (for instance schema.postplace)   value string the value   variables list\u0026lt;TextResourceVariable\u0026gt; list of text resource variables.    TextResourceVariable type    Property Type Description     key string the key for the text resource variable   dataSource string the datasource for the text resource variable. Allowed prefix: \u0026ldquo;dataModel\u0026rdquo;    Operations Create a new text resource for an application.\nPOST /applications/{appId}/texts Get a specific text resource for an application.\nGET /applications/{appId}/texts/{language} Update a specific text resource for an application.\nPUT /applications/{appId}/texts/{language} Delete a specific text resource for an application.\nDELETE /applications/{appId}/texts/{language} "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/app-api/process/",
	"title": "Process",
	"tags": ["api"],
	"description": "The process API endpoints to lead an instance through the defined process.",
	"content": "Overview All apps have a process definition that specifies start events, end events, tasks and the allowed flows (transitions) between these. A process is started by the application, which selects a start event to start and follows the sequence flow to the first task and creates a current task object to holde the process state.\nA process is represented by an process modell in BPMN/XML notation. Each task has an unique id, which is used to refer to the task in the api.\nProcess model Get the application\u0026rsquo;s process model.\nGET {appPath}/process Returns the bpmn file defining the process.\n\u0026lt;bpmn2:process id=\u0026#34;Process_1\u0026#34; isExecutable=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;bpmn2:startEvent id=\u0026#34;StartEvent_1\u0026#34;\u0026gt; \u0026lt;bpmn2:outgoing\u0026gt;Flow_1\u0026lt;/bpmn2:outgoing\u0026gt; \u0026lt;/bpmn2:startEvent\u0026gt; \u0026lt;bpmn2:task id=\u0026#34;Task_1\u0026#34; name=\u0026#34;Utfylling\u0026#34; altinn:tasktype=\u0026#34;data\u0026#34;\u0026gt;  \u0026lt;bpmn2:incoming\u0026gt;Flow_1\u0026lt;/bpmn2:incoming\u0026gt; \u0026lt;bpmn2:outgoing\u0026gt;Flow_2\u0026lt;/bpmn2:outgoing\u0026gt; \u0026lt;/bpmn2:task\u0026gt; \u0026lt;bpmn2:endEvent id=\u0026#34;EndEvent_1\u0026#34;\u0026gt; \u0026lt;bpmn2:incoming\u0026gt;Flow_2\u0026lt;/bpmn2:incoming\u0026gt; \u0026lt;/bpmn2:endEvent\u0026gt; \u0026lt;bpmn2:sequenceFlow id=\u0026#34;Flow_1\u0026#34; sourceRef=\u0026#34;StartEvent_1\u0026#34; targetRef=\u0026#34;data_1\u0026#34; /\u0026gt; \u0026lt;bpmn2:sequenceFlow id=\u0026#34;Flow_2\u0026#34; sourceRef=\u0026#34;Task_1\u0026#34; targetRef=\u0026#34;EndEvent_1\u0026#34; /\u0026gt; \u0026lt;/bpmn2:process\u0026gt; Altinn specific task types Application developers can in their BPMN Definition specify some altinn specific task types, see altinn:tasktype, which signify the behaviour of the task. So far we have defined the following:\n data - user is asked to fill inn one or more data elements, e.g. upload data or fill in forms submit - user is asked if he should submit the information which has been filled in on previous tasks payment - user is asked to pay a specific amount signing - user is asked to provide a digital signature external - task is handled by an external entity, user must wait until they have completed the task.  Get process state of a specific instance GET {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process For an ongoing process this process state can look like the json below. It indicates that the process was started at a given date time and that it\u0026rsquo;s current task is Task_1. The flow number indicates the sequence of process events/tasks that occurs during the execution of the process. Notice that same task can be visited multiple times in a process if there is a sequence flow that allows that.\n{ \u0026#34;started\u0026#34;: \u0026#34;2019-09-25T09:32:44.20Z\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;flow\u0026#34;: 2, \u0026#34;started\u0026#34;: \u0026#34;2019-10-10T32:22.00Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Fyll ut\u0026#34;, \u0026#34;altinnTaskType\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;validated\u0026#34;: { \u0026#34;timestamp\u0026#34;: \u0026#34;2019-10-04T12:00.00Z\u0026#34;, \u0026#34;canCompleteTask\u0026#34;: true } } For an ended process the following will be returned:\n{ \u0026#34;started\u0026#34;: \u0026#34;2019-09-25T09:32:44.20Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;ended\u0026#34;: \u0026#34;2019-10-10T14:01:22.034Z\u0026#34;, \u0026#34;endEvent\u0026#34;: \u0026#34;EndEvent_1\u0026#34; } Process events The system will generate a number of process related events, which can be found in the instances event history.\n Start Event StartTask Event EndTask Event End Event  Start Event { \u0026#34;instanceId\u0026#34;: \u0026#34;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;process:Start\u0026#34;, \u0026#34;processInfo\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2019-09-25T09:32:44.20Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34; }, \u0026#34;createdDateTime\u0026#34;: \u0026#34;2019-10-10T14:01:22.034Z\u0026#34;, } StartTask Event { \u0026#34;instanceId\u0026#34;: \u0026#34;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;process:StartTask\u0026#34;,  \u0026#34;processInfo\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2019-09-25T09:32:44.20Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;flow\u0026#34;: 2, \u0026#34;started\u0026#34;: \u0026#34;2019-10-01T13:22.01Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Fyll ut MVA rapport\u0026#34;, \u0026#34;altinnTaskId\u0026#34;: \u0026#34;data\u0026#34; } }, \u0026#34;createdDateTime\u0026#34;: \u0026#34;2019-10-01T13:22.01Z\u0026#34;, } EndTask Event { \u0026#34;instanceId\u0026#34;: \u0026#34;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;process:EndTask\u0026#34;,  \u0026#34;processInfo\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2017-10-01T13:22.00Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;flow\u0026#34;: 2, \u0026#34;started\u0026#34;: \u0026#34;2019-10-05T01:11.33Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;altinnTaskId\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;ended\u0026#34;: \u0026#34;2019-10-05T01:11.33Z\u0026#34; } }, \u0026#34;createdDateTime\u0026#34;: \u0026#34;2019-10-05T01:11.33Z\u0026#34;, } End Event { \u0026#34;instanceId\u0026#34;: \u0026#34;347829/41e57962-dfb7-4502-a4dd-8da28b0885fc\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;process:EndEvent\u0026#34;,  \u0026#34;processInfo\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2017-10-01T13:22.00Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;ended\u0026#34;: \u0026#34;2019-10-05T08:15:23.544Z\u0026#34;, \u0026#34;endEvent\u0026#34;: \u0026#34;EndEvent_1\u0026#34; }, \u0026#34;createdDateTime\u0026#34;: \u0026#34;2019-10-05T08:15:23.544Z\u0026#34;, } Get process history of a specific instance Based on the process events the history of the instance\u0026rsquo;s process is generated. The following illustrates an ended process:\nGET {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/history \u0026#34;processHistory\u0026#34;: [ { \u0026#34;eventType\u0026#34;: \u0026#34;process_StartEvent\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;occured\u0026#34;: \u0026#34;2020-01-21T13:49:09.3109169Z\u0026#34; }, { \u0026#34;eventType\u0026#34;: \u0026#34;process_StartTask\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;started\u0026#34;: \u0026#34;2020-01-21T13:49:09.4264322Z\u0026#34;, \u0026#34;ended\u0026#34;: \u0026#34;2020-01-21T13:49:39.66609Z\u0026#34; }, { \u0026#34;eventType\u0026#34;: \u0026#34;process_EndEvent\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;EndEvent_1\u0026#34;, \u0026#34;occured\u0026#34;: \u0026#34;2020-01-21T13:49:39.7681248Z\u0026#34; } ] } Start Process To start a process one can post start to the process endpoint.\nPOST {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/start[?startEvent=StartEvent_1] This will start the process and move the process state to the first task from the given start. If process has more than one start event, then the client has to chose which one to start with the startEvent query parameter.\nComplete and move to next task The process logic attempts to finish the current task and then moves the process forward to the next task in the flow. The cannot always select the next task, especially when more than one tasks can be chosen. In this case the client must chose which process element id to select.\nPUT {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/next[?id=Task_2] Complete the process The complete process method will attempt to complete the process for an instance. Hence, the app will move the process from one task to the next until it reaches an valid end state.\nIf a task\u0026rsquo;s exit condition is not met, the process will be stopped in the last valid task. And the user must manually fix the problem and complete the process.\nPUT {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/completeProcess Get the next tasks in a process Returns an list of the next tasks/events that can be reached from the current task.\nGET {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/next Start a task If you are at a specific task and want to start the next task you can try to put next to the process endpoint. The process controller then tries to close the current task and start the wanted task. Updates process state accordingly. If exit condition of current task is not met, an error will be returned. If the task is not directly reachable by the flow, an error will be returned.\nPUT {appPath}/instances/347829/41e57962-dfb7-4502-a4dd-8da28b0885fc/process/next?id=Task_2 "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/instancee-events/",
	"title": "Instance events",
	"tags": ["api"],
	"description": "The Platform API for working with instance events",
	"content": "Instance events All instance events, e.g. creation, read, save, change process state, \u0026hellip;\nGET {storagePath}/instances/347829/762011d1-d341-4c0a-8641-d8a104e83d30/events Example of event data.\n{ \u0026#34;id\u0026#34;:\u0026#34;6dff32bc-0928-4ae8-937c-b362d6941c89\u0026#34;, \u0026#34;instanceId\u0026#34;: \u0026#34;60238/5c6b1a71-2e1f-447a-ae2f-d1807dcffbfb\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;deleted\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2019-05-02T13:08:21.981476Z\u0026#34;, \u0026#34;instanceOwnerPartyId\u0026#34;: \u0026#34;60238\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;userId\u0026#34;: 338829, \u0026#34;authenticationLevel\u0026#34;: 1, \u0026#34;enduserSystemId\u0026#34;: 2 }, \u0026#34;process\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2019-05-01T12:45:01.3233Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;Start_22\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;elementId\u0026#34;: \u0026#34;Task_2\u0026#34; } } } Application events (for application owners)  WARNING: This section will be redesigned\n Selected instance events. Created, first read, change process state. Optinally specified by application developer.\nEvents can be queried. May be piped.\nGET {storagePath}/applications/org/app/events?created=gte:2019-03-30\u0026amp;process.currentTask=Task_2 "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/app-api/validation/",
	"title": "Validation",
	"tags": ["api"],
	"description": "The validation API endpoints for instances and data elements.",
	"content": "Overview There are multiple endpoints that can trigger validation and provide feedback regarding the state of an instance and its data. Some of them validates data already uploaded and stored in Altinn while others can validate input.\nValidate stored instance This action will validate an entire instance including the all data elements already uploaded and stored in Altinn. Validation will be performed based on current task in the process. Validation will ensure that all required data elements, as defined by the application metadata, have been uploaded and are valid. If the result of the validation is that nothing is missing or wrong, the action will update the instance with information indicating that the instance is valid. The response will be an empty array. In the case of validation issues the response will provide an array of the identified issues. Validation of a full instance use validation of data as described in the chapter below.\nGET https://{org}.apps.at21.altinn.cloud/{org}/{app}/instances/{instanceOwnerPartyId}/{instanceId}/validate Example response:\n[ { \u0026#34;severity\u0026#34;: \u0026#34;Error\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;INSTANCE\u0026#34;, \u0026#34;targetId\u0026#34;: null, \u0026#34;field\u0026#34;: null, \u0026#34;code\u0026#34;: \u0026#34;TooManyDataElementsOfType\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;TooManyDataElementsOfType\u0026#34; } ] Validate stored data This action will validate a specific data element already uploaded and stored in Altinn. The logic validates that the data element has the correct Content-Type, that it isn\u0026rsquo;t too large and so on. Data elements with a model bound to them will be validated against the model (Schema).\nValidation will also check that the data element being validated is required for the current task in the process. If the data is validated during a task different from what is intended, the validator will give a warning.\nGET https://{org}.apps.at21.altinn.cloud/{org}/{app}/instances/{instanceOwnerPartyId}/{instanceId}/data/{dataid}/validate Example response:\n[ { \u0026#34;severity\u0026#34;: \u0026#34;Error\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;targetId\u0026#34;: null, \u0026#34;field\u0026#34;: null, \u0026#34;code\u0026#34;: \u0026#34;MissingContentType\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MissingContentType\u0026#34; } ] Validate data The application will provide a method to validate the datamodel without creating a instance of the data. Data must be provided as formdata. The validate method takes a data file of an dataType and performs validation on that file. It returns a validation report.\nPUT {appPath}/validate?dataType=modelA "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/scenarios/",
	"title": "Scenarios",
	"tags": ["api"],
	"description": "Different API usage scenarios.",
	"content": "\rAuthentication\rHow to authenticate using the APIs.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/models/",
	"title": "Models",
	"tags": ["api"],
	"description": "This is an overview over most models exposed by the different API. It does not explain every single property of all models, but will try to give a solid introduction to the important parts.",
	"content": "\rApp metadata\rThe application metadata document is holds technical information about the app and the data type requirements.\n\r\rInstance\rAn instance is a metadata container that is used to track the status and progress of one interaction between an app user and owner.\n\r\rDataElement\rA data element is a metadata container that is used to track the status of actual data blobs.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "docs\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/dotnet-core/",
	"title": ".NET Core",
	"tags": ["tech", "programming"],
	"description": "Server side development framework.",
	"content": ".NET Core is the cross-platform and open source development framework used in Altinn 3. ASP.NET Core is used for developing APIs.\nWe\u0026rsquo;ve also published a few packages on nuget.org.\nAltinn ❤️ dotnet.\nLinks  Documentation Download License Roadmap Docker Hub Runtime ASP.NET  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/about/",
	"title": "About Altinn 3",
	"tags": [],
	"description": "Altinn 3 is the third generation platform for developing and hosting digital services.",
	"content": "The platform is owned by the Norwegian Digitalization Agency and developed as an open source platform.\nThe current development solution and hosting platform (launched 2010) is considered by Gartner as one of the five leading digital government technology platforms in the world.\nThe current platform is used by over 90% of the Norwegian population and almost 100% of the businesses. Over 62 agencies and municipalities host their solutions in the Altinn platform.\nThe current platform has almost 1000 active solutions supporting different user scenarios.\nExamples of solutions in the current platform is: Tax reporting, aircraft incident reporting, correspondence services from health department, lookup service in to the business register and many many more.\nConcept Using Altinn 3, agencies and other public entities can develop digital services as applications in Altinn Studio, they can deploy them to their isolated cloud infrastructure as containers. Altinn Platform supports the apps with core functionality like storage, authorization, authentication, register data, and more.\nThe infrastructure is highly scalable to support the different needs and all infrastructure is managed by the Altinn DevOps team.\nThe application template provided by Altinn Studio is prepared for the most common digital services scenarios making it possible to create and deploy the most simple public digital services in only hours.\nWhen an application is deployed to Altinn Apps it is available to all citizens and businesses of Norway.\nWhy Altinn 3? There are many reasons to use Altinn 3 to build and host your digital services.\n Application template are have built in functionality for the most common scenarios Easy to develop and deploy apps Reuse of data, UX, APIs and functionality A known platform for end users Highly scalable and secure infrastructure Open source Access to almost all citizens and business in Norway  When was Altinn 3 launched? The first version was launched in June 2020 and the first applications was deployed to production on june 19. 2020.\nPresentations Below you find a presentation done at NDC Conferences Oslo June 11th 2020. You can also find presentations (in Norwegian) from the Altinn-kaffe meetings.\nPresentation June 11. 2020 NDC Conference (slides)\n  How to learn more about Altinn 3 Start with reading about the different solutions of Altinn 3.\n Altinn Studio let you build your digital services Altinn Apps let your host your digital services Altinn Platform will provide standard functionalit to your digital services.  Go to solutions.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/authentication/accesstoken/",
	"title": "Access Token",
	"tags": ["architecture", "security"],
	"description": "A additional access token are used in the scenarious where we need to authenticate the application or component callin a component in Altinn Platform.",
	"content": "Altinn Studio The designer application creates a JWT based Access Token based on a certificate that designer has available when running in the Altinn Studio Kubernetes Cluster. The different Altinn Studio environments have their own certificate.\nThis makes it possible for each Altinn Platform environment to configure which Altinn Studio environment that is allowed to deploy and modify applications in that specific environment.\nThe token is generated with help of the Access Token generator and this is generated for each call designer are doing aginst the platform solution for Storage and Authorization.\nApps To be able to limit the clients that can access some of the functionality in Altinn Platform, some components/functionality requires that a AccessToken is added to the request header in addition to the JWT that identifes the user triggering the request.\nThe applications generes a token based on a org certificate available in the Kubernetes Cluster for the given org.\nThe token is generated with help of the Access Token generator and is used when calling Register as an example.\nThe required check is enabled in the platform components with enabling a AuthorizationRequirement on the controller. Example on Party controller here.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/alpine-linux/",
	"title": "Alpine Linux",
	"tags": ["tech"],
	"description": "Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.",
	"content": "We\u0026rsquo;re using Alpine Linux as the base for all our containers, including all apps.\nLinks  https://alpinelinux.org https://hub.docker.com/_/alpine https://en.wikipedia.org/wiki/Alpine_Linux  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/",
	"title": "Altinn 3",
	"tags": [],
	"description": "System documentation for Altinn Studio, Altinn Apps and Altinn Platform.",
	"content": "\rDevelop digital applications using our tools and APIs\nLooking for technical guidance on how to build your own apps with our products? See the Altinn Studio user guide. (Currently partially in Norwegian.)\n\r\rAltinn Studio is the next generation Altinn application development and hosting solution. All you need for testing Studio is to register an account.\nAltinn 3 have an open backlog on GitHub and the code is open source. Everybody can create bugs, request features or ask questions.\nContributing to Altinn Studio\r\r\rWe love your input! We want to make contributing to this project as easy as possible. \r\rArchitecture\r\r\rDescription of the Altinn 3 architecture, build process, infrastructure and security.\n\r\rDevelopment handbook\r\r\rThe development handbook should provide the information needed to contribute to the development of Altinn 3.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/",
	"title": "Altinn API",
	"tags": ["api"],
	"description": "Description of the Altinn API for end users and application owners.",
	"content": "The APIs The new solution will have multiple APIs, but they can be divided in two groups. The app APIs and the Platform APIs.\nApplication API The application API is an API that provides access to specific instances of a specific app. The API provides features for working with data elements while keeping the metadata document for the instance and its data elements updated. The instance level endpoints revolves around moving an instance through its defined process and controlling some instance level settings.\nMetadata for an app is the second job of the app API. There are endpoint that give access to the metadata of the app itself, its data types and process description.\nEvery app will expose almost identical endpoints and functionality. External parties should need only one client implementation across all app APIs. Technically there is nothing preventing an application owner from adding or making changes to the API, but in those cases it is probably an application with a different process flow. In these cases, the application might require some special handling, and additional documentation should be provided by the application owner.\nhttps://{org}.apps.altinn.no/{org}/{appname} The URL identifies the application owner specific hostname using the short name org, and the identificator of the app consisting of both the application owner short name and the name of the app org/appname.\nPlatform API The Platform APIs are primarily made to support the applications hosted on the platform, but a lot of endpoints can be used directly by both application owners and users. Primarily on the Authentication, Events and Storage APIs.\nThe Storage API provides access to all instances across all applications. It can be used to access metadata about applications, instances, data elements and instance activitylog (events), as well as the actual data content. This API should be the preferred method for application owners to download data associated with instances created based on their applications. Application users can use it if they need a form of message box or want to retrieve archived instances and their data.\nThe Authentication API provides methods for authentication.\nThe Events API provides access to the Events component endpoint for listing events. This can be used sporadically to query Altinn for events that have occured in the solution.\nhttps://platform.altinn.no API user groups There are primarily two groups of users of the Altinn APIs. The first group consists of applications and systems used by the owners of the Apps hosted by Altinn. This group is called Application Owners. The second group consists of organisations and people using the Apps to communicate with the application owners. This group is called Application Users.\nThe two groups have many similar needs, but there are some differences in what type of tasks they need to perform. All new APIs is technically available to both groups, but some endpoints have authorization to allow only on of the groups.\nApplication Owners A list of common tasks for an application owner:\n Query instances for a given application according to status or instance owners. Create an application instance. Upload form data and attachments. Download form data. Change process state (workflow). Confirm instance as complete.  Application Users A list of common tasks for an application user:\n Query instances for themselves or a party they can represent (instance owner). Create an application instance. Upload form data and attachments. Download form data. Change process state (workflow). View status of an instance.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/",
	"title": "Application construction components for Altinn Apps",
	"tags": [],
	"description": "Application created in Altinn Studio is deployed to Altinn Apps.",
	"content": "The diagram below shows the different components in Altinn Apps and below you find links to the description of the Application Architecture for the different components/parts of Altinn Apps.\nDownload as Visio.\n\rApplication construction components App\rDescription of the application construction components for the app developed in altinn studio.\n\r\rApplication Architecture Kubernetes Wrapper\rDescription of the application architecture for Kubernetes Wrapper\n\r\rApplication Architecture Routing\rDescripton of the Application Architecture for the Routing Application\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-apps/",
	"title": "Solution-specific application components Altinn Apps",
	"tags": ["architecture", "solution"],
	"description": "Description of the Altinn Studio solution",
	"content": "Functionality in Altinn Apps are located in the apps deployed to the Altinn Apps functionality.\nThis functionality depends on what kind of application template the app is based on and what the app developer have added in addition.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/",
	"title": "Altinn Apps",
	"tags": ["solution", "apps"],
	"description": "Altinn Apps is a flexible, scalable and isolated hosting solution where apps created in Altinn Studio is deployed.",
	"content": "The applications has a web native architecture and is deployed to Kubernetes Clusters as docker containers.\nThe Kubernetes clusters are isolated between the different applications owners and hosted in a public cloud solution making it highly scalable.\n\rApp\rDescription of the app created in Altinn Studio and that is deployed to Altinn Apps.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/presentation/altinn-cdn/",
	"title": "Altinn CDN",
	"tags": [],
	"description": "Description of Altinn Content Delivery Network",
	"content": "Altinn CDN is a safe place for hosting static resources that can be reused and cached client side.\n across Altinn solutions across all apps created in Altinn Studio across apps belonging to one organisation  These resources are defined in a repo on GitHub: https://github.com/Altinn/altinn-cdn\nThe files and folder structure in this repo is mirrored to https://altinncdn.no, and can be use by different solutions and apps.\nEach organisation (org) in Altinn has their own area for resources that they reuse across their apps. For example logo files. This means that organisations can, if they want to, easily change logo for all apps at once without deploying updates to each app.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/cli/",
	"title": "Altinn CLI",
	"tags": ["altinn-cli"],
	"description": "Altinn CLI is a command line application that can be used by app owneres to access Altinn APIs.",
	"content": "The application has as standard implemented functions for creating Altinn app instances and functions for fetch and store of application data. ALtinn CLI can be found on GitHub. The application can be used as standrad or extended with custom function devloped by the app owners themselves.\nConcepts The consepts of the CLI application are releated to the different parts of a command line command.\nExample: Storage GetData appId=ttd/how-to-name-it processIsComplete=true\nCommand is \u0026ldquo;Storage\u0026rdquo; SubCommand is \u0026ldquo;GetData\u0026rdquo; Option is \u0026ldquo;appId=ttd/how-to-name-it\u0026rdquo; \u0026ldquo;processIsComplete=true\u0026rdquo;\nCommand The name of the command shall give an indication of which system component that shall be accessed.\nSubCommand A sub command defines the operation to be performed on the Command component.\nOption Options are often used as filter criterias that can be a part of the API call.\nStandard Commands Login The purpose of the Login command is to obtain a JSON Web token that can be used to authenticate and authorize the Altinn CLI when sending requests to App and Platform APIs. The only provider currently supported is Maskinporten.\nLogin Maskinporten The Login operation requires a valid Enterprise certificate and a Client ID.\nThe certificate must be installed under the Certificate Store My for Current User. The Login command will use the certificate to authenticate with Maskinporten and a successful authentication will result in a JSON Web Token signed by Maskinporten. The login command will then use this JSON Web Token and exchange it for a new JSON Web Token created and signed by Altinn. This final JWT is what other commands will be including when sending requests to the Altinn APIs.\nThe Client ID is something each Application Owner is required to administrate themselves. Each application owner should have a team of people with access to Maskinporten and the rights to administrate their clients.\nAltinn CLI \u0026gt; Login Maskinporten clientId=\u0026lt;clientId\u0026gt; thumbprint=\u0026lt;certificate thumbprint\u0026gt; Help The Help command displays help information that is registered on commands, subcommands and options according command line options.\nExample : Help Storage displays the available Storage subcommands. Help Storage GetData displays help information registred on the GetData subcommand which shall a command description and a list with description on all options that can be used.\nStorage The Storage command is used to fetch and upload instance data.\nStorage SubCommands GetData GetData fetches data elements from Storage. Data can be fetched for an Applikation with different filter criterias or data can be fetch for a spesific owner and instance.\nExamples:\nStorage GetData ownerId= instanceId= dataId= fetches a speicifc data element\nStorage GetData appId=  fetchs all data elements for an application whoose status processing is set to completed\nGetInstance UploadData Upload uploads a data element to storage, for instance a receipt.\nExample:\nStorage UploadData ownerId= instanceId= elementType= file= The command options defines application owner and to which instance the data shall attached and the full path to the file that shall be uploaded.\nApplication The Application command is used to create application and application instances. It is also possible to upload when creating an instance. Data is attached by specifying file option with path to a file. .\nCreateInstance Software Implementasjon The main goal for how the software is build is that adding new commands, subcommands and options shall be simple. This is solved by implementing a generic command interpreter that does not require changes when new commmands,subcommands and options are added.\nThe generic implementation is based on software Interfaces. This requires that new software classes implements propriate interfaces so they can be found when matching command line values against commands, subcommands and options.\nThe second important implementation detail is that the commands with definitions is defined in a json file, CommandDefs.json. The file is part of the project as an embedded resource but can be modified and saved at the location defined in the Application setting parameters CommandDefinitionFile.\nThe CLI Application searches for the file at startup, the CommandDefinitionFile is search first.\nApplication settings Setting which is required for the CLI Application is defined in the appsettings.json file. Initial content of this file is:\n{ \u0026#34;APIBaseAddress\u0026#34;: \u0026#34;https://platform.at21.altinn.cloud/storage/api/v1\u0026#34;, \u0026#34;AppAPIBaseAddress\u0026#34;: \u0026#34;https://{org}.apps.at21.altinn.cloud\u0026#34;, \u0026#34;UseLiveClient\u0026#34;: \u0026#34;True\u0026#34;, \u0026#34;StorageOutputFolder\u0026#34;: \u0026#34;c:/storage/Output\u0026#34;, \u0026#34;StorageInputFolder\u0026#34;: \u0026#34;c:/storage/Input\u0026#34;, \u0026#34;CommandDefinitionFile\u0026#34;: \u0026#34;C:/storage/CommandDefs/Commands.json\u0026#34;, \u0026#34;MaskinportenBaseAddress\u0026#34;: \u0026#34;https://oidc-ver2.difi.no/idporten-oidc-provider\u0026#34;, \u0026#34;AuthBaseAddress\u0026#34;: \u0026#34;https://platform.at21.altinn.cloud/authentication/api/v1\u0026#34;, \u0026#34;tokenSettings\u0026#34;: { } }    Setting Description     Addresse Defines the base part of API' Url. The specific address to be used is selected by dedicated ClinetWrapper which forwards it to the HttpClientWrapper which computes a complete URL.   UseLiveClient Used to swithc between type of ClientWrappers accessing either the API or a wrapper used by unit tests or testing without accessing the actual API.   StorageInputFolder Defines folder for storing fetched files   StorageOutputFolder Defines folder for where files to send shall be fetched   CommandDefinitionFile Defines in which folder the command definition file CommandDefs.json is located.    Kommando Definisjon The command definition file, CommandDefs.json defines all commands with subcommands and options which can be \u0026ldquo;executed\u0026rdquo; i the CLI application. The file is initially a resource is the development project. New commands can be added following this format:\n{ \u0026#34;Name\u0026#34;: \u0026#34;Login\u0026#34;, \u0026#34;SubCommands\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Maskinporten\u0026#34;, \u0026#34;Options\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;clientId\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Guid\u0026#34;, \u0026#34;valuerange\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;client guid id\u0026#34;, \u0026#34;apiname\u0026#34;: \u0026#34;clientid\u0026#34; }, ] } ] } First element Name: defines the command name, next Name defines the subcommand name. No other parameters can be defined on this level. Options is an array with following elements:\n   Element name Description     Name name of the option, the same must be used on the command line, not case sensitive   type option datatype. See list below for valid types, type is case sensitive   valuerange valid range   description description of the parameter to be used in Help   apiname name of the option in the API that is accessed, name is case sensitive    Valid Data typers    Option Type System Type Opsjons klasse     bool System.Boolean NumberOption   byte System.Byte NumberOption   sbyte System.Decimal NumberOption   double System.Double NumberOption   float System.Single NumberOption   int System.Int32 NumberOption   uint System.UInt32 NumberOption   long System.Int64 NumberOption   ulong System.UInt64 NumberOption   object System.Object NumberOption   short System.Int16 NumberOption   ushort System.UInt16 NumberOption   string System.String NumberOption   datetime System.DateTime NumberOption   guid System.Guid NumberOption   file System.IO.FileStream FileOption   thumbprint System.String ThumbPrintOption    Class Overview Program Program is the startup \u0026ldquo;class\u0026rdquo; in the CLI Application. It’s main purpose it to implement CLI functionality and register classes that handles commands and subcommands. Register means in this context to scan the application for classes that implements interfaces that shall be searchable in the generic code.\nICommand Must be implemented by all command classes ISubCommandHandler Must be implemented by all subcommand classes IHelp Implemented on all classes that have info to be display by the help command\nThe actual CLI implementation consist in reading the keyboard and forward it to the ApplicationManager\nLogging Logger is injected to the registered command and is configured as a part of the service registration. Logging is default configured to output on console and file for all log levels.\nLog.Logger = new LoggerConfiguration() .MinimumLevel.Debug() .WriteTo.File(\u0026#34;log.txt\u0026#34;, LogEventLevel.Information) .WriteTo.Console(restrictedToMinimumLevel: LogEventLevel.Information) .CreateLogger(); ApplicationManager The ApplicationManager instantiates command and eventually subcommand from the two first console input parameters. The parameters are used as search criteria’s for finding relevant command/subcommand classes. If a match is found command line input option parameters will be matched and validated against selectable options.\nNot found or illegal value will terminate the command and a proper log message will be displayed in the consol.\nCommand A command class must implement the ICommand interface to be registered in Program. That makes the command available for the generic code which is selecting a command based on the command line input.\nThe selection is based on the implementation of the ICommand interface and the Name property which must match the command name on the command line. The command itself is executed by calling any of the the command class Run methods.\nThere exist two Run commands, one with the SubCommand as parameter and one with a list of command line input parameters that is called if no subcommand is specified.\npublic interface ICommand { /// \u0026lt;summary\u0026gt;  /// Run the supported command handler  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;commandHandler\u0026#34;\u0026gt;the command handler to execute\u0026lt;/param\u0026gt;  void Run(ISubCommandHandler commandHandler = null); /// \u0026lt;summary\u0026gt;  /// Parses the dictionary and run command. Used mainly by Help  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;input\u0026#34;\u0026gt;Dictionary with the cli input paramters\u0026lt;/param\u0026gt;  void Run(Dictionary\u0026lt;string, string\u0026gt; input); /// \u0026lt;summary\u0026gt;  /// Gets the name of the service  /// \u0026lt;/summary\u0026gt;  string Name { get; } } SubCommand public interface ISubCommandHandler : IValidate { /// \u0026lt;summary\u0026gt;  ///  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt;  bool Run(); /// \u0026lt;summary\u0026gt;  /// Name of the command handler  /// \u0026lt;/summary\u0026gt;  string Name { get; } /// \u0026lt;summary\u0026gt;  /// Name of the command for which the command is implemented  /// \u0026lt;/summary\u0026gt;  string CommandProvider { get; } /// \u0026lt;summary\u0026gt;  /// Dictionary with cli input options  /// \u0026lt;/summary\u0026gt;  Dictionary\u0026lt;string,string\u0026gt; DictOptions { get; set; } /// \u0026lt;summary\u0026gt;  ///  /// \u0026lt;/summary\u0026gt;  public List\u0026lt;IOption\u0026gt; SelectableCliOptions { get; set; } /// \u0026lt;summary\u0026gt;  /// Dictionary with cli input options  /// \u0026lt;/summary\u0026gt;  List\u0026lt;IOption\u0026gt; CliOptions { get; set; } /// \u0026lt;summary\u0026gt;  /// Dictionary with cli input options  /// \u0026lt;/summary\u0026gt;  IFileWrapper CliFileWrapper { get; set; } /// \u0026lt;summary\u0026gt;  /// Builds the options that can control the command.  /// \u0026lt;/summary\u0026gt;  void BuildSelectableCommands(); } Option An Option binds the definitions specified at the command line to a definition defined in the CommandDefinition file. The handling of the option is as described in the ApplicationManager description partly done by generic code. Partly means here creation of correct option type based on the option\u0026rsquo;s type definition property and the activation of validation.\nThe actual validation is implemented in the option class itself. An Option base class is implemented with basic functionality like the TryParse method that is used as a part of the validation of the NumberOption type.\n/// \u0026lt;summary\u0026gt; /// Interface that defines the propertioes and methods that /// shall be implemented by an Option class /// \u0026lt;/summary\u0026gt; public interface IOption : IValidate { /// \u0026lt;summary\u0026gt;  /// The Name og the oprtion that must match the Name  /// of the otion in the CommandDefinition file  /// \u0026lt;/summary\u0026gt;  public string Name { get; set; } /// \u0026lt;summary\u0026gt;  /// The name of the opsjon in ther API.  /// \u0026lt;/summary\u0026gt;  public string ApiName { get; set; } /// \u0026lt;summary\u0026gt;  /// The value of the option as a string  /// \u0026lt;/summary\u0026gt;  string Value { get; set; } /// \u0026lt;summary\u0026gt;  /// Defines if the option is defined with a vlue in  /// the command line  /// \u0026lt;/summary\u0026gt;  bool IsAssigned { get; set; } /// \u0026lt;summary\u0026gt;  /// The description of the option that will be used by help  /// \u0026lt;/summary\u0026gt;  string Description { get; set; } /// \u0026lt;summary\u0026gt;  /// Valid range for the paramtere.  /// \u0026lt;/summary\u0026gt;  string Range { get; set; } /// \u0026lt;summary\u0026gt;  /// Gets the typed value of the option as defined  /// in the option definition  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt;  object GetValue(); } A set of Option classes is implemented to cover the most used system types. Mapping from the type set in the definition file to a C# class is shown in the table in the subchapter Valid Data Types. The main reasons for implementing dedicated classes is the possibility to implement generic handling of them together with the advantage of implementing separate code in them like validation.\nNumberOption - represent all simple System Data Types FileOption - represent a file, the value of the option shall contain full path to the file. The validation verifies that the file exists. ThumbPrintOption - This option is used as to represent the *thumbprint\u0026quot; value in the ceritificat that is used in Login.\nOptionBuilder Much of the handling of Options is done by the Singleton class OptionBuilder. Main reason for making it as a Singleton is to avoid reading the CommandDefs file for each command. The file is read initially and save in the class member CfgCommands.\nThere are two public methods in the OptionBuilder, BuildAvailableOptions andAssignValueToCliOptions.\nBuildAvailableOptions BuildAvailableOptions finds command/subcommand in the list of available commands defined in the CommandDefs.json and according to defined type instantiates classes with options of correct type.\nAssignValueToCliOptions AssignValueToCliOptions is responsible for validation and assignment of input options. Not valid options/option values are logged, and command is terminated.\nValidation NumberOption\nValidation is done by the generic method TryParse which is call in the Validate method.\nFileOption\nThe FileOption class overrides the Base class defined Validate method. The actual validation consist in a check for the existence of the specified file.\nThumbPrintOption\nThe ThumbPrintOption class overrides the Base class defined Validate method. The actual validation consist is a check for the existence of a certificate in the \u0026ldquo;LocalStore\u0026rdquo; with same thumbprint as the specified thumbprint.\nClientWrapper The construction of the URL is done in dedicated ClientWrapper classes. A dedicated wrapper shall be made for each command. An Interface that defines all public methods in the wrapper shall be made. The interface shall be implemented in a test wrapper that shall be used in unit testing.\nTest Wrapper The test wrapper shall be coded and configures to make verification of command execution possible without connecting to the actual API. The class will mainly be used in unit testing but can also be used to test with real data. That is best done by catching \u0026ldquo;responses\u0026rdquo;, saving the respons and use it in the test that can load the response file(s).\nHttpClientWrapper The HttpClientWrapper make the HHP(s) requests. The wrapper builds the URL based on input parameter. In addition header with required parameters and tokens is build and attached to the requests that is required for authorization on the server side.\nExtensions Command Adding a new command requires following addtions:\n Command definition on the CommandDefs.json, must include subcommand and options. Command name must be unique. Folder in the development project named with the command name. C# class with name on the command. The class must implement ICommand and IHelp interface Interface which define the methods in the ClientWrapper that will be used by the SubCommandHandler. C# ClientWrapper and a ClientFileWrapper class which implements the ClientWrapper interface. Folder SubCommandHandlers as a subfolder to the new Command folder. C# class for the subcommand which inherits SubCommandHandlerBase and implements ISubCommandHandler and IHelp interface.  SubKommando  Extend command definition with new subcommand definition in CommandDefs.json, include Option definitions Eventually extend ClientWrapper interface with new method(s) which will be used by the new SubCommandHandler Eventually extend C# ClientWrapper and ClientFileWrapper with new methods defined in the interface C# class for the new subcommand which inherits SubCommandHandlerBase and implements ISubCommandHandler and IHelp interface.  Option  Extend subcommand with new option definition in CommandDefs.json Eventuelt utvide ClientWrapper Interface med ny(e) method(s) which will be used by the SubCommandoHandle for å få med nye opsjoner Eventually extend ClientWrapper interface with new methode(s) which will be used by the new SubCommandHandler Eventually extend C# ClientWrapper and ClientFileWrapper with new methods defined in the interface Add handling of the new options, if required, to the SubCommandHandler  None of the extensions shall require changes in the HttpClientWrapp\u0026rsquo;s. New methods shall be added if changes is required to avoid breaking existing code\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/",
	"title": "Application construction components for Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Altinn Platform consist of serveral components that is constructed with help of different frameworks and components.",
	"content": "See below for application contruction components for the different components in Altinn Platform.\n\rApplication construction components - Altinn Platform Authentication\rThe authentication component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\n\r\rApplication construction components - Altinn Platform Authorization\rThe authorization component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\n\r\rApplication construction components - Altinn Platform Events\rThe Events component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\n\r\rApplication architecture pdf component - Altinn Platform\rThe PDF component is created as an Spring Boot (Java) web application hosted in Kubernetes as a Docker container.\n\r\rApplication construction components - Altinn Platform Profile\rThe profile component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\n\r\rApplication architecture receipt component - Altinn Platform\rThe receipt component is an application exposing a React receipt application, and internal APIs.\n\r\rApplication construction components - Altinn Platform Register\rThe register component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.\n\r\rApplication Construction components - Storage\rThe storage component is an application hosted in Kubernetes as a Docker container.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/",
	"title": "Solution-specific application components Altinn Platform",
	"tags": ["architecture", "solution"],
	"description": "Functionality in Altinn Platform is distributed between different reusable components.",
	"content": "The diagram below shows where the different functionality i located in the components.\n\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/",
	"title": "Altinn Platform",
	"tags": ["altinn-apps"],
	"description": "Altinn Platform contains components with central functionality that can be used by apps. Currently, this is storage, authentication, authorization, profile, register, receipt, pdf and events.",
	"content": "The components are deployed as microservices.\nSee below for details about each component.\n\rAuthentication\rThe authentication component provides functionality to authenticate users and systems accessing Altinn Apps and Altinn platform.\n\r\rAuthorization\rThe authorization component contains a highly flexible policy decision point and policy retrieval point to authorize access to applications and Altinn platform components.\n\r\rEvents\rThe Events component receives and publishes events.\n\r\rPDF\rThe PDF component is responsible for generating PDF printouts for submitted instances of an app.\n\r\rProfile\rThe Profile component gives profile information for users in Altinn.\n\r\rReceipt\rThe Receipt component in Altinn Platform presents a receipt for apps.\n\r\rRegister\rThe Register micro service gives register information to Apps.\n\r\rStorage\rThe Storage component gives storage capabilities to the apps.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/softwareconfiguration/deployment/altinn-studio/",
	"title": "Altinn Studio - Deployment Architecture",
	"tags": ["todo"],
	"description": "The Altinn Studio App Development solution is deployed to a Kubernetes Cluster.",
	"content": "\rNOTE: Outdated stuff alert! Needs to be updated. Runtime is no longer deployed as part of Studio.\n\r\rThe diagram below show the different applications that is part this.\nRepository Gitea is used as Repository in Altinn Studio App Development solution. There is one instance of Gitea running in a docker container in the solution. It uses cloud service database and cloud file share for configuration and remote repos.\nThe Repository is accessed both from the designer application and from code IDE\u0026rsquo;s from app developers computers.\nDesigner Designer is the web based editor for anything related to the app development (UI, workflow, rules, ++). It runs as a Linux container.\nRouting NGINX is used for routing between the different applications.\nLocal Developer App Developers can use locally installed IDE and other tools and communicate directly with the repository. This is targeted for the more experienced developers.\nLocal Developer with Altinn Studio For developers that is required to develop custom widgets (React) they can install Altinn Studio locally on their computer. (Altinn Studio support both Windows, Linux and macOS)\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-studio/",
	"title": "Solution-specific application components Altinn Studio",
	"tags": ["architecture", "solution"],
	"description": "Altinn Studio have many functional components that lets the app developer create, manage and deploy applications.",
	"content": "\n\rSolution-specific application components Altinn Studio Designer\rAltinn Studio Designer is the custom appliaction where app developers manage and creates applications.\n\r\rSolution components Altinn Studio Repositories\rIn Altinn Studio Repos you find the functional components related to source control and access management of the application developer.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/",
	"title": "Altinn Studio",
	"tags": [],
	"description": "Altinn Studio is the design-time solution for developing, maintaining, building and deploying applications. Applications created can target both simple and complex user scenarios and have a modern web native architecture.",
	"content": "Altinn Studio is a user-friendly solution where non-technical and technical developers can create apps based on reuse and configuration of existing building blocks.\nExamples on building blocks can be layouts, themes, web-components, texts, API-calls, code lists, and process tasks.\nAltinn Studio consist of serveral parts.\n\rThird Party Tools\rOne important aspect of the Altinn Studio is that we encourage to use third party development tools to create and modify applications.\n\r\rData Storage in Altinn Studio\rDescription of how the data is stored in Altinn Studio\n\r\rAltinn Studio Designer\rThis is where developers create, modify, build and deploy apps. In the background Designer uses Git to store code and config in Altinn Studio Repos.\n\r\rAltinn Studio Repos\rThe Git repository solution for storing and versioning apps developed with Altinn Studio.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/",
	"title": "Altinn Studio docs",
	"tags": [],
	"description": "Learn about Altinn Studio",
	"content": "Altinn Studio docs "
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-apps/",
	"title": "altinn-apps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-cli/",
	"title": "altinn-cli",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/about/presentations/",
	"title": "Presentations from Altinn-kaffe",
	"tags": [],
	"description": "The Altinn-kaffe meeting series is a low threshold meeting series, where app owners (and potential app owners) can learn more about what we&#39;re doing in Altinn 3. It&#39;s also designed to gather information on how Altinn can help app owners realise their Altinn 3 potential. Slides mainly in Norwegian.",
	"content": "Introduction presentation and strategy input meeting The first meeting was an introduction to the platform, including goals.\n Altinn 3 - hva og hvorfor?  This presentation was recorded. Video will be available soon.\nWe held a meeting for giving input on the Altinn 3 desimination strategy January 28 2021. These slides were shown.\n Overordnet Strategi og tiltak Kort status fra Team Tjenestestøtte  We have also made a more generic presentation of what Altinn Studio / Altinn 3 is, and how to get started\n Generell Presentasjon og Kom i Gang  Status and plans Every other week, we present what we have done and what we\u0026rsquo;re planning to do for the next fortnight.\n Status og planer - 30. september 2020 Status og planer - 14. oktober 2020 Status og planer - 28. oktober 2020 Status og planer - 11. november 2020 Status og planer - 25. november 2020 Status og planer - 9. desember 2020 Status og planer - 6. januar 2021 Status og planer - 20. januar 2021 Status og planer - 3. februar 2021 Status og planer - 17. februar 2021 Status og planer - 3. mars 2021 Status og planer - 17. mars 2021 Status og planer - 14. april 2021 Status og planer - 28. april 2021 Status og planer - 12. mai 2021 Status og planer - 26. mai 2021 More to come\u0026hellip;  Themed meetings The weeks where we don\u0026rsquo;t presesent status, we hold themed meetings.\n Hvordan komme i gang med Altinn 3? (7. oktober 2020) Altinns presentasjon | SSBs presentasjon Integrasjon med mottakssystem (21. oktober 2020) Hvordan bidra til et bedre Altinn 3? (4. november 2020) Signering i Altinn 3 (18. november 2020) Kalkulering i Altinn 3 (16. desember 2020) Hvordan bruke første halvtimen i Altinn Studio (27. januar 2021) Datamodellering i Altinn Studio (24. februar 2021) Lanserte tjenester (10. mars 2021) Arbeidstilsynets presentasjon | Presentasjon for Kartverket Planer for utvikling i Q2 2021 (7. april 2021) Tilgang til logger og hemmeligheter (21. april 2021) Altinn Events - inkludert mulighet for push (5. mai 2021) Datamodellering: Håndtering av utfasing av Seres (19. mai 2021) More to come\u0026hellip;  "
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-repos/",
	"title": "altinn-repos",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/altinn-studio/",
	"title": "altinn-studio",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/analysisanddesign/",
	"title": "Analysis &amp; Design Capabilities",
	"tags": ["architecture", "devops"],
	"description": "Analysis &amp; Design Capabilities are the capabilities needed to analyze needs and design solutions and applications for the Altinn 3 platform.",
	"content": "Analysis Enablement Capabilities Requirement Capture Requirements are gathered through:\n input on Github talks with organization  For some pilots, we choose to create larger epics on Github to group requirements.\nSome example issues are\n The issue for supporting Sirius App for tax department The issue for supporting NSM POB  See development application components to get an overview of the tools and applications we use.\nUser story Definition The DevOps team has the capability to define user stories in our GitHub repository. See all user stories.\nRequirement Validation Product owners and architects together with the teams are responsible for validation of requirements.\nRequirement Traceability Github keeps a full history on the different issues.\nPrototypes, Mock-Ups \u0026amp; Storyboarding The devopsteam has the capability to create prototypes.\nSee development application components for tools used.\nDesign Enablement Capabilities UI Design Enablement We use Figma to design the UI elements.\nData Modeling \u0026amp; Design Capability The devops team has the capability for data modelling and design.\nSee development application components to get an overview of the tools and applications we use.\nArchitecture Design Enablement Architecture design is presented on this site using Markdown and Visio.\nApplication Design Enablement Application design is presented on this site using Markdown and Visio.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/api/",
	"title": "api",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/api-expose/",
	"title": "API expose",
	"tags": ["api"],
	"description": "Apps created in Altinn Studio can be exposed as API together with UI, or only as API without any UI.",
	"content": "Each app will have its unique set of APIs. Compared to current API it makes it possible to create APIs that have documentation that is target for the specific app.\nFor more details, see https://docs.altinn.studio/altinn-api.\nSee all issues for API-Expose on Github\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/api-use/",
	"title": "API use",
	"tags": ["api"],
	"description": "To be able to support &#34;once-only&#34; it is essensial that it is easy to do API-call from an app to other systems APIs.",
	"content": "For å forenkle dette kan en mulig løsning være å støtte en type gjenbrukbar asset av type \u0026ldquo;API-plugins\u0026rdquo;, som gjør det enkelt å gjøre kall.\nEn ukjent faktor er den kommende \u0026ldquo;API-katalogen\u0026rdquo;, og hvilke egenskaper den vil tilby.\n Enkel bruk av API\u0026rsquo;er. Se på det som gjøres i eBevis. Må bort fra dagens mappere.  Dette er et område som ikke ble sett på i PoC.\nSee all issues related to API-Usage on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/",
	"title": "Application construction components App",
	"tags": ["architecture"],
	"description": "Description of the application construction components for the app developed in altinn studio.",
	"content": "The App developed in Altinn Studio is currently based on a ASP.NET application template that contains backend and frontend components.\nThe app developer modifies and enhances the app with changing code and configuration in Altinn Studio or external devlopment tools like Visual Studio Code.\nThe application is built and deployed as a Docker container in a Kubernetes Pod to a Kubernetes cluster. See deployment architecture for deployment details.\nIn the future Altinn Studio will support apps based on different templates. Currently we support the below template(s).\n\rApplication construction components App Backend\rDescription of the application construction components for App Backend\n\r\rApp Frontend Application Architecture\rDescription of the Application architecture for App-Frontend\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-apps/app/",
	"title": "Solution-specific application components for App based on ASP.Net template",
	"tags": ["architecture", "solution"],
	"description": "Description of the Altinn Studio solution",
	"content": "Functionality in Altinn Apps are located in the Apps deployed to the Altinn Apps functionality.\nThis functionality depends on what kind of application template the app is based on and what the app developer have added in addition.\n\nInstanstation The app has instansiation functionality that presents the user for a list over alternative parties that he can select to instansiate a app for.\nThe app developer can add instansiation controll that veriy the type of party selected.\nHe can also add instansiation validation logic that can check anything.\nFormfilling Formfilling renders the UI designed in Altinn Studio and lets the user input data\nProcess handling The app handles a defined process hand moves the app ahead in process depending on the task defined in the process. Currently it is limited to only data tasks\nReceipt When process is completed the user is shown a receipt.\nValidation Application developers can add validaiton logic to the app. User of the app will then gets it data validated and get error messages if the data is not valid.\nCalculation Application developers cann add calculation logic to the app. Users of the app will then get calculated data based on data inputed or prefilled\nPrefill Application developers can configure register and profile prefill. This means that the app will take values from register and profile and set them to the defined field in the datamodel.\nThe user will then experience that known fields of data about him or the choosen party is already filled out in the datamodel for the app.\nApplication developers can also add custom logic that retrieve prefill data from other api\u0026rsquo;s outside Altinn. This logic is run when app is instansiated.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/",
	"title": "App",
	"tags": ["altinn-apps"],
	"description": "Description of the app created in Altinn Studio and that is deployed to Altinn Apps.",
	"content": "The App is created, designed and build in Altinn Studio and deployed to Altinn Apps.\nCurrently there is only one \u0026ldquo;App Template\u0026rdquo; that is used, but in future the App could be based on different types of templates and even different types of frameworks.\nThe App template contains functionality for API, process handling, GUI, and many other features making it easy for the developers to create a Apps to support different types of functional needs.\nThe current version contains support for simple user needs, but the platform and the app templates will get more functionality in the future.\n\rApp API\rDescription of the APIs exposed by an app created in Altinn Studio.\n\r\rApp templates\rThe Altinn Apps architecture support that applications can be buildt based on many different framworks/templates.\n\r\rFeatures\rDescription of features in App\n\r\rFrontend\rDescription of the optional app frontend created in Altinn Studio and that is deployed to Altinn Apps.\n\r\rProcess handling\rDescription of the process handling capability of Apps created in Altinn Studio.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/app-api/",
	"title": "App API",
	"tags": ["altinn-apps"],
	"description": "Description of the APIs exposed by an app created in Altinn Studio.",
	"content": "NOTE: Work in progress. Stuff will change.\r\rAPI\u0026rsquo;s have always been important to the Altinn platform. About 50% of all data going throug Altinn to organisations are coming from end user systems implementing Altinn APIs\u0026rsquo;s (SOAP and REST).\nMore than 100 different vendors of different types of applications integrates with Altinn\u0026rsquo;s APIs and submits data for different apps.\nIn addition mobile apps and external governmental portal consumes Altinn APIs to allow users to use services outside the Altinn Portal.\nOrganisations also have seperate APIs to interact with the apps. The below figure shows the different consumers of the API\u0026rsquo;s and show that consumers both interact with the app APIs and the shared platform APIs.\nDownload as Visio.\n\rREST-API for End User Systems\rDescription of the REST APIs for end user systems.\n\r\rREST-API for orgs\rDescription of the API for organisations (orgs).\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-backend/",
	"title": "Application construction components App Backend",
	"tags": ["architecture", "app-backend"],
	"description": "Description of the application construction components for App Backend",
	"content": "In this app template the App Backend is based on ASP.NET Core and is a Web Api application.\nThe App Backend exposes REST-Api\u0026rsquo;s consumed by a optional App Frontend and/or external systems / mobile apps. The structure of the API\u0026rsquo;s is documented here\nThe diagram below show how the code is structured in different parts.\nAltinn.App.Api The REST-APIS are implemented in different web-api-controllers and uses attribute based routing to identify the correct operation. The web-api controllers are implemented in a library called Altinn.App.Api and is published to Nuget.\nThe app template is configured to use this nuget package.\nAltinn.App.PlatformServices Platform services are services that are configured in startup on the app and with help of dependendency injection is available to the API controllers and other code in the app. The services are implemented in a library called Altinn.App.PlatformServices and is published to Nuget.\nAltinn.App.Common In common functionality to read configuration from the docker drive is implemnted and other common functionality. The common functionality are implemented in a library called Altinn.App.Common and is published to Nuget.\nApp logic The app logic contains the custom application code that a app developer has generated/created in Altinn Studio or in third party development tools like Visual Studio Code.\nDatamodel The data model in an app is defined as an XSD. From the XSD it is generated a C# representation of that model.\nIn app backend all data is deserialized/serialized from/to this model when communication with frontend/external systems.\nAll logic in the app will typical be related to the datamodel. In the future we will support apps with multiple data models.\n\rAppLogic events\rThe app backend has a defined AppLogic event model that can be used by the app developer to control when logic in the app will run.\n\r\rApp Process\rDescription of the process handling of App Backend\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/appdeploy/",
	"title": "Application build &amp; deploy capabilties",
	"tags": ["architecture"],
	"description": "Application developers using Altinn Studio to create Applications have access to build &amp; deploy capabilties",
	"content": "Altinn Apps is the solution where all the apps developed in Altinn Studio is deployed. The following diagram shows the deployment architecture for Altinn Studio together \u0026amp; Altinn Apps.\nDownload as Visio.\nContainer Orchestration by Kubernetes Each app created in Altinn Studio is deployed to Altinn Apps as separate applications running in Docker Containers. The containers will be orchestrated by Kubernetes.\nThe Altinn App is deployed as sets of Docker Containers defined as Kubernetes Deployment. The deployment will be in the organisation\u0026rsquo;s own Kubernetes Cluster.\n All organisations will have their own Kubernetes Cluster.\n Each set of Kubernetes Deployment will be scaled based on the usage of the app. Scaling of the Deployment will be configurable in the Kubernetes Deployment and automatically scaled using Kubernetes Replicaset.\n Kubernetes Clusters and Altinn Apps can do horizontal autoscaling. It is currently not decided if and how autoscaling will be used.\n The Altinn App in Kubernetes will be configured as a Kubernetes Service which consist of the latest runtime application available when building the Altinn App and the Altinn App with related code and configuration.\nKubernetes Clusters per Organisation In Altinn Apps, every organisation will have their separate Kubernetes Cluster in each environment. The Kubernetes Cluster architecture will be the same in test and production environment This will support scaling tailored each organisations needs and separation of each organisation\u0026rsquo;s app.\nSecrets Pods, where the Altinn App are delpoyed, gets access to secrets during deployment via HELM charts.\nKubernetes Namespace It\u0026rsquo;s not planned to use namespaces.\nKubernetes Service Each Altinn App will be a Kubernetes Service.\nNetworking Sub domains Each organisation will have their own sub domain \u0026lt;org\u0026gt;.apps.altinn.no.\nPath for the Altinn App \u0026lt;org\u0026gt;.apps.altinn.no/\u0026lt;app\u0026gt;\nEncrypted traffic and network policy There is ongoing analysis related to this topic. Click here to find more information on Github.\nRouting / Ingress-Controller Routing in Kubernetes is handled by an Ingress-Controller called Traefik.\nTo be able to route traffic to the correct Kubernetes Service (Altinn App), each container is tagged to a specific Altinn App. The routing mecahnism routes to the correct Kubernetes Service based on the url containing the Altinn App parameter.\nAPI Proxy API Proxy is needed for controlling credentials and outbound firewall rules from the platform. This might be handled by the API Managment software. Needs Analyzis\nAPI Management The platform requires API management software to handle SLA ++. Needs Analyzis\nApp build and deploy process Building the Altinn App with \u0026ldquo;app specific\u0026rdquo; files from Gitea, creating a \u0026ldquo;App Image\u0026rdquo;, deploying to Azure Container Registry and telling Kubernetes to deploy app.\nBuild process (Pipeline)  Downloading files from app repository in Gitea Building Docker base image with Dockerfile. This includes \u0026ldquo;Dotnet build\u0026rdquo; for C# files from Gitea. \u0026ldquo;Dotnet build\u0026rdquo; is executed on the Runtime Base Image reusing previous.  Docker Pull: Altinn/Runtime Base Image with SDK from ACR. This makes the AltinnApp build faster. Clone and build code from Gitea inside Altinn-Runtime Base Image. Docker Pull: Microsoft/DotNet AspNetCore. Copy Altinn Runtime, AltinnApp Build files and App Metadata/Resources from Gitea.   Publish to ACR.  The build and deploy app pipeline is controlled by different flags :\n APP_COMMIT_ID - used as id for the app image and should be used to reference the repository at that commit state APP_DEPLOY_TOKEN - used to identify user when cloning repository (is only really necessary for private repositorys but is mandetory) APP_ENVIRONMENT - represent which environment to deploy to (not yet used) APP_OWNER - the owner of the repository APP_REPO - the name of the repository to clone and use to create the app GITEA_ENVIRONMENT - the gitea environment to clone the repository from should_build - flag that can be used if one only wishes to deploy a app and not build it (default set to true) should_deploy - flag that can be used if one wishes to deploy an app (default set to false)  Triggered by:\n \u0026ldquo;Deploy\u0026rdquo;-button in Altinn Studio.  Manual deployment of Altinn App A manual deployment of the Altinn App requires access to you Kubernetes Cluster and knowledge about Helm.\nIf you want to configure the Helm chart and do a manual deployment you can find the Helm chart in your repo in the \u0026ldquo;deployment\u0026rdquo; folder.\nPlatform Cluster The platform cluster in Altinn Studio Apps will host common application like DataServices.\nPlatform integration The platform integration is a new application hosted in the existing infrastructure. It exposes REST-APIs for Profile, Register, Authorization, Intermediary and Authentication. These are services not part of the Altinn Platform (yet) and everyone planning to run the Altinn Platform would need to implement their own components that support. (?)\nData services The data services application is the application responsible exposing data related functionality to the Altinn App. This container will be scaled based on need.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/appdevelopment/",
	"title": "Application development capabilities",
	"tags": ["architecture"],
	"description": "Application development capabilities are capabilites that is used for developing applications in Altinn Studio",
	"content": "Code Creation Altinn Studio lets the application developer create custom code in the Application.\nWith help of third party IDE like Visual Studio Code , the developer can create code from local development machine.\nProcess definition The process defintion is defined in a BPMN 2.0 file located in the app repository. To change the process the app developer need to modify the BPNM file manually.\nLater Altinn Studio will support creating and updating process through GUI.\nSource control In Altinn Repository the app developer can check in their source code for the different apps.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-frontend/",
	"title": "App Frontend Application Architecture",
	"tags": ["architecture"],
	"description": "Description of the Application architecture for App-Frontend",
	"content": "App Frontend is a Single Page Application built using React + Redux.\nThis application is responsible for presenting a UI to the end user. The application consists of several different features that are responsible for handling the UI for different steps in the workflow.\nThe app frontend is automatically built and deployed to a CDN, and is versioned using semantic versioning. Each App developed in Altinn Studio will reference the app frontend, which will be served by the CDN. By default, an app will reference the latest major version that was available when the app was created. Each app may reference a specific version, so that there can be different versions of the app frontend for two different deployed apps.\n\rReact \u0026#43; Redux architecture\rHigh-level description of React \u0026#43; Redux architecture used in app frontend\n\r\rApp Frontend configuration files\rDescription of the different configuration files used by app frontend\n\r\rApp frontend features\rHigh-level description of app frontend features\n\r\rApp frontend code structure\rHigh-level overview of how the app frontend is structured\n\r\rApp frontend rendering and flow\rHigh-level overview of what happens when the app frontend is rendered\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/code-editor/",
	"title": "Create AppLogic with code",
	"tags": [],
	"description": "App behavior can be controlled by code.",
	"content": "Code Editor for back-end logic A developer can edit logic that will be part of app-backend when application is running in Altinn Apps.\nSee Getting started to se how to do that.\nCode Editor for front-end logic A developer can edit logic that will run in the browser for a given app.\nSee Getting started to se how to do that.\nSee github issues related to logic \u0026amp; rules.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/app-parameters/",
	"title": "App Parameters",
	"tags": ["todo"],
	"description": "The application contain different parameters that controlls the behaviour.",
	"content": "The different parameters can be configured either in Altinn Studio UI or through modifying the configuration files in the application repository.\nSupported App Parameters  party type requirements  Not (yet) supported App parameters  Valid to Valid from  See all issues related to App-Parameters on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/apptemplates/",
	"title": "App templates",
	"tags": [],
	"description": "The Altinn Apps architecture support that applications can be buildt based on many different framworks/templates.",
	"content": "These are the current supported templates:\n\rASP.NET Web Application Template\rDescription of ASP.NET Web based App template for Altinn Apps\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/app-backend/",
	"title": "app-backend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/app-structure/",
	"title": "app-structure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/app-csproj/",
	"title": "App.csproj",
	"tags": ["todo"],
	"description": "Description for App.csproj file.",
	"content": "Summary This is a c# project file that is generated when a new app is created. This project file is placed in the root of the app folder. This project file helps in compiling the app.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/application-metadata/",
	"title": "applicationmetadata.json",
	"tags": ["app-structure", "todo"],
	"description": "Description of format for application metadata.",
	"content": "Overview applicationmetadata.json describes meta information of an application. This is automatically generated on creation of a new application. This is located at /App/config/applicationmetadata.json in the app repo.\nFormat \u0026lsquo;applicationmetadata.json\u0026rsquo; has the application information such as application id, version information, organisation that owns the application, workflow information, form and attachment information.\nApplication Metadata Format Below is an example of application metadata json format\n{ \u0026#34;id\u0026#34;: \u0026#34;Brreg-testappmetaattachment\u0026#34;, \u0026#34;versionId\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;applicationOwnerId\u0026#34;: \u0026#34;Brreg\u0026#34;, \u0026#34;createdDateTime\u0026#34;: \u0026#34;2019-05-23T20:26:29.2001617Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;lastChangedDateTime\u0026#34;: \u0026#34;2019-05-23T20:26:29.2002739Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb-no\u0026#34;: \u0026#34;RF-1134 Test form title\u0026#34; }, \u0026#34;validFrom\u0026#34;: \u0026#34;2019-05-23T20:26:29.2001617Z\u0026#34;, \u0026#34;validTo\u0026#34;: \u0026#34;2020-05-23T20:26:29.2001617Z\u0026#34;, \u0026#34;WorkflowId\u0026#34;: null, \u0026#34;maxSize\u0026#34;: 0, \u0026#34;forms\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;description\u0026#34;: null, \u0026#34;allowedContentType\u0026#34;: [ \u0026#34;application/xml\u0026#34; ], \u0026#34;maxSize\u0026#34;: 0, \u0026#34;maxCount\u0026#34;: 0, \u0026#34;shouldSign\u0026#34;: false, \u0026#34;shouldEncrypt\u0026#34;: true }, { \u0026#34;id\u0026#34;: \u0026#34;74696338-540e-47e3-8f04-0996cc2bb239\u0026#34;, \u0026#34;description\u0026#34;: null, \u0026#34;allowedContentType\u0026#34;: [ \u0026#34;application/octet-stream\u0026#34; ], \u0026#34;maxSize\u0026#34;: 3, \u0026#34;maxCount\u0026#34;: 3, \u0026#34;shouldSign\u0026#34;: false, \u0026#34;shouldEncrypt\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;0cc6ee16-7fbf-45b3-9e00-2fda8668ab31\u0026#34;, \u0026#34;description\u0026#34;: null, \u0026#34;allowedContentType\u0026#34;: [ \u0026#34;application/pdf\u0026#34;, \u0026#34;text/plain\u0026#34;, \u0026#34;text/css\u0026#34; ], \u0026#34;maxSize\u0026#34;: 5, \u0026#34;maxCount\u0026#34;: 2, \u0026#34;shouldSign\u0026#34;: false, \u0026#34;shouldEncrypt\u0026#34;: false } ] } The meta data for attachment is updated in the application metadata when a fileupload component is dragged in the ui editor. When an application is deployed to a selected environment, the application metadata is read from the applicationmetadata.json and populated in the cosmos database.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-backend/applogic-events/",
	"title": "AppLogic events",
	"tags": [],
	"description": "The app backend has a defined AppLogic event model that can be used by the app developer to control when logic in the app will run.",
	"content": "Events are mapped to functional events triggered by end users or systems. This functional events are typical trigged by a API-call from App Frontend or other systems/applications using the API\u0026rsquo;s in App Backend.\nSome AppLogic Events happens in more than one functional event.\nAppLogic Events AppLogic events are defined in the IAltinnApp interface.\nThe following AppLogic Events are currently defined\n InstantiateValidation - Event where app developer can add custom code to validate instantiation. DataCreation - Event where app develoepr can add custom code to prefill data RunProcessDataRead - Where app developer can add custom data code for calculation or population of data when data is read from app RunProcessDataWrite - Where app developer can add custom data code for calculation or population of data when data is saved to app (POST/PUT) Calculation - Event where app developer can add custom calculation code OBSOLETE. Validation - Event where app developer can add custom code to validate the instance/data OnStartProcess OnStartProcessTask CanEndProcessTask OnEndProcessTask OnEndProcess  Functional events Below, different functional events, are listed. For each functional event there is described which AppLogic events that is triggered.\nInstansiation Instansiation is when the end user, end user system or organisation instansiates a new app instance. Events connected to instansiation can contain logic that can prefill the datamodell or validate if the user or system is allowed to instansiate that app.\nThe below sequence diagram shows how the app-logic events are combined with other logic for a requesting to start an app in the app catalogue.\nLoad form data (GET) Loading of form data can be performed by the App Frontend or an end user system that needs to get the latest updated form data.\nThe following events will be performed\nStoring of form data (POST) Update of form data can happen when frontend (REACT app) sends data to backend or a end user system does the same. When an update happend there is defined serveral events that is performed in a given order. The app developer can implement logic related to this event that could perform calculation, validation, API calls and much more.\nThe API for updating form data support different modes\n Create - Data should be stored as a new form instance Complete - Data is complete and the app should move ahead in the workflow Calculate - Logic in the calculation event should be performed and the updated form data should be returned Validate - Calculation will be performend and then validation logic is runned and any validation errors is returned. Update - Calculation is runned before data is stored in to the database.  The order of events are:\nUpdate form data (PUT) Update of form data happens when the frontend or external end user systems/applications want to update a existing form connected to an app instance\nThe following events happens:\nValidation Validation is triggered from App Frontend or from end user system.\nThe below sequence diagram shows the application events:\n"
},
{
	"uri": "https://docs.altinn.studio/tags/apps/",
	"title": "apps",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/",
	"title": "Architecture for Altinn 3",
	"tags": ["architecture"],
	"description": "Altinn Studio, Altinn Apps and Altinn Platform has a modern cloud native architecture. This documentation describes everything from the requirements affecting the architecture to the defined capabilities and the components that provides them.",
	"content": "How is the architecture documented? The non functional and functional requirements have given input to which devops and runtime capabilities that is needed in the solutions. It also have given input which type of components that is needed to implement the capabilities.\nThe Architecture Principles and Architecture Patterns has been decided based on requirements and other goals with the new solutions. The Principles and patterns has been deciding factors how the components implements the capabilities needed.\nThe diagram below show the relationships and you can click the elements to read more about each architecture artifact or select in menu or section below diagram.\n\nDownload as Visio.\n\rArchitecture Requirements\rFunctional and non-functional requirements for the different solutions has been important to shape the architecture.\n\r\rArchitecture Principles\rThe Architecture Principles are guidelines for the construction of the architecture in Altinn 3.\n\r\rArchitecture Patterns\rThe architecture defines some patterns that is reused accross the different solutions.\n\r\rArchitecture Capabilities\rArchitecture Capabilities are the logical building blocks of the solutions. They have been grouped into Development \u0026amp; Operations (DevOps) Capabilities and Runtime (Execution) Capabilities.\n\r\rArchitecture Components\rArchitecture Components describes the application, data, platform and infrastructure components that provides the capabilities.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/architecture/",
	"title": "architecture",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/arkitektur/",
	"title": "arkitektur",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/apptemplates/asp.net/",
	"title": "ASP.NET Web Application Template",
	"tags": ["altinn-apps"],
	"description": "Description of ASP.NET Web based App template for Altinn Apps",
	"content": "This template is based on a ASP.NET Core Web application with REST APIs\nIt is integrated with Altinn Platform making it easy to utilize the functionality provided in Altinn Platform like storage, authentication, authorization and other components.\nFor web applications that need a web based UI, it has a React based frontend that can be configured in Altinn Studio.\nASP.NET Core is a cross-platform, high performance, open-source framework for building modern cloud-based, Internet-connected application.\nTogether with the added Altinn functionality in the template, it is a effective platform to build applications powered by Altinn Platform.\nApplications based on this templates are buildt as Docker Containers and hosted in Kubernetes.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/asynchronous-programming/",
	"title": "asynchronous-programming",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/swagger/authentication/",
	"title": "Authentication",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Authentication.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/authentication/",
	"title": "Authentication Capabilities",
	"tags": ["architecture", "security"],
	"description": "The different solutions need different types of Authentication capabilties to support the different users and systems.",
	"content": "Altinn Studio Developer authentication The App Developer using Altinn Studio will authenticate with help of the build in account in Gitea.\nThe designer part of Altinn Studio integrates with Gitea so it identifies the user logged in in Gitea.\nGit repo authentication When users tries to update the Git-repo where source files for the app is stored it needs to authenticate against the Git-repo.\nThis can be done through using a App Key generated in Gitea or using the username/password for the Gitea account.\nAltinn Apps / Altinn Platform In Altinn Platform and Altinn Apps there is deployed applications and components that need to be able to authenticate users and systems accessing them.\nThis is needed when resources requiring authentication and authorization is requested.\nThis will typical be API\u0026rsquo;s that expose, or updates data owned by a specific party (person or organization).\nOverall Authentication architecture There are several requirements to an authentication architecture for Altinn Apps / Altinn Platform. The most important is\n Needs to be supported by different types of application frameworks Needs to support end users accessing Altinn Apps / Altinn Platform through a web browser running the REACT application Needs to be safe against XSS attacks. Needs to support scenarios where users are accessing through external systems or mobile apps Needs to support systems from org(s) that is authorized to perform application operations. Apps should not have access to secret so they can create their own token. Needs to support passing the identity to api\u0026rsquo;s that are consumed by Altinn Apps.  Since Altinn Platform will in the future support applications created by different frameworks (Java/.NET/Node.js, ++) it is important that the authentication mechanisms are supported by different types of platforms.\nJSON Web Token are an open, industry standard RFC 7519 method for representing claims securely between two parties and are chosen as the bearer of information about users and systems.\nThe JWTToken is created in an asymmetric process where the Authentication component will use a private key from a certificate to sign the token, and the different apps and components that needs to verify it will use the public key. See JWT Format for details on the algorithm used.\nThe illustration below show how JWT flows between the different parts of the solutions.\nDownload as Visio.\nEnd user using app frontend For end user accessing the app through browser that loads app frontend, the authentication mechanism is based on using a protected cookie containing a JWT Token. ( HttpOnly and Secure)\nThe reason for putting the JWT token in the cookie for this scenarious is to protect against XSS attacks.\nIf the REACT application stored the JWT token as part of browser memory (REDUX), XSS attacks could potential expose those tokens. When storing the tokens in secure cookies those tokens are not available to any JavaScript code running in the browser.\nThe cookie with the JWT token is created by Authentication component in the Altinn Platform solution.\nThe React application would need to refresh the token at given interval or the token will expire. To refresh a cookie token, the token API in Platform needs to be called.\nOrg systems accessing app and Platform APIs Org (the entity owning the application) will have seperate API\u0026rsquo;s in a spp to perform operations on. They are authenticated with help of agency system id + password. A API in the authentication component in Altinn creates a JWT token that can be used to authenticate the agency system when calling api\u0026rsquo;s on apps running in Altinn Apps.\nSee Authentication API for details.\nEnd user systems accessing app APIs This solutions is yet to be finalized. The assumption is that the either the organization that own the system is authenticated and have a jwt token containing the organization number for that given organization or that the user using the system is authenticated and the systems send user token with request.\nThis is analyzed in #3291 and #237.\nAuthentication of users in Altinn Apps against Altinn Platform Applications hosted in a Altinn Apps solution would in many cases need to authenticate the end user against the different Altinn Platform components.\nThe solution for this is that the Apps would forward the JWT Token from the bearer token or JWT Cookie to the component that is called. This would be forwarded as a bearer token in the Authorization header in the request against the component.\nThis makes it possible to configure JWTCookie authentication mechanismen to authenticate the end user also in the components.\nAuthentication of Altinn Studio against Altinn Platform To make sure it is only allowed for a Altinn Studio environment to deploy and update applications the calls from designer to platform is authenticated with a access token generated by Designer.\nSee more details in AccessToken.\nAuthentication of Apps and components against Altinn Platform Some components like Register and Profile is limited to be used only by the apps deployed to Altinn Apps or other components in Altinn Platform\nTo be able to enforce this the platform components requires a Access Token identifying the app/component that is calling the Platform component. Each org has their own certificate avaialble in their Kubernetes Cluster.\nThe apps deployed to this cluster has access to this certifcate and generates a JWT token with the needed claims. The platform components has access to the public part of the certificate and are able to validate it.\nSee more details in AccessToken.\n\rAccess Token\rA additional access token are used in the scenarious where we need to authenticate the application or component callin a component in Altinn Platform.\n\r\rAuthentication APIs\rDescription of the Authentications API in Authentication Component\n\r\rJWT Format\rDescription of the JWT Format used in Altinn Studio, Altinn Platform and Altinn Apps.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/authentication/",
	"title": "Application construction components - Altinn Platform Authentication",
	"tags": ["architecture", "solution"],
	"description": "The authentication component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": "The application runs on port 5040. See full details in dockerfile\nApi Controllers  Authentication : Functionality to convert the different ID-tokens from ID providers OpenID : Contains well known endpoint Organization : TODO. is this needed  Dependencies Authentication component take use of libraries for OpenID connect to create and validate JWT tokens.\nSee full list of dependencies in csproj.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/authentication/",
	"title": "Authentication",
	"tags": ["platform", "authentication"],
	"description": "The authentication component provides functionality to authenticate users and systems accessing Altinn Apps and Altinn platform.",
	"content": "The authentication component is not an ID-provider and only create authentication sessions based on external ID-providers.\nThe authentication component creates JWT tokens with claims about user and system. The claims are based on the authentication information coming from the ID-providers.\nToken exchange for Altinn Portal When a user logs in to the Altinn Portal (Legacy Solution) it gets a Cookie containing information about the logged-in user. This cookie is a propiaritary format for ASP.NET (Full Framework) and can only be understood with application based on .NET Framework having access to the symmetric encryption key.\nThe Altinn Platform is based on .ASP.NET Core and can`t understand the cookie.\nTo allow for a user accessing an App in Altinn Apps or a component in Altinn Platform the current platform will expose an API that can decrypt an ASP.NET cookie and return user information to the Authentication component in Altinn Platform.\nToken exchange for maskinporten Organizations authenticated in maskinporten can exchange their JWT token for a valid Altinn Platform JWT token to be used against Altinn Apps and Altinn Platform.\nToken exchange for ID-porten End users authenticated through ID-porten can exchange their JWT token for a valid Altinn Platform JWT token to be used agains Altinn Apps and Altinn Platform.\nArchitecture See the application solution components for details about the functional components in authentication.\nThe application construction components for details how this component is constructued.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/authentication/",
	"title": "authentication",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/authentication/authentication-api/",
	"title": "Authentication APIs",
	"tags": ["architecture", "security"],
	"description": "Description of the Authentications API in Authentication Component",
	"content": "As part of the authentication component, there is some APIs that support authentication of different types of users and systems.\nAPI for SBL Authentication cookie This API creates a JWT Cookie (A cookie with a JWT Token) based on the SBL Cookie created during login in the Legacy SBL solution. This API uses API in the SBL Bridge to verify the cookie and get information about the logged-in user.\nBased on this information this API creates a JWT token with claims about the user (userid, authentication level ++) and sign the JWT token with the private key of Altinn Platform.\nThe login process for a user that wants to access an app in Altinn Apps is described below.\nDownload as Visio.\nExchange API for tokens Altinn supports tokens from different ID-providers, and in the future, it is expected that the list of supported ID-providers will grow.\nTo reduce complexity and increase performance the clients need to exchange the external tokens for an Altinn token.\nIn this way, the different apps do not need to know about all ID-providers and are not required to look up org identification or Altinn userId/partyId that is added to the Altinn token.\nExchanging ODIC token from ID-porten Altinn supports end-users logging in with OIDC in their end user system. (local installation or cloud-based).\nThe end-user-system gets an ID-token and a access-token from ID-porten. This is documentet at ID-porten.\nThe access token is exchanged in the API to an Altinn JWT token containing the needed attributes like userId\nExchanging token from MaskinPorten To authenticate a system like this Altinn Platform requires that the system is registered as a client in Maskinporten for a given org. The org needs also to be given scopes that matches the scopes for the API requested in Maskinporten.\nThis will be given by Altinn to the org.\nThe org system should be given the scope needed by the administrator of org. (done through Maskinporten API described here)\nThe org system would need to request a access token from Maskinporten with the correct scope. This token will be used in the org API in Authentication component in the Altinn Platform to create a new JWT token that can be used for all org apis in Apps and platform.\nDuring the verification process of the Maskinporten JWT token the scope and org is verified.\nDuring this process the Maskinporten token is exchanged to a Altinn token containing information about the authenticated org. This increases performance since org information does not need to be looked up for each request and the different apps and platform components would not need to know about all the different ID-providers supported by Altinn.\nThe below sequence diagram show how this will happen:\nDownload as Visio.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/swagger/authorization/",
	"title": "Authorization",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Authorization.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/authorization/",
	"title": "Authorization",
	"tags": ["architecture", "security"],
	"description": "The Altinn 3 platform has very powerful and flexible authorization capabilities.",
	"content": "The authorization capabilities are based around ABAC (Attribute-Based Access Controls) and the XACML 3.0 standard.\nThese capabilities include:\n The capability to define wide/narrow authorization policies for apps. Rules can be valid for the whole application or only valid for a subset of resources. The capability to evaluate policies based on a request for a resource The capability to configure authorization policies for API endpoints The capability to enforce decision request (permit or deny) The capability to enrich decision request with needed information The capability to retrieve context information from different sources both regarding resources accessed and subjects doing that. The capability to authorize based on API scopes  Main Concept The following concepts are important\nAuthorization Components The authorization capabilities are provided by the following solution components\n PAP - Policy Administration Point: Where the authorization policies are defined PDP - Policy Decision Point: Where the authorization request is evaluated PEP - Policy Enforcement Point: The component making sure the user/system is authorized before accessing resources PIP - Policy Information Point: Components giving information to PDP about resources and subjects PRP - Policy Retrieval Point: Where the PDP can find the correct policy to use for a request Context Handler - Component adding context information to the decision request so PDP can evaluate a decision request correctly.  These components are described in detail under solution components\nRights In Altinn Apps/Platform a right is permission to act on a given resource. The action performed can be one of some predefined options like read, write and sign but can also be any other action defined on a custom API in the apps. The resource is typical an app instance or part of it where data belongs to a given party (person or organization).\nA user or system gets a right based on rules that describe permissions based on being a specific user or having a specific role.\nPolicy A policy defines one or many rules for a given set of resources. This policy is described as an XACML 3.0 Policy document.\nRule An authorization rule in the Altinn Platform defines who has been given the right to perform actions on a given resource. A rule consists of 5 elements\nResource This describes which resource the rule applies for. Altinn Apps currently supports the following resource types in rules.\n Org - Unique identifier of the organization responsible for the app. App - Application identifier which is unique within an organization. Task - A specific task in the process defined for an app Appresource - A resource for an instance/app that is not mapped to a task. Example: events  Some of the resource types are meant to be used in combination. As an example, you can have been given the right for an app for a given reportee\nSubject The subject in an authorization rule identifies who the rules apply for. In Altinn Apps/Platform the resource can be the following.\n RoleType org  When delegating is supported this would be expanded with\n userid partyid keyroleforpartyid  Action The Action part of the rule defines what type of action that the subject can perform on the resource.\nCurrently, the actions relevant for Altinn Apps and Altinn Platform are listed below. This list will increase over time.\n Read Write Sign Confirm Delete  Condition The condition part of the rule is extra conditions that need to be fulfilled for the rule to be valid. In Altinn Studio we have the following types of conditions.\n Valid To  Obligation An obligation is an obligation that needs to be followed if the user is permitted or denied. In Altinn Apps/Platform this is used to define the minimum authentication level.\nCreation of policies The policies in Altinn Studio Apps is defined when the app developer defines the rules for the app. The policy is deployed together with the App to a given Altinn Studio App environment. See details in Policy Administration Point in Altinn Studio.\nIn Altinn II end users can also create policies/rules. This happens when:\n When the user creates a local role that contains rights that users have through other roles When delegating single rights to a user or organization.  The rules is slightly different since rules defined by the end user have different subjects and can be defined for a more limited resource.\nThis will be supported in Altinn 3. See Github issue 1258\nAltinn Studio policy/rules User defined policy/rules Roles Altinn Studio Apps will retrieve roles from Altinn II Administration. This will later could be expanded to other sources for roles.\nScopes API Scopes are used in the solutions in some uses cases where organizations are authenticated through the external ID-Provider \u0026ldquo;MaskinPorten\u0026rdquo; or when end users are accessing the apps through end-user-systems.\nThe scopes are used to control what the user can do on behalf of the user/organization.\nScopes are always used together with the authorization rules for the specific app.\nDefined Scopes  altinn:instances.read : Give system the right to access API for reading instances altinn:instances.write : Give system the right to access API for writing to instances altinn:serviceowner/instances.read : Give orgs the right to access API for reading instances altinn:serviceowner/instances.write : Give orgs the right to access API for writing to instances  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/authorization/",
	"title": "Application construction components - Altinn Platform Authorization",
	"tags": ["architecture", "solution"],
	"description": "The authorization component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": "The authorization component consists of several solution components.\nFor a functional description see details in application solution components.\nThe diagram below shows where the different solution components are located\nThe Authorization component is constructed as a asp.net MVC application exposing API. The API communicates with the different solution components\nThe below diagram shows the data flow including PEP.\nDecision API The decision API is the API that orchestrates the decision process.\nThe API supports both XACML XML and XACML Json Profile request.\nSee Decision Controller for code details\nPolicy Decision Point - PDP This is implemented as a separate class library This is published to Nuget.\nThis library contains all models defined for XAMCL XML/JSON and utility methods to handle XACML documents.\nThe Policy Decision Point is implemented in this class.\nIt expects both decision request and policy to be inputed.\nPolicy Retrieval Point - PRP Policy Retrieval Point component that stores authorization policies for applications.\nThe policies are stored as XACML (xml) documents in a blob storage.\nWhen an authorization request is received to PDP, PRP identifies the correct policy document in the policy storage.\nSee code.\nPRP is configured as a service in the Authorization Component and can easily be replaced with other implementation.\nContext Handler Context handler enriches the authorization request with information about the user and the resource requested. Roles are retrieved from SBL Brigde while resource information is retrieved from Instances in storage.\nSee code.\nContext Handler is configured as a service in Authorization Component and can easily be replaced with other implementation.\nPolicy Information Point - Roles PIP for roles, calls SBL bridge to get the rules a user or system has for a resource party.\nThis is implemented as a service. See implementation\nThis can easily be replaced with other implementation.\nPolicy Information Point - Party This is implemented as a service. See implementation\nThis can easily be replaced with other implementation.\nPolicy Information Point - Resources PIP for resoruces checks storage for instance information.\nThis is implemented as a service. See implementation\nThis can easily be replaced with other implementation.\nApi controllers  Decision Policy Roles Parties  Dependencies See csproj.\nHow to use Altinn Platform Authorization in your setup The PDP does not contain any Altinn specific functionality. What you need to implement in your setup is\nContext Handler You would need to write your own context handler functionality that undestand your domain. Meaning it would need to understand what kind of enrichment that is needed. It the simplest scenarious this does not need to do anything if the authorization request contains all information needed by PDP\nPRP You need to implement funcionality to identify the correct XACML Policy. In Altinn we have different policies for the different apps, but in some simple scenarios you would only need to reference a static XACML Policy.\nPIP If context handler need to enrich\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/authorization/",
	"title": "Authorization",
	"tags": ["platform", "authorization", "todo"],
	"description": "The authorization component contains a highly flexible policy decision point and policy retrieval point to authorize access to applications and Altinn platform components.",
	"content": "The authorization component as based on XACML 3.0 and support both simple and complex policies defined for applications.\nThe Policy Decision Point\nThe Policy Retriavel Point identifes the correct policy for a request\nThe context handler get all information needed to authorize the request.\nThe authorization component consist of a Policy Decision Point (PDP), Policy Retriaval Point (PRP) and is integrated with other external Policy Information Points.\nApps integrated with PDP to authorize access to applications.\nIt also provides list for possible parties that a user or organization could represent.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/authorization-rules/",
	"title": "Set Authorization Rules",
	"tags": [],
	"description": "Altinn Studio let the developer set the authorization requirements for a App",
	"content": "The authorization rules are controlled by a XACML 3.0 Policy that is part of the repository.\nThe rules in policy can be configured with a regulard text editor.\nSee issues related to authorization on Github\n"
},
{
	"uri": "https://docs.altinn.studio/tags/authorization/",
	"title": "authorization",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/designer/backend/",
	"title": "Altinn Studio Designer - Back-end",
	"tags": [],
	"description": "Application construction components used in Altinn Studio Designer backend.",
	"content": "Altinn Studio Designer Back-end is a ASP.Net Core application that exposes web-API\u0026rsquo;s to be used by Altinn Studio Designer Frontend.\nIt is built and deployed as a Docker container running in Kubernetes.\nAPI Controllers The API controllers exposes the web-APIs.\nThey are structured in different controllers that is grouped by functional areas.\nThe controllers we have now are:\n ApplicationMetadata - responsible for functionality related to metadata Config Deployment Pipelines Releases Repository ServiceDevelopment UIEditor  Services Services in a asp.Net application is configured services that controllers and other components used. They are defined with a interface and a implementation and configured in startup.\nThis makes them easy to mock out when doing integration testing of the Altinn Studio Designer backend.\nThe services we have now is\n ApplicationInformation ApplicationMetaata AuthorizationPolicy Deployment Pipeline Release GiteaAPIWrapper Repository SourceControl  Model View Controllers The model view controllers are responsible for presenting razor views where we dont use React as frontend.\nWe are in process with moving functionality to using only React and API Controllers.\nFactories Model Factory Model factory is the module that generates metadata and C# models based on uploaded XSD.\nLibraries Altinn Studio Designer backend uses some libraries for different functionality\nLogging TODO\nApplication Insight TODO\nGIT Client The details about all libraries used can be found in the project file.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/platformoperations/backupandrecovery/",
	"title": "Backup &amp; Recovery",
	"tags": ["architecture"],
	"description": "As part of the Altinn 3 platform architecture we use different tools to have the capability to backup &amp; restore data",
	"content": "It is important to reduce the risk of losing data on the platform. The risks that are identified are\n Data is deleted by accident by DevOps team or by wrongly configured jobs Data is corrupted by bugs in platform or application code Data is accidentally corrupted or deleted by end-users or systems A storage account is deleted Blob storage is deleted Cosmos DB collection is accidentally deleted  In Altinn Platform different types of data is stored\nCosmos DB  Instances: Metadata about instances created InstanceEvents DataElements Applications  Blob Storage  Data for data elements (structured and unstructured data, small to potential gigabytes of data) XACML Policy for applications  The requirement is that we are able to restore data up to 90 days. The platform support this requirement for all types of data listed above.\nSee all details about the backup and recovery components.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/nonsolutionspecific/operations/backupandrecovery/",
	"title": "Backup and recovery",
	"tags": ["solution", "architecture"],
	"description": "All data created in the different solutions are backed up so it is possible to restore it in case of data loss.",
	"content": "As described below, the backup and recovery capabilities there are serveral scenarious where the different type of data is lost.\nThis page describes the application components that makes it possible to protect against data loss.\nBackup Altinn Platform As described in the data section of the architecture documentation Altinn Platform stores data both in Azure Cosmos DB and in Azure Blob Storage.\nThere is different solutions for the different data stores.\nCosmos DB Built in backup functionality Azure Cosmos DB automatically takes backups of your data at regular intervals. The automatic backups are taken without affecting the performance or availability of the database operations. All the backups are stored separately in a storage service, and those backups are globally replicated for resiliency against regional disasters.\nAzure Cosmos DB automatically takes a backup of your database every 4 hours and at any point of time, only the latest 2 backups are stored. However, if the container or database is deleted, Azure Cosmos DB retains the existing snapshots of a given container or database for 30 days.\nThis functionality is out of the box when using Azure Cosmos DB.\nThis backup would only be relevant to use if all data is lost from Cosmos DB.\nCustom backup with help of Azure Function To support recovery of single or group of documents we needed to create a custom backup mechanismen.\nFor this we use the change feed that Azure Cosmos DB expose.\nChange feed support in Azure Cosmos DB works by listening to an Azure Cosmos container for any changes. It then outputs the sorted list of documents that were changed in the order in which they were modified. The changes are persisted, can be processed asynchronously and incrementally, and the output can be distributed across one or more consumers for parallel processing.\nThe solution is to have a Azure Function that listens to the change feed\nand copies documents from Cosmos DB when they are created or modified to a blob storage.\nThe blob storage is a shared blob storage for all orgs. (The same way Cosmos DB is shared) The blob storage have enabled soft delete. All versions of a document in Cosmos should be written to the same blob. Soft delete will keep track of all versions.\nThe following collections has a Azure Function that takes backup. Click on name for code details about Azure Function\n Applications DataElements InstanceEvents Instance Texts  The below images show how the documents are backed up in a blob storage and soft delete has created a snapshot that last for 90 days. In theese 90 days we are able to recover the document to an earlier version.\nBlob storage Each org has their own separte storage account with a blob storage to store data for applications. In addition Altinn Platform has a shared blobstorge where metedata like XACML is stored for the different Apps.\nTo protect against unwanted deletion or changes we have enabled soft delete.\nWhen enabled, soft delete enables you to save and recover your data when blobs or blob snapshots are deleted. This protection extends to blob data that is erased as the result of an overwrite.\nWhen data is deleted, it transitions to a soft deleted state instead of being permanently erased. When soft delete is on and you overwrite data, a soft deleted snapshot is generated to save the state of the overwritten data.\nFor Altinn we have 90 days retention period. Inside that periode we can recover a blob to an earlier version.\nSee more about soft delete on Azure Documentation.\nRecovery Altinn ReStorage is a command-line interface application that enables operators to retrieve version history and metadata about elements as well as restore and undelete them.\nCurrently it supports restoring data elements. Further functionality is defined in this epic on GitHub.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/bmpn/",
	"title": "BMPN",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/bpmn/",
	"title": "BPMN",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/bpmn/",
	"title": "BPMN",
	"tags": ["process"],
	"description": "Business Process Model and Notation.",
	"content": "BPMN is a standard for business process modeling that provides a graphical notation for specifying business processes in a Business Process Diagram, based on a flowcharting technique very similar to activity diagrams from Unified Modeling Language (UML).\n BPMN 2.0 has a standardized XML format for exchanging BPMN 2.0 processes between different parties and software. BPMN 2.0 supports defining collaboartion between two or more collaborators.  BPMN 2.0 XML Extensibility In the formal specifications chapter 8.2.3 the following is described:\n The BPMN metamodel is aimed to be extensible. This allows BPMN adopters to extend the specified metamodel in a way that allows them to be still BPMN-compliant.\nIt provides a set of extension elements, which allows BPMN adopters to attach additional attributes and elements to standard and existing BPMN elements.\nThis approach results in more interchangeable models, because the standard elements are still intact and can still be understood by other BPMN adopters. It’s only the additional attributes and elements that MAY be lost during interchange.\n When extended the BPMN XML is still understood by other BPMN adopters, but the additional attributes and elements MAY be lost during interchange.\n Testing different BPMN software packages shows that the extended attributes in the XML does not show up as configurable properties in other software. Modifying the \u0026ldquo;default template\u0026rdquo; in the BeeBPMN editor did not remove the default Altinn properties.  https://www.omg.org/spec/BPMN/2.0/About-BPMN/\nBPNM.io - bpnm-js Homepage\nBMPN.io modeler\n bpmn-js uses BPMN 2.0 XML standard. bpmn-js is an open source BPMN 2.0 web-based rendering toolkit and modeler. bpmn-js can be extended with rules and custom elements.  Custom elements Nyan   bpmn-js has parameter sidebar link  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/branching/",
	"title": "Branching",
	"tags": ["development", "git", "branching"],
	"description": "Branching information for Altinn Studio.",
	"content": "Principles  Altinn Studio uses trunk-based development  This ensures the codebase is always releasable on demand and helps to make Continuous Delivery a reality.   Code is checked in using short living feature branches  naming standard for feature branches are feature/\u0026lt;issueNumber\u0026gt;-\u0026lt;description\u0026gt; , for instance: feature/1028-text-component naming standard for bug branches are bug/\u0026lt;issueNumber\u0026gt;-\u0026lt;description\u0026gt; , for instance: bug/877-performance-leak-ui-editor    Trunk Based Development Read more about trunk based development here.\n A source-control branching model, where developers collaborate on code in a single branch called “trunk” (master), resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after.\n Feature Branches Development is done on feature branches with short lifespans before PR is requested against the master branch.\nThe figure below illustrates\n A feature branch with three commits Pull request is create with QA and merge back to master A new commit (forth green circle) based on feedback from QA Merge back to master  Pull Requests A pull request (PR) is created to perform quality assurance (QA) and to merge a feature branch into master. You create a pull request after you have pushed your branch to our github repo.\n Include a reference to the issue that triggered the pull request (Fixes #issuenumber)  Once a pull request is submitted against our master branch it triggers various pipelines, such as builds, tests, static code analysis to ensure that code that breaks builds is not merged into master. These tests are triggered manually. Now that a PR has been submitted others may review your code and leave comments if they have feedback.\nOnce all the tests and QA have been completed we are ready to merge the new code into master. This is done using squash such that the history of the master branch is simple and understandable.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/branching/",
	"title": "branching",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-frontend/v3/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into app frontend in v3.0.0",
	"content": "As of v3.0.0 of app frontend, the font Altinn-DIN replaces the Roboto font that was used previously.\nOnce an app is upgraded to use v3 of the app frontend, all CSS expects the Altinn-DIN font to be loaded. In order for the app to display fonts as expected, the font that is loaded with the app must be updated.\nIn App/views/Home/Index.cshtml, replace the line\n\u0026lt;link href=\u0026quot;https://altinncdn.no/fonts/roboto/latin/roboto.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot;\u0026gt;\rwith\n\u0026lt;link href=\u0026quot;https://altinncdn.no/fonts/altinn-din/altinn-din.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot;\u0026gt;\rThe updated file, referring to v3 of app frontend, should reflect the changes of the file on the right:\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-nuget/older/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into app nuget packages in v1.0.62-alpha to 2.0.1",
	"content": "Support for autodelete when process ends For some apps, the fact that there\u0026rsquo;s traces of it in the user archive (and the data is stored) is a problem (e.g. for security reasons). The Altinn.App.* packages has been updated to support autodelete when process ends. This is introduced with version 2.0.0-alpha of the packages.\nUpdating to this version will require changes in multiple files.\n  Updated package dependencies Navigate to you application repository and find App.csproj in the App folder. Update nuget dependencies in App.csproj to version 2.0.0.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;2.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;2.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;2.0.0\u0026#34; /\u0026gt;   Changes in App.cs\nChange constructor:\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService ) : base(appResourcesService, logger, dataService, processService, pdfService, prefillService) to:\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService, IInstance instanceService ) : base(appResourcesService, logger, dataService, processService, pdfService, prefillService, instanceService)   Designer moves FormLayout.json from app/ui to app/ui/layouts In order to support multiple pages in an app we have done some restructuring of the app-template. When you are doing changes in Altinn Designer for your app the updated FormLayout.json will be put under the new structure. For apps that have nuget references to Altinn.App.Api, Altinn.App.Common, and Altinn.App.PlatformServices with versions below version 1.2.0 this will make the app unable to find the FormLayout.json on the network call against the app.\n  Navigate to you application repository and find App.csproj in the App folder. Update nuget dependencies in App.csproj to version 1.2.0-alpha or newer. We recommend updating to latest version which is currently at 1.3.1.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.3.1\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.3.1\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.3.1\u0026#34; /\u0026gt;   If there are some breaking changes when updating the nuget-version this should be documented below.\n  Added registration of events to the new Events component The Altinn.App.* packages has been updated to work with the new Events component in Altinn. This is introduced with version 1.1.11-alpha of the packages.\nUpdating to this version will require changes in multiple files.\n  Updated package dependencies Navigate to you application repository and find App.csproj in the App folder. Update nuget dependencies in App.csproj to version 1.1.11-alpha or newer..\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.1.11-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.1.11-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.1.11-alpha\u0026#34; /\u0026gt;   Changes in Startup.cs:\nservices.AddHttpClient\u0026lt;IEvents, EventsAppSI\u0026gt;(); Startup already have multiple similar lines with calls to AddHttpClient. Add the new line anywhere among them.\nThis will probably also require two new lines at the top of the file:\nusing Altinn.App.PlatformServices.Implementation; using Altinn.App.PlatformServices.Interface;   Changes in appsettings.json:\n  A new property has been included in called PlatformSettings.ApiEventsEndpoint. The value here is used for local test and will be replaced during deploy to test and production environments.\n\u0026#34;PlatformSettings\u0026#34;: { ... \u0026#34;ApiEventsEndpoint\u0026#34;: \u0026#34;http://localhost:5101/events/api/v1/\u0026#34; } |``` The default behaviour of the logic is to not send events. To override this there is a new setting called `AppSettings:RegisterEventsWithEventsComponent`. Update the appsettings file by adding an entry in the AppSettings section: ```json \u0026#34;AppSettings\u0026#34;: { ... \u0026#34;RegisterEventsWithEventsComponent\u0026#34;: false } Change the setting to true if the app should create and send events. Please note that the feature is under continued development and still considered experimental.\nSupport for deleting instances from endpoint in app #4871 was fixed with in release of 1.1.10-alpha of the app nugets. This change only affects users and app owners that try to delete an instance.\nErrors 403 response when trying to delete an instance using the endpoint exposed in the application.\nHow to fix If you are not using 1.1.10-alpha or above. Start by upgrading the nuget references in you application. If you are running a newer release, skip to step 2.\n  Navigate to you application repository and find App.csproj in the App folder. Update nuget dependencies in App.csproj to version 1.1.10-alpha or newer..\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.1.10-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.1.10-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.1.10-alpha\u0026#34; /\u0026gt;   Navigate to you application repository and find Startup.cs in the App folder. Add a new line to the services.AddAuthorization-section. The following should be added\noptions.AddPolicy(\u0026quot;InstanceDelete\u0026quot;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026quot;delete\u0026quot;)));\nand the final result should look like this\nservices.AddAuthorization(options =\u0026gt; { options.AddPolicy(\u0026#34;InstanceRead\u0026#34;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;read\u0026#34;))); options.AddPolicy(\u0026#34;InstanceWrite\u0026#34;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;write\u0026#34;))); options.AddPolicy(\u0026#34;InstanceDelete\u0026#34;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;delete\u0026#34;))); options.AddPolicy(\u0026#34;InstanceInstantiate\u0026#34;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;instantiate\u0026#34;))); options.AddPolicy(\u0026#34;InstanceComplete\u0026#34;, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;complete\u0026#34;))); });   If deleting instances should be available for the application owner this must be explicitly stated in the application policy. The requred rule is documented here.\n  Update path of Data Protection Keys for Apps #4483 changed the way we use data protection keys in order to improve the support for running locally. These keys are used in XSRF-protection. When you are running apps locally, we are using the default behaviour (directory under current user) for .Net Core. The path is passed with an environment variable when running in an apps cluster. This change requires the deployment.yaml file to be updated with the correct variable.\nThe change affects all application created in Altinn Studio before 30.09.2020 using Altinn.App.PlatformServices 1.1.8-alpha and above\nErrors User may experience errors posting data when the app is restarted or when multiple replicas are used.\nHow to fix You need to add the environment variable in the deployment.yaml file. If you have not done any changes to the file previously, you can copy the file from here, otherwise you need to update the file directly. Both the name of the environment variable and the value must be set as follows:\nenv: - name: ALTINN_KEYS_DIRECTORY value: \u0026#34;/mnt/keys\u0026#34; Build pipeline failed on task: Build and push docker image to acr A namespace was renamed in Altinn.App.PlatformServices Version=\u0026ldquo;1.1.2-alpha causing the build of the application to fail if references to this namespace isn\u0026rsquo;t changed.\nThis affects all applications created before June 2020 that reference nuget versions \u0026gt;= 1.1.2-alpha.\nErrors Build pipeline fails due to failing task: Build and push docker image to acr.\nExpanding the task reveals error message:\nStartup.cs(5,35): error CS0234: The type or namespace name \u0026#39;Extentions\u0026#39; does not exist in the namespace \u0026#39;Altinn.App.PlatformServices\u0026#39; (are you missing an assembly reference?)\u0026#34;. Screenshot of the failing build pipeline. How to fix  Navigate to you application repository and find Startup.cs in the App folder. Change using Altinn.App.PlatformServices.Extentions; to using Altinn.App.PlatformServices.Extensions; If you have a local code editor, confirm that the code is able to compile locally before building the app in Altinn Studio.  Deploy pipeline failed to set subscription key Introduced in the newest version of Azure Powershell, which is used during deploy of apps. The change results in the subscription key for the app not being set. The subscription key is needed for the apps to have access to the platform APIs.\nThis only affects apps that were deployed some time within the period July 7th - July 22nd. Apps deployed for the first time to a specific environment are not affected.\nErrors Users will experience that instantiation fails, and only a blue screen is shown. If looking at the network traffic during instantiation, users will see that the call to user fails with code 404.\nHow to fix The deployment pipeline has been updated. Re-deploying the app to the same environment will solve the problem (no need to trigger another build).\nProperty type changed for UserProfile.ProfileSettingPreference Introduced with issue: #4466 and release v2020.28.\nThe change affects all applications in TT02 and PR with nuget version 1.0.98 and lower.\nErrors App doesn\u0026rsquo;t load only the blue background is visible.\nHow to fix  Navigate to you application repository and find App.csproj in the App folder. Update nuget dependencies in App.csproj from 1.0.86. to version 1.1.0-alpha. \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt;  Modify the function ConfigureServices() in App/Startup.cs.  Include the lines below in the function. Anywhere would do, but we suggest referencing the memory cache after _ services.AddControllersWithViews()_ and the HttpClient in the same section as the other AppSI services.\nservices.AddMemoryCache(); services.AddHttpClient\u0026lt;IText, TextAppSI\u0026gt;(); Your code changes should match the image below.\nNew endpoint introduced in Altinn.Apps.Api exposing application text resources Introduced with issue: #4451 and nuget 1.1.0.-alpha.\nThe change affects all application created in Altinn Studio before 8.07.2020 using nuget versions 1.1.0-alpha\nErrors How to fix Once the nuget references are updated to version 1.1.0-alpha, modify the function ConfigureServices() in App/Startup.cs.\nInclude the lines below in the function. Anywhere would do, but we suggest referencing the memory cache after _ services.AddControllersWithViews()_ and the HttpClient in the same section as the other AppSI services.\nservices.AddMemoryCache(); services.AddHttpClient\u0026lt;IText, TextAppSI\u0026gt;(); Your code changes should match the image below.\nPlatform authorization introduced for Platform Register and Profile Introduced with issue: #4162 and Release: v2020.23.\nThe change affects all application created in Altinn Studio before 03.06.2020.\nErrors Users will experience that instantiation, form filling and viewing receipt fails with the following error:\nWhen checking the network log one will find that the POST request to https://ttd.apps.at22.altinn.cloud/ttd/apps-test/instances?instanceOwnerPartyId= fails with status code 404.\nHow to fix There are three steps you must take in order to update your application to adhere to the breaking change.\n Update values.yaml in the deployment folder in your application repository. If no custom changes have been made to this file since you created the application, simply replace the content of the file with this code.\nThe picture illustrates which changes are required in the file if you wish to do it manually, or inspect your code. Be ware that indentation is important when working with .yaml files.  Update nuget dependencies in App.csproj to version 1.0.86-alpha. Navigate to you application repository and find App.csproj in the App folder. Upgrade the three Altinn.App nugetpackages to version 1.0.86. \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.0.86-alpha\u0026#34; /\u0026gt;  Update Startup.cs in the App folder in your application repository. If no custom changes have been made to this file since you created the application, simply replace the content of the file with this code. The picture illustrates which changes are required in the file if you wish to do it manually, or inspect your code.  Updated client-side validation - frontend v2 and Nuget v1.0.82-alpha Introduced with issue: #3944, and applies to existing apps that upgrade to the new major version of app frontend (v2).\nThe client-side validation of the app frontend has been replaced with a JSON-schema validation in order to provide a more complete client-side validation. As of v2 of app frontend, client-side validation has support for type-checking basic types, including enums. When upgrading the frontend version to v2, the app must use nuget versions 1.0.82-alpha or newer. See details below.\nIn order to implement this, we have made changes to how we bind the data model to fields in the forms.\nThe change is only breaking for apps using OR-type xsd (or have fields with `-`-character in xsd).\rMost Seres-type data models will not be affected, and will work without needing to make changes, even after updating to v2 of app frontend.\rIf you do experience any problems with submitting/validating form data even with a seres-type xsd, follow the steps below.\r\rErrors For apps that use an OR-type xsd (or have fields with --character in xsd), the app may crash during submission/validation because the data model binding used does not match the true path in the json schema (and xsd). This is because we have been using a simplified path previously, to match with the C# model. We have now changed that so that the data binding name corresponds to the true xpath for the field.\nHow to fix   If using app frontend v2 or newer, make sure app is using nuget packages v1.0.82-alpha or newer. See documentation on how to update dependencies..\n  Open the app in altinn.studio and upload datamodel again to generate a new version of the model files, with all the updated paths.\n Please note that this overwrites any texts in the text resource files, so make sure to save a copy or push the app to the app repo before doing this, to recover any texts that might disappear.    Update data model bindings in altinn.studio UI Editor, or update FormLayout.json with new data model bindings (see below for new format).\n Each part of the path now corresponds to the xname of the field in the xsd. F.ex:  XSD:\n  \u0026lt;xs:schema xmlns:xs=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34;\u0026gt; \u0026lt;!--title=\u0026#39;Eksempel xsd skjema\u0026#39; lang=\u0026#39;NOB\u0026#39;--\u0026gt; \u0026lt;xs:element name=\u0026#34;Skjema\u0026#34;\u0026gt; \u0026lt;xs:complexType\u0026gt; \u0026lt;xs:sequence\u0026gt; \u0026lt;xs:element minOccurs=\u0026#34;0\u0026#34; ref=\u0026#34;SomeGroup-grp-1111\u0026#34; /\u0026gt;\u0026lt;/xs:element\u0026gt; \u0026lt;/xs:sequence\u0026gt; \u0026lt;xs:anyAttribute /\u0026gt; \u0026lt;/xs:complexType\u0026gt; \u0026lt;/xs:element\u0026gt; \u0026lt;xs:element name=\u0026#34;SomeGroup-grp-1111\u0026#34;\u0026gt;  \u0026lt;xs:complexType\u0026gt; \u0026lt;xs:sequence\u0026gt; \u0026lt;xs:element minOccurs=\u0026#34;0\u0026#34; ref=\u0026#34;SomeField-datadef-12345\u0026#34; /\u0026gt; \u0026lt;/xs:sequence\u0026gt; \u0026lt;xs:attribute fixed=\u0026#34;1111\u0026#34; name=\u0026#34;gruppeid\u0026#34; type=\u0026#34;xs:positiveInteger\u0026#34; use=\u0026#34;required\u0026#34; /\u0026gt; \u0026lt;/xs:complexType\u0026gt; \u0026lt;/xs:element\u0026gt; \u0026lt;xs:element name=\u0026#34;SomeField-datadef-12345\u0026#34;\u0026gt;  \u0026lt;xs:simpleContent\u0026gt; \u0026lt;xs:extension base=\u0026#34;SomeTextformat\u0026#34;\u0026gt; \u0026lt;xs:attribute fixed=\u0026#34;12345\u0026#34; name=\u0026#34;orid\u0026#34; type=\u0026#34;xs:positiveInteger\u0026#34; use=\u0026#34;required\u0026#34; /\u0026gt; \u0026lt;/xs:extension\u0026gt; \u0026lt;/xs:simpleContent\u0026gt; \u0026lt;/xs:complexType\u0026gt; \u0026lt;/xs:element\u0026gt; \u0026lt;xs:simpleType name=\u0026#34;SomeTextformat\u0026#34;\u0026gt; \u0026lt;xs:restriction base=\u0026#34;xs:string\u0026#34;\u0026gt; \u0026lt;xs:length value=\u0026#34;11\u0026#34; /\u0026gt; \u0026lt;/xs:restriction\u0026gt; \u0026lt;/xs:simpleType\u0026gt; \u0026lt;/xs:schema\u0026gt;  Old format for data model binding: someGroupgrp1111.someFielddatatef12345.value. New format for data model binding: SomeGroup-grp-1111.SomeField-datadef-12345.  Once the data model and bindings are updated, build and deploy app for the changes to take effect.\nError when attempting to create an instance as Application Owner Introduced with issue: #3738.\nThe Register API had a few GET operations that took an input parameter through the body of an http request. Requests against these operations would work in AT environments, but would be broken by API Management in production like environments. The operations in question has now been removed and replaced with operations that require POST requests.\nErrors The methods that have been removed were used by an app when an instantiation were done by the Application owner. More specifically if the instanceOwnerPartyId were unknown. The instantiation request would then have the Person number or organization number instead, and the Register operation would be used to identify the correct party id.\nPOST https://{org}.apps.tt02.altinn.no/{app-id}/instances/ { \u0026#34;appId\u0026#34; : \u0026#34;org/app\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;personNumber\u0026#34;: \u0026#34;12247918309\u0026#34;, \u0026#34;organisationNumber\u0026#34;: null, \u0026#34;instanceOwnerPartyId\u0026#34;: null }, ... } How to fix Any issues related to this change can be fixed by upgrading to the latest version of Altinn.App.PlatformServices. This means the App must be updated and a the new version deployed to all environments. Existing instances are not affected.\nDeploy pipeline fails with error: UPGRADE FAILED Introduced with upgrade of AKS cluster. The api version (extensions/v1beta1) used to deploy apps to the AKS cluster is no longer supported.\nErrors When triggering deploy from altinn.studio the deploy fails. On closer inspection of the pipeline (byggloggen) the error message below is shown at the end of the failed step.\nHow to fix To fix this issue the deployment to use a new api version. Navigate to you application repository and find deployment.yaml. It is placed in the folder deployment/templates.\nMake the changes spesified below to the file, and update the repository. Remember to pull the latest version in altinn.studio before attempting to re-deploy.\n  Change apiVersion from extensions/v1beta1 to apps/v1.\n  Add the following lines under replicas in the spec section. Be ware of indentation here. Two spaces are used as indent for sub sections.\n  selector: matchLabels: app: {{ template \u0026#34;name\u0026#34; . }} Send-in / Validation fails with \u0026lsquo;Ukjent feil\u0026rsquo; Introduced with issue: #3927.\nThere was a vulnerability in the solution allowing to update a whole instance object using an endpoint in app backend or storage. This has been solved by refactoring app backend and removing the endpoints.\nError When sending in an instance after completing form filling the error below i prompted. In network you can see that the \u0026lsquo;validate\u0026rsquo;-request receives a 500 code in response.\nHow to fix Navigate to you application repository and find App.csproj. Upgrade the three Altinn.App nugetpackages to version 1.0.78.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;1.0.78-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;1.0.78-alpha\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;1.0.78-alpha\u0026#34; /\u0026gt; Validation fails for attachments in some cases after 30.03.2020 Introduced with issues: #1925 and #3915.\nIn Altinn Studio, all data types that were created from a FileUpload component were set with allowedContentTypes: [application/octet-stream] as default.\nThis was also set for all uploads from the app. This has now been changed, so that the file types defined by the app developer are also set in allowedContentTypes, and the file upload is sent with the corresponding Content-Type of the file in the request header.\nError Apps that were created before the fix was implemented (30.03.2020) may experience that validation fails for the attachment, even though it is of the correct format specified in Altinn Studio. This is because the dataType for the attachment expects application/octet-stream, but instead receives the actual mime type for the uploaded file.\nHow to fix Update allowedContentTypes for the data type that fails. This can either be done manually in the applications applicationMetadata.json for the affected data type(s) or by updating the FileUpload component in Altinn Studio so that the expected allowedContentTypes are saved.\nAfter updating, the app must be re-deployed.\nBuild fails after upgrading Altinn.App-nugets to version 1.0.62-alpha Introduced with issue: #3820.\nThe base class that every application inherits has been altered to allow for both data and task validation.\nError When building App.cs errors simillar to those depicted in the picture below are logged.\nHow to fix If you haven\u0026rsquo;t made any changes to App/logic/Validation/ValidationHandler.cs and App/logic/App.cs the quickest way to fix the build errors are to copy these files from the template and paste them into your repository. Find the template files here.\nIf changes have been made to these files, follow the instructions below to fix the errors.\nApp/logic/Validation/ValidationHandler.cs  Add a reference to Altinn.Platform.Storage.Interface.Models by including the snippet below amongst the using statements. using Altinn.Platform.Storage.Interface.Models;  Add the function below in the class. public async Task ValidateTask(Instance instance, string taskId, ModelStateDictionary validationResults) { await Task.CompletedTask; }   App/logic/App.cs  Rename function RunValidation to RunDataValidation Add the function below in the class  /// \u0026lt;summary\u0026gt; /// Run validation event to perform custom validations /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;validationResults\u0026#34;\u0026gt;Object to contain any validation errors/warnings\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;Value indicating if the form is valid or not\u0026lt;/returns\u0026gt; public override async Task RunTaskValidation(Instance instance, string taskId, ModelStateDictionary validationResults) { await _validationHandler.ValidateTask(instance, taskId, validationResults); } "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-nuget/v3/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into app nuget packages in v3.0.0",
	"content": "We have added a new PDF handler to make it possible to hide pages and components in PDF.\nThe new version of the Altinn.App.* packages have breaking changes:\nUpdating to this version will require changes in multiple files.\n  Updated package dependencies\nNavigate to you application repository and find App.csproj in the App folder.\nUpdate nuget dependencies in App.csproj to version 3.0.0.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;3.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;3.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;3.0.0\u0026#34; /\u0026gt;   Create a new file for a new class called PdfHandler in the logic/Print folder File from template\nusing System.Threading.Tasks; using Altinn.App.Common.Models; namespace Altinn.App.AppLogic.Print { /// \u0026lt;summary\u0026gt;  /// Handler for formatting PDF.  /// \u0026lt;/summary\u0026gt;  public class PdfHandler { /// \u0026lt;summary\u0026gt;  /// Method to format PDF dynamic  /// \u0026lt;/summary\u0026gt;  /// \u0026lt;param name=\u0026#34;layoutSettings\u0026#34;\u0026gt;the layoutsettings\u0026lt;/param\u0026gt;  /// \u0026lt;param name=\u0026#34;data\u0026#34;\u0026gt;data object\u0026lt;/param\u0026gt;  public async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { return await Task.FromResult(layoutSettings); } } }   Changes to the App.cs file\nAdd using\nusing Altinn.App.AppLogic.Print; using Microsoft.Extensions.Options; using Microsoft.AspNetCore.Http; using Altinn.App.Services.Configuration; Add a new private field below InstantiationHandler\nprivate readonly PdfHandler _pdfHandler; Change constructor from:\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService, IInstance instanceService ) : base(appResourcesService, logger, dataService, processService, pdfService, prefillService, instanceService) to:\npublic App( IAppResources appResourcesService, ILogger\u0026lt;App\u0026gt; logger, IData dataService, IProcess processService, IPDF pdfService, IProfile profileService, IRegister registerService, IPrefill prefillService, IInstance instanceService, IOptions\u0026lt;GeneralSettings\u0026gt; settings, IText textService, IHttpContextAccessor httpContextAccessor) : base( appResourcesService, logger, dataService, processService, pdfService, prefillService, instanceService, registerService, settings, profileService, textService, httpContextAccessor) { _logger = logger; _validationHandler = new ValidationHandler(httpContextAccessor); _calculationHandler = new CalculationHandler(); _instantiationHandler = new InstantiationHandler(profileService, registerService); _pdfHandler = new PdfHandler(); } Add method\n/// \u0026lt;summary\u0026gt; /// Hook to run logic to hide pages or components when generatring PDF /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;layoutSettings\u0026#34;\u0026gt;The layoutsettings. Can be null and need to be created in method\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;data\u0026#34;\u0026gt;The data that there is generated PDF from\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;Layoutsetting with possible hidden fields or pages\u0026lt;/returns\u0026gt; public override async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { return await _pdfHandler.FormatPdf(layoutSettings, data); }   "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-nuget/v4/breaking-changes/",
	"title": "Breaking changes",
	"tags": [],
	"description": "Overview of breaking changes introduced into app nuget packages in v4.0.0",
	"content": "Altinn.App.* librarires target .Net 5 now, which requires that the application does the same.\nIn addition, all references to app and platform services have been moved from Startup.cs and should be replaced with two method calls.\nFollow the instructions below to ensure that the app is compatible with version 4 of the Altinn.App.* packages.\n  Update target framework and package dependencies\nNavigate to you application repository and find App.csproj in the App folder.\nUpdate target framework to .Net 5 by replacing\n\u0026lt;TargetFramework\u0026gt;netcoreapp3.1\u0026lt;/TargetFramework\u0026gt; with\n\u0026lt;TargetFramework\u0026gt;net5.0\u0026lt;/TargetFramework\u0026gt; In the same file, update the Altinn.App.* package references to version 4.0.0.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;4.0.0\u0026#34;\u0026gt; \u0026lt;CopyToOutputDirectory\u0026gt;lib\\$(TargetFramework)\\*.xml\u0026lt;/CopyToOutputDirectory\u0026gt; \u0026lt;/PackageReference\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;4.0.0\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;4.0.0\u0026#34; /\u0026gt; The changes in the file should match the image below:\n  Update Dockerfile to use .Net 5 images\nThe Dockerfile can be found in the root folder of the application repository.\nUpdate build image by replacing\nFROMmcr.microsoft.com/dotnet/core/sdk:3.1-alpine AS build with\nFROMmcr.microsoft.com/dotnet/sdk:5.0-alpine AS build And update the runtime image by replacing\nFROMmcr.microsoft.com/dotnet/core/aspnet:3.1-alpine AS final with\nFROMmcr.microsoft.com/dotnet/aspnet:5.0-alpine AS final The changes in the file should match the image below:\n  Replace references to services with call to extension method\nIn the App folder you will also find Startup.cs\nSeveral lines of code will be removed and replaced with the two lines below.\nservices.AddAppServices(Configuration, _env); services.AddPlatformServices(Configuration, _env); The code that should be removed from the file is marked in pink in the pictures below, which cover one section of the file each.\nDepending on how many custom changes you have made in your file the line numbers might not match. Do not worry, the services should still be grouped togheter roughly as shown in the picture. The application will run even if not all services are removed, so just do your best.\nStart by removing referenes to the Altinn App services. Remove references to all the Altinn Platform services. Remove all loading of configuration files. Remove logic to configure Application insights. Remove private method for retrieving the key for Application Insights. As previously stated the removed references are now replaced by calls to two new methods that will load all existing and future platform and app services into your application.\nservices.AddPlatformServices(Configuration, _env); loads all configurations and services that the app requires to use Altinn Platform functionality, and services.AddAppServices(Configuration, _env); loads all remaining configurations and services that the app requires such as Authorization and Prefill services.\nEnsure that these lines are added withing the ConfigureServices fuction.\n  "
},
{
	"uri": "https://docs.altinn.studio/tags/build/",
	"title": "build",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/build_and_test/",
	"title": "Build &amp; Test Capabilities",
	"tags": ["architecture", "devops", "todo"],
	"description": "Involves everything from the capability to write and building code to the different types of testing of the code.",
	"content": "Below list the capabilities with a short description and possible link to the different components providing that capability.\nSoftware Generation Capabilties Code \u0026amp; Config Writing Capability Most of our code is written manually.\nSee development application components to get a overview over tools and application we use.\nBuild \u0026amp; Integration Enablement Capabilities Software Compilation \u0026amp; Validation The project uses .Net, Java or Typescript compilers.\nSofware Linking \u0026amp; Packaging The project has the capability to build packages.\nSee development application components for details how we do this.\nBuild Orchestration We use Auzure Pipelines to build the source code.\nSee development application components to get a overview over tools and application we use.\nContinuous Integration Capabilities Azure Piplines are used for Continuous Integration. When a pull request is created a build is triggered that builds the code and run unit and integration tests.\nTest Management Capabilities Test Case \u0026amp; Script Creation \u0026amp; Management  Test scripts are collected in Github.  Test Execution Tracking \u0026amp; Reporting The team\nTest Data Creation \u0026amp; Management  Test data for local testing and integration testing is kept in Github.  Test Execution \u0026amp; Automation Capabilities Functional Test The devopsteam has the capability to perform functional testing.\nUnit Test As part of the development unit test are created. They are run for every pull request.\nService \u0026amp; API Test Performance Testing \u0026amp; Profiling "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/build_and_test/build/",
	"title": "Build process",
	"tags": ["build", "ci"],
	"description": "Altinn Studio Build Processes",
	"content": "Build Pipelines Quality Build When creating a Pull Request a pipeline is building the applications, running tests and style check/linting. TSLint, SonarCloud (for Typescript) and Stylecop (C#) is used for style check/linting.\nTriggered by:\n Pull Request  Altinn Studio and Runtime Docker Images Separate pipelines will build and deploy the Altinn Studio Docker Image and the Runtime Docker Image to Azure Container Registry. The different Altinn Studio applications (React Apps) is built in seperate Docker images to utilize Docker\u0026rsquo;s cache technique and minimize unnecessary rebuilding.\nDocker-Compose is used when developing and running Altinn Studio locally, building several Docker images and using the same caching technique used in the Pipeline.\nTriggered by:\n Git Merge to Master  Altinn Studio Release Build When the build for Altinn Studio is successfully ran, a release build will start. The Release Build will update the Kubernetes cluster with the images created in the Altinn Studio build pipelines.\nTriggered by:\n Successfull build of Altinn Studio.  Generating Altinn Pipelines Images Summary  The Altinn Azure Pipelines Image (image) is built with Packer. The Packer JSON configuration is based on the same configuration used by Microsoft to build their own Hosted Agent images. The image is built in Azure Pipelines passing in \u0026ldquo;secrets\u0026rdquo; to the Packer configuration with Environment Variables not visibly available during the build process.  Usage  Create a Virtual Machine in Azure using the pre built image found under \u0026ldquo;browse all images and disks\u0026rdquo;. Create a username and password (should be stored in Azure Vault).  Installing Agent Host The script for installing the Agent Host is found at: Maintenance/azure-pipelines-image/scripts/agent/agent-install.sh (Currently a manual job)\nA computer can have one or several Agent Hosts installed. Several Agents, on one or several servers, can connect to one Agent Pool.\nCreating Pipelines Image with Packer.io The process of creating an Image with Packer is described here.\nThe variables used in the Packer JSON configuration file is passed in via hidden Pipelines environment variables.\nUbuntu1604-full The \u0026ldquo;full\u0026rdquo; image contains components for building Dotnet and NodeJS applications, running JavaScript based headless tests and running Docker Images. See the JSON file for specifications.\nUbuntu1604-light The \u0026ldquo;light\u0026rdquo; image only contains Git and Docker and is created for only running Docker images.\nClean-up Packer creates Resource Groups in Azure keeping the image build for history and debuggind purposes.\nTo remove this Resource Group run AZ Cli: az group delete -n PackerResourceGroup\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/",
	"title": "Building and configuring apps",
	"tags": [],
	"description": "Altinn Studio can been seen as a collection of different editors or applications specialized to create and edit different aspects of an Altinn Studio app.",
	"content": "To support building apps Altinn Studio have different functionality to building and configuring different aspects of the app.\n\rAPI expose\rApps created in Altinn Studio can be exposed as API together with UI, or only as API without any UI.\n\r\rAPI use\rTo be able to support \u0026#34;once-only\u0026#34; it is essensial that it is easy to do API-call from an app to other systems APIs.\n\r\rCreate AppLogic with code\rApp behavior can be controlled by code.\n\r\rApp Parameters\rThe application contain different parameters that controlls the behaviour.\n\r\rSet Authorization Rules\rAltinn Studio let the developer set the authorization requirements for a App\n\r\rData modeling\rDefining the data model(s) for an app is important. Altinn Studio will support importing existing data models and creating new data models.\n\r\rConfigure help texts\rHelp developer configure help texts for components\n\r\rConfigure Prefill\rAltinn Studio will let the developer define prefill for datamodel from register and profile.\n\r\rDefine app process\rAs part of the development one must define a process for the app that end user needs to follow.\n\r\rText and translations\rUsing texts when designing UI, defining workflow, other settings, deploy, and more.\n\r\rUI Design\rThe UI-designer is the part of Altinn Studio where the developer can create UI for the app.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/c-sharp/",
	"title": "C#",
	"tags": ["tech", "programming"],
	"description": "Server side programming language.",
	"content": "C# is the server-side development language used in Altinn Studio.\nLinks  Extension for Visual Studio Code C# documentation C# language design History  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/calculationhandler/",
	"title": "CalculationHandler.cs",
	"tags": ["todo"],
	"description": "Beskrivelse av format for calculation handler.",
	"content": "Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes\rvidere med i MVP.\r\rOverordnet \u0026lsquo;CalculationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som gjør kalkuleringer.\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom CalculationHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/certificate/",
	"title": "certificate",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/",
	"title": "Changelog",
	"tags": [],
	"description": "Overview of changes introduced into Altinn Apps",
	"content": "\rChangelog for app frontend\rOverview of changes introduced into app frontend\n\r\rChangelog for app nuget packages\rOverview of changes introduced into app nuget packages\n\r\rChangelog for the Storage Interface package.\rOverview of changes introduced to the Altinn.Platform.Storage.Interface NuGet package.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/checklist/",
	"title": "checklist",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ci/",
	"title": "ci",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/code-quality/",
	"title": "code-quality",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/",
	"title": "Architecture Components",
	"tags": ["architecture"],
	"description": "Architecture Components describes the application, data, platform and infrastructure components that provides the capabilities.",
	"content": "Components relationship The figure below shows the relationship between the different componentes in the technical architecture and the capabilities they provide.\n\n\rApplication Components\rThe Application Components is split in to solution-specific application components, application construction components and non-solution application components.\n\r\rData Components\rData is the most important part of the solutions in Altinn.\n\r\rInfrastructure components\rAltinn 3 is hosted in public cloud, and all infrastructure components are cloud based.\n\r\rPlatform Components\rPlatform components are a mix of managed services and standard software/frameworks used to created the needed capabilties.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/ui-designer/components/",
	"title": "Available UI components",
	"tags": ["ui-designer", "ui-components"],
	"description": "Overview of the components that are available for use.",
	"content": "Text components \r\r\rComponent name\rAvailable properties\rProperties editor\rDefault look\r\r\rTitle\r\r\rTitle text\rTitle type (H2, H3, H4)\r\r\r\r\r\rParagraph\r\r\rParagraph text\r\r\r\r\r\r\rBasic form components \r\r\rComponent name\rAvailable properties\rProperties editor\rDefault look\r\r\rInput\r\r\rLink to data model\rLabel text\rDescription text\r\r\r\r\r\rCheckboxes\r\r\rLink to data model\rLabel text\rDescription text\rMethod to add options (codelist/manual)\rCodelist name\rManual option\r\rLabel\rValue\r\rPre-selected choice\r\r\rManual adding of options \r\rAdding options via codelist \r\r\r\r\rRadio buttons\r\r\rLink to data model\rLabel text\rDescription text\rMethod to add options (codelist/manual)\rCodelist name\rManual option\r\rLabel\rValue\r\rPre-selected choice\r\r\rManual adding of options \r\rAdding options via codelist \r\r\r\r\r\rDropdown\r\r\rLink to data model\rLabel text\rDescription text\rCodelist id\r\r\r\r\r\r\r\r\rText Area\r\r\rLink to data model\rLabel text\rDescription text\rRead only\r\r\r\r\r\r\rDatepicker\r\r\rLink to data model\rLabel text\rDescription text\r \r\r\r\r\rButton\r\r\rAction (not configurable in MVP)\rLabel text\r \rTBA\rTBA\r\r\rFile Upload\r\r\rComponent mode\rLabel text\rDescription text\rAccepted attachment types, see html input accept parameter\rMax number of attachments\rMax file size in mb\r\r\r\r\r\r\r\rNOTE: To make a File Upload component optional, make sure to set the minimum number of attachments to 0. The 'optional' value (used on other components) does not work for file upload. \rAdvanced form components Advanced form components are components that potentially contain multiple fields that each need to be mapped to a field in the data model. They will typically contain fields that are functionally related, ex. fields related to address, see below.\nNOTE: The address component is a proof of concept. The content/design of this component and its configuration is under development. The component is available for use, but might undergo major changes in the future.\r\r\r\r\rComponent name\rAvailable properties\rProperties editor\rDefault look\r\r\rAddress component (simple mode)\r\r\rLink to data model for field:\r\rAddress\rPostal code\rPostal area\r\rLabel text for Address field\r\r\r\r\r\rAddress component (advanced mode)\r\r\rLink to data model for field:\r\rAddress\rPostal code\rPostal area\rC/O\rHousing number\r\rLabel text for Address field\r\r\r\r\r\rGroup\r\r\rGroup id\rRepeating group\rLink to data model\rNumber of repetitions\r\r\r\rNon edit view \r\r\r\r\r\rSee all Github issues for UI-editor.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/infrastructure/computing/",
	"title": "Compute components",
	"tags": ["architecture", "infrastructure"],
	"description": "Compute components gives processor power to applications and software",
	"content": "Azure Kubernetes Services Altinn 3 uses Kubernetes to manage all our containerized applications.\nAzure Kubernetes Services (AKS) is a fully managed Kubernetes used by Altinn 3.\nFor each environment (Production, Application Test, Performance Test, and Integration Test) there is AKS cluster for Altinn Platform and the orgs set up for that specific environment.\nThe Kubernetes masters are managed by Azure. Our DevOps team only manages and maintains the agent nodes. As a managed Kubernetes service, AKS is free - Microsoft only charges for the agent nodes within your clusters, not for the masters.\nWith more than 50 orgs hosting services in Altinn 2 it is expected that Altinn 3 will have several hundreds of AKS clusters managed by the DevOps team.\nNodes Each AKS cluster has one Node Pool\nFor each Node Pool there is a set of nodes.\nThe size of the node pool varies depends on the type of cluster.\nCurrently, we use Dsv3-series\n Standard_D2s_v3 is the current standard for org clusters Standard_D4s_v3 is used on a medium cluster Standard_D8s_v3 is used on the clusters with the highest requirements.  The number of nodes can vary between the different clusters. Microsoft recommends not to have less than three nodes in a single system node pool.\nSupported Kubernetes Versions The Kubernetes community releases minor versions roughly every three months. These releases include new features and improvements. Patch releases are more frequent (sometimes weekly) and are intended for critical bug fixes within a minor version. These patch releases include fixes for security vulnerabilities or major bugs.\nAKS supports the latest versions of Kubernetes.\nSee a list of Supported Kubernetes Versions.\nThe Altinn DevOps team upgrades the different Kubernetes Clusters.\nAzure Functions Apps Azure Functions is a serverless solution that allows you to write less code, maintain less infrastructure, and save on costs. Instead of worrying about deploying and maintaining servers, the cloud infrastructure provides all the up-to-date servers needed to keep your applications running.\nIn Altinn 3 we use Azure Function Apps to the following\n Data Cleanup : A application for cleaning up data CosmosBackup : A application that backup data for cosmos DB in to a blob storage.  Virtual machines Developer machines Our developer machines are hosted as virtual machines in Azure.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/data/conceptual/",
	"title": "Conceptual",
	"tags": ["architecture"],
	"description": "The conceptual data model describes the data entities in the solutions and their relatiohip.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/apptemplates/asp.net/configuration/",
	"title": "Configuration of Application",
	"tags": ["altinn-apps", "todo"],
	"description": "Description of the different configurations of an app.",
	"content": "Configuring Process The App process is controlled by a BPMN 2.0 process file located in the app repository.\nSee architecture for supported types of steps.\nConfiguration of Authorization Policy The authorization policy is defined as a XACML 3.0 policy file.\nConfiguration of allowed data elements TODO\nConfiguration of Linkerd Every app cluster has linkerd installed as a service mesh. The app can be configured to use linkerd to encrypt the traffic between the ingress controller and the app. Configuration is done through the deployment files in the app repo. Older app templates are missing this configuration, but the deployment files can be copied from a new app template without modification.\nEnabling/disabling linkerd is configured through linkerd.enabled property in the deployment/values.yaml file.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/containers/",
	"title": "containers",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/contexthandler/",
	"title": "Context Handler",
	"tags": ["architecture", "security", "authorization", "xacml"],
	"description": "The responsibility to the Context Handler is to enrich a decision request sent from a PEP so it can be evaluated by PDP.",
	"content": "As an example, a decision request could contain only userId and instanceId together with the action requested.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Request xsi:schemaLocation=\u0026#34;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17 http://docs.oasis-open.org/xacml/3.0/xacml-core-v3-schema-wd-17.xsd\u0026#34; ReturnPolicyIdList=\u0026#34;false\u0026#34; CombinedDecision=\u0026#34;false\u0026#34; xmlns=\u0026#34;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:user-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;15468\u0026lt;/AttributeValue\u0026gt;  \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:instance-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;cbdc7b44-9442-4fe0-854b-da278bf0b0e\u0026lt;/AttributeValue\u0026gt;  \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34;\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;Read\u0026lt;/AttributeValue\u0026gt;  \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:environment\u0026#34; /\u0026gt; \u0026lt;/Request\u0026gt; The enriched decision request contains all the needed attributes for subject and resource so PDP can identify the correct policy and evauluate the request based on it.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Request xsi:schemaLocation=\u0026#34;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17 http://docs.oasis-open.org/xacml/3.0/xacml-core-v3-schema-wd-17.xsd\u0026#34; ReturnPolicyIdList=\u0026#34;false\u0026#34; CombinedDecision=\u0026#34;false\u0026#34; xmlns=\u0026#34;urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34;\u0026gt;  \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:user-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;1\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;DAGL\u0026lt;/AttributeValue\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;REGNA\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34;\u0026gt;  \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:instance-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;cbdc7b44-9442-4fe0-854b-da278bf0b0e\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:org\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;SKD\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:app\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;TaxReport\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:task\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;FormFilling\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:altinn:partyid\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;123456\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34;\u0026gt;  \u0026lt;Attribute IncludeInResult=\u0026#34;false\u0026#34; AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;\u0026gt; \u0026lt;AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;Read\u0026lt;/AttributeValue\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Attributes Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:environment\u0026#34; /\u0026gt; \u0026lt;/Request\u0026gt; Uses Policy Information Point Context handler uses instance data from storage and role data for the subject.\nThe authorization component request this information from PIP for roles and PIP for resources.\nThis is described in the pip section\nImplementation details See construction components for context handler for implementation details for the context handler.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/crds/",
	"title": "crds",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/custom-resources/",
	"title": "custom resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/apptemplates/asp.net/customizing/",
	"title": "Customzing Application",
	"tags": ["altinn-apps"],
	"description": "Description of you can customize the app based on this template.",
	"content": "Adding custom API\u0026rsquo;s It is possible to add custom API\u0026rsquo;s to the app. The need to be added as web-api controllers in the app project.\nSee development handbook for a step to step guideline for adding custom API\u0026rsquo;s to the application.\nConsuming custom API\u0026rsquo;s A app can consume any REST-API avaiable on the Internet.\nSee development handbook for a step to step guideline for consuming external API\u0026rsquo;s.\nCustom frontend If the standard UI-editor is to limited it is possible to build a custom frontend with the single page application (SPA) framework of your choice. (React, Angular, Vue etc ++). You need to compile the SPA application and add it to the wwroot folder of the app. In addition you would need to modive the index.cshtml file to\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/dashboard/",
	"title": "Dashboard",
	"tags": [],
	"description": "The Dashboard in Altinn Studio gives the developer full overview over their apps.",
	"content": "The dasboard lets the developer search for apps, create new apps, list all orgs and apps that developer have access to.\nSee Getting started for more info on how to use dashboard.\nSee all issues for dashboard on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/data/",
	"title": "Data management Capabilities",
	"tags": ["architecture"],
	"description": "Data management capabilities range from handling data to defining data models for applications in Altinn Studio",
	"content": "Data Processing Capabilities Data Access The technical architecture for the different solutions has the capability to access data from different types of data stores.\nData Validation The platform has the capability to validate data according to the data model or to custom rules defined in code.\nReport generation It is possible to generate reports based on data.\nTODO: Add scenario where relevant\nData Enrichment \u0026amp; Aggregation A application developer can define data enrichment logic that enrich data.\nData Storage Capabilities Data Caching The technical architecture has the capability to support caching.\nData persistency The techincal architecture has serverel differen data persistence capabilities through different storage technologies.\nData partitioning \u0026amp; Segregation The data infrastructure has the capabiltity to partion data.\nReplication \u0026amp; Synchronization The data infrastructure has the capabilitiy to replicate \u0026amp; synchronize data.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/data/",
	"title": "Data Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Data is the most important part of the solutions in Altinn.",
	"content": "Altinn Studio, Altinn Apps and Altinn Platform is created to give the government, the citizens and the businesses of Norway a effective way to share data and retrieve data.\n\rConceptual\rThe conceptual data model describes the data entities in the solutions and their relatiohip.\n\r\rLogical datamodel\rThe logcical datamodel describes the data entities that is stored.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/data/",
	"title": "data",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/datareporting/",
	"title": "Data &amp; Reporting Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Data and Reporting Components hold the functionalities to manage data and create business reports.",
	"content": "Reporting Software Dashboard and reporting server software Application Insights is used for dashboard and reporting services for the platform solutions.\nData visualization software Application Insights is used for visualization.\nData Stores Multi model database service Altinn Platform uses Azure Cosmos as a Multi model database service.\nRead more about Azure Cosmos DB.\nRelational DBMs We use Azure Database for PostgreSQL as a relational database for Gitea.\nRead more about Azure Database for PostgreSQL.\nDirectory Services We use Azure Directory Services.\nFile Share We use Azure File Storage.\nObject Storage We use Azure Blob Storage to store both structured and unstructured data for applications in Altinn Platform.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/data-modeling/",
	"title": "Data modeling",
	"tags": ["data-modeling", "todo"],
	"description": "Defining the data model(s) for an app is important. Altinn Studio will support importing existing data models and creating new data models.",
	"content": "The data model for an app typical defines the format of the data either sent to the app owner or presented in the app for the user. The data model is important for a consistent and formal definition of the data. It will be used for validation both from UI and for external systems.\nAltinn Studio will support both importing existing data model as XSD or creating a data modell. In MVP only import is in scope.\nSome requirements for Altinn Studio is:\n It should be easy to model data. Built in replacment for SERES (current tool). Need to support more formats.  See all issues related to Altinn Studio and data modeling on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/data-storage/",
	"title": "Data Storage in Altinn Studio",
	"tags": ["altinn-studio", "data"],
	"description": "Description of how the data is stored in Altinn Studio",
	"content": "Designer    Volume-name Type Peristent Volume Claim     altinn-repo-storage azure-file altinn-storage-repo-premium-volume-claim    In designer altinn-repo-storage is used as an intermediate storage of \u0026ldquo;local\u0026rdquo; copies that an app-developer is working on in altinn-studio. These changes can then be pushed to altinn-repositories.\nDesigner also stores some metadata about what releases and deployments have been made to the various app-owner environements in Azure Comos DB - app-release-deployment. When designer either builds a release or deploys to en environment through an azure pipeline this triggers a seperate pipeline which in turn calls designer to update the CosmosDB.\nRepositories    Volume-name Type Peristent Volume Claim     altinn-gitea-storage azure-disk altinn-storage-gitea-volume-claim    altinn-repositories uses an azure-disk as storage volume. One drawback to this is that we only have the possibility for one attached pod at the time, which could set constraints on scalability.\nRepositories also is connected to a PostgreSQL database. The credentials for this database is read through the a secret called gitea-db-secret. There currently exists four of these databases:\n altinnstudio-db-prod-postgres altinnstudio-db-staging-postgres db-gitea-postgres t30-gitea-db  "
},
{
	"uri": "https://docs.altinn.studio/tags/data-modeling/",
	"title": "data-modeling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/debug/",
	"title": "debug",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/deployment/",
	"title": "App Deployment",
	"tags": [],
	"description": "Altinn Studio will let the developer deploy apps to all enviroments without any manuel steps.",
	"content": "An app developer can build and deploy apps to all test and production environments available for that org.\nBuilds is based on the latest source code checked in to master branc for a given app. Each build can have a description. When build is complete the build can be deployed to a given environment.\nSee issues related to app-deployment on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/deploy/",
	"title": "deploy",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/softwareconfiguration/deployment/",
	"title": "Deployment",
	"tags": ["deployment"],
	"description": "Description of the Altinn Studio solution",
	"content": "The Altinn Studio components are deployed as two different solutions.\n Altinn Studio - The complete Development solution. Altinn Apps - Where apps are hosted and accessed by end users.  In this section you will find details about the deployment architecture for these solutions.\nIn addition there is a seperate article on how End Users Apps developed in Altinn Studio are deployed to the runtime solution.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/deployment/",
	"title": "deployment",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/designer/",
	"title": "Application Construction Components Designer",
	"tags": [],
	"description": "Designer is split in two applications. One frontend created in REACT that communicates with the back-end application through rest-API.",
	"content": "\rApplication construction components - Designer Front-end\rDescription of the application construction components for Altinn Studio Designer Front-end\n\r\rAltinn Studio Designer - Back-end\rApplication construction components used in Altinn Studio Designer backend.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-studio/designer/",
	"title": "Solution-specific application components Altinn Studio Designer",
	"tags": ["solution", "architecture"],
	"description": "Altinn Studio Designer is the custom appliaction where app developers manage and creates applications.",
	"content": "Altinn Studio Designer contains serveral functional components/modules.\nWelcome Screen The welcome screen gives information to the user.\nDashboard Dashboard let the app developer search and find applications developed in Altinn Studio. It possible to search across all orgs the developer has access to.\nApp Creation App creation functionaliy lets the app developer create applications.\nDuring this process the app developer can select the org that will own the app and the repository name for that app.\nApp Info Application info module lets the user change the name of the app and add descriptions\nUI Editor The UI-editor lets the app developer create a UI interface with WYSIWYG\nDatamodel The datamodel functionality lets the developer upload a XSD for datamodel creation in app.\nWhen datamodel is uploaded a C# classes is generated based on this and metadata about datamodel is created.\nBuild \u0026amp; Deploy Build \u0026amp; Deploy functionality includes functionality to\n Build created app to a docker container Upload docker container to a container registry Register the build in to a database Let the app developer select a previous build and deploy that container to a specific Altinn Apps environment (test, performance test, production ++)  Process Process functionality lets the app developer configure the given process that a user/system acessing the developed app should follow.\nTexts The text module lets the app developer define the texts for a given app.\nLogic Editor The logic editor module lets the app developer create and modify app logic like validation and calculation. This is a very simple browser based editor. The recomendation is to clone the app repository and edit the code in a regular IDE like Visual Studio Code\nPolicy Administration Point As part of the application development process the developer defines the authorization policies for the app.\nRead more about PAP and policies.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/",
	"title": "Altinn Studio Designer",
	"tags": ["altinn-repos"],
	"description": "This is where developers create, modify, build and deploy apps. In the background Designer uses Git to store code and config in Altinn Studio Repos.",
	"content": "\rFunctionality in Designer\rThe designer can been seen as a collection of different editors specialized to create and edit different aspects of an application.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/nonsolutionspecific/development/",
	"title": "Development Applications",
	"tags": ["solution", "architecture"],
	"description": "Development Applications are used by the devops team to support the different development capabilities required.",
	"content": "Application Lifecycle Management Applications Requirement \u0026amp; Release Management Use cases are defined in Github. We have defined differen types of template to support creation of user stories.\nReleases are managed on Github.\nSee releases here.\nManual \u0026amp; Automated Test Tools Functional Test  Automated browser testing and WCAG testing using Testcafe.  Unit Test  Jest framework used for unit testing front-end. More details here. xunit used for unit testing back-end.  Service \u0026amp; API Test  API testing is done using Postman. More details here. Integration testing of services done using standard Microsoft frameworks.  Performance Testing \u0026amp; Profiling We will use K6 for performance testing.\nTestmanagement  Azure Test Plans in Azure Devops is usted for execution tracking Defects reported as issues in Github, using the Bug template.  DevSecOps Applications UX Design We use Figma for prototypes.\nSee our Figma Guidlines.\nArtefact \u0026amp; Code Repository Github is uses for all Open Source code. See our GitHub repository.\nAzure Repos in Azure DevopsServices is used for other artefacts\nArchitecture Design Application design is created using MarkDown and published on this site. Visio is used for application drawings.\nIDE The project uses Visual Studio Code and Visual Studio as IDE.\nBuild Tools The project uses different build tools based the framework.\n.NET packages \u0026amp; applications We use .Net build to build .Net packages and applications.\nWith help of Nuget packages we can easyly re-use modules accross applicatons in the different solution.\nJavascript Packages \u0026amp; applications Node is the main tool to build our javascript pacakges and applications\nLerna is used to \u0026hellip;\nJava packages \u0026amp; application We use Maven to build our java applications.\nDocker containers All applications is built as Docker Containers using Docker Build\nSe Docker files for Altinn Platform\n Authentication component Authorization component PDF Component Profile Component Receipt Component Register Component Storage Component  See docker files for Altinn Studio\n [Designer])(https://github.com/Altinn/altinn-studio/blob/master/src/AltinnCore/Designer/Dockerfile)  Artefact \u0026amp; Container Registry .NET Packages .NET packages som part of the codes are published as Nuget Packages. This process is manual and performed by developer.\n.Net packes used are also retrived from .Net\nJavascript packages The project uses NPM for javascript packages.\nIn the future we will publish NPM packages for parts of the solutions.\nDocker Containers Dockers containers are published to Azure Container Registry\nThere is a shared Altinn Container Registry for the different Environments for Altinn Studio and Altinn Platform.\nNote as part of the runtime capabilityes we also use Azure Container Registry for apps created in Altinn Studio. See solution components\nDeployment Orchestration We use Azure Pipelenes for deployment orchestration of the different components in the different solutions.\nThe deploy pipelines has typical support for deployment to different environments (Stages).\nHelm is used to set environments variables for the different environments.\nPiplines The following pipelines is defined\n Altinn Studio - Designer Altinn Studio - Repositories Altinn Platform - Authorization Altinn Platform - Authentication Altinn Platform - PDF Altinn Platform - Profile Altinn Platform - Receipt Altinn Platform - Register Altinn Platform - Storage  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/",
	"title": "Development",
	"tags": ["development", "architecture"],
	"description": "Information about developing the open source Altinn Studio solution.",
	"content": "See the projects Github page.\n\rIntro for Developers\rIntroduction\n\r\rBranching\rBranching information for Altinn Studio.\n\r\rFlight Rules\rFlight rules for Altinn Studio\n\r\rHandbook\rDevelopment handbook for Altinn Studio\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/development/",
	"title": "development",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/devops/",
	"title": "devops",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/docker/",
	"title": "Docker",
	"tags": ["tech", "containers"],
	"description": "Docker is the container technology used in Altinn Studio, Altinn Apps and Altinn Platform.",
	"content": "Docker is used as the container technology for hosting Altinn Studio Designer and Altinn Studio Repos.\nIn Altinn Apps it is used to host the different apps created in Altinn Studio as seperate containers.\nAltinn ❤️ containers.\nLinks  https://www.docker.com https://www.docker.com/products/docker-desktop https://hub.docker.com https://github.com/docker/docker-ce  "
},
{
	"uri": "https://docs.altinn.studio/tags/docs/",
	"title": "docs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/encryption/",
	"title": "Encryption",
	"tags": ["architecture", "security", "encryption"],
	"description": "Description of the encryption architecture",
	"content": "Apps hosted in Altinn Apps could cover lots of functional scenario. For statefull apps where the App store data in Altinn Platform in the Storage component, the type of data could be data that is 100% public to highly sensitive data.\nThe Org that creates the App, would based on the type of data have spceial requirements for encryption to support their Confidentiality requirement for the data.\nStorage encryption The storage component uses Azure Cosmos DB and Azrue Blob storage to store data for apps. In Cosmos metadata about instance data is stored, while in Azure Blob Storage.\nAzure Cosmos DB encryps all data at rest. This is transparent for Altinn Platform. See documentation about Azure Cosmos DB\nAzure Blob storage encrypts all data at rest. This is transparent for Altinn Platform. Blog storage support customer managed keys.\nSee documentation about Azure Storage Encryption\n"
},
{
	"uri": "https://docs.altinn.studio/tags/encryption/",
	"title": "encryption",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/environments/",
	"title": "Environments",
	"tags": ["architecture", "devops"],
	"description": "An important DevOps capability is to have different environments to deploy the different solutions part of the Altinn 3 platform.",
	"content": "Altinn Studio, Altinn Apps and Altinn Platform is deployed in serveral environments for different usage.\nDevelopment Environments Available at staging.altinn.studio for Altinn Studio\nTest environment We have serveral internal test environments used for testing.\nAvailable at at22.altinn.cloud\nAvailable at at23.altinn.cloud\nAvailable at at24.altinn.cloud\nAvailable at dev.altinn.studio for Altinn Studio.\nPre Production Environemnt This environment used by the application/service owners to test applications created in Altinn Studio.\nAvailable at tt02.altinn.no\nProduction Environment Available at www.altinn.no for Altinn 2/ Altinn 3\nAvailable at altinn.studio for Altinn Studio\n"
},
{
	"uri": "https://docs.altinn.studio/tags/error-handling/",
	"title": "error-handling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/integration/events/",
	"title": "Event capabilities",
	"tags": ["architecture", "events"],
	"description": "Description of the event capabilities for Altinn Apps and Altinn Platform.",
	"content": "The new generation of Altinn is moving to an event-driven architecture. In this context, this means that applications (digital services) running in Altinn Apps will publish events that application owners (agencies) and parties(citizens and businesses) can subscribe to and react to.\nThis page is focused on capabilities. If you are interested in more details about the components and construction see Event Solution Components and Event Construction Components.\nOverall Concept In Altinn there will over time be thousands of different digital services deployed to Altinn Apps. Those digital services will be accessed by the citizens and businesses in Norway.\nThey will receive and submit data to/from the entity that is responsible for the digital service and others using the platform. The event architecture would make it possible to get notified when there are events in the platform related to data that the different actors have an interest in. It could be anything from the digital service (app) owner being notified that a citizen has completed a form, to that the citizen is informed that there is a new form he needs to fill out.\nEvents Events would be a combination of standard events defined by the platform and custom events added in an application by application developers.\nThe events will typically only contain information about that an event has happened with a reference to some data that was changed because of that event.\nStandard app events\n An instance is created An instance changes state (from one process task to another, example: data -\u0026gt; signing) An instance is completed  Custom events could be\n A user has asked for a deduction in a form A specific validation of data failed  Event attributes\nEvents would typically have some attributes used for filtering.\n [source] - This is the application that created the event. Currently, there are apps deployed to Altinn Apps [type] - The type of event. Created, completed [subject] - Who is the owner of the data related to the event. ++. Free text not locked to a schema.  An event will contain a limited set of information. To get the full details for an event the consumer would need to get all details using APIs.\nEvent Producers Applications running in Altinn Apps Applications hosted in the Altinn Apps infrastructure would be the most common producer of events in the beginning.\nThe standard App template contains code for publishing standard events to the events component. The following standard events published by an app is\n app.instance.created : When a instance is created. app.instance.process.movedTo.{TaskId} : When a process is moved to a specific task app.instance.process.completed : When a process is complete  The application template will contain API so logic in applications can publish events based on rules defined by the developer.\nThese app events could be anything, and could also be triggered by other external systems through custom APIs in the app.\nSee code example\nOther producers Altinn Events together with Altinn Authorization has the potential to be the national event hub for Norway.\nThe possibility to have Altinn Authorization to authorize access to events gives great possibilities not available from other event platforms.\nIn the future, several other Event producers could be added. Examples could be\n Altinn 2 ServiceEngine: Reducing the need for polling to the current platform Altinn 2 Authorization: Information about changes on rights National Register: Informing- Other agency specific applications Private sector applications about register changes Other national components  Only the imagination limits whats is possible in the future. This is followed up in this issue.\nEvent consumers Orgs (application owners) Orgs will need to know about events happening in their apps in Altinn.\nFor some orgs there is a need for subscribing to events for a specific app, others might want to subscribe to all events, or maybe a specific type of event.\nParties (persons and organizations) Parties submitting and receiving data in Altinn would benefit from knowing about events. This could be feedback has been added to a form, or that a new message has been received.\nIn many cases, parties use professionals to handle their data in Altinn. These professionals typically have many hundred or thousands of clients.\nCurrently we only support persons and consumers. They need to be authenticated through ID-porten to set up a subscription for themself.\nBefore any event is pushed\nRequirments The following requirements were identified for the new event architecture in Altinn 3.\n It should be possible to subscribe to a specific type of event. (Example all app.instance.process.completed events for a given app) It should be possible to go at least 3 months back in history when searching for events through API. The consumer will keep track of which events the consumer has processed. The architecture should support more than 10 000 publishers. The architecture should support more than 1 000 000 consumers. The architecture should support more than 500 000 000 events a year. Access to events should be authorized. Accessing an event for a party requires that the consumer has the correct role Before pushing events to a subscriber endpoint the push functionality need to authorize the subscriber for the event  See also Referansearkitektur for datautveksling\nEvent Principles and pattern During the analysis, the following principles and pattern has been applied\nSmall events  The events will only contain a small amount of data. If more information is needed this is available from the resource itself Every event links to the resource affected by the event. We use CloudEvent as the format.  Prefer push of events to consumers The preferred consumption of events is through subscription and subscriber endpoints where Altinn Events pushes the events to a subscriber webhook.\nSupport retry of push The push functionality needs to support retry of pushing events if the subscriber endpoint is unavailable.\nExpose events through REST-API  The use of REST-API ensures low complexity for consuming events REST-API URLs and parameters are uses for filtering  Consumers keep track of their status  Consumers will keep track of their status when using events API for consumption of events.  Events do not change  Events for a resource are never changed. A new event can revert the effect of an earlier event  Events are stored for a limited time  Events will be available for 3 months through API.  Event Architecture As part of the Altinn 3 solutions there is defined a event architecture to support the above requirements and capabilities.\nEvent Schema The Altinn 3 will use the defined CloudEvents specification to describe events in Altinn Apps and Altinn Platform.\nThe reason for choosing cloud events are\n It is a standardized and open format as preferred by our architecture principles It backed by many and The specification is now under the Cloud Native Computing Foundation It is flexible so it would support scenarios in the future  Below you find a offical example. See full JSON Schema\n{ \u0026#34;specversion\u0026#34; : \u0026#34;1.x-wip\u0026#34;, \u0026#34;type\u0026#34; : \u0026#34;com.github.pull.create\u0026#34;, \u0026#34;source\u0026#34; : \u0026#34;https://github.com/cloudevents/spec/pull\u0026#34;, \u0026#34;subject\u0026#34; : \u0026#34;123\u0026#34;, \u0026#34;id\u0026#34; : \u0026#34;A234-1234-1234\u0026#34;, \u0026#34;time\u0026#34; : \u0026#34;2018-04-05T17:31:00Z\u0026#34;, \u0026#34;comexampleextension1\u0026#34; : \u0026#34;value\u0026#34;, \u0026#34;comexampleothervalue\u0026#34; : 5, \u0026#34;datacontenttype\u0026#34; : \u0026#34;text/xml\u0026#34;, \u0026#34;data\u0026#34; : \u0026#34;\u0026lt;much wow=\\\u0026#34;xml\\\u0026#34;/\u0026gt;\u0026#34; }  specversion: The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of 1.x-wip when referring to this version of the specification. type: This is the event type. Examples: instance.created, instance.process.paymentcompleted, instance.process.completed source: Describes what the event is related to. Will be used to filter event types. For an app it would typical be /{org}/{app}/{partyId}/{instanceGuid}. This would be used for consumers to look up a given instance. subject: The party the event is related to. PartyID is used. id: Unique id for a given event. time: The time the event was triggered. Set by the publisher. datacontenttype: Optional. Content type of data value. This attribute enables data to carry any type of content, whereby format and encoding might differ from that of the chosen event format data: Optional. Can contain a structure of data specific for an event type.  In addition to the spec there is added alternativesubject as an extension to the event model. This will be used for socical secuirty number, organization number or other identifier in addition to the partyId found in subject property.\nCurrently this can be\n fnr : social security number (11 digits) org: organization number (9 digits)  The value will be prefixed\nExample 1 A instance has been created for a given party. It is not possible from the event itself to know who did it.\n[{ \u0026#34;source\u0026#34;: \u0026#34;https://skd.apps.altinn.no/skd/skattemelding/instances/1234324/6fb3f738-6800-4f29-9f3e-1c66862656cd\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/1234324\u0026#34;,  \u0026#34;type\u0026#34;: \u0026#34;app.instance.created\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2020-02-20T08:00:06.4014168Z\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/person/01038712345\u0026#34; }] Example 2 A user has completed the confirmation1 task in the process.\n[{ \u0026#34;source\u0026#34;: \u0026#34;https://skd.apps.altinn.no/skd/skattemelding/instances/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/234234422\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;app.instance.process.movedTo.confirmation1\u0026#34;,  \u0026#34;time\u0026#34;: \u0026#34;2020-03-16T10:23:46.6443563Z\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/org/974760673\u0026#34; }] Example 3 A user/system has completed the process for an instance.\n[{ \u0026#34;source\u0026#34;: \u0026#34;https://skd.apps.altinn.no/skd/skattemelding/instances/234234422/2acb1253-07b3-4463-9ff5-60dc82fd59f8\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;party/234234422\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;app.instance.process.completed\u0026#34;,  \u0026#34;time\u0026#34;: \u0026#34;2020-02-20T09:06:50.3736712Z\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;91f2388f-bd8c-4647-8684-fd9f68af5b14\u0026#34;, \u0026#34;alternativesubject\u0026#34;: \u0026#34;/org/974760673\u0026#34; }] Event components The below diagram shows the different components in the proposed Event Architecture for Altinn 3.\nMore details can be in solutions components with detailed API info of event component and in construction components you find the technical details how the components are constructed.\nDelegating access to events There are serveral user scenarios when there is a need to delegate access to the events for a given party to another user/organisation.\nDelegating Org access For orgs (application owners) there might be some scenarios where they want to give access to events for a given application. This delegation is done through Maskinporten.\nDelegating party event access In general, access to events for a given party will be authorized based on roles the requesting organization/user have for the subject of the event.\nEvent Analytics With a new event architecture it is possible imagine that we can run analytics on the events to give important insight in to the data in the platform.\nExample\n How many instances is created for the different applications How long time does each task take to complete Is there any relationship between apps.  This is analyzed in the following issue\nAltinn Platform Events as a national event hub The event capabilities in Altinn Platform is possible to use outside Altinn Apps and Altinn Platform similar to how Altinn Authorization is used by external wihout deploying any digital services to the platform.\nHow this should work is not analyzed and specified yet. The issue is found here\nOther event concepts in the platform Events are used in different scenarios in the platform.\n Instance Events - Events that happen on a given instance. It could be created, saved, ++ This is stored to cosmos DB. The number of details in these events is higher than we would put on an event feed. See Instance Events in Storage Application logic events - These are events where app developers could implement logic to get a specific behavior. Calculation, validation ++ This type of event is probably not relevant to push to the event feed.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/swagger/events/",
	"title": "Events",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Events.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/events/",
	"title": "Application construction components - Altinn Platform Events",
	"tags": ["architecture", "solution"],
	"description": "The Events component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": "The Events components expose REST-APIs for publishing and subscribing to events. The Azure function are responsible for pushing events to subscriber webhooks. The below diagram shows the components\nWhen a publish request is received it will push the event document to the event storage. When a request is received it will query the events stored in the event storage.\nApi controllers The following API controllers are defined\n EventsController : responsible for registrating events and pull of events for consumers. PushController : responsible to validate if there is any subscriptions matching the event and if so authorize the subscriper before it pushes the event to the outbound queue SubscriptionController : responsible for managing subscriptions for consumers.  Eventscontroller The EventsController in the Events component is the one receiving events from Apps and other sources.\nIt verifies if the app is authorized to creates events for the given source and then store in to event storage.\nIt also exposes API to search for events and to get events.\nThe access is controlled by the XACML Policy for the given App that is the source for an given event.\nThe AuthorizationHelper is responsible for creating and performing the request to the Policy Decision Point.\nPushController PushController is called by the EventsInbound function.\nBased on details from the Event it will identify matching subscriptions.\nFor each match it will authorize the consumer using the Policy Authorization Point.\nThe AuthorizationHelper is responsible for creating and performing the request to the Policy Decision Point.\nThe access is controlled by the XACML Policy for the given App that is the source for an given event.\nIf consumer is Authorized the event will be added to the \u0026ldquo;events-outbound\u0026rdquo; queue and picked up by the EventsOutbound function. (see below)\nSubscriptionController The SubscriptionController exposes API to\n Add subscriptions Delete subscriptions Get subscriptions Validate subscriptions  Event storage To be able to get the search capability needed for the Events component we have choosen to use PostgreSQL.\nUsing PostgreSQL makes is possible to sort the events based on a primary key and also makes it possible to search over all events based on subject or source.\nThe table structure\nCREATE TABLE IF NOT EXISTS events.events ( sequenceno BIGSERIAL, id character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, source character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, subject character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, \u0026#34;time\u0026#34; timestamptz NOT NULL, type character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, cloudevent text COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, CONSTRAINT events_pkey PRIMARY KEY (sequenceno) ) CREATE TABLE IF NOT EXISTS events.subscription ( id BIGSERIAL, sourcefilter character varying COLLATE pg_catalog.\u0026#34;default\u0026#34;, subjectfilter character varying COLLATE pg_catalog.\u0026#34;default\u0026#34;, typefilter character varying COLLATE pg_catalog.\u0026#34;default\u0026#34;, consumer character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, endpointurl character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, createdby character varying COLLATE pg_catalog.\u0026#34;default\u0026#34; NOT NULL, validated BOOLEAN NOT NULL, \u0026#34;time\u0026#34; timestamptz NOT NULL, CONSTRAINT eventssubscription_pkey PRIMARY KEY (id) ) Stored procedures is used to add, delete and query data from the above tables. See all stored procedures here.\nEvent sequencing Events will be sequnced by sequence number that is the primary key of the Events table.\nIndexing We would need to have index on\nFunctions As part of the Event Component there is 3 Azure Functions used for pushing events to the consumers. Click on name for code.\n EventsInbound : responsible for pushing new events to the push controller EventsOutbound : responsible for pushing event to consumer webhook ValidateSubscription : responsible for validating the endpoint given in a subscription.  EventsInbound The EventsInbound function is triggered by QueueStorage changes in the \u0026ldquo;events-inbound\u0026rdquo; queue.\nIt just forward the event to the PushController through the pushEventService.\nThe Function uses Platform Access token to authenticate itself for the PushController\nIt uses standard mechanismen for retry, if the call for pushcontroller fails.\nEventsOutbound The EventsOutbound function is triggered byQueueStorage changes in the \u0026ldquo;events-outbound\u0026rdquo; queue.\nIt will try to push the event to given subscription endpoint given in the CloudEventEnvelope that is put on the queue and containing the event.\nThis function is configured with CustomQueueProcessorFactory to handle retry if it is not possible to push event to the endpoint.\nIt will try send the event right away, but if the request to webhook fails (Http status != 200) it will put the cloudevent back on the queue with a defined wait time.\n retries after 10 seconds retries after 30 seconds retries after 1 minute retries after 5 minutes retries after 10 minutes retries after 30 minutes retries after 1 hour retries after 3 hours retries after 6 hours retries after 12 hours retries after 12 hours  If it fails the 12. time it will put the event in the dead letter queue and will not try again.\nSubscriptionValidation The SubscriptionValidation function is triggered byQueueStorage changes in the \u0026ldquo;subscription-validation\u0026rdquo; queue.\nIt will try to validate the endpoing given in the Subscription that is put on the queue.\nThis function is configured with CustomQueueProcessorFactory to handle retry if it is not possible to push event to the endpoint.\nIt will try send the event right away, but if the request to webhook fails (Http status != 200) it will put the cloudevent back on the queue with a defined wait time.\n retries after 10 seconds retries after 30 seconds retries after 1 minute retries after 5 minutes retries after 10 minutes retries after 30 minutes retries after 1 hour retries after 3 hours retries after 6 hours retries after 12 hours retries after 12 hours  If it fails the 12. time it will put the event in the dead letter queue and will not try again.\nIf endpoint responds with 200OK it will then set the subscription status to valid with calling the validate endpoint in the Subscription API.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/events/",
	"title": "Events",
	"tags": ["platform", "events"],
	"description": "The Events component receives and publishes events.",
	"content": "The Events component supports storage of events in Azure Cosmos Db. Both Apps and Platform can create events.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/events/",
	"title": "events",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/design/farger/",
	"title": "Farger",
	"tags": [],
	"description": "I utgangspunktet skal kun de fargene som er presentert her brukes. Hvis nye farger blir implementert skal dette gås opp med ansvarlig designer.",
	"content": "\rKontrast Følgende fargekombinasjoner som er brukt på Altinn oppfyller kravene til kontrast i liten tekst. AA er minstekravet, mens AAA er anbefalt, særlig for løpende tekst.\n\rAA\rAAA\rAAA\r\rAA\rAA\r\rAAA\r\rAA\rAAA\rAAA\r\rAAA\r\rAA\r\rAA\rAAA\r\rAA\rAA\rAAA\rAAA\r\rInteraksjon Fargen $blue er dedikert til elementer som brukeren kan interagere med på altinn.no, f.eks lenker, knapper og navigasjon. Denne fargen skal ikke bli brukt i andre sammenhenger (unntatt illustrasjoner).\n$blue: #1eaef7;\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/features/",
	"title": "Features",
	"tags": ["altinn-apps"],
	"description": "Description of features in App",
	"content": "Prefill The App can prefill data in the datamodels for the app based on standard configuration for profile and register data, but can also prefill data based on data from organisation or prefill based on logic define in the custom app logic defined by the application developer.\nData validation The App can validate the datamodel based on the datamodel itself and based on custom app logic defined by the application developer.\nData Calculation The App can calculate data in the datamodels based on custom applogic defined by the application developer.\nInstansiation Hooks The App can perform instansiations checks based on custom app logic defined by the application developer.\nPolicy Enforcment The App has built in Policy Enforcments Points at the different API endpoints to make sure that the user / system is authorized to perform operation on the app / data. This includes checks on\n Roles Rights Authentication level  Formset In the future the App will support multiple datamodels.\nPDF of data The App will be able to present at PDF of the data.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/apptemplates/asp.net/files/",
	"title": "Template filestructure",
	"tags": ["altinn-apps"],
	"description": "Description of the files in the ASP.NET Core template.",
	"content": "The template contains serveral standard files that is added to the repository when app is created.\nProcess The Process.xml defines the business process of the app and is based om BPMN 2.0. The app supports differen types of processes.\nSee standard BPMN file in template.\nXACML The Polixy.xml defines the authorization policy with rules. Is based on XACML 3.0.\nThe XACML is imported in to authorization component.\nSee standard XACML file in template.\nUI The Formlayout.json defines the rendering of the UI based on Altinn Studio UI designer. For Apps without frontend this is not needed.\nText Resources The App can be breated with multiple langauges at the same time. The different texts are put in language files for each language.\nPrefill Prefill.json defines the prefill for a app.\nDockerfile Defines the docker image.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/flight-rules/",
	"title": "Flight Rules",
	"tags": ["development"],
	"description": "Flight rules for Altinn Studio",
	"content": "What are flight rules?\nFlight rules is originally a compendium of step-by-step manuals, what to do when X occurs and why.\nEssentially, they are extremely detailed, scenario-specific standard operating procedures.\n\rLoadbalancer is responding with HTTP Error 502 - bad gateway This occurs when the loadbalancer could not find any of the services in it\u0026rsquo;s configuration.\nCan be triggerd by these issues:\n Some of the kubernetes services are not existing Some of the kubernetes pods are not existing Kubernetes mapping between deployments and services are incorrect.  Loadbalancer is responding with HTTP Error 504 - timeout This occurs when the loadbalancer is not getting a response from the other services running in kubernetes. Because the loadbalancer is not updated when the deployment of new versions or altinn-designer, altinn-runtime or altinn-repositories. To delete a pod, first find the name of the running pod:\nkubectl get pods Then use the whole name, and run the following command:\nkubectl delete pod [POD_NAME] Sonarqube-code-analysis pipeline fails on pull request This occurs when there exists double line shifts in the code that is being analyzed. This somehow crashes the sonarqube code analysis tool. To solve this issue you need to identify and remove the double line shift is in the code:\n Navigate to the pipeline logs, open \u0026lsquo;Run Code Analysis\u0026rsquo; Scroll to the bottom Look for error message looking like \u0026lsquo;ERROR: 1 is not a valid line offset for pointer\u0026rsquo; The error should contain info at where the double line shift is Remove the double line shift and update PR  Pod is stuck in status ContainerCreating and has warning \u0026ldquo;Unable to mount volumes for pod XXX: timeout expired waiting for volumes to attach or mount for pod XXX\u0026rdquo; The storage we use today don\u0026rsquo;t support two pods accessing it at the same time, so on deploy if the first pod don\u0026rsquo;t release the storage before the other one tries to connect to it the second pod will get stuck in ContainerCreating status. If you then run kubectl get pods and get the name of the pod you can then run\nkubectl describe [POD_NAME] then you see the message \u0026ldquo;Unable to mount volumes for pod XXX: timeout expired waiting for volumes to attach or mount for pod XXX\u0026rdquo;\nTo fix this you need to delete the deployment to that pod and start a new release:\nkubectl delete deployment [DEPLOYMENT_NAME] To start a new release go to release pipeline\nI try to pull master from github and get error \u0026ldquo;Cannot lock ref\u0026rdquo; This happens from time to time, still unsure why. To fix it run the command:\ngit gc --prune=now\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/app-api/eus-rest/",
	"title": "REST-API for End User Systems",
	"tags": ["altinn-apps"],
	"description": "Description of the REST APIs for end user systems.",
	"content": "NOTE: Work in progress. Stuff will change\r\rThe main API-channel for data in the platform is REST for apps created in Altinn Studio.\nThe end user system needs to call different APIS based on the need. The below figure show the different components relevant for an end-user system calling Altinn through REST.\nDownload as Visio.\nAPI to authenticate end user systems For new API\u0026rsquo;s the goal is to use JWT Tokens to authenticate against the API.\nAltinn Apps will expose apis to authenticate end user systems and user of end user systems and return JWT Tokens that can be used against the other API\u0026rsquo;s.\nAPI to create new data instance for an app From end user systems it will be possible to create a instance of an App from a end user system. This is a URL directly to the app and unique.\nSee Application Users API.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/form-layout/",
	"title": "FormLayout.json",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for skjema-layout",
	"content": "Overordnet \u0026lsquo;FormLayout.json\u0026rsquo; describes the structure of a schema.\nFormat \u0026lsquo;FormLayout.json\u0026rsquo; is divided into three objects:\n Components: describes the components in the schema and configurations connected to the specific component. E.g the binding to a data model. Containers: describes the layout containers used in the schema and the configurations connected to them. E.g if the container is a repeating group Order: this object specify the order of the containers and components in the schema.  Eksempel Here is an example on how the form layout file could look like:\n\u0026#34;components\u0026#34;: { \u0026#34;a3569c64-2a54-493c-a2a2-213034ed9207\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;itemType\u0026#34;: \u0026#34;COMPONENT\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;25795.OppgavegiverNavnPreutfylt.Label\u0026#34;, }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;skattyterinfor.info.oppgavegiverNavnPreutfylt.value\u0026#34;, }, }, \u0026#34;74b7ff77-a80b-45d4-8f4a-81d7a52e69c6\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;itemType\u0026#34;: \u0026#34;COMPONENT\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;25796.OppgavegiverAdressePreutfylt.Label\u0026#34;, }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026#34;, }, \u0026#34;hidden\u0026#34;: false, }, \u0026#34;95ddc03a-282a-4ed3-b854-18a3921eec0f\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;itemType\u0026#34;: \u0026#34;COMPONENT\u0026#34;, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;2.KontaktpersonNavn.Label\u0026#34;, }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;skattyterinfor.kontakt.kontaktpersonNavn.value\u0026#34;, }, }, }, \u0026#34;containers\u0026#34;: { \u0026#34;6eb99041-1ecc-4e83-9312-596a0802e728\u0026#34;: { \u0026#34;repeating\u0026#34;: false, \u0026#34;dataModelGroup\u0026#34;: null }, \u0026#34;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026#34;: { \u0026#34;repeating\u0026#34;: false, \u0026#34;dataModelGroup\u0026#34;: null, \u0026#34;index\u0026#34;: 0 } }, \u0026#34;order\u0026#34;: { \u0026#34;6eb99041-1ecc-4e83-9312-596a0802e728\u0026#34;: [ \u0026#34;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026#34;, \u0026#34;95ddc03a-282a-4ed3-b854-18a3921eec0f\u0026#34; ], \u0026#34;760e9bad-b800-4361-8dce-71206a7fcfbb\u0026#34;: [ \u0026#34;a3569c64-2a54-493c-a2a2-213034ed9207\u0026#34;, \u0026#34;74b7ff77-a80b-45d4-8f4a-81d7a52e69c6\u0026#34; ] } "
},
{
	"uri": "https://docs.altinn.studio/tags/front-end/",
	"title": "front-end",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/front-end-designsystem/",
	"title": "Front-end designsystem",
	"tags": [],
	"description": "Altinns designsystem, som er bygget med Pattern Lab, fungerer som et hjem for våre UI-komponenter og deres tilhørende front-end kode. Designsystemet er i bruk av infoportal, portal og altinn digitalisering.",
	"content": "Siden vi er flere ulike team som jobber med ulike løsninger (men med samme brukergrensesnitt), trenger vi et felles sted for frontend. Dette er for å sikre at vi kun lager komponentene èn gang og at de fremtrer konsistent i brukergrensesnittet selv om de er implementert i ulike løsninger.\nPattern Lab For å bygge designsystemet har vi brukt «Pattern Lab», som er et verktøy for å lage atomiske designsystem. Pattern Lab fungerer som et arbeidsverktøy der frontend-utviklere lager alle UI-komponentene i HTML, CSS og Javasript. Komponentene kan settes sammen til sider, og deretter til en klikkbar prototype som kan brukertestes. Pattern Lab sørger for enkel prototyping og overlevering av CSS, JavaScript og HTML-kode til backend-utviklere.\nPattern Lab brukes i hovedsak til to formål:\n Pattern Lab skal være et hjem for alle UI-komponenter med deres styling og retningslinjer. CSS og javascript for komponentene skal kun eksistere og vedlikeholdes her. Pattern Lab skal fungere som prototypeverktøy. Alle maler skal i de fleste tilfeller prototypes og brukertestes før implementering.  \rKom i gang\rHer finner du veiledning for hvordan du bruker designsystemet i andre løsninger, og hvordan du jobber med videreutvikling av nye komponenter i designsystemet.\n\r\rFrontend retningslinjer\rFor å få en felles forståelse av \u0026#34;best practice\u0026#34; for frontend-utvikling i Altinn har vi samlet noen regler for Javascript og CSS, samt utilities-klassene vi opererer med\n\r\rCSS Utilities\rI utgangspunktet skal kun de fargene som er presentert her brukes. Hvis nye farger blir implementert skal dette gås opp med ansvarlig designer.\n\r\rFont og tekststørrelser\rAll tekst på Altinn er satt med fonten ‘DIN’ i fire ulike varianter: Light, Regular, Medium og Bold. \r\rGrid og layout\rAltinn’s responsive brukergrensesnitt er basert på en 12-kolonners grid layout, samt et sett definerte avstander som tar utgangspunkt i 12px som base.\n\r\rIkonbruk\rIkonene er satt sammen til en font ved hjelp av verktøyet \u0026#34;FortAwesome\u0026#34;.\n\r\rUniversell utforming\rGod tilgjengelighet kan hjelpe mennesker med funksjonshemninger å oppfatte innholdet vårt på en meningsfull måte. Det er flere ting vi kan gjøre, men det første og viktigste er å skrive semantisk god HTML.\n\r\rNettleserstøtte\rAltinn støtter de nettleserne og operativsystemene som er mest anvendt av våre brukere. Vi tester ikke utdaterte eller ikke-supporterte versjoner av nettlesere.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/frontend/",
	"title": "Frontend",
	"tags": ["altinn-apps"],
	"description": "Description of the optional app frontend created in Altinn Studio and that is deployed to Altinn Apps.",
	"content": "A App created in Altinn Studio can have a optional frontend to allow end user use API from web browser.\nThis frontend is a React based SPA (Singe Page Application) that uses configuration to render based settings for a given application.\nUI rendering The UI-Render functionality in App Frontend render the UI based on configuration set in Altinn Studio.\nUI-Components The supported UI-components can be seen here\nTheming In the future Altinn Apps will support theming making it possible to have different style on the App.\nSee epic for this issue on Github.\nUI Layout In the future Altinn Apps will support different types of layout. Now the support is limited to one page UI that is mobile friendly.\nSee epic for this issue on Github\nUI logic As part of designing UI, there can be defined UI-logic that do stuff dynamic rendering (hide or show parts of ui based on input or other parameters) or update data.\nCustom Navigation In the future the App will support different types of navigation to See epic for this issue on Github\nTranslation In the future the App will support having multiple languages in a App See issue for this on Github\nPages In the future the App will support having ui over multiple pages See issue for this on Github\nOn Github you can find all issues related to App-Frontend.\nCustom Frontend In the future it is possible that Altinn Studio will support having a frontend that is costum application created by the developer. This could be a frontend based on any javascript based frameworks like Angular,\nSee Github for issue\n"
},
{
	"uri": "https://docs.altinn.studio/tags/frontend/",
	"title": "frontend",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/requirements/functional/",
	"title": "Functional Requirements",
	"tags": ["architecture"],
	"description": "Functional requirements can be important to the architecture decisions.",
	"content": "The functional requirements is extensive and is written as user stories. A good starting point is to look at issue 1337 at GitHub to get an overview of the required functionality.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/",
	"title": "Functionality in Designer",
	"tags": [],
	"description": "The designer can been seen as a collection of different editors specialized to create and edit different aspects of an application.",
	"content": "This aspects are controlled by code and configurations that is stored in source control in Altinn Studio Repos.\n\rBuilding and configuring apps\rAltinn Studio can been seen as a collection of different editors or applications specialized to create and edit different aspects of an Altinn Studio app.\n\r\rDashboard\rThe Dashboard in Altinn Studio gives the developer full overview over their apps.\n\r\rApp Deployment\rAltinn Studio will let the developer deploy apps to all enviroments without any manuel steps.\n\r\rVersion Control\rIn Altinn Studio a developer can perform version control operation on the source code for the app\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/functional/",
	"title": "Functionality in Repos",
	"tags": ["altinn-repos"],
	"description": "Funksjonalitet for lagring og versjonering av tjenester i Git-repositories samt funksjonalitet for application lifecycle management.",
	"content": "\u0026ldquo;Altinn Repositories\u0026rdquo; er en frittstående Git versjonskontroll og Application Lifecycle Management-løsning, som både Designer, kodeeditorer og andre eksterne verktøy vil benytte som back-end og felles sted for å lagre og versjonere tjenestene som utvikles.\nRepositories har et GitHub-lignende brukergrensesnitt og både Git og REST-baserte tekniske grensesnitt.\nDet vil være en omfattende jobb å forsøke å utvikle en Git + ALM løsning på egen hånd, ref. all funksjonaliteten som behøves.\nHeldigvis finnes det flere open source \u0026ldquo;GitHub-kloner\u0026rdquo; som vi kan benytte, og blant dem virker Gitea å være mest lovende (uttales som /ɡɪ’ti:/ - \u0026ldquo;gitty\u0026rdquo;). Bilder fra Gitea benyttes som eksempler videre i denne dokumentasjonen.\nFunksjonalitet i \u0026ldquo;Repositories\u0026rdquo; Repositories inneholder et repository med versjonerte filer for hver 3.0-tjeneste. Eksempel på typer filer som en \u0026ldquo;3.0-tjeneste\u0026rdquo; vil kunne bestå av er kode, tester, web-komponenter, layouts og stiler, oversettinger, arbeidsflyt og konfigurasjon.\nRepositories vil tilby funksjonalitet rundt den enkelte 3.0-tjeneste, og eksponere funksjonaliteten via både brukergrensesnitt og et REST-API som er en klone av GitHub sitt v3 API-format. Dette er positivt da det finnes andre verktøy som også støtter dette API-formatet, og da det kan forenkle det å kunne erstatte Gitea som back-end med andre liknende Git-systemer.\n\n3.0 Tjeneste Repository som representerer en \u0026ldquo;3.0-tjeneste\u0026rdquo;, aka app, og inneholder alle filer som tjenesten består av.\nHver utgave av en tjeneste vil leve i sin egen mappe, slik at ett repository kan inneholde èn eller flere utgaver av den samme tjenesten.\nRepository management Håndtering av repositories er en kjerneaktivitet, da hver tjeneste som utvikles vil lagres i sitt eget repository.\n Create/delete repository Link to repository Rename repository Fork repository  Muliggjør at man kan ha et \u0026ldquo;master\u0026rdquo;-repository med felles tjenester som flere andre kan benytte, slik som dagens \u0026ldquo;master-tjenester\u0026rdquo; bare mye kraftigere Muliggjør også at utviklere kan lage som egen kopi og teste ut nye muligheter og løsninger på sitt eget område uten å påvirke originalen   List repositories Download/upload files Download repo Create files and folders Read/edit files Rename files Delete files View raw file Link to file  Dokumentering Det er viktig å ha god støtte for å dokumentere tjenestene man utvikler, slik at det vil være enkelt for andre personer på teamet å bidra. Det er derfor ønskelig å ha innebygd Wiki-funksjonalitet med støtte for å editere i markdown, slik som i Altinn docs og AltinnPedia.\n Wiki  Add/edit/delete pages Markdown editing Link to specific wiki page Support for other external wikis Emojis   Markdown editing  Preview Fullscreen Side-by-side    Versjonering Hver eneste fil som en 3.0-tjeneste består av skal ha full versjonshistorikk, uavhengig av om man jobber mot filene via Designer eller eksternt og distribuert/lokalt i en kodeeditor på egen maskin. Repositories sitt versjonskontrollsystem, som er basert på Git, er laget nettopp med tanke på dette.\n Version history of all files, artifacts, code and configuration  Link to each change with a unique id Link to each changed file Link to who did the change Highlight the last change done in the repository Time of change Comments/messages   Diff between versions  Release management En svært viktig egenskap når man utvikler programvare (noe som 3.0-tjenester er) er å kunne tagge ulike versjoner, og kunne gå tilbake og teste eller patche en tidligere versjon hvis man ønsker det. Det er også viktig å kunne se alt som har endret seg mellom versjonene.\nSiden Git benyttes for versjonering, så vil en release/tag som opprettes peke på en eksakt versjon av hver eneste fil som en 3.0-tjeneste består av, og man kan enkelt se hva som er endret.\n Create tags for the 3.0 app Link to tags Create/delete releases Link to releases Marking of pre-releases Time of release creation User that triggered the release Download zipped files of release Browse content of a given tag/release  QA En QA-prosess for godkjenning av endringer basert på branching og pull requests, vil for større teams kunne være mulig. Dette er i tråd med hvordan programvare utvikles, inkludert selve Altinn.\nBacklog management Som for all annen programvareutvikling, så vil hver 3.0-tjeneste typisk ha en egen backlog med bugs, forbedringer, fremtidige features, etc. som tjenesteutviklerne vil jobbe mot. Dette er en sentral del av Application Lifecycle Management.\n Create/close issues pr. 3.0 app  Time of creation Who   Filter issues by open/closed Add labels  Filter issues by label   Assign to milestone  Filter issues by milestone   Assign to user  Filter issues by assignee   Markdown editing Discussions Add files to issue Notifications when issues change Issues search List issues  Org management Organisasjoner er tjenesteeiere, men i 3.0 er det ikke noe i veien for at brukere også kan utvikle tjenester. I en organisasjon så kan man gi tilganger til brukere, og man kan opprette teams med tilgang til en eller flere 3.0-tjenester.\nDet å håndtere organisasjonen, som alt annet, skal være 100% selvbetjent.\n Create/delete organisations  Name/shortname URL Logo   List organisations Link to organisation Create repository for organisation ref. repository management Add/remove teams in organisation List teams in organisation Add/remove users in organisation List all users in organisation Add/remove users in teams List users in teams  Brukerstyring Brukerne i denne sammenheng er tjenesteutvklerne. Det å håndtere organisasjonen skal være helt selvbetjent.\n Add/remove users Name Avatar Add/remove users to/from teams \u0026ldquo;Starring\u0026rdquo; of favorite repositories List of user repositories (including forks) Activity log for user Workspace for user (dette er veldig viktig, betyr at tjenesteutviklere kan \u0026ldquo;leke seg\u0026rdquo; på sitt eget område)  I første omgang (MVP) vil tjenesteeier (org-admin) legge til alle sine brukere i gruppen \u0026ldquo;owner\u0026rdquo; slik at de får tilgang til å opprette repositories (tjenester). Gruppen \u0026ldquo;owner\u0026rdquo; gir vide fullmakter på organisasjonsnivå (dvs tjenesteeiernivå), så på sikt vil det implementeres mer granulert tilgangsstyring.\nSøke Søk er viktig for å finne frem, og skal være bygd inn i løsningen.\n Repositories Issues Edits Users Organisations  Tilgangsstyring Det skal være mulig å styre tilgang til repositories, les/skriv/admin, teams, brukere, samt opprette private repos.\n Access to 3.0 apps (read/write) Access to orgs Users access Private/public app-repos Administrator AM/AD-integration API access  Trigge hendelser I dagens hverdag, med bruk av Slack og andre systemer ifbm. utvikling, så er det viktig at \u0026ldquo;Repositories\u0026rdquo; kan trigge hendelser i andre systemer, f.eks. poste til en Slack-kanal når en endring skjer i en 3.0-tjeneste.\n Trigger events at org-level Trigger events at 3.0 app-level  Logge inn Tjenesteutviklere og andre interessenter skal kunne logge inn og få tilgang til organisasjoner og 3.0-tjenester.\n Login page CAPTCHA? Forgot password? 2-factor auth External authentication  Sende varslinger  Send notifications to users based on events or mentions User can control the notifications to receive Users can follow other users and subscripe to issues  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/git/",
	"title": "Git",
	"tags": ["tech", "git"],
	"description": "Git is a distributed version-control system for tracking changes in source code during software development.",
	"content": "Everything we make is stored in Git repositories in GitHub.\nEvery app you make is stored in Git repositories in Altinn Studio.\nAltinn ❤️ Git.\nLinks  https://git-scm.com https://en.wikipedia.org/wiki/Git https://code.visualstudio.com/docs/editor/versioncontrol#_git-support  "
},
{
	"uri": "https://docs.altinn.studio/tags/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/gitea/",
	"title": "Gitea",
	"tags": ["development", "gitea"],
	"description": "How to customize and configure Gitea.",
	"content": "Gitea is used for version control of the apps developed in Altinn Studio.\nCustomize The documentation on how to customize Gitea can be found here.\nTemplates The user interface of Gitea can be customized to match your application needs. You can copy the templates from Gitea\u0026rsquo;s GitHub.\nFor example the default login page looks like this\nIt\u0026rsquo;s customized to look like this\nFollow these steps to change any user interface of Gitea. Here example is given for login:\n Copy the login template from Gitea\u0026rsquo;s GitHub Paste it in your application in the same folder structure as Gitea. Edit the file. You can change the html tags and introduce new CSS or add new text or image without affecting the logic. Update the Docker image to use these templates.  Now, the new login template will be taken in use.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/gitea/",
	"title": "Gitea",
	"tags": ["tech", "gitea", "git", "repos"],
	"description": "Gitea is a self-hosted Git service similar to GitHub. It is used as the repository solution in Altinn Studio Repos.",
	"content": "Gitea is the product that is powering Altinn Studio Repos.\nLinks  https://gitea.io https://github.com/go-gitea/gitea https://hub.docker.com/r/gitea/gitea  "
},
{
	"uri": "https://docs.altinn.studio/tags/gitea/",
	"title": "gitea",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/go/",
	"title": "Go",
	"tags": ["tech", "programming"],
	"description": "Server side programming language.",
	"content": "Go is the programming language that has been used for developing many of the products we use in Altinn Studio, such as Gitea, Kubernetes, Docker, Traefik, Helm, Grafana, Prometheus, Terraform and Hugo.\nLinks  https://golang.org https://github.com/golang/go https://hub.docker.com/_/golang https://code.visualstudio.com/docs/languages/go  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/grafana/",
	"title": "Grafana",
	"tags": ["tech", "monitoring"],
	"description": "Grafana is an open platform for analytics and monitoring.",
	"content": "Grafana is an open platform for analytics and monitoring that we use when monitoring Altinn Studio.\nLinks  https://grafana.com https://github.com/grafana/grafana  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/",
	"title": "Handbook",
	"tags": ["development"],
	"description": "Development handbook for Altinn Studio",
	"content": "The development handbook should provide all basic information needed to get started with development on Altinn Studio. It should alto contain the information needed to make sure all developers write their code in a consistent way.\nThe development handbook should work as reference material, but it should also be possible to read throught the whole handbook in a logical order so that new developers quickly get up and running.\nThe development handbook is a dynamic material and everybody should feel free to extend or correct articles when needed.\n\rAzure Dev Spaces\rGuidelines for deploying storage\n\r\rAzure DevOps\rGuidelines for working with resources in Azure DevOps\n\r\rBack-end\rCoding guidelines for back-end\n\r\rCheat Sheet\rQucik guide for different commands\n\r\rCosmos DB\rGeneral guidelines and best practice for working with Cosmos DB\n\r\rDeployment\rGuidelines for deploying\n\r\rFront-end\rCoding guidelines for front-end\n\r\rGeneral\rGeneral coding guidelines\n\r\rGetting started\rInformation about how to get started\n\r\rGit\rInformation about version control with Git\n\r\rNaming Conventions\rNaming guidelines for Altinn Studio development\n\r\rNginx loadbalancing in studio\rInformation about routing with nginx\n\r\rPostgreSQL\rSetting up PostgreSQL for local development\n\r\rRESTful APIs (Representation State Transfer)\rGuidelines for designing REST apis for microservices in Altinn\n\r\rRouting\rInformation about routing\n\r\rSecure DevOps\rSecurity is an important concern in all the phases of the DevOps cycle for Altinn 3.\n\r\rTest\rCoding guidelines for tests\n\r\rGitea\rHow to customize and configure Gitea.\n\r\rReusable resources\rA important feature with Altinn Studio is that it should promote developers to create reusable resources that can be reused by other developers.\n\r\rTheming and styling\rSolution for theming and styling conventions.\n\r\rTroubleshooting\rTroubleshooting of Altinn Studio.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/helm/",
	"title": "Helm",
	"tags": ["tech", "containers"],
	"description": "The Kubernetes Package Manager.",
	"content": "What is helm? Helm is a kubernetes resource templating tool. Where all the defined kubernetes resources are deployed with combinations of templates and values. Therefore it is called the kubernetes package manager.\nA helm-package, or a helm-chart is a folder with a set file-structure.\n+-- altinn-designer | +-- templates | | +-- tests | | | +-- test-connection.yaml | | +-- NOTES.txt | | +-- _helpers.tpl | | +-- deployment.yaml | | +-- service.yaml | | +-- ingress.yaml (deleted in altinn studio, since we don\u0026#39;t use ingress. But an ingress template is included in a default helm-chart) | +-- .helmignore | +-- Chart.yaml | +-- values.yaml The Chart.yaml-file contains information about the chart, like the name, version and maintainers. The values.yaml-file contains different values. These values are accessable in the templates. So different environment variables can be defined in the values. Values can also be overwritten when running a upgrade or install of the chart.\nThe files in the templates-folder becomes populated with the values, and sent to the kubernetes clusters as the name of the files. So deployment.yaml should create a deployment in kubernetes. The same fore service.yaml and ingress.yaml.\n_helpers.tpl can be used to define functions to get release names, concatinated with other info. NOTES.txt is the info printed in the cli after an install or upgrade of an release, usually used to give usefull commands the user can run to access the pods.\nHelm usage in Altinn Studio We use helm to deploy our builds to the kubernetes cluster, both in development-, production- and SBL-cluster. Azure Dev Ops pipelines have support for helm, so this makes deploying to development trigger everytime we merge some code into master.\nLinks  https://helm.sh https://github.com/helm/helm  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/helptext/",
	"title": "Configure help texts",
	"tags": [],
	"description": "Help developer configure help texts for components",
	"content": "Help texts are small text snippets that provide a brief explaination of what the users are supposed to fill in to the fields that they describe.\nThe language-keys that point to the help text is defined in the form layout json file.\nIn your repo under the folder App/ui there is a FormLayout.json-file. The contents might be:\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;616071dc-90b1-4ce5-8d18-492844828a41\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Header\u0026#34;, \u0026#34;componentType\u0026#34;: 0, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;ServiceName\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;fac3c047-efe1-49da-8189-da7c536a4edd\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;componentType\u0026#34;: 2, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;21771.RapporteringsenhetNavndatadef21771.Label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;21771.RapporteringsenhetNavndatadef21771.Label\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;generellInformasjongrp2581.avgiftspliktiggrp50.rapporteringsenhetNavndatadef21771.value\u0026#34; }, \u0026#34;required\u0026#34;: true, \u0026#34;readOnly\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;08d707a9-2475-4d23-bf76-f209fb434ec2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TextArea\u0026#34;, \u0026#34;componentType\u0026#34;: 7, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026#34;, }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;avgiftspostergrp2577.posteneIOppgavengrp5639.tilleggsopplysningergrp197.omsetningsoppgaverTilleggsopplysningerdatadef19684.value\u0026#34; }, \u0026#34;required\u0026#34;: false, \u0026#34;readOnly\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;bd6589b6-e2ab-49ba-b39a-dd3f8b63e5de\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Button\u0026#34;, \u0026#34;componentType\u0026#34;: 9, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Send inn\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;textResourceId\u0026#34;: \u0026#34;Standard.Button.Button\u0026#34;, \u0026#34;customType\u0026#34;: \u0026#34;Standard\u0026#34; } ] } } If you would like one of these components to have a help text you will need to\n Insert a key into text resources, under the tab \u0026ldquo;Language\u0026rdquo;  Remember to fill out all the fields, it will not let you save if you have fields that are empty.   Open the FormLayout.json-file Insert a new text resource binding with the key \u0026ldquo;help\u0026rdquo; and the value to be the name of the Language resource.  Example of how it looks after adding help text:\n{ \u0026#34;data\u0026#34;: { \u0026#34;layout\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;616071dc-90b1-4ce5-8d18-492844828a41\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Header\u0026#34;, \u0026#34;componentType\u0026#34;: 0, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;ServiceName\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {} }, { \u0026#34;id\u0026#34;: \u0026#34;fac3c047-efe1-49da-8189-da7c536a4edd\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Input\u0026#34;, \u0026#34;componentType\u0026#34;: 2, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;21771.RapporteringsenhetNavndatadef21771.Label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;21771.RapporteringsenhetNavndatadef21771.Label\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;generellInformasjongrp2581.avgiftspliktiggrp50.rapporteringsenhetNavndatadef21771.value\u0026#34; }, \u0026#34;required\u0026#34;: true, \u0026#34;readOnly\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;08d707a9-2475-4d23-bf76-f209fb434ec2\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TextArea\u0026#34;, \u0026#34;componentType\u0026#34;: 7, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;19684.OmsetningsoppgaverTilleggsopplysningerdatadef19684.Label\u0026#34;, \u0026#34;help\u0026#34;: \u0026#34;Skjema.TilleggsOpplysninger.Hjelpetext\u0026#34;  }, \u0026#34;dataModelBindings\u0026#34;: { \u0026#34;simpleBinding\u0026#34;: \u0026#34;avgiftspostergrp2577.posteneIOppgavengrp5639.tilleggsopplysningergrp197.omsetningsoppgaverTilleggsopplysningerdatadef19684.value\u0026#34; }, \u0026#34;required\u0026#34;: false, \u0026#34;readOnly\u0026#34;: false }, { \u0026#34;id\u0026#34;: \u0026#34;bd6589b6-e2ab-49ba-b39a-dd3f8b63e5de\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Button\u0026#34;, \u0026#34;componentType\u0026#34;: 9, \u0026#34;textResourceBindings\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Send inn\u0026#34; }, \u0026#34;dataModelBindings\u0026#34;: {}, \u0026#34;textResourceId\u0026#34;: \u0026#34;Standard.Button.Button\u0026#34;, \u0026#34;customType\u0026#34;: \u0026#34;Standard\u0026#34; } ] } } "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/hugo/",
	"title": "Hugo",
	"tags": ["tech", "docs", "markdown"],
	"description": "Static site generator used for our documentation.",
	"content": "Hugo is a static site generator that we use for generating https://docs.altinn.studio and https://altinn.github.io/docs from markdown.\nAltinn ❤️ Hugo.\nLinks  https://gohugo.io https://github.com/altinn/docs https://github.com/altinn/altinn-studio-docs https://github.com/altinn/hugo-theme-altinn  "
},
{
	"uri": "https://docs.altinn.studio/design/illustrasjoner/",
	"title": "Illustrasjoner",
	"tags": [],
	"description": "Illustrasjonene er tegnet av illustratør Sandra Blikås. De er spesialtilpasset grid, layout og fargepalett. Motivene viser hverdagssituasjoner som er tolkninger av sentrale tema i Altinns innhold.",
	"content": "Retningslinjer for illustrasjonsbruk  Illustrasjonene på Altinn er en vesentlig del av altinns visuelle identitet på nett. Illustrasjonene skal brukes sparsomt og kun der de gir verdi. Det skal ikke brukes andre «redaksjonelle» illustrasjoner enn disse på altinn.no. Der det gir vesentlig verdi kan det utvikles mer funksjonelle illustrasjoner som infografikk el. Slik illustrasjoner skal bygge på vår visuelle identitet og utviklingen bør skje i samråd med UX-ansvarlig. De store illustrasjonene brukes på forsider og fremhevede artikler. Mindre illustrasjoner brukes primært på navigasjonssider og informasjonssider for å myke opp innholdet. All endring av eksisterende illustrasjoner, bruksendring eller utvikling av nye illustrasjoner skal skje gjennom UX-ansvarlig i Altinn.  Eksempel på bruk Illustrasjoner på Altinn skal brukes enten som bakgrunnsillustrasjon, eller som illustrasjoner ved siden av tekst\nTilgjengelige illustrasjoner Foreløpig har vi følgende illustrasjoner tilgjengelig:\nForside / Logg inn Hjelpesenter Starte og drive Arbeidsforhold Regnskap og revisjon Skatt og avgift "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/infrastructure/",
	"title": "Infrastructure components",
	"tags": ["architecture", "infrastructure"],
	"description": "Altinn 3 is hosted in public cloud, and all infrastructure components are cloud based.",
	"content": "Altinn 3 consists of three different technical solutions to make a complete application development platform.\nThe diagram below shows an simplified overview over the infrastructure components.\nDownload as Visio\nAltinn 3 is currently deployed to Microsoft Azure. This does not mean that Altinn 3 can\u0026rsquo;t be deployed to other cloud providers.\nBelow you find details about the different cloud components used.\n\n\rCompute components\rCompute components gives processor power to applications and software\n\r\rNetwork componentens\rAll networking infrastructure is located in Azure.\n\r\rStorage componentens\rAltinn 3 uses different types of storage components.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/infrastructure/",
	"title": "infrastructure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/platformoperations/infrastructuremgmt/",
	"title": "Infrastructure management",
	"tags": ["architecture", "infrastructure", "devops"],
	"description": "For a platform like Altinn 3, it is important to have good tools and processes when it comes to configuration and management of infrastructure.",
	"content": "Over time it is expected that the Altinn 3 platform would consist of hundreds of Kubernetes clusters and other cloud resources.\nTo be able to manage and configure all these cloud resources the architecture that is selected has several capabilities enabled with help of various tools and processes.\nInfrastructure Configuration and managment Capabilities Tools \u0026amp; components For all solutions of Altinn 3 (Altinn Apps, Altinn Platform and Altinn Studio) we use some common tools to configure and manage infrastructure.\nCurrently all resources are located in Microsoft Azure.\nWe use Terraform to define the infrastructure as code. Terraform allows to write declarative configuration files defining the infrastructure we use in the different solutions.\nTerraform follow the principle of \u0026ldquo;desired state\u0026rdquo;. Configuration files describe to Terraform the components needed to run the different solutions in Altinn 3.\nTerraform generates an execution plan describing what it will do to reach the desired state, and then executes it to build the described infrastructure.\nAs the configuration changes, Terraform is able to determine what changed and create incremental execution plans which can be applied.\nThis is crucial for the Altinn DevOps team to being able handle an infrastrucre at this scale.\nWe use the Terraform Azure Provider that allows lifecycle management of Microsoft Azure using the Azure Resource Manager APIs. This is a provider maintained by the Azure team at Microsoft and the Terraform team at HashiCorp.\nThe resource ARM Apis are used to verify state of infrastucture and perform changes.\nWe use Azure Devops Repos to store our Terraform scripts for the different solutions. We use Azure Devops Pipelines to run the Terraform scripts.\nProvision of new environemnts Altinn Apps Each org have their own Altinn Apps environment both for test and production. When a org sign up for using Altinn 3 the DevOps team will provision a Altinn Apps environment for that organization.\n K8 Cluster with the defined set of nodes and node size Storage account for org used to store data from apps Container register for apps created in Altinn Studio KeyVault for secrets used by apps Network setup Kubernetes wrapper for monitoring status of the different applications in the apps cluster Traefik loadbalancer  Altinn Platform Each Altinn 3 environment (production, performance test, test, acceptence test) has their own Altinn Platform solution.\nThis is based around a Kubernetes cluster and serveral components running in this.\nThe following cloud components is configured\n Kubernetes Cluster Network API managment Platform storage PostgresSQL server Cosmos DB Traefik loadbalancer  Altinn Studio For altinn studio we currently have 3 environments. Staging, dev and production.\nEach environments is set up with help of Terraform\nUpdating environments Patching environments Kured\nRunning Terrafrom scripts We run all Terraform scripts from Azure DevOps Pipelines\n"
},
{
	"uri": "https://docs.altinn.studio/tags/ingress/",
	"title": "ingress",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ingress-routes/",
	"title": "ingress routes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/installation/",
	"title": "installation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/instantiationhandler/",
	"title": "InstansiationHandler.cs",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for InstansiationHandler.",
	"content": "Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes\rvidere med i MVP.\r\rOverordnet \u0026lsquo;InstansiationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som hånderer instansiering av en tjeneste.\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom InstansiationHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/integration/",
	"title": "Integration &amp; Data Transport Capabilties",
	"tags": ["architecture"],
	"description": "The most important capability for a platform like Altinn 3 is the integration capabilites.",
	"content": "In many ways you can say that Altinn is a integration hub for communication between the citizens, the businesses and the public entities in Norway.\nData flows between the different actors using Altinns.\n Citizens receives data from the public agencies and sends data to the public agencies Business receives data from the public agencies and sends data to the public agencies Public agencies can share data with other public agencies ++  End-point enablement Applications created in Altinn Studio has build in API for communication with the different actors. In addition application developers can add their custom APIS.\nThe different platform components exposes API to applications and external parties.\nAll this is possible because the backend framework let developers create and expose APIS. This also include app developers that create applications in Altinn Studio.\nSee Swagger definition for Platform for details about exposed API.\nIn the same way the different applications and components consumes APIS from other sources both inside the Altinn 3 platform solutions and external sources.\nThe APIS exposed as standard from Apps and platform is described here\nPublish \u0026amp; Subscribe A important change for Altinn moving to the new platform is we change to an event driven architecture.\nAs part of the Altinn 3 platform it is created a Events component that apps and other can publish their events and other can subscribe to.\nThis is in detailed explained under Events capabilities\nTransport \u0026amp; Delivery The different solutions of the platform support transport \u0026amp; delivery of the data.\nBy default the clients are the active parts for transporting data. Agencies needs to push data to Altinn when it need to send data to other actors, and need to pull data when receiving data.\nThe only active push from Altinn is when Altinn Platform Events component send events to subscribers.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/integration/",
	"title": "Integration Components",
	"tags": ["architecture"],
	"description": "Integration components are in charge of enabling communications between systems.",
	"content": "Gateway Software The gateway used is Azure Application Gateway. This is responsible for forwarding traffic to Api management or direct to the different Kubernetes Clusters.\nRead more about Azure Application Gateway.\nApi Management \u0026amp; Gateway Sw Azure API managmenet is used as API management. This is a managed service.\nRead more about Azure API Management.\nData Access Libraries We use various libraries to interact with different data stores.\nIntegration Libraries We use integration libraries to interact with different external and internal components.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/issues/",
	"title": "issues",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/jest/",
	"title": "Jest",
	"tags": ["tech", "frontend", "test"],
	"description": "JavaScript Testing Framework.",
	"content": "\u0026ldquo;Jest is a delightful JavaScript Testing Framework with a focus on simplicity.\u0026rdquo;\nJest testing framework is used for front-end testing. You can read more about how to test with Jest here.\nLinks  https://jestjs.io https://github.com/facebook/jest  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/security/jwtcookie/",
	"title": "JWTCookieAuthentication",
	"tags": ["architecture", "security"],
	"description": "This is the description of JWTCookieAuthentication.",
	"content": "JWTCookieAuthentication is a ASP.NET Core authentication service created for supporting Json Web Tokens (JWT) as bearer tokens and JWT in Cookies. It is based on JWTBearer\nThis is created for scenarios where you have need for APIs that will be accessed from system using bearer tokens and from Single Page Applications (SPA) where you want to protect the JWT from this SPA. (XSS attacks). When JWT is put in a http only cookie it is not accessible from the SPA and can\u0026rsquo;t be stolen by malicous javascript running in the browser.\nThis is created as a seperate C# Project and published as a Nuget Package here.\nFeatures Consumer  Support Verification of JWT Tokens as bearer tokens Support Verification of JWT Tokens from cookie Configureble name of cookie used Automatic detection if request contains Authorization bearer token or JWT in cookie Uses Microsoft.IdentityModel.Tokens for verification and generation. Uses OpenID connect well known endpoint to retrieve the JSON Web Key (JWK) used to sign JWT from the JSON Web Key Set Support rotating of JWK (TODO)  Features ID Provider  Support Generation of JWT Tokens as bearer tokens Support Generation of JWT Tokens inside Cookies Configureble name of cookie used Configurable Signing Certitcate Uses standard JWT Library for verification and generation. Uses OpenID connect well known endpoint to retrieve the JSON Web Key (JWK) used to sign JWT from the JSON Web Key Set Support rotating of JWK (TODO)  How To Configure JWTCookieAuthentication Configuration for consumers // Configure Authentication // Use [Authorize] to require login on MVC Controller Actions services.AddAuthentication(JwtCookieDefaults.AuthenticationScheme) .AddJwtCookie(options =\u0026gt; { options.TokenValidationParameters = new TokenValidationParameters { ValidateIssuerSigningKey = true, ValidateIssuer = false, ValidateAudience = false, RequireExpirationTime = true, ValidateLifetime = true }; options.Cookie.Domain = Configuration[\u0026#34;GeneralSettings:HostName\u0026#34;]; options.Cookie.Name = Services.Constants.General.RuntimeCookieName; options.MetadataAddress = Configuration[\u0026#34;AppSettings:OpenIdWellKnownEndpoint\u0026#34;]; if (_env.IsDevelopment()) { options.RequireHttpsMetadata = false; } }); Configuration for the identity provider The below configuration is relevant for the Identity Provider application.\n// Use [Authorize] to require login on MVC Controller Actions services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme) .AddJwtCookie(JwtCookieDefaults.AuthenticationScheme, options =\u0026gt; { options.ExpireTimeSpan = new TimeSpan(0, 30, 0); options.Cookie.Name = Common.Constants.General.RuntimeCookieName; }) How to get access to user information When a application is configured with JWTCookie authentication the information is available in httpContext about the user.\npublic static int GetUserId(HttpContext context) { int userId = 0; if (context.User != null) { foreach (Claim claim in context.User.Claims) { if (claim.Type.Equals(AltinnCoreClaimTypes.UserId)) { userId = Convert.ToInt32(claim.Value); } } } return userId; } "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/authentication/jwt-format/",
	"title": "JWT Format",
	"tags": ["architecture", "security"],
	"description": "Description of the JWT Format used in Altinn Studio, Altinn Platform and Altinn Apps.",
	"content": "JSON Web Token are an open, industry standard RFC 7519 method for representing claims securely between two parties and are choosen as the bearer of information about users and systems.\nThe format that is choosen for JWT tokens is RSA256. This is a asymetric algorithm where the Authentication component in Altinn Platform generates tokens based on a private key in a certificate, and everyone can validate the token with the public key.\nAltinn Platform and Altinn Apps support JWT tokens as bearer tokens in Authorization header and as JWT Tokens inside cookie.\nThe cookie will be used when users access application with a frontend in Altinn Apps (typical React application). The bearer token will be used when the user access throug mobile apps or external systems.\nThe below screenshot shows how a JWT Token can be verified at jwt.io\nClaims in token    Claim Description     UserId The internal Altinn userId for the authenticated user.   ssn The social security number.   PartyId    AuthenticationLevel The authentication level used when user logged in.   AuthenticationMethod The authentication method used when user logged in.   end user system Id The internal ID for end user system.   SystemOwnerPartyId The internal PartyID for system owner.    "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/known-issues/",
	"title": "Known issues",
	"tags": ["issues"],
	"description": "Description of errors and weaknesses in Altinn Studio that developers should know about.",
	"content": "See known issues on Github for latest updated list.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/react/architecture/",
	"title": "Kodearkitektur",
	"tags": ["tech", "frontend", "react"],
	"description": "Kodearkitektur for React og tilhørende teknologi",
	"content": "Bruk av Redux Store i Containere og Components. Kort oppsummert (TL;DR) Send \u0026ldquo;ID\u0026rdquo; eller andre identifikatorer via Props til komponenten og la komponenten hente data fra Redux Store.\nUtfordring (Why?) Hvis en del av Redux Store sendes som Props så vil komponenten re-rendres ved endringer av denne Prop/Store. Det er ønskelig at komponenter ikke rendrer unødvendig.\nRe-rendring trigges av…  Endring av Props. Endring av State som endrer Props.  Kilder  Redux best practices Common pitfalls  Filtrering av Redux Store i mapStateToProps() ved help av Selector Kort oppsummert (TL;DR) Bruk Memoized Selector for å filtrere Redux Store til Props når Redux Store er stor.\nUtfordring (Why?) Hver gang (en del av) Redux Store endrer seg vil funksjoner som filtrerer ut deler av Redux Store kjøres. Hvis Redux Store (state tree) er stor (mange endringer) eller funksjonen er krevende kan det føre til ytelsesproblemer.\nLøsningen En Selector funksjon, med bruk av \u0026ldquo;reduxjs/reselect\u0026rdquo; vil kun kjøres når en definert del av Redux Store endres (eks \u0026ldquo;state.del.underdel\u0026rdquo;).\nKilder  Reselect Comparing shouldComponentUpdate() and Reselect  Eksempel Selector Dette er en enkel Selector uten mye logikk og filtrering. Jo større logikk i \u0026ldquo;filtreringen\u0026rdquo; jo mer \u0026ldquo;sparer\u0026rdquo; man i ytelse.\nimport { createSelector } from \u0026#39;reselect\u0026#39;; /** * Reselect version */ const formDataSelector = (state: any, providedProps: any) =\u0026gt; { console.log(\u0026#39;formdata selector\u0026#39;, providedProps.id); return state.formFiller.formData; }; const dataModelBindingSelector = (state: any, providedProps: any) =\u0026gt; { console.log(\u0026#39;datamodelBindingSelector\u0026#39;); return state.formDesigner.layout.components[providedProps.id].dataModelBinding; }; const getFormData = () =\u0026gt; { console.log(\u0026#39;getFormData() is trigggered, selector is created\u0026#39;); return createSelector( [formDataSelector, dataModelBindingSelector], (formData: any, dataModelBinding: any) =\u0026gt; { console.log(\u0026#39;ouput selector running\u0026#39;, formData); if (!formData) return \u0026#39;\u0026#39;; if (!formData[dataModelBinding]) return \u0026#39;\u0026#39;; return formData[dataModelBinding]; }, ); }; export const makeGetFormDataSelector = getFormData; // Alternativt en enda enklere variant, som er implementert p.t.  import { createSelector } from \u0026#39;reselect\u0026#39;; const formDataSelector = (state: any, providedProps: any) =\u0026gt; { return state.formFiller.formData[state.formDesigner.layout.components[providedProps.id].dataModelBinding]; }; const getFormData = () =\u0026gt; { return createSelector( [formDataSelector], (formData: any) =\u0026gt; { if (!formData) return \u0026#39;\u0026#39;; return formData; }, ); }; export const makeGetFormDataSelector = getFormData; Implementasjon i mapStateToProps const makeMapStateToProps = () =\u0026gt; { const GetFormDataSelector = makeGetFormDataSelector(); const mapStateToProps = (state: IAppState, props: IProvidedProps): IFormElementProps =\u0026gt; ({ id: props.id, formData: GetFormDataSelector(state, props), }); return mapStateToProps; }; export const FormComponentWrapper = connect(makeMapStateToProps)(FormComponent); makeMapStateToProps implementeres slik at Selectoren kan gjenbrukes på tvers av flere komponenter.\nHigher-Order Components Higher-Order component er en funksjon som tar imot en component og returnerer et nytt komponent med ekstra funksjoner, eller ekstra data. Et eksempel på dette er connect-funksjonen fra \u0026ldquo;redux\u0026rdquo;, som tar imot en funksjon som velger redux-state data, og en komponent som disse dataene skal sendes til.\nHvorfor? Ved å wrappe induviduelle komponenter i en higher-order component, vil vi få enklere kode mtp. at en funksjon håndterer endringer i skjemaet på kun en komponent, i motsetning til å ha en funksjon som håndterer alle endringer i skjemaet. Dette vil også gi tredjeparts-utviklere en enklere måte å skrive egne funksjoner for håndtering av endringer i deres komponenter.\nEksempel på bruk i Altinn Studio Når bruker lager en tjeneste med 3. parts komponenter vil vi wrappe disse komponentene i en Higher Order Component som gir den en callback funksjon som tar imot data som komponenten har, og kjøre en redux-action som oppdaterer data i redux-state. Uten at utvikleren av 3. parts komponenten må sette seg inn i hvilke actions som skal kjøres. Dette gir også bedre mulighet for å gjennbruke 3. parts komponenter.\nEksempel på Higher Order Component const FormComponentWrapper = (WrappedComponent, ...) =\u0026gt; { // Feel free to do anything that will enhance the components properties  // Return a react component \treturn class extends React.Component { // Add functions for handling changing of data \thandleDataChange = (dataModelBinding, data) =\u0026gt; { // fire off an action for adding the changed data to redux state \t} render() { return( \u0026lt;WrappedComponent onFormDataChange={this.handleDataChange} {...props}/\u0026gt; ); } } } Kilder  Higher-Order component  Normalized Redux Store Kort oppsummert (TL;DR)  Hver datatype får sin egen \u0026ldquo;tabell\u0026rdquo; i State. Hver \u0026ldquo;tabell\u0026rdquo; skal lagre individuelle \u0026ldquo;data\u0026rdquo; som objekter, med IDer som nøkler og \u0026ldquo;dataen\u0026rdquo; som verdi. Referansene til de individuelle \u0026ldquo;dataene\u0026rdquo; lagres ved å lagre IDene. Array med IDene brukes for å indikere sortering.  Utfordring (Why?)  Kompliserte reducers for å oppdatere nøstet state struktur. Unødvendig re-rendering grunnet oppdatering av nøstede objekter.  Eksempel { posts : { byId : { \u0026#34;post1\u0026#34; : { id : \u0026#34;post1\u0026#34;, author : \u0026#34;user1\u0026#34;, body : \u0026#34;......\u0026#34;, comments : [\u0026#34;comment1\u0026#34;, \u0026#34;comment2\u0026#34;] }, \u0026#34;post2\u0026#34; : { id : \u0026#34;post2\u0026#34;, author : \u0026#34;user2\u0026#34;, body : \u0026#34;......\u0026#34;, comments : [\u0026#34;comment3\u0026#34;, \u0026#34;comment4\u0026#34;, \u0026#34;comment5\u0026#34;] } }, allIds : [\u0026#34;post1\u0026#34;, \u0026#34;post2\u0026#34;] }, comments : { byId : { \u0026#34;comment1\u0026#34; : { id : \u0026#34;comment1\u0026#34;, author : \u0026#34;user2\u0026#34;, comment : \u0026#34;.....\u0026#34;, }, \u0026#34;comment2\u0026#34; : { id : \u0026#34;comment2\u0026#34;, author : \u0026#34;user3\u0026#34;, comment : \u0026#34;.....\u0026#34;, }, \u0026#34;comment3\u0026#34; : { id : \u0026#34;comment3\u0026#34;, author : \u0026#34;user3\u0026#34;, comment : \u0026#34;.....\u0026#34;, }, \u0026#34;comment4\u0026#34; : { id : \u0026#34;comment4\u0026#34;, author : \u0026#34;user1\u0026#34;, comment : \u0026#34;.....\u0026#34;, }, \u0026#34;comment5\u0026#34; : { id : \u0026#34;comment5\u0026#34;, author : \u0026#34;user3\u0026#34;, comment : \u0026#34;.....\u0026#34;, }, }, allIds : [\u0026#34;comment1\u0026#34;, \u0026#34;comment2\u0026#34;, \u0026#34;comment3\u0026#34;, \u0026#34;commment4\u0026#34;, \u0026#34;comment5\u0026#34;] }, users : { byId : { \u0026#34;user1\u0026#34; : { username : \u0026#34;user1\u0026#34;, name : \u0026#34;User 1\u0026#34;, }, \u0026#34;user2\u0026#34; : { username : \u0026#34;user2\u0026#34;, name : \u0026#34;User 2\u0026#34;, }, \u0026#34;user3\u0026#34; : { username : \u0026#34;user3\u0026#34;, name : \u0026#34;User 3\u0026#34;, } }, allIds : [\u0026#34;user1\u0026#34;, \u0026#34;user2\u0026#34;, \u0026#34;user3\u0026#34;] } } Kilder  Normalizing State Shape  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/oscloudplatform/kubernetes/",
	"title": "Kubernetes",
	"tags": ["architecture"],
	"description": "Kubernetes is a central part of the infrastructure in Altinn 3.",
	"content": "Kubernetes is choosen to orchestrate the containers in the different solutions. There are serveral Kubernetes Clusters involved.\nThe solution uses managed Kubernetes Clusters, Azure Kubernetes Services.\nSetup We use Azure CLI to setup the different Kubernetes Clusters. (Altinn Studio, Altinn Apps and Altinn Platform).\nThis include networking and node setup.\nManagement \u0026amp; monitoring From the Azure Portal we can manage and montitor the Kubernetes Clusters.\nNodes We can scale up and down Nodes.\nContainers We get monitor the number of containers and state of containers.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/kubernetes/",
	"title": "Kubernetes",
	"tags": ["tech", "containers"],
	"description": "Kubernetes is used to manage the docker containers.",
	"content": "Kubernetes is described as container orchitrastion. That means how containers are run, exposed and all other operations that might be done on a container.\nBoth Altinn Studio and Altinn Studio Apps consists of many different applications running in docker containers. For the Altinn Studio Apps solution this could possible over time be many thousands containers running different end user apps.\nKubernetes is used to manage the containers.\nLinks  https://kubernetes.io https://github.com/kubernetes/kubernetes https://azure.microsoft.com/services/kubernetes-service/  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/kuberneteswrapper/",
	"title": "Application Architecture Kubernetes Wrapper",
	"tags": [],
	"description": "Description of the application architecture for Kubernetes Wrapper",
	"content": "The Kubernetes Wrapper is a application that exposes information about the Altinn Apps Kubernetes Cluster it is deployed to.\nThis is used by Altinn Studio for information about the apps deployed to a given Altinn Apps cluster.\nThe Kubernetes Wrapper is a ASP.NET Core MVC application exposing REST\u0026rsquo;API\u0026rsquo;s\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/loadbalancer/",
	"title": "Application construction components Loadbalancer",
	"tags": [],
	"description": "The loadbalancer for Altinn Studio is based on standard open source software.",
	"content": "To redirect traffic to Designer and Repositories we use NGINX as a reverse proxy.\nNGINX is a open source Reverse Proxy/ Loadbalancer.\nSee Github repository.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/load-balancer/",
	"title": "load-balancer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/local-dev/",
	"title": "Solution-specific application components local deveolopment",
	"tags": [],
	"description": "As part of the platform it is created a solution to develop and test applications.",
	"content": "Localtest loadbalancer We use NGINX as loadbalancer for local development. Based on rules it redirect traffic between localtest platform and the app.\nCall between apps and localtest goes directly.\nApp The app is of course same as it is in Altinn Apps. The difference is that it does not run as a container.\nSee Altinn Apps for details about the construction components on a App.\nLocaltest platform Localtest platform is a application that have the same webApis that are available to apps from Altinn.Platform in test and production environments\n\n"
},
{
	"uri": "https://docs.altinn.studio/tags/logging/",
	"title": "logging",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/logicexecution/",
	"title": "Logic Executions Components",
	"tags": ["architecture"],
	"description": "Logic execution components are in charge of modeling the application behavior, in terms of data processing and flow control, according to the application specifications.",
	"content": "Code Execution Server Software Application Servers For Altinn Studio, Altinn Apps and Altinn Platform we use Kestrel as the web server/ application server for .NET applications. Read more about Kestrel.\nFor Java Applications we use Tomcat.\nLanguage Virtual Machines \u0026amp; Code Containers Applicatons in Altinn Studio, Altinn Apps and Altinn Platform that is based on .NET Core uses Common Language Runetime as a virual machine.\nApplications in Altinn Apps and Altinn Platform that is based on Java runs on Java Virtual Machine.\nRun-time Frameworks \u0026amp; Libraries E2E Run-time Frameworks Most of the applications created in Altinn Studio, Altinn Apps and Altinn Platform is based on ASP.NET Core / .NET Core programmed with C# programming language\nThis is open source, cross-platform and popular.\nFor PDF component we use Spring Boot / Java Open JDK. This is because the lack of open source PDF frameworks on .NET.\nUtility \u0026amp; Security Libraries We use serveral utility libraries in Altinn Studio, Altinn Platform and Altinn Apps.\nTypical this is configured in each of the application projects. For .NET applications we use NUGET to manage the libraries we use and you find a list over them in each project configuration files.\nExamples are:\n Newtonsoft.Json StyleCop.Analyzers Microsoft.Azure.DocumentDB.Core  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/data/logical/",
	"title": "Logical datamodel",
	"tags": ["architecture"],
	"description": "The logcical datamodel describes the data entities that is stored.",
	"content": "The following diagram shows the different entities stored. Click on the entity for the physical model used.\nData is stored in Cosmos DB as JSON documents. In addition we use object database to store the raw objects of business data that org has defined for the application.\nData Entities - Altinn Platform Instances Example document from instance.\nappId is the reference to the app.\n{ \u0026#34;id\u0026#34;: \u0026#34;3cc58033-128e-414d-86c2-d652af251b39\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;partyId\u0026#34;: \u0026#34;50002123\u0026#34;, \u0026#34;personNumber\u0026#34;: \u0026#34;01054210007\u0026#34; }, \u0026#34;appId\u0026#34;: \u0026#34;ttd/rip-livsgnist\u0026#34;,  \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;rip-livsgnist\u0026#34; }, \u0026#34;process\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2020-01-16T10:54:04.7691165Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;ended\u0026#34;: \u0026#34;2020-01-16T11:11:16.6358823Z\u0026#34;, \u0026#34;endEvent\u0026#34;: \u0026#34;EndEvent_1\u0026#34; }, \u0026#34;status\u0026#34;: { \u0026#34;archived\u0026#34;: \u0026#34;2020-01-16T11:11:16.6358823Z\u0026#34; }, \u0026#34;created\u0026#34;: \u0026#34;2020-01-16T10:54:05.0591613Z\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;20000015\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-01-16T11:11:21.4678343Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;20000015\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;Mx4uAJesYy0BAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/Mx4uAA==/colls/Mx4uAJesYy0=/docs/Mx4uAJesYy0BAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;00004300-0000-3c00-0000-5e2044d90000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1579173081 } DataItem Example document from data items.\n instanceGuid references to instance blobstoragePath references to the storage location for the given data  { \u0026#34;instanceGuid\u0026#34;: \u0026#34;7eae6eec-f686-40b6-bc57-6fafc8c94f13\u0026#34;,  \u0026#34;id\u0026#34;: \u0026#34;94f277a5-7d37-48e1-973c-92fb1f84f83a\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;ServiceModel-test\u0026#34;, \u0026#34;contentType\u0026#34;: \u0026#34;application/xml\u0026#34;, \u0026#34;blobStoragePath\u0026#34;: \u0026#34;ttd/endring-av-navn-v2/7eae6eec-f686-40b6-bc57-6fafc8c94f13/data/94f277a5-7d37-48e1-973c-92fb1f84f83a\u0026#34;,  \u0026#34;size\u0026#34;: 1515, \u0026#34;locked\u0026#34;: false, \u0026#34;refs\u0026#34;: [], \u0026#34;created\u0026#34;: \u0026#34;2020-01-20T09:07:59.5480429Z\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-01-20T09:08:48.3218863Z\u0026#34;, \u0026#34;lastChangedBy\u0026#34;: \u0026#34;20013900\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;Mx4uAOy+834VAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/Mx4uAA==/colls/Mx4uAOy+834=/docs/Mx4uAOy+834VAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;00004c00-0000-3c00-0000-5e256e210000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1579511329 } InstanceEvent Example on instance event.\ninstanceId references to the instance.\n{ \u0026#34;user\u0026#34;: { \u0026#34;userId\u0026#34;: 20000015, \u0026#34;orgId\u0026#34;: null, \u0026#34;authenticationLevel\u0026#34;: 1, \u0026#34;endUserSystemId\u0026#34;: null }, \u0026#34;instanceId\u0026#34;: \u0026#34;50002123/3cc58033-128e-414d-86c2-d652af251b39\u0026#34;,  \u0026#34;created\u0026#34;: \u0026#34;2020-01-16T10:54:05.1706031Z\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;Created\u0026#34;, \u0026#34;instanceOwnerPartyId\u0026#34;: \u0026#34;50002123\u0026#34;, \u0026#34;processInfo\u0026#34;: { \u0026#34;started\u0026#34;: \u0026#34;2020-01-16T10:54:04.7691165Z\u0026#34;, \u0026#34;startEvent\u0026#34;: \u0026#34;StartEvent_1\u0026#34;, \u0026#34;currentTask\u0026#34;: { \u0026#34;flow\u0026#34;: 2, \u0026#34;started\u0026#34;: \u0026#34;2020-01-16T10:54:04.7871455Z\u0026#34;, \u0026#34;elementId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Utfylling\u0026#34;, \u0026#34;altinnTaskType\u0026#34;: \u0026#34;data\u0026#34; } }, \u0026#34;id\u0026#34;: \u0026#34;5c57d85b-18e4-4215-9976-065290ef086f\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;Mx4uAImMTtoBAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/Mx4uAA==/colls/Mx4uAImMTto=/docs/Mx4uAImMTtoBAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;0900c6e2-0000-3c00-0000-5e2040cd0000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1579172045 } Application Example document on application:\n{ \u0026#34;id\u0026#34;: \u0026#34;ttd-testavpdf-2020\u0026#34;, \u0026#34;versionId\u0026#34;: \u0026#34;7cfd1c857a8535c74690aa7d6c22258c94eabf6f\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;nb\u0026#34;: \u0026#34;testavpdf-2020\u0026#34; }, \u0026#34;validFrom\u0026#34;: \u0026#34;2020-01-14T11:39:00.3281424Z\u0026#34;, \u0026#34;dataTypes\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;ServiceModel\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/xml\u0026#34; ], \u0026#34;appLogic\u0026#34;: { \u0026#34;autoCreate\u0026#34;: null, \u0026#34;classRef\u0026#34;: null, \u0026#34;schemaRef\u0026#34;: null }, \u0026#34;taskId\u0026#34;: \u0026#34;Task_1\u0026#34;, \u0026#34;maxCount\u0026#34;: 1, \u0026#34;minCount\u0026#34;: 1 }, { \u0026#34;id\u0026#34;: \u0026#34;ref-data-as-pdf\u0026#34;, \u0026#34;allowedContentTypes\u0026#34;: [ \u0026#34;application/pdf\u0026#34; ], \u0026#34;maxCount\u0026#34;: 0, \u0026#34;minCount\u0026#34;: 0 } ], \u0026#34;partyTypesAllowed\u0026#34;: { \u0026#34;bankruptcyEstate\u0026#34;: false, \u0026#34;organisation\u0026#34;: false, \u0026#34;person\u0026#34;: false, \u0026#34;subUnit\u0026#34;: false }, \u0026#34;created\u0026#34;: \u0026#34;2020-01-14T11:39:00.3281424Z\u0026#34;, \u0026#34;lastChanged\u0026#34;: \u0026#34;2020-01-14T11:39:00.3281424Z\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;Mx4uAL3TuwQBAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/Mx4uAA==/colls/Mx4uAL3TuwQ=/docs/Mx4uAL3TuwQBAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;00008644-0000-3c00-0000-5e1da8540000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1579001940 } Data entities - Altinn Studio Releases Example document for releases:\n{ \u0026#34;tagName\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;ver 1\u0026#34;, \u0026#34;targetCommitish\u0026#34;: \u0026#34;304e64a5b768a1a438f5682f05c81f1e3f4806e8\u0026#34;, \u0026#34;build\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;25639\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;result\u0026#34;: \u0026#34;failed\u0026#34;, \u0026#34;started\u0026#34;: \u0026#34;2020-01-28T14:26:38.776664Z\u0026#34;, \u0026#34;finished\u0026#34;: \u0026#34;2020-01-28T14:27:50.8388306Z\u0026#34; }, \u0026#34;id\u0026#34;: \u0026#34;a361d1c8-11a1-49fb-8775-59f231aadcd5\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2020-01-28T14:26:22.167018+00:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;jeeva\u0026#34;, \u0026#34;app\u0026#34;: \u0026#34;apps-test\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;9g8wAPi8x1cLAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/9g8wAA==/colls/9g8wAPi8x1c=/docs/9g8wAPi8x1cLAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;10008d1b-0000-0c00-0000-5e3044f90000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1580221689 } Deployments Example document for deployments:\n{ \u0026#34;tagName\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;envName\u0026#34;: \u0026#34;at22\u0026#34;, \u0026#34;build\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;25637\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;result\u0026#34;: \u0026#34;succeeded\u0026#34;, \u0026#34;started\u0026#34;: \u0026#34;2020-01-28T14:17:53.0563266Z\u0026#34;, \u0026#34;finished\u0026#34;: \u0026#34;2020-01-28T14:18:39.2312059Z\u0026#34; }, \u0026#34;id\u0026#34;: \u0026#34;682e31ee-3aeb-4f28-b457-98db2f34ece6\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2020-01-28T14:17:37.2229801+00:00\u0026#34;, \u0026#34;createdBy\u0026#34;: \u0026#34;steph\u0026#34;, \u0026#34;app\u0026#34;: \u0026#34;process-history-app\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;ttd\u0026#34;, \u0026#34;_rid\u0026#34;: \u0026#34;9g8wAKEPFmYBAAAAAAAAAA==\u0026#34;, \u0026#34;_self\u0026#34;: \u0026#34;dbs/9g8wAA==/colls/9g8wAKEPFmY=/docs/9g8wAKEPFmYBAAAAAAAAAA==/\u0026#34;, \u0026#34;_etag\u0026#34;: \u0026#34;\\\u0026#34;04007c5a-0000-0c00-0000-5e3042ca0000\\\u0026#34;\u0026#34;, \u0026#34;_attachments\u0026#34;: \u0026#34;attachments/\u0026#34;, \u0026#34;_ts\u0026#34;: 1580221130 } Altinn Studio Repositories Altinn Studio Repositories uses Gitea, that uses a PostgreSQL database.\nSee Gitea project and models/models.go.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/markdown/",
	"title": "Markdown",
	"tags": ["tech", "programming"],
	"description": "Markdown is a text-to-HTML conversion tool for web writers, created in 2004 by John Gruber.",
	"content": "We\u0026rsquo;re writing all our documentation using markdown, and we use Hugo for converting the markdown to HTML.\nMarkdown is also used to format text in apps developed in Altinn Studio.\nAltinn ❤️ Markdown.\nLinks  https://daringfireball.net/projects/markdown/ https://en.wikipedia.org/wiki/Markdown https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet https://code.visualstudio.com/docs/languages/markdown https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one  "
},
{
	"uri": "https://docs.altinn.studio/tags/markdown/",
	"title": "markdown",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/material-ui/",
	"title": "Material UI",
	"tags": ["tech", "ui", "react"],
	"description": "A popular React UI library used in Altinn Studio.",
	"content": "Material UI is used in Altinn Studio as the React UI library. Material UI was chosen because\n It is based on the Google\u0026rsquo;s material design. It focuses exclusively on the React components Can use responsive components provided by the library Can override the style to customize the component to match the application requirements Can save time by using the components in the library instead of creating it from scratch (for example, the navigation drawers, application bar) It uses JSS as a styling solution that exposes a low-level API which helps in advanced overriding and theming mechanism  React router is a third party routing library used in Altinn Studio to trigger navigation within the application.\nLinks  https://material-ui.com https://github.com/mui-org/material-ui https://reacttraining.com/react-router https://github.com/ReactTraining/react-router/tree/master/packages/react-router-dom  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/platformoperations/monitoring/",
	"title": "System and platform monitoring",
	"tags": ["architecture"],
	"description": "As part of the architecture Altinn 3 has capability to monitoring different aspects of the platform",
	"content": "Altinn 3 uses serveral features of Azure Monitor.\nMonitoring Application Insights is used to monitor different aspects of the platform.\nThe above screenshot shows statistics for different requests.\nThis screenshots shows how Application Insights presents how traffic flows between the different applications in the solutions.\nThis screenshots show how a request flows through the different applications\nThis screenshots show how a request flows through the different applications\nThis screenshots show how a request flows through the different applications\nAlerts Azure Alerts is used to define rules to notify the DevOps team about issues in the platform.\nAlerts are posted to a specific Alerts channel on Slack.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/monitoring/",
	"title": "monitoring",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/infrastructure/network/",
	"title": "Network componentens",
	"tags": ["architecture", "infrastructure", "todo"],
	"description": "All networking infrastructure is located in Azure.",
	"content": "Altinn 3 is based on different network components in Azure.\nVirtual Network As part of the Altinn 3 platform there is serveral Virtual Networks. Each Kubernetes Cluster have their own Virtual Network.\nThis increases security and isolates the different org cluster from eacother.\nRead more about Azure Virtual Networks.\nAzure Loadbalancer In front of every AKS cluster there is a Azure Loadbalancer that load traffic between the different nodes in the AKS cluster.\nRead more about Azure Load Balancer\nApplication Gateway Azure Application Gateway is a web traffic load balancer that enables you to manage traffic to your web applications. Traditional load balancers operate at the transport layer (OSI layer 4 - TCP and UDP) and route traffic based on source IP address and port, to a destination IP address and port.\nIn Altinn 3 we use Application gateways in front of Azure Loadbalancers.\nRead more about Azure Application Gateway\nIngress controller We use Traefik as ingress controller in the different Kubernetes Clusters.\nExpressRoute We use Express route for high performence networking between our Altinn 3 platform and the on-premise Altinn 2 platform.\nRead more about ExpressRoute\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/nginx/",
	"title": "Nginx",
	"tags": ["tech", "load-balancer"],
	"description": "Load balancer currently used for routing traffic between Repos and Designer.",
	"content": "Nginx is used as the load balancer in the Altinn Studio solution. It routes traffic between Repos and Designer, itself running in a docker container.\nLinks  https://www.nginx.org https://github.com/nginx/nginx https://hub.docker.com/_/nginx  "
},
{
	"uri": "https://docs.altinn.studio/tags/nginx/",
	"title": "nginx",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/node-js/",
	"title": "Node.js",
	"tags": ["tech"],
	"description": "Node.js is a JavaScript runtime built on Chrome&#39;s V8 JavaScript engine.",
	"content": "Our front-end is built on top of open source javascript/typescript packages from the Node.js ecosystem.\nWe\u0026rsquo;ve also published our design system on npm.\nLinks  https://nodejs.org https://github.com/nodejs/node/ https://hub.docker.com/_/node https://code.visualstudio.com/docs/nodejs/nodejs-tutorial  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/requirements/non_functional/",
	"title": "Non-Functional Requirements",
	"tags": ["architecture"],
	"description": "Non functional requirements contains requirements that typically is important for deciding the architecture.",
	"content": "Architectural Concerns Architecture Concerns are categories of Non-Functional Requirements (NFRs) of a system that has been important defining this architecture. These are sometimes referred to as cross-cutting concerns or \u0026ldquo;the -ilities\u0026rdquo; because most of the words end with \u0026ldquo;-ility.\u0026rdquo;\nPerformance Scalability The platform need to be highly scalable. The traffic in this types of solutions involves a large part of the countries citizens and the traffic is often concentrated around a few dates.\nThe traffic also grows every year and the architecture should be able to\nRequirement: The platform should be able to scale up and down to support this type of usage patterns.\nResponse Time The solution need to have a performance to support a user friendly experience.\nRequirement: Page load should be less than 1 second\nCapacity The different solutions have different capacity requirements.\nThe Altinn Platform would need to support the combined traffic from all applications running in Altinn Apps.\nThe usage of Altinn is growing each year.\nReliability Reliablity requirements says something about how often users will experience system errors.\nAltinn have users in every age group and for most age groups more than 90% of the citizens use Altinn every year.\nThe requirement is that less than 1% of the users will experience errors.\nAvailability The solutions need to be available 24/7.\nRequirement: The architecture itself needs to be able to support high availability. It can\u0026rsquo;t require reqular downtime or other maintainence that makes it not available.\nRecoverability Based on the important of the solution the plattform needs to be recovorable also disaster events.\nRequirement: It should be possible to setup the solutions from scratch in xx hours (will be specificed)\nSecurity Building a platform to host applications for different governmental agencies will involve sensitive data for citizens and businesses in the country.\nThis makes security one of the most important architecture concern in the solutions.\nAuthentication Only authenticated users or systems can access data in the platform.\nRequirements\n Use a standardized  Authorization Single sign on Isolation Personel security Maintainability The solutions will be open source and involve a large amount of developers. It is important that the different components are highly maintainable to support effective development\nOperability The solutions will de operated by a small devops team and need to be highly operable. It needs to support automatic monitoring.\nUsability Accessibility Both Altinn Studio and Application created in Altinn Studio and deployed to Altinn Apps need to follow WCAG 2.1 requirements by law.\nSee details about the WCAG 2.1 requirements that applies here.\nLocalisation The data needs to be stored inside the Norwegian boarder.\nPortability The technology architecture should not make it impossible to move to different cloud providers.\nOther Non-Functional requirements System location The Altinn solution needs to be located inside Norwegian borders. This requires that we only can choose amongst the cloud providers providing cloud services inside Norway.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/nuget/",
	"title": "nuget",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/nonsolutionspecific/operations/",
	"title": "Operations Application",
	"tags": ["solution", "architecture"],
	"description": "Operations Applications are used by the devops team for supporting the different operation and management capabilities required",
	"content": "Application Performance Monitoring Some monitoring is done from Azure Portal with help of Azure Monitor Appliation Insight and other tools avaiable.\nPasS and \u0026amp; IaaS configuration There are serveral ways PasS and \u0026amp; IaaS resources are configured \u0026amp; managed\n Azure Portal Azure CLI Azure mobile app  \rBackup and recovery\rAll data created in the different solutions are backed up so it is possible to restore it in case of data loss.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/oscloudplatform/",
	"title": "Operating Systems &amp; Cloud Platform",
	"tags": ["architecture"],
	"description": "Operating Systems &amp; Cloud Platform defines the operating systems for containers and how the container are deployed to the cloud.",
	"content": "Operating systems Container Operation Systems All containers are running on Alpine Linux, which includes apps created in Altinn Studio and the Altinn Platform components.\nCloud Platform Orchestrating \u0026amp; Sceduling We use Kubernetes to manage the application containers for the different solutions.\nWe use Azure Kubernetes Services that is a managed Kubernetes administration in Azure.\nRead more about our Kubernetes Clusters.\nService Mesh \u0026amp; Proxy We use Traefik as proxy in Kubernetes and Linkerd as service mesh.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/owasp/",
	"title": "OWASP",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/pap/",
	"title": "Policy Administration Point",
	"tags": ["architecture", "security", "authorization", "xacml"],
	"description": "The Policy Administration Point is responsible for creating and modifying the different authorization policies used by the PDP",
	"content": "In Altinn Platform there is currently no Policy Administration Point functionality, but Altinn Platform provides functionality used by the other Policy Administration Points in Altinn 3. The PRP provides API for storing policies and retrieving them.\nPolicy Administration Point for applications The authorization policy for apps is defined in Altinn Studio when developing the app.\nSee Policy Administration Point in Altinn Studio for details.\nDelegation Policies Delegation of rights will be performed in Altinn II platform through the delegation functionality.\nWhen delegation is done through creation of new policies that gives user or organisation new rights.\nThis will be supported in Altinn 3. See Github issue 1258\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-studio/designer/pap/",
	"title": "Policy Administration Point",
	"tags": ["architecture", "security"],
	"description": "The Policy Administration Point in Altinn Studio lets the application developer define the authorization policy for the application created.",
	"content": "The rules for this is defined as XACML 3.0 Policy documents.\nCurrently the PAP is using an editor to manual edit the XACML Policy Template\nSee application development guidelines for details how to do that. (In Norwegian)\n\rAuthorization - Altinn Apps - Policy\rDescription of the XACML Policy defined for a app.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/swagger/pdf/",
	"title": "PDF",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform PDF.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/pdf/",
	"title": "Application architecture pdf component - Altinn Platform",
	"tags": ["architecture", "solution", "pdf"],
	"description": "The PDF component is created as an Spring Boot (Java) web application hosted in Kubernetes as a Docker container.",
	"content": "The PDF component is an Spring Boot java application exposing an api for triggering PDF-generation.\nThe pdf api is exposed at http://platform.altinn.cloud/pdf/api/v1.\nThe available endpoints can be seen in the swagger definition..\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/pdf/",
	"title": "PDF",
	"tags": ["platform", "pdf"],
	"description": "The PDF component is responsible for generating PDF printouts for submitted instances of an app.",
	"content": "The endpoints available in the pdf component is documented here.\nSee all open issues for pdf on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/pdf/",
	"title": "pdf",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/pdp/",
	"title": "Policy Decision Point",
	"tags": ["architecture", "security", "authorization", "xacml"],
	"description": "The Policy Decision Point is responsible to evaluate if users and systems is authorized to perform the requested operation on a resource.",
	"content": "The Policy Decision Point is implemented in the authorization component that is deployed Altinn Platform.\nThe Policy Decision Point follow eXtensible Access Control Markup Language (XACML) Version 3.0.\nThis mean that the rules are defined in XACML Policies files and PDP evalutes request based on the rules.\nThe PDP evaluates the Context Request based on standard XACML 3.0 behaviour. There is no specific Altinn behaviour.\nPolicy Decision Point exposes a method that authorize the decision request.\nPDP uses the configured Context Handler to enrich the decision request with attributes about the subject, resource and environment.\nIf instanceID or dataID is used as Resource ID PDP will use the Context Handler to identifiy the correct appId, the instance workflow state and the reporteId for the existing resource.\nFor request for non existing instances the appId will be used and the reportee is a required input.\nPDP flow The diagram below show the detailed flow.\nFlow explained\n Decision Request is sent to context handler for enriching Context handler call PIP for resource attributes Context handler call PIP for subject attributes PRP Identifies the correct policy based on resource attributes in enriched decision request PDP identifyes matching rules PDP checks if there is any matching rules and returnes interderminate if not Matches the rules with subject attributes Verify match and return indeterminate if not Evaluate any conditions in policy If condiation does not match return indterminate Add any obligations to the result Return the decsion result  XACML 3.0 Conformance The PDP tries to follow XACML 3.0 standard and have implemented some conformance tests. The goal is to fully implement all conformance test.\nThere exist no official XACML 3.0 conformance test but AT\u0026amp;T research made som available for OASIS in this thread.\nSee our tests here.\nTestdata for conformance tests is found here, and official description of tests here.\nSee Github 2818 for status on conformance test coverage\nImplementation and construction details Details about the implementation of PDP is found under construction components for PDP.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/security/pep/",
	"title": "Policy Enforcement Point",
	"tags": ["architecture", "security"],
	"description": "There are different types of Policy Enforcement Points in the Altinn 3 platform.",
	"content": "These are constructed in different ways.\nStandard PEP One important principle we follow is that security should be configured when possible. This means that we have developed some standard policy enforcement points that can be configured on the different API endpoints.\nAttribute-based authorization is best solved with Policy-Based Authorization in ASP.NET Core\nThe different standard PEP\u0026rsquo;s in the ASP.Net Web application template is created as Authorization Handlers.\nSee AppAccessHandler for PEP for checking app policy for an API.\nSee ScopeAccessHandler for PEP validating scope requirements\nIn the App there is defined a set of AuthorizationRequirements and for each operation of the different API endpoints needs to be configured with the correct requirement.\nExample on requirements are:\n InstanceRead (User/system needs to be authorized to perform read action on the instance in current state) InstanceWrite (User/system needs to be authorized to perform write action on the instance and its data in current state) InstanceInstantiate (user/system needs to be authorized to Instantiate an instance for an app)  The PEP will based on route data (like instanceId) and the authenticated Identity create a decision request and call PDP. Based on the response the PEP will deny or approve the user. (Deny = http 403)\nThe PEP validates any obligation from the PDP like minimum authentication level. If this is not valid, the request will be denied (HTTP 403).\nConfiguration The application needs to have a startup configuration to enable the different standard PEPs\nservices.AddAuthorization(options =\u0026gt; { options.AddPolicy(AuthzConstants.POLICY_INSTANCE_READ, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;read\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_INSTANCE_WRITE, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;write\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_INSTANCE_DELETE, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;delete\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_INSTANCE_COMPLETE, policy =\u0026gt; policy.Requirements.Add(new AppAccessRequirement(\u0026#34;complete\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_SCOPE_APPDEPLOY, policy =\u0026gt; policy.Requirements.Add(new ScopeAccessRequirement(\u0026#34;altinn:appdeploy\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_SCOPE_INSTANCE_READ, policy =\u0026gt; policy.Requirements.Add(new ScopeAccessRequirement(\u0026#34;altinn:instances.read\u0026#34;))); options.AddPolicy(AuthzConstants.POLICY_STUDIO_DESIGNER, policy =\u0026gt; policy.Requirements.Add(new ClaimAccessRequirement(\u0026#34;urn:altinn:app\u0026#34;, \u0026#34;studio.designer\u0026#34;))); }); Example from Storage Startup\nThe API needs to have enabled PEP for a given API operation\n[Authorize(Policy = AuthzConstants.POLICY_INSTANCE_WRITE)] [HttpDelete(\u0026#34;data/{dataGuid:guid}\u0026#34;)] [ProducesResponseType(StatusCodes.Status200OK)] [ProducesResponseType(StatusCodes.Status400BadRequest)] [ProducesResponseType(StatusCodes.Status404NotFound)] [Produces(\u0026#34;application/json\u0026#34;)] public async Task\u0026lt;ActionResult\u0026lt;DataElement\u0026gt;\u0026gt; Delete(int instanceOwnerPartyId, Guid instanceGuid, Guid dataGuid) { Example from DataController\nCustom PEP For some scenarious it is not possible to authorize the request based on API parameters.\nThis cases requires a custom PEP that is implemented as part of API logic.\nIn the example below a list of elements is retreived from database and we need to filter elements before they are returned based on what user is authorized for.\n[Authorize] [HttpGet(\u0026#34;{instanceOwnerPartyId:int}/{instanceGuid:guid}\u0026#34;)] public async Task\u0026lt;ActionResult\u0026gt; GetMessageBoxInstance( int instanceOwnerPartyId, Guid instanceGuid, [FromQuery] string language) { string[] acceptedLanguages = { \u0026#34;en\u0026#34;, \u0026#34;nb\u0026#34;, \u0026#34;nn\u0026#34; }; string languageId = \u0026#34;nb\u0026#34;; if (language != null \u0026amp;\u0026amp; acceptedLanguages.Contains(language.ToLower())) { languageId = language; } string instanceId = $\u0026#34;{instanceOwnerPartyId}/{instanceGuid}\u0026#34;; Instance instance = await _instanceRepository.GetOne(instanceId, instanceOwnerPartyId); if (instance == null) { return NotFound($\u0026#34;Could not find instance {instanceId}\u0026#34;); } List\u0026lt;MessageBoxInstance\u0026gt; authorizedInstanceList = await _authorizationHelper.AuthorizeMesseageBoxInstances( HttpContext.User, new List\u0026lt;Instance\u0026gt; { instance }); if (authorizedInstanceList.Count \u0026lt;= 0) { return Forbid(); } MessageBoxInstance authorizedInstance = authorizedInstanceList.First(); // get app texts and exchange all text keys.  List\u0026lt;TextResource\u0026gt; texts = await _textRepository.Get(new List\u0026lt;string\u0026gt; { instance.AppId }, languageId); InstanceHelper.ReplaceTextKeys(new List\u0026lt;MessageBoxInstance\u0026gt; { authorizedInstance }, texts, languageId); return Ok(authorizedInstance); } Example from MessageboxInstancesController\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/pep/",
	"title": "Policy Enforcement Point",
	"tags": ["architecture", "security"],
	"description": "In Altinn Platform there are PEP&#39;s that enforce access to different types of API",
	"content": "The PEP is responsible for making sure that user/system is authorized befor a API operation is performed.\nThe PEP will identify call the PDP to get a decision on a reuest.\nSee construction components on details how the PEP are created\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/pip/",
	"title": "Policy Information Point",
	"tags": ["architecture", "security"],
	"description": "The Policy Information Point(s) are responsible for providing needed information to the context handler so it can enrich the context request.",
	"content": "Without this information it would be impossible for the PDP to evaluate the context request in many scenarios.\nFor the Altinn Platform there are serveral Policy Information Points:\n Altinn II Authorization - Get information about roles a user or system has for a given party Storage PIP - Get attributes about the resource in the decision request. (what kind of app, who is the reportee of the data, what is the current process state)  The number of PIP are expected to grow in the future.\nImplementation details See implementation details in the construction components for PIP.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/",
	"title": "Platform Components",
	"tags": ["architecture", "infrastructure"],
	"description": "Platform components are a mix of managed services and standard software/frameworks used to created the needed capabilties.",
	"content": "The platform components can be structured in to different areas. The diagram below show the different areas and the platform components involved in Altinn Studio, Altinn Apps and Altinn Platform solutions.\nDownload as Visio\n\rData \u0026amp; Reporting Components\rData and Reporting Components hold the functionalities to manage data and create business reports.\n\r\rIntegration Components\rIntegration components are in charge of enabling communications between systems.\n\r\rLogic Executions Components\rLogic execution components are in charge of modeling the application behavior, in terms of data processing and flow control, according to the application specifications.\n\r\rOperating Systems \u0026amp; Cloud Platform\rOperating Systems \u0026amp; Cloud Platform defines the operating systems for containers and how the container are deployed to the cloud.\n\r\rPresentation Components\rPresentation Components are in charge of processing information and making it accessible to users.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/platform/",
	"title": "platform",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/platformoperations/",
	"title": "Platform Operations Management Capabilities",
	"tags": ["architecture", "devops"],
	"description": "Platform Operations Management Capabilities describes the capabilities needed to operate the platform.",
	"content": "PaaS \u0026amp; IaaS Management Capabilities Automation \u0026amp; Scheduling (batch, scripts) This include running scripts for infrastructure and jobs both manual and scheduled.\nSee operations application components for details about tools and applications used.\nInfrastructure Configuration \u0026amp; Management The Altinn 3 platform is a large platform with serveral 100 cloud resources. The architecture provides serveral capabilityes to configure and manage all of this resource.\nSee details here.\nBackup \u0026amp; Recovery The Altinn 3 platform has the capability to backup and restore data created by applications hosted in Altinn Apps.\nSee details here.\nPerformance \u0026amp; Availability Management Capabilities Performance Profiling See operations application components for details about tools and applications used.\nPerformance Tuning The performance tuning capability for includes tuning of code and architecture to increase performance and capacity. This is typical done based on metrix that indicates slow performance.\nAvailability and Performance Monitoring This capability include automatic and manuel monitoring of the availability, healt and performance of the different components deployed to the cloud.\nSee operations application components for details about tools and applications used.\nCloud Capacity Management The devops team uses differen tools to manage capacity in cloud.\nSee operations application components for details about tools and applications used.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-studio/designer/pap/xacmlpolicy/",
	"title": "Authorization - Altinn Apps - Policy",
	"tags": ["architecture", "security"],
	"description": "Description of the XACML Policy defined for a app.",
	"content": "An app needs to have defined a Authoriation Policy that will be imported in to Policy Retrieval Point when a app is deloyed to a Altinn Apps/Platform environment.\nThe policy format follows XACML 3.0 and for every rule in the policy, there is attributes defining which resource, subject and which action it targets.\nResource Attributes    Attribute Description     Org The org part of the resource attribute defines which org that owns the app.   App The app part that identifies the app itself.   Task / Event The task/event part of the resource makes it possible to have seperate rules for the different tasks.    Example The below example show a part of XACML 3.0 Policy where a resource is identified.\n\u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;skd\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;taxreport\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:app\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;instansiate\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:event\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; Subject Attributes The subject part of the target for the rule defines who the rule target.\n   Attribute Description     Role Code The role code is used for rule that target end users and systems.   Org The org code is used for rule that target orgs.    Examples Example with role code:\n\u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;regna\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:rolecode\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; Example with org:\n\u0026lt;xacml:AllOf\u0026gt; \u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;skd\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:altinn:org\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; Action Attributes Example with read action:\n\u0026lt;xacml:Match MatchId=\u0026#34;urn:oasis:names:tc:xacml:1.0:function:string-equal\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;read\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;xacml:AttributeDesignator AttributeId=\u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34; Category=\u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34; DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; MustBePresent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/xacml:Match\u0026gt; \u0026lt;/xacml:AllOf\u0026gt; Obligation The obligation part is used to define information that should be used by PEP.\n\u0026lt;xacml:ObligationExpressions\u0026gt; \u0026lt;xacml:ObligationExpression FulfillOn=\u0026#34;Permit\u0026#34; ObligationId=\u0026#34;urn:altinn:obligation:authenticationLevel1\u0026#34;\u0026gt; \u0026lt;xacml:AttributeAssignmentExpression AttributeId=\u0026#34;urn:altinn:obligation1-assignment1\u0026#34; Category=\u0026#34;urn:altinn:minimum-authenticationlevel\u0026#34;\u0026gt; \u0026lt;xacml:AttributeValue DataType=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;2\u0026lt;/xacml:AttributeValue\u0026gt;  \u0026lt;/xacml:AttributeAssignmentExpression\u0026gt; \u0026lt;/xacml:ObligationExpression\u0026gt; \u0026lt;/xacml:ObligationExpressions\u0026gt; Full examples On Github you can look at some full policy examples\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/prefill/",
	"title": "Configure Prefill",
	"tags": [],
	"description": "Altinn Studio will let the developer define prefill for datamodel from register and profile.",
	"content": "The prefill configuration is handled by a json file where source values are linked to fields in the app data model.\nIn order to add prefill to your application this file needs to be added to the repository alongside the datamodel under the models folder, with the same name as the data model it is connected to, and a prefill extension.\nSo, if you have a data model named ServiceModel.xsd, the file should be named ServiceModel.prefill.json\nThe prefill comes with a json-schema and which gives auto complete on the source fields. In order to use this auto-complete feature you need to use an IDE or text editor that supports json-schema (such as Visual Studio, Visual Studio Code, IntelliJ etc). As of now there is no auto complete on the target fields.\nThe target fields are case insensitve, so writing Skattyterinforgrp5801.Infogrp5802.OppgavegiverNavnPreutfyltdatadef25795.value is the same as skattyterinforgrp5801.infogrp5802.oppgavegiverNavnPreutfyltdatadef25795.value.\nTo get started using prefill you can copy the following template into your repository:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/prefill/prefill.schema.v1.json\u0026#34;, \u0026#34;allowOverwrite\u0026#34;: false, \u0026#34;ER\u0026#34;: { }, \u0026#34;DSF\u0026#34;: { }, \u0026#34;UserProfile\u0026#34;: { } } The easiest way to work on the configuration file is to clone your repository locally, and edit the file in your preferred editor. To do this open a terminal and run\n git clone https://altinn.studio/repos/[ORG]/[APP].git  Then you can create the prefill config file under the models folder.\nThere are three sources you can prefill from as of now\n ER (enhetsregisteret) DSF (det sentrale folkeregisteret) UserProfile  All availiable source fields can bee seen here.\nThe allowOverwrite  field is a flag to determine if existing values in the app data model can be overwritten by prefill data.\nBelow is an example of a prefill where two fields are connected to the name from DFS and user name from the user profile, and we have allowed prefill values to overwrite values in the data model:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://altinncdn.no/schemas/json/prefill/prefill.schema.v1.json\u0026#34;, \u0026#34;allowOverwrite\u0026#34;: true, \u0026#34;ER\u0026#34;: { }, \u0026#34;DSF\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;Skattyterinforgrp5801.infogrp5802.OppgavegiverNavnPreutfyltdatadef25795.value\u0026#34; \t}, \u0026#34;UserProfile\u0026#34;: { \u0026#34;UserName\u0026#34;: \u0026#34;Skattyterinforgrp5801.infogrp5802.OppgavegiverAdressePreutfyltdatadef25796.value\u0026#34; \t} } See issues related to prefill on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/presentation/",
	"title": "Presentation (User Interface) Capabilities",
	"tags": ["architecture", "todo"],
	"description": "Presentation Capabilities enable an application to manage the human-computer interface.",
	"content": "This includes capturing user actions and generating resulting events, presenting data to the user, and assisting in the management of the dialog flow of processing.\nThese capabilities is both targeting App developers creating applications in Altinn Studio and the application created in Altinn Studio and Deployed to Altinn Apps for end users.\nRendering \u0026amp; Interaction Capabilities Composition The app developer may create the layout of the App UI using Altinn Studio. Standard UI components are available, in addition the app developer may create custom components and/or layouts.\nRendering  The UI in Altinn Studio being presented to app developers, and The UI designed in Altinn Studio being presented in an app to end users,  use client-side rendering, and may be rendered by a web browser.\nTODO: Link to relevant archiecture component(s) providing this capability.\nSession \u0026amp; State Management Cookies are used for client-side session management, both in Altinn Studio and Altinn Apps.\nInput Validation  The UI in Altinn Studio being presented to app developers, and The UI designed in Altinn Studio being presented in an App to end users,  support input validation of data inputed by App Developers or end users using Apps developed in Altinn Studio.\nTODO: Link to relevant archiecture component(s) providing this capability.\nPDF Generation Apps created in Altinn Studio have the possibility to have created a PDF of the UI designed in Altinn Studio.\nTODO: Link to relevant archiecture component(s) providing this capability.\nHelp TODO: Link to relevant archiecture component(s) providing this capability.\nNotification Management TODO: Link to relevant archiecture component(s) providing this capability.\nPresentation Adaptation Capabilities TODO: Link to relevant archiecture component(s) providing this capability.\nMulti-channel Presentation App developers may use Altinn Studio in a web browser, or local development tools to create an app. TODO: Link to relevant archiecture component(s) providing this capability.\nResponsive Presentation  The UI in Altinn Studio being presented to app developers, and The UI designed in Altinn Studio being presented in an App to end users,  support support responsive presentation. TODO: Link to relevant archiecture component(s) providing this capability.\nLocalization The UI designed in Altinn Studio, being presented in an App to end users support localization, as defined by app developers. TODO: Link to relevant archiecture component(s) providing this capability.\nAccessibility The presentation both in Altinn Studio for the App Developer and the presentation created in Altinn Studio and presented in the App is created to fullfill WCAG 2.0\nTODO: Link to relevant archiecture component(s) providing this capability.\nUI Design This is typical a part of the development capabilities, but since the Altinn Studio Solutions lets App developers design the UI we need this as a runtime capabilitiy also. App developers can customize the UI design in the App presented to end users.\nUI Component Library App developers have a UI component library available in Altinn Studio to select UI components from.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/platform/presentation/",
	"title": "Presentation Components",
	"tags": ["architecture"],
	"description": "Presentation Components are in charge of processing information and making it accessible to users.",
	"content": "Proxy Servers In Altinn Studio we use NGINX as a proxy server. In Altinn Apps and Platform, Traefik is used.\nCDN For Altinn apps we have create a CDN for storing common files used by browsers. A example is App Frontend.\nRead all about Altinn CDN.\nWeb server For Altinn Studio, Altinn Apps and Altinn Platform we use Kestrel as the web server/ application server for dot.net applications. Read more about Kestrel.\nFor Java Applications we use Tomcat.\nSPA Frameworks Altinn Studio, Altinn Apps and Altinn Platform uses React as Single Page Application framework.\nRead more about coding in our development handbook.\nDynamic webpage frameworks A few views in Altinnn Studio are still ASP.NET pages coded with Razor syntax.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/processing/process/",
	"title": "Business Process Processing Capabilities",
	"tags": ["app-backend", "BPMN"],
	"description": "Description of the business process processing capabilities",
	"content": "A application deployed to Altinn Apps will typical have a business process that users and systems need to follow.\nApps created in Altinn Studio uses BPMN 2.0 standard to describe the business process and the app will have functionality to support different types of tasks in the process.\nThe process is defined by the application developer in Altinn Studio. When a new app is created it a basic process is created.\nSupported Tasks Applications will support different processes with different types of task as part of the process. The current types of tasks is implemented and planned to be implemented. This list is not final.\nData This is the task where the user or system create and updates data for one more datamodelles defined for the App.\nConfirmation (backlog) This is a task where user can look at the data filled and then confirm it.\nConfirmationAndSigning (backlog) This is a task where user can look at the data filled and then confirm and sign data.\nPayment (backlog) This is a task where user is redirected to a external payment provider to pay related to the process. The payment can be related to data filled out in earliers task, or can be a fixed value connected to the app.\nSee Github issue for details.\nSigning (backlog) Signing is a task where one or more users sign the data submitted. In most uses cases this is a strictly functional operation but depending on the authentication level it can be a digital signature involved. The different types of signing relevant for this platform is.\nThere is a epic for signing on GitHub.\nRegular signing Regular signing is when one user with a specific role is required to functional sign the data before submitting it.\nParalell signing This is a task where serverel users need/can sign the data in paralell. The task is completed when the needed amount of signatures has been added\nSee Github issue for details.\nUser controlled signing User controlled signing is a task where the data inputed in earliers task in process defines which users that needs to sign.\nSee GitHub issue for details.\nDigital Signing with BankId Digital signing with BankID creates a digital signature of the data for the instance.\nSee Github issue for details.\nLookup (backlog) This is a task in a process where user/system can lookup external data with help of inputs from UI or API.\nState change The application is responsible to make sure that.\nExample process There is some freedom of the order of task in the process, but not all combinations is functional valid.\nEach type of task will have som requirement to be fullfilled to be allowed to be completed.\nThe below diagram show some example processes that a App possible will support in the future. Even it is possible to technical order the different types of task.\nProcess: Data This is the a common process. In this scenario a user will typical fill out formdata and when formfilling task is completed the data will be marked as locked and the final data can be read from the org.\nThe org will be able to read data before the formfilling task is completed, but then the end user can still update the data.\nProcess: Data - Signing This is the a common process. In this scenario a user will typical fill out formdata and when formfilling task is completed, the process is moved to a signing task where the user can verify the data and then confirm it with a signing of data.\nDepending on the required security level for the application the signing will use PKI systems to digital sign the data or just be a more functional confirmation from the user.\nThe org will be able to read data before the formfilling task is completed, but then the end user can still update the data. The data will not be allowed to be changed while the instance is in signing task.\nProcess: Data - Confirmation - Payment In this scenario a user will typical fill out formdata and when formfilling task is completed, the process is moved to a confirm task where the user can verify the data and then confirm, when the data is confirmed the process is moved to a payment task where the user needs to pay before the process is completed.\nThe payment functionality will be handled by external payment providers. The app will integrate with API\u0026rsquo;s for the payment provider. Altinn runtime will support different payment providers.\nProcess: Data - Confirmation - External validation In this scenario a user or system will typical fill out formdata and when formfilling task is completed, the process is moved to a confirm task where the user can verify the data and then confirm it.\nThe process is the moved to a external validation task where the org is doing validation. The org can chose to complete the task or send the instance back to a earlier task for correction of the data.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/app/app-backend/process/",
	"title": "App Process",
	"tags": ["process", "BMPN"],
	"description": "Description of the process handling of App Backend",
	"content": "Process API Apps created in Altinn Studio have a seperate Process API that exposes functionality to clients to controll the process.\nSee github for source code.\nInstance API Process Service The process service is where the business logic for BPMN processing is located. It is responsible for verifying state, and changes of state\nSee github for source code.\nBPMN Reader BPMN reader is the component that parses BPMN process in apps.\nSee github for source code.\nProcess Step App Frontend App frontends as a process step module that verifes current state for an app and present the correct view depending on task a app instance\nSee github for source code.\nApp Logic When app process changes state app logic is run making it possible for app developers to implements specific app logic.\nSee AppBase.cs and IAltinnApp.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/define-process/",
	"title": "Define app process",
	"tags": ["process"],
	"description": "As part of the development one must define a process for the app that end user needs to follow.",
	"content": "A app will typical have a process that a end user / or system needs to follow. It could be anything from a single task process where the app is used to retrieve data from some external api, to long living processes with many tasks involving.\nIn Altinn Studio the developer will need to define the process for the app.\nIn current version of Altinn Studio the only support for process definition is to upload a BPMN process file and the only task type we support are FormFilling\nSee Process Architecture for more details how process is defined\nSee all issues related to Altinn Studio and workflow on Github.\nInstansiations hooks Instansiation is the event that triggers a new instance of a App and starts the process for that instance.\nRelated to this event a developer can set instansiations hooks that are triggered when a new process is started.\nSee Github for issues related to instansiation.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/process/",
	"title": "process",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/processhandling/",
	"title": "Process handling",
	"tags": ["altinn-apps", "todo"],
	"description": "Description of the process handling capability of Apps created in Altinn Studio.",
	"content": "A app have a defined business process. The business process can consist of serveral type of task in different orders.\nIf you want details about the business process architechture see Business Process Architecture\nTasks Formfilling Signing Payment Events "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/processing/",
	"title": "Processing &amp; Execution Capabilities",
	"tags": ["architecture"],
	"description": "Processing &amp; Execution Capabilities includes everything from processing a defined business processes to load balancing and failover.",
	"content": "Processing Capabilities BPMN Process Execution As part of the Application design and build in Altinn Studio the application developer will define a BPMN Process for the given App.\nThe application framework used in the app template support reading and processing the process file.\nRead the details about BPMN processing capabilities.\nExecution Control \u0026amp; Failure Mgmt Capabilities Auditing, Logging \u0026amp; Tracing Altinn Studio, The applications created in Altinn Studio and Altinn Platform perform auditing, logging and tracing of events that happens.\nException Management Altinn Studio, applications created in Altinn Studio and deployed to Altinn Apps and Altinn Platform has exception management.\nExecution Profiling With help of tools the platform support execution profiling.\nProcess Timing Capabilities Synchronous Processing MOST API\u0026rsquo;s in the platform is synchronous.\nScheduled Processing (incl. Batch) The solutions has the capabilitiy for scheduled processing.\nTODO: Describe user scenario.\nQueued \u0026amp; Asynchronous Processing The solutions do support asynchronous processing.\nExecution Partitioning Capabilities Clustering The solutions has clustering capabilities.\nLoad-balancing The technical architecture has load balancing capabiltiies\nFail over The technical architecture has fail over capabilties.\n\rBusiness Process Processing Capabilities\rDescription of the business process processing capabilities\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/swagger/profile/",
	"title": "Profile",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Profile.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/profile/",
	"title": "Application construction components - Altinn Platform Profile",
	"tags": ["architecture", "solution", "todo"],
	"description": "The profile component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": "TODO\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/profile/",
	"title": "Profile",
	"tags": ["platform", "profile"],
	"description": "The Profile component gives profile information for users in Altinn.",
	"content": "Apps uses it to present information about logged in user or other user information.\nSee all open issues for Profile on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/profile/",
	"title": "profile",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/programming/",
	"title": "programming",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/projectmanagement/",
	"title": "Project Management Capabilities",
	"tags": ["architecture", "devops"],
	"description": "Project Management Capabilities covers the different capabilities to mange the project.",
	"content": "Most of the project capabilties is not listed. The once that is listed is the ones where we use technolgies and teqniques that can be shared/reused.\nAgile Project Management Capabilties Backlog managmenent and prioritazion The project has capability to manage the backlog and prioritize it.\nThis is done in Github and Zenhub.\nBurn-down / Tracking The project has capability to manage see the burn-down and track issues in backlog\nThis is done in Github and Zenhub.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/prometheus/",
	"title": "Prometheus",
	"tags": ["tech", "monitoring"],
	"description": "Prometheus is an open-source systems monitoring and alerting toolkit.",
	"content": "Prometheus is an open-source systems monitoring and alerting toolkit that we use for monitoring.\nLinks  https://prometheus.io https://github.com/prometheus/prometheus  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/prp/",
	"title": "Policy Retrieval Point",
	"tags": ["architecture", "security", "authorization", "xacml"],
	"description": "The Policy Retrieval Point is the functionality where Policy Decision Point (PDP) can retrieve the policy defined for an app resource.",
	"content": "During deployment of an app the rules for the app is added to the Altinn Storage.\nThe rules are defined as a XACML 3.0 Policy document.\nFor delegated rights Altinn II will provide the delegated policy.\nSee Policy Adminstration Point for details about how the policies are created.\nSee construction components how PRP is built.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/quality/",
	"title": "Quality Management Capabilities",
	"tags": ["architecture", "devops"],
	"description": "Quality Management Capabilities covers the different capabilities to mange the project.",
	"content": "Quality Assurance \u0026amp; Reviews All pull request in GitHub requires approved reviews of the changes before it can be merged in to the master branch.\nSee current and earlier pull request.\nFor infrastructure changes the pull request is done in Azure Devops with the same type of reviews.\nDefect Tracking \u0026amp; Management Defects are tracked in Gitub as bugs. See active and closed bugs.\nStatic SW Analysis Enablement Every pull requsts needs to adhere to code quality standard verifyed with static code analysis.\nThe build pipline in Azure Devops runs LGTM for static code analysis with focus on security and SonarCloud for general static code analysis.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/react/",
	"title": "React",
	"tags": ["tech", "frontend", "react"],
	"description": "Modulært rammeverk for å utvikle UI komponenter og SPA applikasjoner.",
	"content": " Modulært rammeverk for å utvikle UI komponenter som kan gjenbrukes flere steder i løsningen. Hvert React komponent har en tilstand som gir den data i henhold til hvor i applikasjonen brukeren er og hvilke handlinger som foretas. Vedlikeholdt av Facebook, under MIT lisens.  Slik React blir brukt Uten redux  Ved bruk av higher order components kan tilstand sendes fra rot-komponenten nedover i komponent-hierarkiet. Rot-komponenten håndterer alt av state, og sender callbacks ned i komponentene, slik at det er mulig og legge til, fjerne og endre komponeter.  Med redux  Ved bruk av redux vil vi ikke være like avhengig av higher order components, da alle komponenenter kan kobles til redux-state av appen, og kunne håndtere det å legge til, fjerne eller endre komponenter selv. Håndtering av state skjer igjennom Actions og Reducers, som Redux arkitektur anbefaler.  Links  https://reactjs.org https://github.com/facebook/react  "
},
{
	"uri": "https://docs.altinn.studio/tags/react/",
	"title": "react",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/reactapp/",
	"title": "react-app.js",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av React-App.js",
	"content": "Overordnet \u0026lsquo;React-App.js\u0026rsquo; er selve React applikasjonen som blir generert av Altinn Studio som del av tjenestutviklingen. Den inneholder all logikk for å rendre GUI samt å gjøre nødvendige kall mot API i Altinn Tjenester 3.0\nFor øyeblikket er den statisk og lik for alle tjenester. Målet er at den blir tilpasset de komponentene som er i bruk. Dette slik at javascript koden ikke i inneholder referanser til komponenter ikke brukt i tjenesten.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/receipt/",
	"title": "Application architecture receipt component - Altinn Platform",
	"tags": ["architecture", "solution", "receipt"],
	"description": "The receipt component is an application exposing a React receipt application, and internal APIs.",
	"content": "The receipt frontend view is available at https://platform.at22.altinn.cloud/receipt/{instanceOwnerId}/{instanceId}.\nThe receipt component also exposes apis that are intended for use by the receipt frontend. If you need information about the user, instance or party you should use their respective platform components.\nReceipt backend exposes two enitities through API endpoints prefixed with https://platform.at22.altinn.cloud/receipt/api/v1/; user and extendedInstance\n/users A user is the entity which is logged in in Altinn and performs actions for on behalf of an instance owner.\nOperations Get information about the currently logged in user\n/users/current /extendedinstance The extended instance object holds metadata about and instance and party data related to the instance owner.\n{ \u0026#34;instance\u0026#34;: {}, \u0026#34;party\u0026#34;: {} } Operations Get instance and party data for a given instance id. It is optional to include the party data, and this can be regulated using the query parameter includeParty.\n/instances/{instanceOwnerPartyId}/{instanceGuid}?includeParty={true/false} "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/receipt/",
	"title": "Receipt",
	"tags": ["platform", "register"],
	"description": "The Receipt component in Altinn Platform presents a receipt for apps.",
	"content": "The Receipt component is build to present receipt for all apps. Since apps over time will be removed from Altinn Apps, but the data will live forever, the Receipt component is responsible for presenting a generic receipt view.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/receipt/",
	"title": "receipt",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/react/redux/",
	"title": "Redux",
	"tags": ["tech", "frontend", "react"],
	"description": "Redux is used for handling state in React applications.",
	"content": " Applikasjonstilstandshåndtering En felles tilstand for hele applikasjonen Tilstanden styres av Actions som håndteres av Reducere som igjen populerer tilstanden.  En Action kan f.eks. være \u0026ldquo;FETCH_POSTNUMMER\u0026rdquo; Når en slik actions kjøres, så vil en Reducer ta imot og oppdatere tilstanden slik at det er i tilstanden at applikasjonen nå henter postnummer. Når er hentingen er fullført, vil man f.eks. sende en action \u0026ldquo;FETCH_POSTNUMMER_FULFILLED\u0026rdquo; som har postnummer-data med som parameter. Reducer håndterer denne handlingen og setter postnummer-data i applikasjonens tilstand.   Vedlikeholdt av Facebook, under MIT lisens.  Fordeler ved å bruke redux  En felles state for alle komponenter Komponenter kan kobles direkte mot state og kan oppdatere denne uavhengig av andre komponenter Gir en stor frihet til valg av struktur på state. Enkelt å eksportere til json og importere fra json (hvis strukturen er lik)  Links  https://redux.js.org https://github.com/reactjs/redux  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/swagger/register/",
	"title": "Register",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Register.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/register/",
	"title": "Application construction components - Altinn Platform Register",
	"tags": ["architecture", "solution", "todo"],
	"description": "The register component in Altinn platform is constructed as an asp.net core web API application deployed as a docker container to a Kubernetes cluster.",
	"content": "TODO\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/register/",
	"title": "Register",
	"tags": ["platform", "register"],
	"description": "The Register micro service gives register information to Apps.",
	"content": " ER - Enhetsregisteret - Information about organisations in Norway DSF - Det Sentrale Folkeregisteret - Information about citizens in Norway.  ER - Enhetsregisteret ER registeret can be used to prefill information, retrieve information based on user input or for validation of input of users.\nAltinn Platform does not have a own copy of ER. It currently uses Altinn II plaform as source for register.\nSee Application architecture for details.\nSee all open issues for Register on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/register/",
	"title": "register",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/",
	"title": "Altinn Studio Repos",
	"tags": ["altinn-repos"],
	"description": "The Git repository solution for storing and versioning apps developed with Altinn Studio.",
	"content": "\rFunctionality in Repos\rFunksjonalitet for lagring og versjonering av tjenester i Git-repositories samt funksjonalitet for application lifecycle management.\n\r\rData Structure for Repos\rStruktur for repositories og filer i Gitea.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/repos/",
	"title": "repos",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-studio/repositories/",
	"title": "Application construction components Repositories",
	"tags": [],
	"description": "The application construction components for Repositories is based on standard open source software.",
	"content": "Each application created in Altinn Studio Designer gets a GIT repository where all code and configuration for that app is stored.\nWe use Gitea as a Git-based code hostet solution in Altinn Studio. Gitea is a Open Source product.\nGitea host code on Github. See repository here.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-studio/repositories/",
	"title": "Solution components Altinn Studio Repositories",
	"tags": ["solution", "architecture"],
	"description": "In Altinn Studio Repos you find the functional components related to source control and access management of the application developer.",
	"content": "Application Repositories In Altinn Studio Repositories the developer find all repostiries for different organization and in every reporistory the source code for all apps are located.\nGit-based source control The app developer can use the source control to clone, comitt, pull and other GIT related functionality.\nThe app developer can view the application repository.\nAuthentication The login functionality for Altinn Studio is located in repositories\nUser Profile User profile in Altinn Studio Repostories lets the app developer manage its user profile.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-apps/app/app-api/org-rest/",
	"title": "REST-API for orgs",
	"tags": ["altinn-apps"],
	"description": "Description of the  API for organisations (orgs).",
	"content": "NOTE: Work in progress. Stuff will change.\r\rFor apps created in Altinn Studio and hosted in Altinn Apps, REST-API are the main channel to interact with the App / Altinn Platform.\nAPI to authenticate end agency systems In the current Altinn Platform SOAP is used for most of the agencies API\u0026rsquo;s. Altinn support both username/password for agencies.\nAPI to instansiate a new instance of an app with prefill See Application Users API.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/reusable-resources/",
	"title": "Reusable resources",
	"tags": [],
	"description": "A important feature with Altinn Studio is that it should promote developers to create reusable resources that can be reused by other developers.",
	"content": "Reusable resource is typical created by technical developers using code editors.\nWeb component When building UI, you will use and configure premade web components. The components will be based on React, and vil vary in size and complexity. Web components are developed in code editors.\nSome basic requirements:\n The component should be flexible and configurable The component should be able to be connected to the data model, and use the metadata from the data model. The component should be able to connect to text resources The component should support responsive design and WCAG 2 AA It should be simple for service owners to add more components  Overall layout When building UI it will be possible to select a overall layout (aka \u0026ldquo;look\u0026amp;feel\u0026rdquo;). This could bee neded because of the complexity of the service or a wish for branding of the service.\n  Create reuasable artifacts\n Look\u0026amp;feel Texts and translations Code lists Logic (C#? TypeScript? WebAssembly?) Data models (Seres?) API calls    Reuse these artifacts\n  F.eks. det å lage nye web componenter og layouts vil typisk være noe som tekniske utviklere gjør i kode-editorer.\nDet å sette disse sammen og konfigurere dem, er noe alle skal kunne gjøre.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/routines/",
	"title": "routines",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-apps/routing/",
	"title": "Application Architecture Routing",
	"tags": [],
	"description": "Descripton of the Application Architecture for the Routing Application",
	"content": "Routing in Altinn Apps are done by Traefik. See Traefik documentation for detailed architecture information\n"
},
{
	"uri": "https://docs.altinn.studio/tags/routing/",
	"title": "routing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/rule-handler/",
	"title": "RuleHandler.js",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for rule handler js filen.",
	"content": "Overordnet Filen RuleHandler.js brukes til å lage metoder som skal benyttes for til kalkuleringer/regler på felter i datamodellen eller for å skape dynamikk i et skjema.\nFormat Filen består av 4 objekter, 2 av de benyttes for til kalkuleringer/regler i skjema og de 2 andre benyttes til dynamikk i skjema. ruleHandlerObject og conditionalRuleHandlerObject skal benyttes til å definere metoder som kan brukes til kalkuleringer/regler i skjema. Alle metodene har et objekt som input parameter og en output verdi, strukturen på input objektet er beskrevet i ruleHandlerHelper og conditionalRuleHandlerHelper. Filen har følgende struktur:\nvar ruleHandlerObject = { ruleFunctionName: (obj) =\u0026gt; { return obj.inputParam1 + \u0026#34; \u0026#34; + obj.inputParam2; }, } var ruleHandlerHelper = { ruleFunctionName: () =\u0026gt; { return { inputParam1: \u0026#34;inputParam1\u0026#34;, inputParam2: \u0026#34;inputParam2\u0026#34; }; }, } var conditionalRuleHandlerObject = { conditionalFunctionName: (obj) =\u0026gt; { return obj.input1 \u0026gt; 10; }, } var conditionalRuleHandlerHelper = { conditionalFunctionName: () =\u0026gt; { return { input1: \u0026#34;input1\u0026#34; }; }, } Ved innlasting i skjemadesigneren vil filen lastes inn i window elementet og kalles ved hjelp av window.conditionalRuleHandlerObject.conditionalFunctionName. Kalkuleringer/regler kjøres når skjema fylles ut. Så regler kan testes både i desinger, preview og i runtime. Kalkuleringer/regler input objekt sine parameter og output parameteret kobles til felter i datamodellen.\nDynamikk regler manipulerer skjema ved å skjule eller vise felter. Input objektet kobles til datamodelfelter. Deretter må brukeren spesifisere hva som skal skje hvis metoden returnerer true. Per nå er det kun mulig å velge å skjule eller vise felter. Deretter knytter man \u0026lsquo;action\u0026rsquo; til felter som er lagt inn i skjema. Man kan knytte så mange felter man vil til en dynamisk regler.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/runtime-capabilities/",
	"title": "runtime capabilities",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/infrastructure/computing/scaling/",
	"title": "Scaling compute resources",
	"tags": ["architecture", "infrastructure"],
	"description": "Traffic to Altinn varies widely during a year and scaling the compute resources correctly is important for stability and cost",
	"content": "The below diagram shows how the number of unique users logged in to Altinn 2 varied through 2019.\nAltinn 2 is a monolith where all digital services run on the same servers. This means that days like the tax day when there is this enormous spike in traffic will require that all servers are scaled up. It is also an on-prem solution where scaling needs to be planned weeks ahead.\nFor Altinn 3 the story is completely different. Every organization has its separate Kubernetes cluster. Each of these clusters can be scaled independently.\nCluster Autoscaler Azure Kubernetes Services does support autoscaling of nodes and pods. Read more about cluster autoscaling.\nThis is currently not been enabled.\nResource Reservations in Azure Kubernetes Services Node resources are utilized by AKS to make the node function as part of your cluster. This usage creates a discrepancy between the node\u0026rsquo;s total resources and the resources allocatable when used in AKS. This information is important to note when setting requests and limits for user deployed pods.\nFor Altinn 3 this means the following\n Standard_D2s_v3: 100 millicores reserved per node, 1900 millicores to use Standard_D4s_v3: 140 millicores reserved per node, 3860 millicores to use Standard_D8s_v3: 180 millicores reserved per node, 7820 millicores to use  Read more about resource reservations\nResource limitations In Kubernetes, it is possible to set resource limitations for each pod deployed to a Kubernetes cluster. In addition, we can define the number of minimum resources required for the pod.\n. Below there is a general example where the minimum CPU is set to 100milliCPU and maximum to 250milliCPU.\nkind: Pod apiVersion: v1 metadata: name: mypod spec: containers: - name: mypod image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine resources: requests: cpu: 100m memory: 128Mi limits: cpu: 250m memory: 256Mi Read about best practice for managing resources in Azure Kubernetes Services\nScaling org clusters There are currently more than 50 orgs hosting digital services in the Altinn 2 platform.\nThey range from Tax Department, Police, the Civil Aviation Authority, and many more. Some have digital services used by millions of citizens every year, while others have digital services used only by 1 person during a year. Some have many digital services while others just 1.\nThis means that the compute requirements for the different cluster vary a lot between the different orgs.\nTo exemplify this we shown the transaction statistics from three different orgs for 2019 in Altinn 2.\nAt the current time, we don\u0026rsquo;t know what kind of CPU usage an average transaction requires.\nIn this example, we assume that 1000 transactions require 1 CPU. (1000 milliCPU)\nThis is probably not correct.\nOrg 1 SKD is the largest org in Altinn 2. Daily transactions vary between 2500 and 365.000.\nThat would mean that SKD would need up to 192 nodes of Standard_D2s_v3\nOrg 2 BRG is one of the larger orgs in Altinn. Daily transactions vary between 300 and 14.000.\nThat would mean that BRG would need up to 8 nodes of Standard_D2s_v3\nOrg 3 HDIR is a medium org in Altinn. Daily transactions vary between 300 and 950.\nThat would mean that HDIR would never need more than 3 nodes of Standard_D2s_v3\nWe have not yet decided how we will be doing scaling of org clusters. We have identified some approaches.\nScaling option 1 The first option is manually scale both pods and nodes.\nThis means that the Altinn Devops team would manually need to increase or decrease the number of nodes based on obeserved/expected usage.\nThe number of pods for a specific application would also be manually set.\nCons  Unknown of LoadBalancer is able to distribute traffic correctly  Scaling option 2 "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/integration/events/scenarios/",
	"title": "Event Scenarios",
	"tags": ["architecture", "events"],
	"description": "Description of the event-driven architecture for Altinn Apps and Altinn Platform.",
	"content": "Below you find some functional scenarios for use of events functionality in Altinn 3\nOrg waiting on ProcessComplete for a given app In this scenario, an org is waiting on end-users to complete one given app.\n  System (consumer) authenticates using Maskinporten and requests scope for org\n  System exchanges Maskinporten token to an Altinn token. Scopes is included in new token.\n  System calls\nGET {platformurl}/events/api/v1/app/{org}/{app}?from={lastchanged}\u0026amp;eventType=instance.process.completed   Event component verifies that scope matches request\n  Event components searches database for events that matches search criteria\n  Event component returns the filtered and possible capped response ordered by sequence\n  Consumer process the received events and call other API to download related data (instances, files, etc)\n  User needing to know if there is anything new for a party In this scenario, a user wants to see if there are any changes for a client or the user itself.\n  System authenticates end user with ID-porten\n  System exchanges token with Altinn\n  System calls event API\nPOST {platformurl}/events/api/v1/party/   Event component query events in database.\n  Event components authorized the event and filter away events where user is not authorized\n  Events are returned\n  Consumer process events\n  Consumer gets relevant data\n  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/runtime/security/",
	"title": "Security Enforcement Capabilities",
	"tags": ["architecture"],
	"description": "Security Enforcement Capabilities are capabilities typical provided by common architecture components.",
	"content": "\rAuthentication Capabilities\rThe different solutions need different types of Authentication capabilties to support the different users and systems.\n\r\rAuthorization\rThe Altinn 3 platform has very powerful and flexible authorization capabilities.\n\r\rEncryption\rDescription of the encryption architecture\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/security/",
	"title": "Security Enforcement Capabilities",
	"tags": ["architecture", "security", "runtime capabilities"],
	"description": "Description of the Altinn Studio, Altinn Apps, Altinn Platform security architecture providing runtime capabilities for the solutions.",
	"content": "For a solutions like Altinn Studio, Altinn Apps and Altinn Platform security is a important aspect.\nThe security architecture is based on the following reference model\n\rJWTCookieAuthentication\rThis is the description of JWTCookieAuthentication.\n\r\rPolicy Enforcement Point\rThere are different types of Policy Enforcement Points in the Altinn 3 platform.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/security/",
	"title": "security",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/service-configurations/",
	"title": "ServiceConfigurations.json",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for tjeneste konfigurasjons filen.",
	"content": "Overordnet ServiceConfiguration.json filen spesifiserer ulike konfigurasjoner lagt til i design prosessen. Nå består den av api koblinger, kalkuleringer og dynamikk regler.\nFormat API connections Strukturen under beskriver api koblinger til et skjema. Objektet inneholder koblingene og informajson knyttet til api\u0026rsquo;ene som er i bruk. ClientParams og apiResponseMapping viser mapping til datamodellen. externalApiId viser kobling til api\u0026rsquo;er som kan brukes.\n\u0026#34;data\u0026#34;: { \u0026#34;externalApi\u0026#34;: { \u0026#34;APIs\u0026#34;: { \u0026#34;connections\u0026#34;: { \u0026#34;c5dadba0-9707-11e8-9c4d-6f48d2b86ea7\u0026#34;: { \u0026#34;externalApiId\u0026#34;: \u0026#34;id1\u0026#34;, \u0026#34;clientParams\u0026#34;: { \u0026#34;pnr\u0026#34;: \u0026#34;skattyterinfor.kontakt.kontaktpersonPostnummer.value\u0026#34; }, \u0026#34;metaParams\u0026#34;: { \u0026#34;clientUrl\u0026#34;: \u0026#34;fgdb\u0026#34; }, \u0026#34;apiResponseMapping\u0026#34;: { \u0026#34;skattyterinfor.kontakt.kontaktpersonPoststed.value\u0026#34;: \u0026#34;result\u0026#34; } } }, \u0026#34;externalApisById\u0026#34;: { \u0026#34;id1\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;id1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Bring postnummer API\u0026#34;, \u0026#34;shortname\u0026#34;: \u0026#34;Postnummer\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;https://api.bring.com/shippingguide/api/postalCode.json?\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Api for å hente poststed basert på postnummer\u0026#34;, \u0026#34;clientParams\u0026#34;: { \u0026#34;pnr\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;queryString\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;pnr\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;required\u0026#34;: true, \u0026#34;example\u0026#34;: \u0026#34;Example: 2050\u0026#34; } }, \u0026#34;metaParams\u0026#34;: { \u0026#34;clientUrl\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;queryString\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;clientUrl\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;required\u0026#34;: true, \u0026#34;example\u0026#34;: \u0026#34;Example: http://www.sitename.com\u0026#34;, \u0026#34;urlEncode\u0026#34;: true } } } }, \u0026#34;externalApisIds\u0026#34;: [ \u0026#34;id1\u0026#34; ] } } Rule connections Strukturen under beskriver regler lagt til i et skjema. Objektet inneholder koblingene til regler som finnes på et skjema. I objektet er det spesifisert hvilken metode som skal brukes, hvilke felter i datamodellen som skal knyttes til input objektet til metoden og hvilke felt i datamodellen som skal knyttes til funsjonens output verdi.\n\u0026#34;ruleConnection\u0026#34;: { \u0026#34;d180e210-9707-11e8-9c4d-6f48d2b86ea7\u0026#34;: { \u0026#34;selectedFunction\u0026#34;: \u0026#34;ruleFunctionName\u0026#34;, \u0026#34;inputParams\u0026#34;: { \u0026#34;inputParam1\u0026#34;: \u0026#34;skattyterinfor.info.enhetOrganisasjonsnummer.value\u0026#34;, \u0026#34;inputParam2\u0026#34;: \u0026#34;skattyterinfor.kontakt.kontaktpersonEPost.value\u0026#34; }, \u0026#34;outParams\u0026#34;: { \u0026#34;outParam0\u0026#34;: \u0026#34;klage.spesifisering.klageSpesifisering.value\u0026#34; } } } Conditional rendering connections Strukturen under beskriver dynamikk lagt til i et skjema. Objektet inneholder koblingene mellom skjema og dynamiske regler som finnes på et skjema. I objektet er det spesifisert hvilken metode som skal brukes, hvilke felter i datamodellen som skal knyttes til input objektet til metoden og mapping mellom regelen og elementer i skjemaet.\n\u0026#34;conditionalRendering\u0026#34;: { \u0026#34;d841b430-9707-11e8-9c4d-6f48d2b86ea7\u0026#34;: { \u0026#34;selectedFunction\u0026#34;: \u0026#34;conditionalFunctionName\u0026#34;, \u0026#34;inputParams\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026#34; }, \u0026#34;selectedAction\u0026#34;: \u0026#34;Hide\u0026#34;, \u0026#34;selectedFields\u0026#34;: { \u0026#34;d8416610-9707-11e8-9c4d-6f48d2b86ea7\u0026#34;: \u0026#34;94bb4f87-3428-4f2e-9b6a-6ff358ebd173\u0026#34; } } } "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/serviceimplementation/",
	"title": "ServiceImplementation.cs",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for tjenesteimplementasjonen.",
	"content": "Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes\rvidere med i MVP.\r\rOverordnet \u0026lsquo;ServiceImplementation.cs\u0026rsquo; er hovedgrensesnittet mellom Altinn Core runtime og foretningslogikken i tjenesten som kjører på server.\nFormat \u0026lsquo;ServiceImplementation.cs\u0026rsquo; implementerer grensesnittet IServiceImplementation som har følgende metoder definert.\nobject CreateNewServiceModel(); Metode som oppretter nytt datamodell objekt basert på den datamodellen som tjenesten definerer\nvoid SetServiceModel(object model); Metode som gjør at plattformen kan tilgjengeliggjøre en populert datamodell til tjenesteimplementasjonen\nvoid SetContext(RequestContext requestContext, dynamic viewBag); Metode som setter context informasjon til tjenesteimplementasjon\nvoid SetContext(RequestContext requestContext, dynamic viewBag, ServiceContext serviceContext, StartServiceModel startServiceModel, ModelStateDictionary modelState); Metode som setter context informasjon til tjenesteimplementasjon\nTask RunServiceEvent(ServiceEventType serviceEvent); Metode som trigger en tjeneste hendelse. Dette gjør plattformen ved spesielle tidspunkt og tjenesteutvikler kan da velge å kjøre forretningslogikk under dise hendelsene.\nHendelsene som er definert til nå er.\n BeforeRender Calculation Instantiation ValidateInstantiation Validation DataRetrieval  void SetPlatformServices(IPlatformServices platformServices); Tilgjengeligjør plattformtjenester.\nViewMetadata GetView(string viewID, UserActionType userAction); Henter view. TODO: Vurder å fjerne dette når man har konkludert om MVC Razor views skal støttes av plattformen.\nUtvikling Under opprettelse av en tjeneste vil en tom ServiceImplementasjonsklasse opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\nForretningslogikk Foretningslogikk implementeres i denne klassen eller andre relatert klasser som denne referer til. Det vil være opp til utvikler å eventuelt skille kode ut i flere andre klasser.\nTjenester 3.0 oppretter egne klasser for forretningslogikk tilknyttet kalkuleringer, valideringer og instansiering.\nEksempel på forretningslogikk\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/servicemetadata/",
	"title": "ServiceMetadata.json",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for ServiceMetadata.",
	"content": "Overordnet \u0026lsquo;ServiceMetadata.json\u0026rsquo; beskriver datamodellen til et skjema. Den autogenereres fra XSD.\nFormat \u0026lsquo;ServiceMetadata.json\u0026rsquo; inneholder informasjon om alle felter i en datamodell. ServiceModell vil genereres fra denne. Hvis man ønsker å overstyre egenskaper fra XSD så kan det gjøres her.\nTODO: Det er en rekke ting som er uavklart om hva man vil kunne gjøre av endringer på denne.\nEksempel Under er et eksempel på hvordan ServiceMetadata kan se ut\n{ \u0026#34;Org\u0026#34;:\u0026#34;BR\u0026#34;, \u0026#34;Service\u0026#34;:\u0026#34;Tjeneste1\u0026#34;, \u0026#34;Edition\u0026#34;:\u0026#34;2019\u0026#34;, \u0026#34;Elements\u0026#34;:{ \u0026#34;Skjema.skjemanummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.skjemanummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;skjemanummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/skjemanummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;Integer\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;skjemanummer\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;1243\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.spesifikasjonsnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.spesifikasjonsnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;spesifikasjonsnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/spesifikasjonsnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;Integer\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;spesifikasjonsnummer\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;10702\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.blankettnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.blankettnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;blankettnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/blankettnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;blankettnummer\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;RF-1117\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.tittel\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.tittel\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;tittel\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/tittel\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;tittel\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;Klage p� likningen\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5800\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.etatid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.etatid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;etatid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/etatid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;etatid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5801\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5802\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25795\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverNavnPreutfylt.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;175\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25795.OppgavegiverNavnPreutfylt.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25795.OppgavegiverNavnPreutfylt.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverNavnPreutfylt\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;OppgavegiverNavnPreutfylt-datadef-25795\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25796\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverAdressePreutfylt.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;500\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25796.OppgavegiverAdressePreutfylt.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25796.OppgavegiverAdressePreutfylt.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverAdressePreutfylt\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;OppgavegiverAdressePreutfylt-datadef-25796\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25797\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverPostnummerPreutfylt.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;length\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;4\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;pattern\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;[0-9]{4}\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25797.OppgavegiverPostnummerPreutfylt.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25797.OppgavegiverPostnummerPreutfylt.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPostnummerPreutfylt\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;OppgavegiverPostnummerPreutfylt-datadef-25797\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25798\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverPoststedPreutfylt.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;35\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25798.OppgavegiverPoststedPreutfylt.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25798.OppgavegiverPoststedPreutfylt.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverPoststedPreutfylt\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;OppgavegiverPoststedPreutfylt-datadef-25798\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;26\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverFodselsnummer.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;length\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;11\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;26.OppgavegiverFodselsnummer.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;26.OppgavegiverFodselsnummer.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.OppgavegiverFodselsnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;OppgavegiverFodselsnummer\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;OppgavegiverFodselsnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.oppgavegiverFodselsnummer\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/OppgavegiverFodselsnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;OppgavegiverFodselsnummer-datadef-26\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;18\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.enhetOrganisasjonsnummer.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;length\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;9\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;18.EnhetOrganisasjonsnummer.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;18.EnhetOrganisasjonsnummer.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.enhetOrganisasjonsnummer\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetOrganisasjonsnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;EnhetOrganisasjonsnummer-datadef-18\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetKommunenummer/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;17\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.enhetKommunenummer.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetKommunenummer/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;length\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;4\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;pattern\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;[0-9]{4}\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;17.EnhetKommunenummer.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;17.EnhetKommunenummer.Label\u0026#34;, \u0026#34;PlaceHolder\u0026#34;:\u0026#34;17.EnhetKommunenummer.PlaceHolder\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info.EnhetKommunenummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;EnhetKommunenummer\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;EnhetKommunenummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info.enhetKommunenummer\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info/EnhetKommunenummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;EnhetKommunenummer-datadef-17\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.info\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.info\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;info\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;info\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.info\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/info\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:3, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;info-grp-5802\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5803\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;2\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonNavn.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;150\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Label\u0026#34;:\u0026#34;2.KontaktpersonNavn.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonNavn\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonNavn\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonNavn\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonNavn\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonNavn\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonNavn-datadef-2\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;2751\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonAdresse.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;105\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;2751.KontaktpersonAdresse.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;2751.KontaktpersonAdresse.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonAdresse\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonAdresse\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonAdresse\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonAdresse\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonAdresse\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonAdresse-datadef-2751\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;10441\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonPostnummer.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;length\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;4\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;pattern\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;[0-9]{4}\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;10441.KontaktpersonPostnummer.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;10441.KontaktpersonPostnummer.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPostnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonPostnummer\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonPostnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonPostnummer\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPostnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonPostnummer-datadef-10441\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;10442\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonPoststed.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;35\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;10442.KontaktpersonPoststed.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;10442.KontaktpersonPoststed.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonPoststed\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonPoststed\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonPoststed\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonPoststed\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonPoststed\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonPoststed-datadef-10442\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;27688\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonEPost.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;45\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;27688.KontaktpersonEPost.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;27688.KontaktpersonEPost.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonEPost\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonEPost\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonEPost\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonEPost\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonEPost\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonEPost-datadef-27688\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;3\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonTelefonnummer.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;13\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;3.KontaktpersonTelefonnummer.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;3.KontaktpersonTelefonnummer.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt.KontaktpersonTelefonnummer\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KontaktpersonTelefonnummer\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KontaktpersonTelefonnummer\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt.kontaktpersonTelefonnummer\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt/KontaktpersonTelefonnummer\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KontaktpersonTelefonnummer-datadef-3\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.Kontakt\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;Kontakt\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;Kontakt\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.kontakt\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/Kontakt\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ \u0026#34;Label\u0026#34;:\u0026#34;5803.Kontakt.Label\u0026#34;, \u0026#34;Help\u0026#34;:\u0026#34;5803.Kontakt.Help\u0026#34;, \u0026#34;PlaceHolder\u0026#34;:\u0026#34;5803.Kontakt.PlaceHolder\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;Kontakt-grp-5803\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5804\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25455\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klageGjeldendeInntektsar.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;GYear\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25455.KlageGjeldendeInntektsar.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25455.KlageGjeldendeInntektsar.Label\u0026#34;, \u0026#34;PlaceHolder\u0026#34;:\u0026#34;25455.KlageGjeldendeInntektsar.PlaceHolder\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageGjeldendeInntektsar\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KlageGjeldendeInntektsar\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KlageGjeldendeInntektsar\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klageGjeldendeInntektsar\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageGjeldendeInntektsar\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KlageGjeldendeInntektsar-datadef-25455\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25454\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klagemeldingSendtInnenKlagefrist.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;3\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;enumeration\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;Ja;Nei;\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25454.KlagemeldingSendtInnenKlagefrist.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25454.KlagemeldingSendtInnenKlagefrist.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlagemeldingSendtInnenKlagefrist\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KlagemeldingSendtInnenKlagefrist-datadef-25454\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25456\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klageUtloptKlagefristBegrunnelse.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1000\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25456.KlageUtloptKlagefristBegrunnelse.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25456.KlageUtloptKlagefristBegrunnelse.Label\u0026#34;, \u0026#34;PlaceHolder\u0026#34;:\u0026#34;25456.KlageUtloptKlagefristBegrunnelse.PlaceHolder\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist.KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist.klageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist/KlageUtloptKlagefristBegrunnelse\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KlageUtloptKlagefristBegrunnelse-datadef-25456\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor.klagefrist\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.Skattyterinfor\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;klagefrist\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;klagefrist\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor.klagefrist\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor/klagefrist\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ \u0026#34;Label\u0026#34;:\u0026#34;5804.klagefrist.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;klagefrist-grp-5804\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.Skattyterinfor\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.Skattyterinfor\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;Skattyterinfor\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;Skattyterinfor\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;skattyterinfor\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/Skattyterinfor\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ \u0026#34;Label\u0026#34;:\u0026#34;5801.Skattyterinfor.Label\u0026#34;, \u0026#34;Help\u0026#34;:\u0026#34;5801.Skattyterinfor.Help\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;Skattyterinfor-grp-5801\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5805\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.spesifisering.gruppeid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.spesifisering.gruppeid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage.spesifisering\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/spesifisering/gruppeid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;gruppeid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;5836\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.spesifisering.KlageSpesifisering.orid\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.spesifisering.KlageSpesifisering.orid\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage.spesifisering.KlageSpesifisering\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/spesifisering/KlageSpesifisering/orid\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Attribute\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;PositiveInteger\u0026#34;, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;orid\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:\u0026#34;25457\u0026#34;, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.spesifisering.KlageSpesifisering.Value\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.spesifisering.KlageSpesifisering.Value\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage.spesifisering.KlageSpesifisering\u0026#34;, \u0026#34;TypeName\u0026#34;:null, \u0026#34;Name\u0026#34;:\u0026#34;Value\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;klage.spesifisering.klageSpesifisering.value\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/spesifisering/KlageSpesifisering/Value\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ \u0026#34;minLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;ErrortText\u0026#34;:null }, \u0026#34;maxLength\u0026#34;:{ \u0026#34;Value\u0026#34;:\u0026#34;1000\u0026#34;, \u0026#34;ErrortText\u0026#34;:null } }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Field\u0026#34;, \u0026#34;XsdValueType\u0026#34;:\u0026#34;String\u0026#34;, \u0026#34;Texts\u0026#34;:{ \u0026#34;Help\u0026#34;:\u0026#34;25457.KlageSpesifisering.Help\u0026#34;, \u0026#34;Label\u0026#34;:\u0026#34;25457.KlageSpesifisering.Label\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:1, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:true, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.spesifisering.KlageSpesifisering\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.spesifisering.KlageSpesifisering\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage.spesifisering\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;KlageSpesifisering\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;KlageSpesifisering\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;klage.spesifisering.klageSpesifisering\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/spesifisering/KlageSpesifisering\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;KlageSpesifisering-datadef-25457\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage.spesifisering\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage.spesifisering\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema.klage\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;spesifisering\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;spesifisering\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;klage.spesifisering\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage/spesifisering\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;spesifisering-grp-5836\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema.klage\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema.klage\u0026#34;, \u0026#34;ParentElement\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;TypeName\u0026#34;:\u0026#34;klage\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;klage\u0026#34;, \u0026#34;DataBindingName\u0026#34;:\u0026#34;klage\u0026#34;, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema/klage\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ \u0026#34;Label\u0026#34;:\u0026#34;5805.klage.Label\u0026#34;, \u0026#34;Help\u0026#34;:\u0026#34;5805.klage.Help\u0026#34;, \u0026#34;PlaceHolder\u0026#34;:\u0026#34;5805.klage.PlaceHolder\u0026#34; }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:1, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:\u0026#34;klage-grp-5805\u0026#34;, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false }, \u0026#34;Skjema\u0026#34;:{ \u0026#34;ID\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;ParentElement\u0026#34;:null, \u0026#34;TypeName\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;Name\u0026#34;:\u0026#34;Skjema\u0026#34;, \u0026#34;DataBindingName\u0026#34;:null, \u0026#34;XPath\u0026#34;:\u0026#34;/Skjema\u0026#34;, \u0026#34;Restrictions\u0026#34;:{ }, \u0026#34;Choices\u0026#34;:null, \u0026#34;Type\u0026#34;:\u0026#34;Group\u0026#34;, \u0026#34;XsdValueType\u0026#34;:null, \u0026#34;Texts\u0026#34;:{ }, \u0026#34;CustomProperties\u0026#34;:{ }, \u0026#34;MaxOccurs\u0026#34;:0, \u0026#34;MinOccurs\u0026#34;:0, \u0026#34;XName\u0026#34;:null, \u0026#34;IsTagContent\u0026#34;:false, \u0026#34;FixedValue\u0026#34;:null, \u0026#34;IsReadOnly\u0026#34;:false } } } "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/servicemodel/",
	"title": "ServiceModel.cs",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av ServiceModel.cs.",
	"content": "Overordnet \u0026lsquo;ServiceModel.cs\u0026rsquo; er tjenestemodellen som automatisk genereres fra datamodellen som er valgt på tjenesten. Denne kommer i utgangspunktet fra XSD, men tjenester 3.0 vil mest sannsynlig få støtte for å definere datamodell selv.\nRuntime vil populere datamodellen med data fra GUI og forretningsregler vil kunne jobbe mot denne modellen.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/servicemodelxsd/",
	"title": "ServiceModel.xsd",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av ServiceModel.xsd.",
	"content": "Overordnet \u0026lsquo;ServiceModel.xsd\u0026rsquo; er definasjonen på datamodellen på tjenesten. Dette er en XSD som typisk er definert i Seres eller OR i dagens Altinn løsning.\nFor tjenester 3.0 vil jobbes med å kunne definere XSD som en del av løsningen. (f.eks å definere skjema i GUI og få XSD basert på det). Dette vil avklares fremover.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/capabilities/devops/softwareconfiguration/",
	"title": "Software Configuration &amp; Release Management Capabilities",
	"tags": ["architecture", "todo", "devops"],
	"description": "Software Configuration &amp; Release Management Capabilities process of tracking changes and handle new releases for a application",
	"content": "Version, Release \u0026amp; Artefact Management Capabilities Version Management Artefact Management Software Configuration Management Release Management Continuous Del. Pipeline Management The goal is to deliver continously.\nDeployment Capabilities Deployment Orchestration Capabilites The devopsteam has the capability to orhecstrate deployes. Both autmatic and manual deploy is supported.\nSee development application components to get a overview over tools and application we use.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/solution/",
	"title": "solution",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/",
	"title": "Solutions",
	"tags": [],
	"description": "The latest generation Altinn platform consist of serveral solutions.",
	"content": "\rAltinn ReStorage\rAltinn ReStorage is a comand line application that can be used by operators to recover and restore data from Altinn Platform Storage.\n\r\rAltinn Apps\rAltinn Apps is a flexible, scalable and isolated hosting solution where apps created in Altinn Studio is deployed.\n\r\rAltinn CLI\rAltinn CLI is a command line application that can be used by app owneres to access Altinn APIs.\n\r\rAltinn Platform\rAltinn Platform contains components with central functionality that can be used by apps. Currently, this is storage, authentication, authorization, profile, register, receipt, pdf and events.\n\r\rAltinn Studio\rAltinn Studio is the design-time solution for developing, maintaining, building and deploying applications. Applications created can target both simple and complex user scenarios and have a modern web native architecture.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/ssl/",
	"title": "ssl",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/swagger/storage/",
	"title": "Storage",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Platform Storage.",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/construction/altinn-platform/storage/",
	"title": "Application Construction components - Storage",
	"tags": ["architecture", "solution"],
	"description": "The storage component is an application hosted in Kubernetes as a Docker container.",
	"content": "API Controllers Storage exposes functionality throug API controllers.\nThe following controllers exist:\n Applications Data InstanceEvents Instances MessageboxInstances Process  Dependencie Storage components\nSee complete list of dependencies in Altinn.Platform.Storage.csproj file for storage.\nDocker configuration Storage listen on port 5010.\nSee DockerFile for details.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/infrastructure/storage/",
	"title": "Storage componentens",
	"tags": ["architecture", "infrastructure"],
	"description": "Altinn 3 uses different types of storage components.",
	"content": "Cosmos DB Azure Cosmos DB is a fully managed NoSQL database for modern app development. Single-digit millisecond response times, and automatic and instant scalability, guarantee speed at any scale. Business continuity is assured with SLA-backed availability and enterprise-grade security.\nAltinn 3 uses Cosmos DB to store metadata about data in Altinn.\n applications: applications dataElements: data elements instanceEvents: instance events instances: instance information leases: used by Azure Functions texts: Applications texts  Azure CosmosDB is configured with one Write Region and one read region. This for redundancy.\nAzure CosmosDB provides automatic backup of the database. This is in additon to our custom backup.\nWe use autoscale to adjust the number of assigned RU.\nRead more about Azure Cosmos DB\nPostgreSQL PostgreSQL is used at a relational database for Altinn Platform Events and for Altinn Repository.\nAzure Blob storage All data stored in Altinn Platform Storage for Apps are stored in a Azure Blob storage. This include formdata and all binary attachments.\nThe data is georeplicated between Norway East and Norway West\nAzure Disks The Kubernetes Cluster uses disks for volumes\nWe use Azure Disk for storage in Kubernetes Cluster\nAzure Container Registries Azure Container Registry is a managed, private Docker registry service based on the open-source Docker Registry 2.0. Create and maintain Azure container registries to store and manage your private Docker container images and related artifacts.\nIn Altinn 3 each org has their own Azure Container Registry where the images build of their applications are stored.\nIn addition the platform itself has their own container registry\nRead more about Azure Container Registry\nAzure Key Vaults Azure Key Vault is a cloud service for securely storing and accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, or cryptographic keys. Key Vault service supports two types of containers: vaults and managed HSM pools. Vaults support storing software and HSM-backed keys, secrets, and certificates.\nEvery organization cluster has two keyvaults. One is target for secrets for applications. Secrets are added by the app developers as self services.\nThe other is targetet for secrets needed to be shared with Altinn Platform. Access token to storage accounts is one example\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-platform/storage/",
	"title": "Storage",
	"tags": ["platform", "storage"],
	"description": "The Storage component gives storage capabilities to the apps.",
	"content": "Storage support storage of structured and unstructured data for apps. Apps that need the cabability to store data uses the storage service in the Altinn platform to store both metadata and actual data.\nMetadata Stored in Azure Cosmos Db.\nFormdata and attachments Stored in Azure Blob Storage. One storage account for each application owner.\nAdditional details See Application Architecture for details about the solutions components in Storage.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/storage/",
	"title": "storage",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/storage-interfaces/",
	"title": "Changelog for the Storage Interface package.",
	"tags": [],
	"description": "Overview of changes introduced to the Altinn.Platform.Storage.Interface NuGet package.",
	"content": "\rv3\rOverview of changes introduced in v3 of the Altinn.Platform.Storage.Interface package.\n\r\rv2\rOverview of changes introduced in v2 of the Altinn.Platform.Storage.Interface package.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/",
	"title": "Data Structure for Repos",
	"tags": ["altinn-repos", "arkitektur", "todo"],
	"description": "Struktur for repositories og filer i Gitea.",
	"content": "Under arbeid... Her må det gjøres en større opprydding i filstrukturen.\r\rOverordnet struktur Gitea\n├── \raltinn\n│ ├── \rcommon\n│ │ ├── \rtext \u0026hellip;\n│ │ └── \rwidgets \u0026hellip;\n│ │ └── README.md\n│ ├── \rcodelists\n│ │ ├── \rcountries.json\n│ │ └── \r\u0026hellip;\n│ │ └── README.md\n│ └── \r\u0026hellip;\n│\n├── \rorg-x\n│ ├── \rorg-x\n│ │ ├── \rsettings.json\n│ │ ├── \rtext \u0026hellip;\n│ │ ├── \rmodels \u0026hellip;\n│ │ └── \rwidgets \u0026hellip;\n│ │\n│ ├── \rcodelists\n│ │ ├── \rkodeliste1.json\n│ │ └── \r\u0026hellip;\n│ │\n│ ├── \rtjeneste-1\n│ │ ├── \rDeployment (helm)\n│ │ │ ├── \rtemplates\n│ │ │ │ ├── \r_helpers.tpl\n│ │ │ │ ├── \rdeployment.yaml\n│ │ │ │ ├── \ringress.yaml\n│ │ │ │ ├── \rNOTES\n│ │ │ │ └── \rservice.yaml\n│ │ │ ├── \r.helmignore\n│ │ │ ├── \rChart.yaml\n│ │ │ └── \rvalues.yaml\n│ │ ├── \rImplementation\n│ │ │ ├── \rCalculation\n│ │ │ │ └── \rCalculationHandler.cs\n│ │ │ ├── \rInstantiationHandler.cs\n│ │ │ ├── \rServiceImplementation.cs\n│ │ │ └── \rValidationHandler.cs\n│ │ ├── \rMetadata │ │ │ ├── \rapplicationmetadata.json\n│ │ │ ├── \rServiceMetadata.json\n│ │ │ └── \rworkflow.json\n│ │ ├── \rModel\n│ │ │ ├── \rServiceModel.xsd\n│ │ │ └── \rServiceModel.cs\n│ │ ├── \rResources\n│ │ │ ├── \rDynamics\n│ │ │ │ └── \rRuleHandler.js\n│ │ │ ├── \rStyles.json\n│ │ │ ├── \rreact-app.css\n│ │ │ ├── \rreact-app.js │ │ │ ├── \rFormLayout.json\n│ │ │ ├── \rServiceConfigurations.json\n│ │ │ ├── \rresource.nb-NO.json\n│ │ │ └── \rresource.nn-NO.json\n│ │ ├── \rTest (used for runtime)\n│ │ ├── \rTestdataforparty (used for runtime) │ │ │ ├──\r\ruser1 │ │ │ │ ├──\r\rinstance1 │ │ │ │ │ ├──\r\rinstance1.json │ │ │ │ │ ├──\r\rinstance1.state.json │ │ │ │ │ ├──\r\rdata\n│ │ │ │ │ │ ├──\r\rdata-id1 │ │ │ │ │ │ │ ├──\r\rdata-id1.xml\n│ │ │ │ │ │ ├──\r\rdata-id\u0026hellip;\n│ │ ├── \rWorkflow\n│ │ │ └── \rworkflow.bpmn (BPMN)\n│ │ ├── \rAltinnService.csproj │ │ ├── \rconfig.json │ │ ├── .gitignore\n│ │ ├── LICENSE\n│ │ └── README.md\n│ │\n│ └── \rtjeneste-2 \u0026hellip;\n│\n├── \rorg-y\n│ ├── \rorg-y \u0026hellip;\n│ └── \r\u0026hellip;\n│\n├── \rbruker-a\n│ └── \rtjeneste-1 (fork av org-x/tjeneste-1)\n├── \rbruker-b \u0026hellip;\n│\n├── \rAlle organisasjoner\n├── \rAlle repos\n└── \rAlle brukere\n\rApp.csproj\rDescription for App.csproj file.\n\r\rapplicationmetadata.json\rDescription of format for application metadata.\n\r\rCalculationHandler.cs\rBeskrivelse av format for calculation handler.\n\r\rFormLayout.json\rBeskrivelse av format for skjema-layout\n\r\rInstansiationHandler.cs\rBeskrivelse av format for InstansiationHandler.\n\r\rreact-app.js\rBeskrivelse av React-App.js\n\r\rRuleHandler.js\rBeskrivelse av format for rule handler js filen.\n\r\rServiceConfigurations.json\rBeskrivelse av format for tjeneste konfigurasjons filen.\n\r\rServiceImplementation.cs\rBeskrivelse av format for tjenesteimplementasjonen.\n\r\rServiceMetadata.json\rBeskrivelse av format for ServiceMetadata.\n\r\rServiceModel.cs\rBeskrivelse av ServiceModel.cs.\n\r\rServiceModel.xsd\rBeskrivelse av ServiceModel.xsd.\n\r\rValidationHandler.cs\rBeskrivelse av format for ValidationHandler.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/swagger/studio/",
	"title": "Studio",
	"tags": ["swagger"],
	"description": "API documentation for Altinn Studio Repos.",
	"content": "See https://altinn.studio/repos/api/swagger\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/stylecop/",
	"title": "StyleCop",
	"tags": ["tech", "code-quality"],
	"description": "Stylecop analyzer is a code analysis tool for C#.",
	"content": "StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.\nIn Altinn Studio, we have turned set this \u0026ldquo;warning\u0026rdquo; action to \u0026ldquo;Error\u0026rdquo; to enforce the use of rules.\nNuget Package Instructions to install the stylecop analyzer in your project can be found here.\nRuleset A solution wide stylecop ruleset and configuration(stylecop.json) is set for altinn studio application. This can be linked to the projects by linking these files like below in the project. It is set to only work when building in Debug mode.\n\u0026lt;ItemGroup Condition=\u0026#34;\u0026#39;$(Configuration)\u0026#39;==\u0026#39;Debug\u0026#39;\u0026#34;\u0026gt; \u0026lt;PackageReference Include=\u0026#34;StyleCop.Analyzers.Unstable\u0026#34; Version=\u0026#34;1.1.1.61\u0026#34; /\u0026gt; \u0026lt;AdditionalFiles Include=\u0026#34;$(SolutionDir)stylecop.json\u0026#34;\u0026gt; \u0026lt;Link\u0026gt;stylecop.json\u0026lt;/Link\u0026gt; \u0026lt;/AdditionalFiles\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;PropertyGroup Condition=\u0026#34;\u0026#39;$(Configuration)\u0026#39;==\u0026#39;Debug\u0026#39;\u0026#34;\u0026gt; \u0026lt;CodeAnalysisRuleSet\u0026gt;$(SolutionDir)Altinn3.ruleset\u0026lt;/CodeAnalysisRuleSet\u0026gt; \u0026lt;/PropertyGroup\u0026gt; We have turn on the rules that will improve the code quality and maintainability.\nTurn off/Turn on a rule To turn on/off a rule from the ruleset,\n Click on Altinn3.ruleset file in the solution explorer Expand the Stylecop.Analyzers Check/uncheck the rule you want to turn on/off If you are turning on a rule, select the action to be \u0026ldquo;Error\u0026rdquo;  Implemented rules in Altinn Studio The list of rules that are implemented (and not implemented) in altinn studio can be found here.\nLinks  Rule Documentation Configuring Stylecop Analyzer Github  "
},
{
	"uri": "https://docs.altinn.studio/tags/styling/",
	"title": "styling",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/altinn-api/platform-api/swagger/",
	"title": "Swagger",
	"tags": [],
	"description": "Open API specifications for the Altinn 3 Platform API.",
	"content": "\rAuthentication\rAPI documentation for Altinn Platform Authentication.\n\r\rAuthorization\rAPI documentation for Altinn Platform Authorization.\n\r\rEvents\rAPI documentation for Altinn Platform Events.\n\r\rPDF\rAPI documentation for Altinn Platform PDF.\n\r\rProfile\rAPI documentation for Altinn Platform Profile.\n\r\rRegister\rAPI documentation for Altinn Platform Register.\n\r\rStorage\rAPI documentation for Altinn Platform Storage.\n\r\rStudio\rAPI documentation for Altinn Studio Repos.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/tags/swagger/",
	"title": "swagger",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/tech/",
	"title": "tech",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/terms/",
	"title": "Terms",
	"tags": [],
	"description": "Description of the most common terms used in the documentation for Altinn Studio.",
	"content": "Actor A actor is organisation or person that a user/system is acting on behalf of. As an example User A can fill out a form on behalf of Organisation B.\ndeprecated term: Reportee\nActor List The Actor list is a list over person and organisation that a user can act on behalf of. This right is given through roles or rights delegations.\ndeprecated term: ReporteeList\nActor Type The type a Actor can be. Typical a person or organisation but also sub types of organisations.\ndeprecated term: Reportee Type\nActor Type Requirement The requirent a app has for the Actor. Typical checked when a app is instantiated\ndeprecated term: Reportee Type Requirement\nAltinn Norways E-Governement plattform. Launched december 4. 2003. Read more on altinn.no\nAltinn Apps Altinn Apps is the infrastructures for running apps developed in Altinn Studio. Each organisation that is using Altinn Studio will have their own Altinn Apps Kubernetes cluster, isolated from other organisations.\nSee Altinn Apps application architecture or deployment architecture.\nAltinn CLI The command-line interface for the new APIs in Altinn.\nIs used by service owners for retrieving data submitted by users, for instantiating and for updating status.\nhttps://github.com/altinn/altinn-cli/\nAltinn Platform Altinn Platform contains reusable microservices with functionality that can be used by apps. Platform can also be used directly by service owner systems using Altinn CLI and Maskinporten.\nCurrently these microservices are part of Platform: Authorization, Authentication, PDF, Profile, Register, and Storage.\nAltinn Platform is running in its own Kubernetes cluster.\nSee Altinn Platform solution architecture, application architecture and [deployment architecture]\nAltinn environment An Altinn environment is a isolated group of several Altinn solutions functioning together.\n AT - Acceptance testing of Altinn Studio, Altinn Apps, Altinn Platform and SBL. TT02 - App/service test environment used by the app and service owners. Production - The production environment.  Altinn Studio Altinn Studio are our tools for app development.\nConsists of Altinn Studio Designer, Altinn Studio Repos and a local code editor / development tool (e.g. Visual Studio Code).\nLets the developers create, edit, test and deploy applications. The apps are deployed as containers to a seperate infrastructure called Altinn Apps.\nhttps://altinn.studio\nAltinn Studio Designer Altinn Studio Designer is a web-based tool for creating, editing and deploying apps.\nIn Designer, it should be easy to create apps by re-using and configuring pre-made components.\nAltinn Studio Repos Altinn Studio Repos is the solution where each app is stored and versioned as a Git repository.\nNo matter which tool is used for development (Designer, Code, or something else), the app is stored in Repos.\nApi Application Programmers Interface.\nApp Short for Application. App is the name that is given for an app. It is used as repository name and as part of AppId and in different metadata. Inside an org the app needs to be a unique name. See also Application.\nDeprecated terms: AppName Service\nAppId A AppId identifies a given application. It is has the following pattern [org]/[app-name]. The app-name is the same as the name of the name of the app repo.\nApplication An applications created in Altinn Studio is called an app, short for application. Apps are deployed to a Altinn Apps environment. The app provides two things:\n an interactive user interface for users wishing to submit data to an organisation, e.g. to fill out a form manually, to read information or to sign an agreement; an api that client applications can interact with.  The application also has a metadata representation in the application repository (platform storage), which defines the various element types that an instance of an application can have.\ndeprecated term: Service\nApps Short for Altinn Apps. See Altinn Apps\nApplication Developer A user developing application in Altinn Studio.\nOrg Short for organisation. Organisation is the entity responsible for an app. Typically identified by an unique acronym, e.g. SKD, NAV, OSLK.\nDeprecated terms: Application Owner Service Owner\nData A representation of a data element which is stored in the Altinn Platform.\ndeprecated term: FormElement?\nEvent A record of activites on a specific instance.\nInstance An instance of an application for a specific instance owner is represented as an object. Is created by organisation or instance owner. It contains information of the formdata and attachments stored associated with the instance.\ndeprecated term: ReporteeElement\nInstance Owner The person or entity that is responsible for submitting an instance of an application to an organisation.\ndeprecated term: Reportee\nUser The user which is logged in in Altinn and performs actions for on behalf of an instance owner. A user and an instance owner can be the same entity.\nKubernetes A system for managing docker containers. See also: Relevant definitions within Kubernetes\nReact Teh framework used for developing UI components.\nPAP Policy Administration Point. See Authorization Architecture\nPDP Policy Administration Point. See Authorization Architecture\nPEP Policy Administration Point. See Authorization Architecture\nPIP Policy Information Point. See Authorization Architecture\nPRP Policy Retrieval Point. See Authorization Architecture\nSBL The current Altinn end user solution (SluttBrukerLøsning). See Solution Architecture\nSBL Bridge Applicaton that exposes SBL components as REST interface to Altinn Platform components. See all issues on GitHub related to SBL Bridge.\nStatefull App A statefull app uses Altinn Platform to store data\nStateless App A stateless app is a application where no data is store in in the platform. This could be a app acting like a proxy to some external APIS. State could potensial be stored in the external API, so term statless is limited to how the App not use any state in Altinn Platform.\nProcess The set of tasks a certain app is made of, i.e. data, signing, payment etc. In Altinn Studio we use a *.bpmn file for the process.\ndeprecated term: Workflow\nXACML XACML stands for \u0026ldquo;eXtensible Access Control Markup Language\u0026rdquo;. The standard defines a declarative fine-grained, attribute-based access control policy language,[2] an architecture, and a processing model describing how to evaluate access requests according to the rules defined in policies.\nAltinn Studio Apps uses the XACML standard for defining Policies for apps, the authorization architecture, and the request and response between PEP and PDP.\n\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/terraform/",
	"title": "Terraform",
	"tags": ["tech", "programming"],
	"description": "Infrastructure as Code to provision and manage any cloud, infrastructure, or service.",
	"content": "We\u0026rsquo;re using Terraform to provision all Kubernetes clusters and other infrastructure.\nLinks  https://www.terraform.io https://github.com/hashicorp/terraform https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform  "
},
{
	"uri": "https://docs.altinn.studio/tags/test/",
	"title": "test",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/testing/",
	"title": "testing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/text/",
	"title": "Text and translations",
	"tags": ["todo"],
	"description": "Using texts when designing UI, defining workflow, other settings, deploy, and more.",
	"content": "Text editing and translations Easy and efficient text processing and translation are important in an app development solution. The possibility to reuse texts across multiple apps are especially important.\nTexts in the editor are written in a ini-file that is converted to a simple JSON-file and presented as an API. In that way the user could work directly in the code editor or convert the text into other formats supported by external translation tools. Meaning that Altinn Studio supports any language that is added, not just languages supported by the Altinn portal.\n Definition of texts using hierarchical and readable keys Reusable texts, internal across different pages and on the levels above the solution Possibility to add other languages  Using lanuage keys in the solution Lanuage keys are references in the react-code with the help of a the language method getLanguageFromKey found in src/react-apps/applications/shared/src/utils/lanauge.ts. This method is called in the following way:\ngetLanguageFromKey(\u0026#39;universal_key.lanuage_key\u0026#39;, this.props.language) Where the first param is the language key and the second is the language element. If you call this.props.language.universal_key.lanuage_key you should get the key value\nHow to add a new language  Make a new ini-file and place it in AltinnCore \u0026gt; Common \u0026gt; Languages \u0026gt; ini Change the parameter \u0026ldquo;languageCode\u0026rdquo; in the API call to whatever name your ini file is called.  Example for Norweigan bokmål (nb):  http://altinn3.no/designer/y/types/Language/getLanguageAsJSON?languageCode=nb  Guides for language files  Keys are sorted by which app they belong to Universal keys ([general]) are placed at the top of the file Keys are sorted alphabetically Keys are written in lowercase with underscores (example_key)  Language best practice Summary  Name should describe the content of the value. Section should describe the context (might be page, container or component). If your name also describes the page, container or component, you might want to create a new section.  Keys (properties) Every key, or property, has a name and a value.\n Names should be short and not context based (context should be in section) Names should not describe presentational functionality like modal or popover.  Example:\n[good_example_1] ready_to_deploy_title_false = Text... [bad_example_1] app_is_ready_to_deploy_title_false = Text... [good_example_2] repo_changes_is_invisible = Text... [bad_example_2] changes_made_by_others_in_your_organisation_is_not_visible_in_altinn_studio = Text... Text parts If your text has several parts, suffix with \u0026ldquo;part1\u0026rdquo;, \u0026ldquo;part2\u0026rdquo;, \u0026ldquo;partN\u0026rdquo;.\nExample:\n[deploy_to_test] error_environment_failure_part1 = Det er noe galt med ditt error_environment_failture_part2 = -miljø. Vennligst kontakt support. Titles, subtitles and bodies If your title has associated text you should use suffixes like: \u0026ldquo;heading/title\u0026rdquo;, \u0026ldquo;subheading/subtitle\u0026rdquo;, and \u0026ldquo;body\u0026rdquo;.\nExample:\n[great_component] welcome_body = Welcome to this great component welcome_heading = Hello world welcome_subheading = Small text below the title Sorting Naming should be used so that related keys/properties are grouped when sorted alphabetically.\nTrue / false If your text has positive or negative text related to logic, suffix with true/false. This will group keys when sorting.\nExample:\n[section] ;Grouping category_repo_read_true = Andre tjenester category_repo_read_false = Du har ikke rettigheter til... ready_to_deploy_title_false = Tjenesten er IKKE klar til å legges ut i testmiljø ready_to_deploy_title_true = Tjenesten er klar til å legges ut i testmiljø [section] ;No grouping category_repo_read = Andre apps category_repo_write = Du har rettigheter til å endre disse appene main_header = Tjenesteoversikt no_category_repo_read = Du har ikke rettigheter til... no_category_repo_write = Du har ikke skriverettigheter til... Errors If there is an error, you should prefix or suffix the key with \u0026ldquo;error\u0026rdquo;. If grouping when alphabetizing is important, use suffix.\nExample:\n[no_grouping] error_a_problem_has_occured = Det har oppstått et problem [grouping] file_uploader_validation_error_delete = Noe gikk galt under slettingen av filen, prøv igjen senere. file_uploader_validation_error_file_ending = er ikke blant de tillatte filtypene. file_uploader_validation_error_file_size = overskrider tillatt filstørrelse. Sections [sections] Sections are used to categorize keys (properties) that belong together. It may be a page, container or component.\nExamples [general] [dashboard] [sync_header] [general] [dashboard] [sync_header] Try to not use application wide sections that might need container or component reference in the key name.\nSee all issues related to text and language on Github.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/theming/",
	"title": "Theming and styling",
	"tags": [],
	"description": "Solution for theming and styling conventions.",
	"content": "Altinn Studio is based on Material-UI, a UI components library that focus exclusively on the React library. At this point the SBL-forms are based on Bootstrap. This might change in the future in order to support more sophisticated forms and the possibilty to write forms in other languages than React + Bootstrap.\nBoth the forms that are produced and the editor will have the possibilty to change theme. By default Altinn Studio will use the Altinn theme. The theme will at this point only change colors and fonts in Altinn Studio. The colors are base on the altinn color palette.\nCSS Components are devided into two groups. Shared components that is used several times and should be accessible for several apps. And components that are specific for one app or view. CSS for a component is set in its representative tsx-file with paramethers linking to the theme.\nHow to change theme Changing the theme without having to do alot of changes to the code is post-MVP.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/third-party-tools/",
	"title": "third party tools",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/tls/",
	"title": "tls",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/todo/",
	"title": "todo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/",
	"title": "Tools and frameworks",
	"tags": ["tech"],
	"description": "The open source tech used in Altinn Studio, Altinn Apps and Altinn Platform.",
	"content": "\r.NET Core\rServer side development framework.\n\r\rAlpine Linux\rAlpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.\n\r\rBPMN\rBusiness Process Model and Notation.\n\r\rC#\rServer side programming language.\n\r\rDocker\rDocker is the container technology used in Altinn Studio, Altinn Apps and Altinn Platform.\n\r\rGit\rGit is a distributed version-control system for tracking changes in source code during software development.\n\r\rGitea\rGitea is a self-hosted Git service similar to GitHub. It is used as the repository solution in Altinn Studio Repos.\n\r\rGo\rServer side programming language.\n\r\rGrafana\rGrafana is an open platform for analytics and monitoring.\n\r\rHelm\rThe Kubernetes Package Manager.\n\r\rHugo\rStatic site generator used for our documentation.\n\r\rJest\rJavaScript Testing Framework.\n\r\rKubernetes\rKubernetes is used to manage the docker containers.\n\r\rMarkdown\rMarkdown is a text-to-HTML conversion tool for web writers, created in 2004 by John Gruber.\n\r\rMaterial UI\rA popular React UI library used in Altinn Studio.\n\r\rNginx\rLoad balancer currently used for routing traffic between Repos and Designer.\n\r\rNode.js\rNode.js is a JavaScript runtime built on Chrome\u0026#39;s V8 JavaScript engine.\n\r\rPrometheus\rPrometheus is an open-source systems monitoring and alerting toolkit.\n\r\rReact\rModulært rammeverk for å utvikle UI komponenter og SPA applikasjoner.\n\r\rStyleCop\rStylecop analyzer is a code analysis tool for C#.\n\r\rTerraform\rInfrastructure as Code to provision and manage any cloud, infrastructure, or service.\n\r\rTraefik\rContainer load balancer.\n\r\rTypeScript\rTypeScript is a superset of JavaScript that compiles to clean JavaScript output.\n\r\rVisual Studio Code\rVisual Studio Code is a lightweight source code editor which runs on your desktop.\n\r\r"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/traefik/",
	"title": "Traefik",
	"tags": ["tech", "containers", "load-balancer"],
	"description": "Container load balancer.",
	"content": "Traefik is used for load balancing in Altinn Apps and Altinn Platform. It routes traffic based on tags on the app containers.\nLinks  https://traefik.io https://github.com/containous/traefik https://hub.docker.com/_/traefik  "
},
{
	"uri": "https://docs.altinn.studio/tags/traefik/",
	"title": "traefik",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/react/third-party-components/",
	"title": "Tredjeparts komponenter",
	"tags": ["tech", "react"],
	"description": "Tredjeparts komponenter",
	"content": "Det er ønskelig at tredjeparter skal kunne utvikle komponenter som en tjenesteeier skal kunne bruke i sine løsninger.\nHvordan utvikle 3. parts komponenter Når du som en bruker ønsker å utvikle tredjeparts-komponenter så er det anbefalt å bruke rollup.js som kompilerer til cjs (CommonJS).\nEksempel på et komponent som i et fiktivt git repo (basert på Gitea Repo) ligger i src/components/BalloonCounter/index.js :\nimport React from \u0026#39;react\u0026#39;; export class BalloonCounter extends React.Component { constructor(_props, _state) { super(_props, _state); this.state = { count: 0, } } handleIncrement = () =\u0026gt; { let {count} = this.state; count += 1; this.setState({ count, }, () =\u0026gt; { this.handleSubmitData(); }); } handleDecrement = () =\u0026gt; { if(this.state.count !== 0) { let {count} = this.state; count -= 1; this.setState({ count, }, () =\u0026gt; { this.handleSubmitData(); }) } } handleSubmitData = () =\u0026gt; { this.props.onHandleDataUpdate(this.state.count); } render() { return ( \u0026lt;div\u0026gt; Number of ballons you want {this.state.count} \u0026lt;button onClick={this.handleIncrement}\u0026gt; + \u0026lt;/button\u0026gt; \u0026lt;button onClick={this.handleDecrement}\u0026gt; - \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } } Viktig: Komponentens this.props.onHandleDataUpdate(...) er en funksjon som returnerer dataene komponenten har til skjema-appen, som håndterer lagring i datamodell.\nHusk å exportere denne classen i src/components/index.js slik:\nexport * from \u0026#39;./BallonCounter.js\u0026#39;; Når npm run build blir kjørt vil dette lage en mappe med navn dist, med en fil som heter index.js. Denne filen må være med i git push for at altinn.studio skal kunne hente komponentene.\nHvordan bruke 3. parts komponenter I tjenester du ønsker å bruke 3. parts komponenter må det ligge en ThirdPartyComponents.json-fil. Plasseringen av denne er viktig, den må ligge under [Tjeneste navn]/editions/[utgave]/Resources. Innholdet av denne filen er som følger:\n{ \u0026#34;packages\u0026#34;: [{ \u0026#34;packageName\u0026#34;: \u0026#34;[navn på pakken]\u0026#34;, \u0026#34;location\u0026#34;: \u0026#34;[Link til raw format av index.js i git-repoet]\u0026#34; }] } Eksempel på en slik json-fil finner du her.\nHvis alt ble satt opp riktig, vil pakkene med prefiksen til pakkenavnet komme opp i toolbaren på venstre side av Skjema designeren. F.eks. SuperCoolPackage.SuperCoolComponent.\nAlternative løsninger  Webpack med treeshaking  Positivt:  Webpack er allerede brukt i applikasjonen   Negativt:  Slik webpack er konfigurert idag vil det bli bygget en react-applikasjonsfil med alle komponenter, dette vil kreve en separering av react-skjemadesigner og react-runtime.  Runtime bygget må skje med formLayout, som vi henter i oppstarts-fasen av applikasjonen. Slik at alle kompoenter (brukte og ubrukte komponenter) blir med i bygget.   Bygget må skje fra kommando-linje/scripts som kjører i filstrukturen     Next.js SSR (server side rendering)  Positivt:  Gjøre initiell rendering på server, la klienten slippe å hente data som tekstressurser, datamodell, formLayout Dynamisk henting av komponenter som ikke er standard i react-applikasjonen   Negativt:  Introdusere flere tjenester og mye endring av allerede eksisterende react-kode     HTTP API som starter webpack-build  Ved å ha et api som f.eks. Express.js, som håndterer kompilering av applikasjon (bruker allerede kompilerte filer hvis de finnes) og blir kun brukt til å fetche javascript filen som inneholder react. Eller kun bygge da tjenesteeier klikker på \u0026ldquo;Migrer tjeneste\u0026rdquo;. Positivt:  Dynamisk kompilering av kun nødvending react applikasjon og 3. parts komponenter (kan både kompileres da tjenesten migreres, eller hver gang et en bruker starter å fylle ut et skjema (antar at første alternativ er mest gunstig))   Negativt:  Introdusere ny tjeneste (med mindre endringer av eksisterende kode enn \u0026ldquo;Next.js SSR\u0026rdquo;-alternativet)      Ressurser  Webpack tree-shaking  Webpack tree-shaking Webpack module concatenation plugin   Next.js  Offisiell nettside Github Docs   Express  Offisiell nettside Github side    "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/development/handbook/troubleshooting/",
	"title": "Troubleshooting",
	"tags": ["development"],
	"description": "Troubleshooting of Altinn Studio.",
	"content": "Altinn.studio is under heavy development and errors are most likely to come with it. \rIf the error is not covered here, please submit a bug.\n Check out Flight Rules for Altinn.studio. Check out Known Issues.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/typescript/",
	"title": "TypeScript",
	"tags": ["tech", "programming"],
	"description": "TypeScript is a superset of JavaScript that compiles to clean JavaScript output.",
	"content": "Med javascript er følgende en lovlig handling:\nvar foo = false; foo = \u0026#34;bar\u0026#34;; Dette ville gitt en TypeError i TypeScript, og koden ville ikke blitt kompilert til JavaScript.\nTypescript kompileres til JavaScript, så klienten kjører aldri TypeScript koden. Typescript er til for at utvikleren ikke skal lage bugs ved å endre typer på variabler.\nLinks  http://www.typescriptlang.org https://github.com/Microsoft/TypeScript  "
},
{
	"uri": "https://docs.altinn.studio/tags/ui/",
	"title": "ui",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/build-app/ui-designer/",
	"title": "UI Design",
	"tags": [],
	"description": "The UI-designer is the part of Altinn Studio where the developer can create UI for the app.",
	"content": "The possibility to effectly build a user friendly user interface for an app, is an essential feature for Altinn Studio. This is one of the more complex functionalities developed as part of Altinn Studio.\nThe UI-designer has the following functionality:\n Define a detailed layout (responsive design)  Add reusable form components  Configure form components  Connection to data model Connection to texts/translations       Define/configure connections to external API Define/configure rules for validation, calculation and dynamics  Form components The form components are reusable components that are used to build the user interface of the app. Examples include input fields and title components. See a list of all available form components here.\nIt is also possible to define custom components and use this in the app.\nMultiple form layouts In the future Altinn Studio will support creating different UI for seperate datamodels for sub forms or forms in seperate form filling task in a process.\nSee all Github issues for UI-editor.\n"
},
{
	"uri": "https://docs.altinn.studio/tags/ui-components/",
	"title": "ui-components",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/tags/ui-designer/",
	"title": "ui-designer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/repos/structure/validationhandler/",
	"title": "ValidationHandler.cs",
	"tags": ["app-structure", "todo"],
	"description": "Beskrivelse av format for ValidationHandler.",
	"content": "Arbeidet med POC har føreløpig ikke konkludert angående bruk av denne filen. Vil jobbes\rvidere med i MVP.\r\rOverordnet \u0026lsquo;ValidationHandler.cs\u0026rsquo; er en C# klasse hvor tjenesteutvikler kan plassere forretningslogikk som gjør valideringer\nFormat Standard C# kode som kan gjøre bortimot alt.\nUavklart: Hvordan Tjenester 3.0 skal validere/verifisere denne logikken.\nUtvikling Under opprettelse av en tjeneste vil en tom ValidationnHandler opprettes.\nHypotese: Tjenesteutvikler editerer på denne filen via Altinn Studio eller Visual Studio Code\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/solutions/altinn-studio/designer/functional/version-control/",
	"title": "Version Control",
	"tags": ["todo"],
	"description": "In Altinn Studio a developer can perform version control operation on the source code for the app",
	"content": "Clone Push \u0026amp; Commit Pull Handle Merge conflict See all issues on Github for Version Control\n"
},
{
	"uri": "https://docs.altinn.studio/tags/versioning/",
	"title": "versioning",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/toolsandframeworks/vs-code/",
	"title": "Visual Studio Code",
	"tags": ["tech", "git", "programming"],
	"description": "Visual Studio Code is a lightweight source code editor which runs on your desktop.",
	"content": "Visual Studio Code is a lightweight and extendable code editor which runs on your desktop and is available for Windows, macOS and Linux.\nWe use it when developing Altinn 3, and it can be used for editing files from Altinn Studio Repos locally using the built-in Git support.\nAltinn ❤️ vscode.\nLanguages and tech VS Code comes with support for hundreds of languages and technologies, including all the ones that are relevant in Altinn 3:\n C# CSS Docker GitHub Go HTML Java JavaScript JSON Kubernetes Markdown .NET Core Node.js React and JSX Terraform TypeScript  Links  https://code.visualstudio.com https://github.com/Microsoft/vscode Marketplace  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-frontend/v3/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in v3 of app frontend",
	"content": "3.10.1 (2021-08-16) - App frontend includes partyID for stateless apps App frontend includes partyID in calls for fetching stateless data. Issue #6609\n3.10.0 (2021-08-13) - Log out functionality Added functionality for log out from app frontend. Issue #6620\n3.9.9 (2021-08-12) - Dependency patching Patching of external dependencies for w32. Issue #6600.\n3.9.8 (2021-08-05) - Dependency patching Patching of external dependenecies for w31. Issue #6571.\n3.9.7 (2021-08-03) - Bugfix print view Fixed a bug where the print view for Altinn Apps would display an empty container. Issue #6578.\n3.9.6 (2021-08-02) - Dependency patching Patching of external dependenecies for w30. Issue #6571.\n3.9.5 (2021-07-28) - Bugfix for mobile view during app startup Fixed a bug where the app modal would behave inconsistent during app startup on mobile devices. Issue #6558.\n3.9.4 (2021-07-23) - Bugfix validation trigger for groups. Fix a bug where validations would not be triggered when closing a repeating group by clicking Edit button when trigger was present. Issue #6427.\n3.9.3 (2021-07-23) - Dependency patching Patching of external dependencies for w29.\n3.9.2 (2021-07-02) - Dependency patching Patching of external dependencies for w26. Issue #6385.\n3.9.1 (2021-07-01) - Support for redirect to require higher authentication level for stateless app Fix for bug that didn\u0026rsquo;t redirect user to login page with allowed authentication levels if logged in with a too low level. Issue #6506.\n3.8.0 (2021-06-29) - Several updates to validation functionality  Support for adding custom error messages to client side validations (JSON schema). Support for specifying single field validation (server) as FIXED to make sure resolved validation error messages are removed. Fixes bug where single field validation that returned empty (no errors/warnings) did not remove existing validation messages. Issue #5747.  3.7.0 (2021-06-29) - Support for posting data from stateless app Issue #6194.\n3.6.14 (2021-06-22) - Bug fix for duplicated validation messages Fixed a bug that caused validation messages on a FileUpload component to be displayed twice. Issue #6400.\n3.6.13 (2021-06-18) - Bugfix for replaceAll with variables in text Fix for bug introduced in 3.6.9, where only the last variable in texts with multiple variables was replaced. The change in 3.6.9 also caused summary page to fail in some cases. Issue #6455.\n3.6.12 (2021-06-18) - Dependency patching Patching of external dependencies. Issue #6385.\n3.6.11 (2021-06-16) - Bugfix for disappearing validation messages Fixed bug for disappearing validation messages. Single field validation response would overwrite all existing validations, causing earlier triggered validation messages to disappear. Issue #5857.\n3.6.10 (2021-06-15) - Bugfix for navigation buttons with multiple triggers Fixed bug for navigation buttons configured with multiple triggers, where only the first one was actually triggered. Issue #6387.\n3.6.9 (2021-06-14) - Bugfix variables in text Fixed bug where only first occurance of a variable in a given text was replaced. Issue #6091\n3.6.8 (2021-06-11) - New endpoints for statless app New endpoints for stateless app. Issue #6227\n3.6.7 (2021-06-10) - Dependency patching Patching of external dependencies. Issue #6385\n3.6.6 (2021-06-09) - Dependency patching Updated to latest major version of react v17. Issue #5072\n3.6.5 (2021-06-02) Bugfix for stateless app Fixed bug where stateless app with onEntry.show set to new-instance would crash. Issue #6321.\n3.6.4 (2021-06-02) Bugfix for simple receipt Fixed bug where simple receipt did not parse markdown if the app overrides defult texts. Issue #6232.\n3.6.3 (2021-06-02) Bufix for content loader Fixed bug where content loader did not scale for whole view. Issue #4888.\n3.6.2 (2021-06-01) Bugfix for summary view of group with multiple pages Fixed bug that caused app frontend to crash when rendering summary component for group when the group was defined with multiple pages in edit mode. Issue #6233.\n3.6.1 (2021-05-28) Dependency patching Patching of external dependencies. Issue #6324.\n3.6.0 (2021-05-28) Support for hiding back button in apps Issue #6193.\n3.5.0 (2021-05-27) Support for number formatting Added support for formatting numbers for Input-components. Issue #5972.\n3.4.2 (2021-05-26) Improve look of summary for checkboxes component Issue #6329.\n3.4.1 (2021-05-20) Dependency patching Patching of external dependencies. Issue #6221.\n3.4.0 (2021-05-18) Support for stateless apps Issue #6124.\n3.3.5 (2021-05-14) - Dependency patching Patching of external dependencies. Issue #6221.\n3.3.4 (2021-05-11) Bugfix for calculation in groups Issue #6235.\n3.3.3 (2021-05-11) Run data validation on page switch, and fix group component mobile view Issue #6236. Issue #5977.\n3.3.2 (2021-05-06) - Dependency patching Patching of external dependencies. Issue #6011.\n3.3.1 (2021-05-06) Support for markdown in validation messages Issue #5137.\n3.3.0 (2021-05-03) Support for multiple views in repeating group edit mode Issue #5869.\n3.2.2 (2021-04-23) - Dependency patching Patching of external dependencies. Issue #6011.\n3.2.1 (2021-04-23) - Bugfix for group validations Fixed a bug where groups with validation trigger would call the instance validation api. Now calls data validation. Issue #6089.\n3.2.0 (2021-04-21) - Validation on group save Added support for running validations on a group when the user tries to save an entry. Issue #5281.\n3.1.6 (2021-04-19) - Bugfix for checkbox values in summary component Fixed bug where summary would display an empty string for checkboxes with multiple selected values. Issue #5993.\n3.1.5 (2021-04-19) - Bugfix for repeating group state on calculation Fixed bug where repeating group state would not be updated if a backend calculation had altered a repeating group. Issue #6006.\n3.1.4 (2021-04-19) - Bugfix for validations on group delete Fixed bug where validations for a given group index would not be removed on delete. Issue #5960.\n3.1.3 (2021-04-16) - Bugfix for validation Fixed bug where single field validation would validate the whole instance and not data. Issue #5885.\n3.1.2 (2021-04-12) - Dependency patching. Patching of external dependencies. Issue #5957.\n3.1.1 (2021-04-09) - Bugfix for slow calculate Fixed bug where a slow backend calculation can overwrite later entered data. Issue #5754.\n3.1.0 (2021-04-07)- Help text for paragraph and header components App now supports help text for paragraph and header components. Issue #5862.\n3.0.16 (2021-04-06) - Dependency patching Patching of external dependencies. Issue #5877.\n3.0.15 (2021-03-22) - Bugix for group component with checkboxes Fixed bug where group component summary would display an empty value for checkboxes that had several selected values. Issue #5907.\n3.0.14 (2021-03-19) - Dependency patching Patching of external dependencies. Issue #5877.\n3.0.13 (2021-03-18) - Internal typings App frontend internal typings updated to fix failing tests. No issue connected.\n3.0.12 (2021-03-17) - Bugfix for markdown support in summary and group titles Fixed bug where app frontend would not render markdown in summary and group titles. Issue #5781.\n3.0.11 (2021-03-17) - Bugfix for page order calculation Fixed bug where app frontend would trigger call to calculate page order even when no calculation trigger was present. Issue #5863.\n3.0.10 (2021-03-12) - Bugfix for page order calculation Fixed bug where app frontend would trigger call to calculate page order for single page applications. Issue #5859.\n3.0.9 (2021-03-12) - Dependency patching Patching of external dependencies. Issue #5771.\n3.0.8 (2021-03-12) - Support for dynamicly getting page order App frontend now supports dynamicly fetching the page order on next page (\u0026ldquo;sporvalg\u0026rdquo;). See docs for more information. Issue #5640.\n3.0.7 (2021-03-09) - Bugfix for page caching Fixed issue where the app would cache the first page in alphabetical order and not respect the order in Settings.json. Issue #5819.\n3.0.6 (2021-03-08) - Caching of last viewed page Introduced caching of the last viewed form page, so user is returned to this page when refreshing or coming back at a later time. Issue #5278.\n3.0.5 (2021-03-05) - Dependency patching Patching of external dependencies. Issue #5770.\n3.0.4 (2021-03-05) - Bugfix for text styling in titles/descriptions Fix issue where label and description texts would get cut off mid word. Issue #5810.\n3.0.3 (2021-03-02) - Bugfix for metadata with layoutsets Fix issue where app-frontend feched wrong metadata when using layoutsets. Issue #5624.\n3.0.2 (2021-02-26) - Dependency patching Patching of external dependencies. Issue #5676.\n3.0.1 (2021-02-25) - Horizontally aligned components \u0026amp; Bugfix for loading options App-frontend now supports horizontally aligned components. See docs for more information. Issue #1515.\nFix issue that only loaded options related to form layout in first data task - for subsequent data tasks options were not loaded. Issue #5619.\n3.0.0 (2021-02-23) - New font for App Frontend This version changes the font for the app frontend from Roboto to Altinn-DIN. For the apps to show fonts as expected, some changes need to be made. See breaking changes for the details.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-nuget/older/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in v1.0.62-alpha -- 2.0.1",
	"content": "2.0.0 (2020-11-18) - Autodelete on process end For some apps, the fact that there\u0026rsquo;s traces of it in the user archive (and the data is stored) is a problem (e.g. for security reasons). The Altinn.App.* packages has been updated to support autodelete when process ends. This is introduced with version 2.0.0-alpha of the packages.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.3.1 (2020-11-06) New layout structure in Designer In order to support multiple pages in an app we have done some restructuring of the app-template. When you are doing changes in Altinn Designer for your app the updated FormLayout.json will be put under the new structure. For apps that have nuget references to Altinn.App.Api, Altinn.App.Common, and Altinn.App.PlatformServices with versions below version 1.2.0 this will make the app unable to find the FormLayout.json on the network call against the app.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.1.11-alpha (2020-10-02) - Registration of events The Altinn.App.* packages has been updated to work with the new Events component in Altinn. This is introduced with version 1.1.11-alpha of the packages.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.1.0-alpha (2020-10-01) - Deleting instances from endpoint in app #4871 was fixed with in release of 1.1.10-alpha of the app nugets. This change only affects users and app owners that try to delete an instance.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.1.8-alpha (2020-09-23) - Update path of Data Protection Keys for Apps #4483 changed the way we use data protection keys in order to improve the support for running locally. These keys are used in XSRF-protection. When you are running apps locally, we are using the default behaviour (directory under current user) for .Net Core. The path is passed with an environment variable when running in an apps cluster. This change requires the deployment.yaml file to be updated with the correct variable.\nThe change affects all application created in Altinn Studio before 30.09.2020 using Altinn.App.PlatformServices 1.1.8-alpha and above Updating to this version will require changes in multiple files. See the entry in breaking changes\n1.1.2-alpha (2020-07-15) - Namespace renamed A namespace was renamed in Altinn.App.PlatformServices Version=\u0026ldquo;1.1.2-alpha causing the build of the application to fail if references to this namespace isn\u0026rsquo;t changed. This affects all applications created before June 2020 that reference nuget versions \u0026gt;= 1.1.2-alpha.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.1.0-alpha (2020-07-01) - Multiple changes Property type changed for UserProfile.ProfileSettingPreference Introduced with issue: #4466 and release v2020.28.\nThe change affects all applications in TT02 and PR with nuget version 1.0.98 and lower.\nNew endpoint for application text resources Introduced with issue: #4451 and nuget 1.1.0.-alpha.\nThe change affects all application created in Altinn Studio before 8.07.2020 using nuget versions 1.1.0-alpha\nUpdating to this version will require changes in multiple files. See the entries in breaking changes here and here\n1.0.86-alpha (2020-05-29) - Platform authorization for Register and Profile Introduced with issue: #4162 and Release: v2020.23.\nThe change affects all application created in Altinn Studio before 03.06.2020.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.0.82-alpha (2020-05-15) - Updated client-side validation Introduced with issue: #3944, and applies to existing apps that upgrade to the new major version of app frontend (v2).\nThe client-side validation of the app frontend has been replaced with a JSON-schema validation in order to provide a more complete client-side validation. As of v2 of app frontend, client-side validation has support for type-checking basic types, including enums. When upgrading the frontend version to v2, the app must use nuget versions 1.0.82-alpha or newer.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n1.0.80-alpha Removed GET operations with body Introduced with issue: #3738.\nThe Register API had a few GET operations that took an input parameter through the body of an http request. Requests against these operations would work in AT environments, but would be broken by API Management in production like environments. The operations in question has now been removed and replaced with operations that require POST requests.\nErrors The methods that have been removed were used by an app when an instantiation were done by the Application owner. More specifically if the instanceOwnerPartyId were unknown. The instantiation request would then have the Person number or organization number instead, and the Register operation would be used to identify the correct party id.\nPOST https://{org}.apps.tt02.altinn.no/{app-id}/instances/ { \u0026#34;appId\u0026#34; : \u0026#34;org/app\u0026#34;, \u0026#34;instanceOwner\u0026#34;: { \u0026#34;personNumber\u0026#34;: \u0026#34;12247918309\u0026#34;, \u0026#34;organisationNumber\u0026#34;: null, \u0026#34;instanceOwnerPartyId\u0026#34;: null }, ... } How to fix Any issues related to this change can be fixed by upgrading to the latest version of Altinn.App.PlatformServices. This means the App must be updated and a the new version deployed to all environments. Existing instances are not affected.\n1.0.78-alpha Send-in / Validation fails with \u0026lsquo;Ukjent feil\u0026rsquo; Introduced with issue: #3927.\nThere was a vulnerability in the solution allowing to update a whole instance object using an endpoint in app backend or storage. This has been solved by refactoring app backend and removing the endpoints.\nAny issues related to validation failing with \u0026lsquo;Ukjent feil\u0026rsquo; for apps with nuget packages older than 1.0.78-alpha can be solved by upgrading to 1.0.78-alpha or newer.\n1.0.62-alpha (2020-03-13) Data and task validation Introduced with issue: #3820.\nThe base class that every application inherits has been altered to allow for both data and task validation.\nUpdating to this version will require changes in multiple files. See the entry in breaking changes\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-nuget/v3/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in version 3",
	"content": "3.5.1 (2021-03-11) - Possible to get ruleconfiguration for apps with layout sets There was a bug resulting in av 404 response whenever it is attepmpted to retrieve the ruleconfiguration for an application while specifying the layout set id in the request. This has now been fixed.\n3.5.0 (2021-03-10) - Added funcionality for pdf generation for application owner Up until now a pdf copy has not been generated for the tasks that are completed by the application owner. This has now been implemented and pdf should be generated after a task regardless if it is an end user of the app owner that completes the task.\n3.4.0 (2021-03-10) - Endpoint and functionality for get page order made available All apps now expose an endpoint for getting the current page order based on the current state of an instance. Default behavior is to return the page order as defined in Settings.json to override, add the function below in Logic/App.cs and include your own logic.\npublic override async Task\u0026lt;LayoutSettings\u0026gt; FormatPdf(LayoutSettings layoutSettings, object data) { return await _pdfHandler.FormatPdf(layoutSettings, data); } 3.3.0 (2021-03-04) - Retrieving certificate from Key Vault now uses name The ISecret service now requires certificate name as input for retrieving a certificate from key vault. Previously this has been the certificate id, but this identificator contains more information that an app developer might have available, so the service has been simplified.\n3.2.3 (2021-02-17) - Fixed duplicate key exception on options When using the same option key in an option result a duplicate key exception was thrown that crashed the app. This is now fixed, and keys that already exist in the option result will not be added.\n3.2.1 (2021-02-10) - Correctly set unread status when instantiated by end user The instance now appears as read in the messagebox if it is instantiated by an end user through api, regardless if they have opened the instance in GUI or downloaded the form data they just posted.\n3.2.0 (2021-02-02) - Options displayed with label in PDF Before this release the selected option was shown with it\u0026rsquo;s value rather than the label that the end user was presented with during form filling. This has now been fixed so the label is diplayed in the pdf.\n3.1.6 (2021-01-29) 3.1.5 (2021-01-27) 3.1.4 (2021-01-26) 3.0.4 (2021-01-26) - Swagger support for Apps We have added Swashbuckle to the App. It is a library that brings Swagger support and this is especially handy when developing an HTTP based API. It creates a form of interactive documentation based on the OpenAPI Specification. To describe the Api\u0026rsquo;s better, we use the xml documentation file.\nThis documentation will be generated automatically when the application is build. Existing api\u0026rsquo;s and new api\u0026rsquo;s created in the app will be documented.\nThe documentation will appear at https://[org].apps.altinn.no/[org]/[app]/swagger/index.html in the app.\nTo enable this, there\u0026rsquo;s some changes.\n  Updated package dependencies, generate xml documentation file and copy xml documentation for Altinn.App.Api Navigate to you application repository and find App.csproj in the App folder.\nUpdate nuget dependencies in App.csproj to version 3.0.4, add new property for Altinn.App.Api.\n\u0026lt;PackageReference Include=\u0026#34;Altinn.App.Api\u0026#34; Version=\u0026#34;3.0.4\u0026#34;\u0026gt; \u0026lt;CopyToOutputDirectory\u0026gt;lib\\$(TargetFramework)\\*.xml \u0026lt;/CopyToOutputDirectory\u0026gt; \u0026lt;/PackageReference\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.Common\u0026#34; Version=\u0026#34;3.0.4\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;Altinn.App.PlatformServices\u0026#34; Version=\u0026#34;3.0.4\u0026#34; /\u0026gt; This is new in App.csproj\n\u0026lt;PackageReference Include=\u0026#34;Swashbuckle.AspNetCore\u0026#34; Version=\u0026#34;5.6.3\u0026#34; /\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;GenerateDocumentationFile\u0026gt;true\u0026lt;/GenerateDocumentationFile\u0026gt; \u0026lt;NoWarn\u0026gt;$(NoWarn);1591\u0026lt;/NoWarn\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;Target Name=\u0026#34;CopyXMLFromPackagesForBuild\u0026#34; AfterTargets=\u0026#34;Build\u0026#34;\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;PackageReferenceFiles Condition=\u0026#34;%(PackageReference.CopyToOutputDirectory) != \u0026#39;\u0026#39;\u0026#34; Include=\u0026#34;$(NugetPackageRoot)$([MSBuild]::Escape(\u0026#39;%(PackageReference.Identity)\u0026#39;).ToLower())/%(PackageReference.Version)/%(PackageReference.CopyToOutputDirectory)\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;Copy SourceFiles=\u0026#34;@(PackageReferenceFiles)\u0026#34; DestinationFolder=\u0026#34;$(OutDir)\u0026#34; /\u0026gt; \u0026lt;/Target\u0026gt;   Changes to the Startup.cs file. If you don\u0026rsquo;t have any custom code in this, copy file from here.\nAdd this to the end of the ConfigureServices method\n// Add Swagger support (Swashbuckle)  services.AddSwaggerGen(c =\u0026gt; { c.SwaggerDoc(\u0026#34;v1\u0026#34;, new OpenApiInfo { Title = \u0026#34;Altinn App Api\u0026#34;, Version = \u0026#34;v1\u0026#34; }); IncludeXmlComments(c); }); Add this before app.UseRouting() in the Configure method\nstring applicationId = GetApplicationId(); if (!string.IsNullOrEmpty(applicationId)) { app.UseSwagger(o =\u0026gt; o.RouteTemplate = applicationId + \u0026#34;/swagger/{documentName}/swagger.json\u0026#34;); app.UseSwaggerUI(c =\u0026gt; { c.SwaggerEndpoint($\u0026#34;/{applicationId}/swagger/v1/swagger.json\u0026#34;, \u0026#34;Altinn App API\u0026#34;); c.RoutePrefix = applicationId + \u0026#34;/swagger\u0026#34;; }); } Add two methods\nprivate void IncludeXmlComments(SwaggerGenOptions options) { try { string fileName = $\u0026#34;{Assembly.GetExecutingAssembly().GetName().Name}.xml\u0026#34;; string fullFilePath = Path.Combine(AppContext.BaseDirectory, fileName); options.IncludeXmlComments(fullFilePath); string fullFilePathApi = Path.Combine(AppContext.BaseDirectory, \u0026#34;Altinn.App.Api.xml\u0026#34;); options.IncludeXmlComments(fullFilePathApi); } catch { // Swagger will not have the xml-documentation to describe the api\u0026#39;s.  } } private string GetApplicationId() { string appMetaDataString = File.ReadAllText(\u0026#34;config/applicationmetadata.json\u0026#34;); JObject appMetadataJObject = JObject.Parse(appMetaDataString); return appMetadataJObject.SelectToken(\u0026#34;id\u0026#34;).Value\u0026lt;string\u0026gt;(); }   3.0.1 (2021-01-19) 3.0.0 (2021-01-05) - Support for dynamics in PDF We have added a new PDF handler to make it possible to hide pages and components in PDF. See breaking changes for how to update you app to be compatible with this version.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/app-nuget/v4/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in version 4",
	"content": "4.11.0 (2021-08-03) - Support for disabling reportee selection in Altinn Portal Apps now support adding query parameter DontChooseReportee=true to disable the reportee selection when an unauthorized user accesses an app. The result being that the user will represent themselves and be routed directly to the application after login.\nThis release solves issue #6573.\n4.10.2 (2021-07-15) - Text resources are loaded locally  The app will now load texts from the locally stored text resource files (config/texts/*) instead of retrieving them from Storage. Texts are still uploaded to Storage during deploy. The change is to remove unnecessary calls to Storage and to avoid an issue with caching that prevented new texts from being used immediately. #6466, #6415 Fixed a bug where a filename with space in it could lead to a crash. #6421 New apps created after the v2021.29 release will provide security headers like X-Frame-Options, X-XSS-Protection, X-Content-Type-Options, and Referer-Policy. To activate this in existing apps follow these steps:  Open the App/Startup.cs file. At the top of the file add the namespace reference: using Altinn.App.Api.Middleware; Find the Configure method and add the statement: app.UseDefaultSecurityHeaders(); Add it right before existing app.Use* statements. E.g. before app.UseRouting();    4.9.2 (2021-07-08) - Fixed messages from multipart request validation Validation messages from multipart request validation was misleading. This release solved issue #6418.\n4.9.1 (2021-07-02) - Bugfix for errors in multipart validation Fixed a bug that caused validation messages to show C# type of DataType rather than DataTypeId. Issue #6418\n4.9.0 (2021-06-29) - Support for marking a single field validation error as fixed It is now possible to mark a previous validation error as fixed by using the prefix *FIXED* in front of the original error. documentation on how to implement the functionality (in Norwegian )\n4.8.0 (2021-06-22) - Application version number available in AppSettings During app deployment an environment variable with the app version number/name is added to the app runtime environment. This version information can now be retrieved in any controller or service through the AppSettings configuration object. Just add a dependency on AppSettings into the class and access the new property called AppVersion.\n4.7.1 (2021-06-15) - Adjustments to response headers Some of the controllers exposed by the applications have been modified to not allow caching and/or storage of their responces in the client.\n4.7.0 (2021-06-08) Altinn Apps now authorize access for statless apps.\nAltinn Apps now have two new application events where application developers can add data processing logic. calculation, population, and more.\nIn this update the RunCalculate application event is made obsolete/deprecated. It\u0026rsquo;s recommended that Apps are updated to use RunProcessDataWrite and RunProcessDataRead instead. Calls to the RunCalculate method will be removed in a future update.\nThe process to update is\n Add the DataProcessing folder and DataProcessingHandler class from our app template to your app. Update App.cs. Add a class field for DataProcessingHandler and copy new methods ( RunProcessDataRead and RunProcessDataWrite) from App.cs Move logic from calculation handler to DataProcessinghandler Remove RunCalculation method from App.cs Remove CalculationHandler when code has been moved to DataProcessingHandler. Compile and test your app.  See details about data processing here\n4.6.2 (2021-06-01) - Duplicate keys in options causing crash This release has a fix for a crash related to PDF rendering when an app have options with duplicate entries. #5887\n4.6.1. (2021-05-21) Changed alternative subject Altinn Apps now uses org instead of organization as subject when publishing events.\n4.6.0 (2021-05-11) - Apps now support data fields Altinn Apps now support data fields. Data fields allows for adding data values, from either form fields or a custom source, to the instance object. Form data can be added by configuring data fields in applicationmetadata.json while custom sources require coding. Documentation on how to add data values to an instance can be found here.\n4.5.2 (2021-05-04) - Endpoints for stateless data elements exposed through app. Bug stopping local testing fixed Altinn Apps now expose endpoints for creating, prefilling and running calculations on stateless data elements. A stateless data element entails there is no link to an instance or instance owner, and the data is simply presented to the end user, but not persisted in any database.\nIn addition, a bug breaking apps running with localtest intoduced in 4.4.1 has been fixed.\nInformation on the new endpoints can be found in the swagger exposed by each application https://{org}.apps.altinn.no/{org}{app}/swagger\n4.4.1 (2021-04-30) - Ask user to upgrade security level An app would show the \u0026ldquo;unknown error\u0026rdquo; message if a user were trying to access an instance with a security level that was too low for the instance. This has been fixed. The user is now sent to authentication with the option to pick an authentication method that provides a higher security level. The fix targets the GET instance endpoint specifically.\n4.4.0(2021-04-27) - Performance fix Improved performance.\n4.3.0 (2021-04-28) - Apps now support presentation fields Altinn Apps now support presentation fields. By specifying presentation fields in applicationmetadata.json, speficied data values from the form data will be stored on the instance in order to show them along with the app title in the Altinn messagebox. Further documentation on how to configure presentation fields is found here.\nThis change is related to this epic.\n4.2.0 (2021-04-19) - Possible to integrate an app with eFormidling Altinn Apps now support integration with eFormidling. Documentation on how to set up an application to use eFormidling will be published once an integration point for eFormidling is set up in Altinn Platform.\n4.1.0 (2021-04-07) - Add new property with updated data to response for PUT to DataController During PUT of data to DataController ({org}/{app}/instances/{instanceOwnerPartyId:int}/{instanceGuid:guid}/data), any calculations that are defined by the apps are run, and data is potentially updated before being saved. Previously, the response returned only the metadata for the updated data element, and a GET to fetch the updated data was necessary. In this version, a dictionary of all the fields that have updated data from calculations is returned as a new parameter in the API response (in addition to the data element metadata), so that clients do not need to perform the additional GET request in order to get the updated data.\nThis change is related to this issue.\n4.0.3 (2021-03-23) - Fixed a bug reading filename from Content-Disposition  The specification for Content-Disposition specify that filename should be in quotes. This was not supported by the app backend API, causing requests following the specification to fail. This has been fixed. Added support for filename* (FilenameStar). If Content-Disposition contain both filename and filename*, the value defined by filename* will be used.  4.0.1 (2021-03-15) - Upgraded application to .Net 5 and grouped references of Altinn App and Altinn Platform services in Startup.cs Altinn.App.* librarires target .Net 5 now, which requires that the application does the same. In addition we have created two methods for referencing all app and platform sevices in Startup.cs\nSee breaking changes for how to update you app to be compatible with this version.\n"
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/storage-interfaces/v2/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in version 2",
	"content": "2.5.10 Dependency on .NETStandard2.0  The package was changed to depend on .NetStandard2.0 in place of .NetStandard2.1. This should ensure that applications based on .NET Framework 4.7 can use the package.  2.5.9 Expanded the eFormidlingContract with SecurityLevel  eFormidlingContract model was given a new property holding security level information. #5740  2.5.8 Extended eFormidlingContract with additional parameters  eFormidlingContract model was given three new properties to support eFormidling in apps. #5740  2.5.7 Extended eFormidlingContract with a new property: sendAfterTaskId  eFormidlingContract model was given a new property to identify which task should trigger an eFormidling shipment. #5740  2.5.6 Adjustments around PresentationField and texts  Fixes to how PresentationFields were annotated. New class PresentationTexts to hold a list of texts generated by presentation field rules on an instance.  2.5.5 Added PresentationFields to Application  New class PresentationField to represent a data extraction rule. Instance model was given a new property called presentationFields. #5638  2.5.4 Fix the OpenAPI specification of ReadStatus  ReadStatus was changed to be defined as a string. #5637  2.5.3 eFormidling support  Added a new model to support integration with eFormidling.  2.5.2 Dependency on .NETStandard2.1  The package was changed to depend on .NetStandard2.1 in place of .NETCoreApp3.1. The dependency to the Microsoft.AspNetCore.Mvc.NewtonsoftJson package was removed and there is now instead a direct dependency to the Newtonsoft.Json package.  2.5.1 DataElement IsRead is true by default  The value of IsRead is changed to have default value true.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/changelog/storage-interfaces/v3/whats-new/",
	"title": "What&#39;s new",
	"tags": [],
	"description": "Overview of changes introduced in version 3",
	"content": "3.2.0 New model OnEntryConfig  A new model class was added to support defining what should happen on entry on the application.   3.0.1 New model DataValues  A new model class was added to support updating data values on the instance.  3.0.0 Refactoring and model application/instance model changes  A small breaking change was introduced in version 3. The PresentationField class was renamed to DataField to be a bit more generic as it\u0026rsquo;s being used by the DataFields property on the Application model as well as the PresentationFields. All properties and the usage off the class remain the same. A new property was added to support data field definitions on the application model and a corresponding data values property on the instance model to hold the actual values.  "
},
{
	"uri": "https://docs.altinn.studio/teknologi/altinnstudio/architecture/components/application/solution/altinn-platform/authorization/xacml/",
	"title": "XACML - Altinn Studio",
	"tags": ["architecture", "security", "XACML"],
	"description": "XACML stands for &#34;eXtensible Access Control Markup Language&#34;.",
	"content": "The standard defines a declarative fine-grained, attribute-based access control policy language, an architecture, and a processing model describing how to evaluate access requests according to the rules defined in policies.\nThe Altinn Studio and Altinn Studio Apps solution uses the XACML standard for the following\n XACML Reference Architecture: Used as input for defining the Altinn Studio Apps authorization architecture XACML Policy: Used to define the authorization rules for apps XACML Request: Format used for PEP to call PDP XACML Response: Format used for response from PDP to PEP.  XACML Policy The Policy Document describes the rules for a App. This policy is imported to the Policy Retrieval Point.\nSee example policy from application in production\nXACML Request The XACML Request will follow XACML 3.0 JSON profile. See documentation.\nSingle request The below example show how a request try to verify that a user is allowed to read a given instance.\n{ \u0026#34;Request\u0026#34;: {  \u0026#34;ReturnPolicyIdList\u0026#34;: true, \u0026#34;AccessSubject\u0026#34;: [ { \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:user-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1\u0026#34; } ] } ], \u0026#34;Action\u0026#34;: [  { \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;read\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34; } ] } ], \u0026#34;Resource\u0026#34;: [  { \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:instance-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026#34; } ] } ] } } Request for Multiple Decisions Policy Decision Point supports Request for Multiple Decisions. The below request show how you can request decision for both read an write for the same resource.\n{ \u0026#34;Request\u0026#34;: { \u0026#34;ReturnPolicyIdList\u0026#34;: true, \u0026#34;AccessSubject\u0026#34;: [ { \u0026#34;Id\u0026#34;: \u0026#34;s1\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:user-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1\u0026#34; } ] } ], \u0026#34;Action\u0026#34;: [ { \u0026#34;Id\u0026#34;: \u0026#34;a1\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;read\u0026#34;,  \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;IncludeInResult\u0026#34;: true } ] }, { \u0026#34;Id\u0026#34;: \u0026#34;a2\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;write\u0026#34;,  \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;IncludeInResult\u0026#34;: true } ] } ], \u0026#34;Resource\u0026#34;: [ { \u0026#34;Id\u0026#34;: \u0026#34;r1\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:instance-id\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026#34;, \u0026#34;IncludeInResult\u0026#34;: true }, { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:org\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;skd\u0026#34; }, { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:app\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;taxreport\u0026#34; }, { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:partyid\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000\u0026#34; }, { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:task\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;formfilling\u0026#34; } ] } ], \u0026#34;MultiRequests\u0026#34;: {  \u0026#34;RequestReference\u0026#34;: [ { \u0026#34;ReferenceId\u0026#34;: [ \u0026#34;s1\u0026#34;, \u0026#34;a1\u0026#34;, \u0026#34;r1\u0026#34; ] }, { \u0026#34;ReferenceId\u0026#34;: [ \u0026#34;s1\u0026#34;, \u0026#34;a2\u0026#34;, \u0026#34;r1\u0026#34; ] } ] } } } XACML Response The XACML Response will follow XACML 3.0 JSON profile. See documentation.\nResponse for single decision request { \u0026#34;Response\u0026#34;: [ { \u0026#34;Decision\u0026#34;: \u0026#34;Permit\u0026#34;,  \u0026#34;Status\u0026#34;: { \u0026#34;StatusCode\u0026#34;: { \u0026#34;Value\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:status:ok\u0026#34; } }, \u0026#34;Obligations\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;urn:altinn:obligation:authenticationLevel1\u0026#34;, \u0026#34;attributeAssignment\u0026#34;: [ { \u0026#34;attributeId\u0026#34;: \u0026#34;urn:altinn:obligation1-assignment1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;urn:altinn:minimum-authenticationlevel\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;, \u0026#34;issuer\u0026#34;: null } ] } ], \u0026#34;Category\u0026#34;: [ { \u0026#34;CategoryId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:partyid\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000\u0026#34; } ] } ] } ] } Response for multipe decision { \u0026#34;Response\u0026#34;: [ { \u0026#34;Decision\u0026#34;: \u0026#34;Permit\u0026#34;,  \u0026#34;Status\u0026#34;: { \u0026#34;StatusCode\u0026#34;: { \u0026#34;Value\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:status:ok\u0026#34; } }, \u0026#34;Obligations\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;urn:altinn:obligation:authenticationLevel1\u0026#34;, \u0026#34;attributeAssignment\u0026#34;: [ { \u0026#34;attributeId\u0026#34;: \u0026#34;urn:altinn:obligation1-assignment1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;urn:altinn:minimum-authenticationlevel\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;, \u0026#34;issuer\u0026#34;: null } ] } ], \u0026#34;Category\u0026#34;: [ { \u0026#34;CategoryId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;read\u0026#34; } ] }, { \u0026#34;CategoryId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:instance-id\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026#34; } ] } ] }, { \u0026#34;Decision\u0026#34;: \u0026#34;Permit\u0026#34;,  \u0026#34;Status\u0026#34;: { \u0026#34;StatusCode\u0026#34;: { \u0026#34;Value\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:status:ok\u0026#34; } }, \u0026#34;Obligations\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;urn:altinn:obligation:authenticationLevel1\u0026#34;, \u0026#34;attributeAssignment\u0026#34;: [ { \u0026#34;attributeId\u0026#34;: \u0026#34;urn:altinn:obligation1-assignment1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;urn:altinn:minimum-authenticationlevel\u0026#34;, \u0026#34;dataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;, \u0026#34;issuer\u0026#34;: null } ] } ], \u0026#34;Category\u0026#34;: [ { \u0026#34;CategoryId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:action\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:1.0:action:action-id\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;write\u0026#34; } ] }, { \u0026#34;CategoryId\u0026#34;: \u0026#34;urn:oasis:names:tc:xacml:3.0:attribute-category:resource\u0026#34;, \u0026#34;Attribute\u0026#34;: [ { \u0026#34;AttributeId\u0026#34;: \u0026#34;urn:altinn:instance-id\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;1000/26133fb5-a9f2-45d4-90b1-f6d93ad40713\u0026#34; } ] } ] } ] } "
},
{
	"uri": "https://docs.altinn.studio/tags/xacml/",
	"title": "xacml",
	"tags": [],
	"description": "",
	"content": ""
}]